
/*******************************************************************************
    Verilog netlist generated by IPGEN Lattice Propel (64-bit)
    2022.1.2211240753
    Soft IP Version: 1.2.0
    2023 11 28 18:23:18
*******************************************************************************/
/*******************************************************************************
    Wrapper Module generated per user settings.
*******************************************************************************/
module axi4_interconnect (axi_aclk_i, 
        axi_aresetn_i, 
        axi_S00_awvalid_i, 
        axi_S00_awid_i, 
        axi_S00_awaddr_i, 
        axi_S00_awlen_i, 
        axi_S00_awsize_i, 
        axi_S00_awburst_i, 
        axi_S00_awlock_i, 
        axi_S00_awcache_i, 
        axi_S00_awprot_i, 
        axi_S00_awqos_i, 
        axi_S00_awregion_i, 
        axi_S00_awuser_i, 
        axi_S00_awready_o, 
        axi_S00_wvalid_i, 
        axi_S00_wdata_i, 
        axi_S00_wstrb_i, 
        axi_S00_wlast_i, 
        axi_S00_wuser_i, 
        axi_S00_wready_o, 
        axi_S00_bready_i, 
        axi_S00_bvalid_o, 
        axi_S00_bid_o, 
        axi_S00_bresp_o, 
        axi_S00_buser_o, 
        axi_S00_arvalid_i, 
        axi_S00_arid_i, 
        axi_S00_araddr_i, 
        axi_S00_arlen_i, 
        axi_S00_arsize_i, 
        axi_S00_arburst_i, 
        axi_S00_arlock_i, 
        axi_S00_arcache_i, 
        axi_S00_arprot_i, 
        axi_S00_arqos_i, 
        axi_S00_arregion_i, 
        axi_S00_aruser_i, 
        axi_S00_arready_o, 
        axi_S00_rready_i, 
        axi_S00_rvalid_o, 
        axi_S00_rid_o, 
        axi_S00_rdata_o, 
        axi_S00_rresp_o, 
        axi_S00_rlast_o, 
        axi_S00_ruser_o, 
        axi_M01_awvalid_o, 
        axi_M01_awid_o, 
        axi_M01_awaddr_o, 
        axi_M01_awlen_o, 
        axi_M01_awsize_o, 
        axi_M01_awburst_o, 
        axi_M01_awlock_o, 
        axi_M01_awcache_o, 
        axi_M01_awprot_o, 
        axi_M01_awqos_o, 
        axi_M01_awregion_o, 
        axi_M01_awuser_o, 
        axi_M01_awready_i, 
        axi_M01_wvalid_o, 
        axi_M01_wdata_o, 
        axi_M01_wstrb_o, 
        axi_M01_wlast_o, 
        axi_M01_wuser_o, 
        axi_M01_wready_i, 
        axi_M01_bvalid_i, 
        axi_M01_bid_i, 
        axi_M01_bresp_i, 
        axi_M01_buser_i, 
        axi_M01_bready_o, 
        axi_M01_arvalid_o, 
        axi_M01_arid_o, 
        axi_M01_araddr_o, 
        axi_M01_arlen_o, 
        axi_M01_arsize_o, 
        axi_M01_arburst_o, 
        axi_M01_arlock_o, 
        axi_M01_arcache_o, 
        axi_M01_arprot_o, 
        axi_M01_arqos_o, 
        axi_M01_arregion_o, 
        axi_M01_aruser_o, 
        axi_M01_arready_i, 
        axi_M01_rvalid_i, 
        axi_M01_rid_i, 
        axi_M01_rdata_i, 
        axi_M01_rresp_i, 
        axi_M01_rlast_i, 
        axi_M01_ruser_i, 
        axi_M01_rready_o, 
        axi_M00_awvalid_o, 
        axi_M00_awid_o, 
        axi_M00_awaddr_o, 
        axi_M00_awlen_o, 
        axi_M00_awsize_o, 
        axi_M00_awburst_o, 
        axi_M00_awlock_o, 
        axi_M00_awcache_o, 
        axi_M00_awprot_o, 
        axi_M00_awqos_o, 
        axi_M00_awregion_o, 
        axi_M00_awuser_o, 
        axi_M00_awready_i, 
        axi_M00_wvalid_o, 
        axi_M00_wdata_o, 
        axi_M00_wstrb_o, 
        axi_M00_wlast_o, 
        axi_M00_wuser_o, 
        axi_M00_wready_i, 
        axi_M00_bvalid_i, 
        axi_M00_bid_i, 
        axi_M00_bresp_i, 
        axi_M00_buser_i, 
        axi_M00_bready_o, 
        axi_M00_arvalid_o, 
        axi_M00_arid_o, 
        axi_M00_araddr_o, 
        axi_M00_arlen_o, 
        axi_M00_arsize_o, 
        axi_M00_arburst_o, 
        axi_M00_arlock_o, 
        axi_M00_arcache_o, 
        axi_M00_arprot_o, 
        axi_M00_arqos_o, 
        axi_M00_arregion_o, 
        axi_M00_aruser_o, 
        axi_M00_arready_i, 
        axi_M00_rvalid_i, 
        axi_M00_rid_i, 
        axi_M00_rdata_i, 
        axi_M00_rresp_i, 
        axi_M00_rlast_i, 
        axi_M00_ruser_i, 
        axi_M00_rready_o) ;
    input axi_aclk_i ; 
    input axi_aresetn_i ; 
    input [0:0] axi_S00_awvalid_i ; 
    input [5:0] axi_S00_awid_i ; 
    input [31:0] axi_S00_awaddr_i ; 
    input [7:0] axi_S00_awlen_i ; 
    input [2:0] axi_S00_awsize_i ; 
    input [1:0] axi_S00_awburst_i ; 
    input [0:0] axi_S00_awlock_i ; 
    input [3:0] axi_S00_awcache_i ; 
    input [2:0] axi_S00_awprot_i ; 
    input [3:0] axi_S00_awqos_i ; 
    input [3:0] axi_S00_awregion_i ; 
    input [3:0] axi_S00_awuser_i ; 
    output [0:0] axi_S00_awready_o ; 
    input [0:0] axi_S00_wvalid_i ; 
    input [63:0] axi_S00_wdata_i ; 
    input [7:0] axi_S00_wstrb_i ; 
    input [0:0] axi_S00_wlast_i ; 
    input [3:0] axi_S00_wuser_i ; 
    output [0:0] axi_S00_wready_o ; 
    input [0:0] axi_S00_bready_i ; 
    output [0:0] axi_S00_bvalid_o ; 
    output [5:0] axi_S00_bid_o ; 
    output [1:0] axi_S00_bresp_o ; 
    output [3:0] axi_S00_buser_o ; 
    input [0:0] axi_S00_arvalid_i ; 
    input [5:0] axi_S00_arid_i ; 
    input [31:0] axi_S00_araddr_i ; 
    input [7:0] axi_S00_arlen_i ; 
    input [2:0] axi_S00_arsize_i ; 
    input [1:0] axi_S00_arburst_i ; 
    input [0:0] axi_S00_arlock_i ; 
    input [3:0] axi_S00_arcache_i ; 
    input [2:0] axi_S00_arprot_i ; 
    input [3:0] axi_S00_arqos_i ; 
    input [3:0] axi_S00_arregion_i ; 
    input [3:0] axi_S00_aruser_i ; 
    output [0:0] axi_S00_arready_o ; 
    input [0:0] axi_S00_rready_i ; 
    output [0:0] axi_S00_rvalid_o ; 
    output [5:0] axi_S00_rid_o ; 
    output [63:0] axi_S00_rdata_o ; 
    output [1:0] axi_S00_rresp_o ; 
    output [0:0] axi_S00_rlast_o ; 
    output [3:0] axi_S00_ruser_o ; 
    output [0:0] axi_M01_awvalid_o ; 
    output [10:0] axi_M01_awid_o ; 
    output [31:0] axi_M01_awaddr_o ; 
    output [7:0] axi_M01_awlen_o ; 
    output [2:0] axi_M01_awsize_o ; 
    output [1:0] axi_M01_awburst_o ; 
    output [0:0] axi_M01_awlock_o ; 
    output [3:0] axi_M01_awcache_o ; 
    output [2:0] axi_M01_awprot_o ; 
    output [3:0] axi_M01_awqos_o ; 
    output [3:0] axi_M01_awregion_o ; 
    output [3:0] axi_M01_awuser_o ; 
    input [0:0] axi_M01_awready_i ; 
    output [0:0] axi_M01_wvalid_o ; 
    output [31:0] axi_M01_wdata_o ; 
    output [3:0] axi_M01_wstrb_o ; 
    output [0:0] axi_M01_wlast_o ; 
    output [3:0] axi_M01_wuser_o ; 
    input [0:0] axi_M01_wready_i ; 
    input [0:0] axi_M01_bvalid_i ; 
    input [10:0] axi_M01_bid_i ; 
    input [1:0] axi_M01_bresp_i ; 
    input [3:0] axi_M01_buser_i ; 
    output [0:0] axi_M01_bready_o ; 
    output [0:0] axi_M01_arvalid_o ; 
    output [10:0] axi_M01_arid_o ; 
    output [31:0] axi_M01_araddr_o ; 
    output [7:0] axi_M01_arlen_o ; 
    output [2:0] axi_M01_arsize_o ; 
    output [1:0] axi_M01_arburst_o ; 
    output [0:0] axi_M01_arlock_o ; 
    output [3:0] axi_M01_arcache_o ; 
    output [2:0] axi_M01_arprot_o ; 
    output [3:0] axi_M01_arqos_o ; 
    output [3:0] axi_M01_arregion_o ; 
    output [3:0] axi_M01_aruser_o ; 
    input [0:0] axi_M01_arready_i ; 
    input [0:0] axi_M01_rvalid_i ; 
    input [10:0] axi_M01_rid_i ; 
    input [31:0] axi_M01_rdata_i ; 
    input [1:0] axi_M01_rresp_i ; 
    input [0:0] axi_M01_rlast_i ; 
    input [3:0] axi_M01_ruser_i ; 
    output [0:0] axi_M01_rready_o ; 
    output [0:0] axi_M00_awvalid_o ; 
    output [10:0] axi_M00_awid_o ; 
    output [31:0] axi_M00_awaddr_o ; 
    output [7:0] axi_M00_awlen_o ; 
    output [2:0] axi_M00_awsize_o ; 
    output [1:0] axi_M00_awburst_o ; 
    output [0:0] axi_M00_awlock_o ; 
    output [3:0] axi_M00_awcache_o ; 
    output [2:0] axi_M00_awprot_o ; 
    output [3:0] axi_M00_awqos_o ; 
    output [3:0] axi_M00_awregion_o ; 
    output [3:0] axi_M00_awuser_o ; 
    input [0:0] axi_M00_awready_i ; 
    output [0:0] axi_M00_wvalid_o ; 
    output [31:0] axi_M00_wdata_o ; 
    output [3:0] axi_M00_wstrb_o ; 
    output [0:0] axi_M00_wlast_o ; 
    output [3:0] axi_M00_wuser_o ; 
    input [0:0] axi_M00_wready_i ; 
    input [0:0] axi_M00_bvalid_i ; 
    input [10:0] axi_M00_bid_i ; 
    input [1:0] axi_M00_bresp_i ; 
    input [3:0] axi_M00_buser_i ; 
    output [0:0] axi_M00_bready_o ; 
    output [0:0] axi_M00_arvalid_o ; 
    output [10:0] axi_M00_arid_o ; 
    output [31:0] axi_M00_araddr_o ; 
    output [7:0] axi_M00_arlen_o ; 
    output [2:0] axi_M00_arsize_o ; 
    output [1:0] axi_M00_arburst_o ; 
    output [0:0] axi_M00_arlock_o ; 
    output [3:0] axi_M00_arcache_o ; 
    output [2:0] axi_M00_arprot_o ; 
    output [3:0] axi_M00_arqos_o ; 
    output [3:0] axi_M00_arregion_o ; 
    output [3:0] axi_M00_aruser_o ; 
    input [0:0] axi_M00_arready_i ; 
    input [0:0] axi_M00_rvalid_i ; 
    input [10:0] axi_M00_rid_i ; 
    input [31:0] axi_M00_rdata_i ; 
    input [1:0] axi_M00_rresp_i ; 
    input [0:0] axi_M00_rlast_i ; 
    input [3:0] axi_M00_ruser_i ; 
    output [0:0] axi_M00_rready_o ; 
    parameter TOTAL_EXTMAS_CNT = 1 ; 
    parameter TOTAL_EXTSLV_CNT = 2 ; 
    parameter EXT_MAS_MAX_ADDR_WIDTH = 32 ; 
    parameter EXT_SLV_MAX_ADDR_WIDTH = 32 ; 
    parameter EXT_SLV_MAX_FRAGMENT_CNT = 8 ; 
    parameter EXT_MAS_AXI_ADDR_WIDTH = 7'd32 ; 
    parameter EXT_SLV_AXI_ADDR_WIDTH = {7'd32,
                7'd32} ; 
    parameter EXT_SLV_FRAGMENT_CNT = {4'd8,
                4'd8} ; 
    parameter EXT_SLV_FRAGMENT_BASE_ADDR = {64'hf000,
                64'he000,
                64'hd000,
                64'hc000,
                64'hb000,
                64'ha000,
                64'h9000,
                64'h8000,
                64'h7000,
                64'h6000,
                64'h5000,
                64'h4000,
                64'h3000,
                64'h2000,
                64'h1000,
                64'h0} ; 
    parameter EXT_SLV_FRAGMENT_END_ADDR = {64'hffff,
                64'hefff,
                64'hdfff,
                64'hcfff,
                64'hbfff,
                64'hafff,
                64'h9fff,
                64'h8fff,
                64'h7fff,
                64'h6fff,
                64'h5fff,
                64'h4fff,
                64'h3fff,
                64'h2fff,
                64'h1fff,
                64'hfff} ; 
    axi4_interconnect_ipgen_lscc_axi_interconnect #(.TOTAL_EXTMAS_CNT(TOTAL_EXTMAS_CNT),
            .TOTAL_EXTSLV_CNT(TOTAL_EXTSLV_CNT),
            .FAMILY("LFCPNX"),
            .AXI_USER_WIDTH(4),
            .EXT_MAS_AXI_ID_WIDTH(6),
            .EXT_MAS_MAX_ADDR_WIDTH(EXT_MAS_MAX_ADDR_WIDTH),
            .EXT_MAS_MAX_DATA_WIDTH(64),
            .MAX_NUM_OF_ID_EXT_MAS_SUPPRT(16),
            .EXT_SLV_AXI_ID_WIDTH(11),
            .EXT_SLV_MAX_ADDR_WIDTH(EXT_SLV_MAX_ADDR_WIDTH),
            .EXT_SLV_MAX_DATA_WIDTH(32),
            .EXT_SLV_MAX_FRAGMENT_CNT(EXT_SLV_MAX_FRAGMENT_CNT),
            .EXT_MAS_ACCESS_TYPE(2'd2),
            .EXT_MAS_AXI_PROTOCOL(1'd0),
            .EXT_MAS_CDC_EN(1'd0),
            .EXT_MAS_AXI_ADDR_WIDTH(EXT_MAS_AXI_ADDR_WIDTH),
            .EXT_MAS_AXI_DATA_WIDTH(11'd64),
            .NUM_OF_ID_EXT_MAS_SUPPRT(7'd16),
            .ID_ORDER_EN_EXT_MAS(1'd0),
            .EXT_MAS_AXI_WR_ACCEPT(5'd8),
            .EXT_MAS_AXI_RD_ACCEPT(5'd8),
            .EXT_MAS_PRIORITY_SCHEME(1'd0),
            .EXT_MAS_FIXED_PRIORITY({5'd1,
                5'd0}),
            .EXT_SLV_ACCESS_TYPE({2'd2,
                2'd2}),
            .EXT_SLV_AXI_PROTOCOL({1'd0,
                1'd0}),
            .EXT_SLV_CDC_EN({1'd0,
                1'd0}),
            .EXT_SLV_AXI_ADDR_WIDTH(EXT_SLV_AXI_ADDR_WIDTH),
            .EXT_SLV_AXI_DATA_WIDTH({11'd32,
                11'd32}),
            .EXT_SLV_AXI_WR_ISSUE({5'd8,
                5'd8}),
            .EXT_SLV_AXI_RD_ISSUE({5'd8,
                5'd8}),
            .EXT_SLV_FRAGMENT_CNT(EXT_SLV_FRAGMENT_CNT),
            .EXT_SLV_FRAGMENT_BASE_ADDR(EXT_SLV_FRAGMENT_BASE_ADDR),
            .EXT_SLV_FRAGMENT_END_ADDR(EXT_SLV_FRAGMENT_END_ADDR),
            .EXT_SLV_PRIORITY_SCHEME({1'd0,
                1'd0}),
            .EXT_SLV_FIXED_PRIORITY({5'd0,
                5'd0})) lscc_axi_interconnect_inst (.axi_aclk_i(axi_aclk_i), 
                .axi_aresetn_i(axi_aresetn_i), 
                .axi_s_aclk_i({1'b0}), 
                .axi_s_aclken_i({1'b0}), 
                .axi_s_aresetn_i({1'b0}), 
                .axi_s_awvalid_i({axi_S00_awvalid_i[0]}), 
                .axi_s_awid_i({axi_S00_awid_i[5:0]}), 
                .axi_s_awaddr_i({axi_S00_awaddr_i[31:0]}), 
                .axi_s_awlen_i({axi_S00_awlen_i[7:0]}), 
                .axi_s_awsize_i({axi_S00_awsize_i[2:0]}), 
                .axi_s_awburst_i({axi_S00_awburst_i[1:0]}), 
                .axi_s_awlock_i({axi_S00_awlock_i[0]}), 
                .axi_s_awcache_i({axi_S00_awcache_i[3:0]}), 
                .axi_s_awprot_i({axi_S00_awprot_i[2:0]}), 
                .axi_s_awqos_i({axi_S00_awqos_i[3:0]}), 
                .axi_s_awregion_i({axi_S00_awregion_i[3:0]}), 
                .axi_s_awuser_i({axi_S00_awuser_i[3:0]}), 
                .axi_s_awready_o({axi_S00_awready_o[0]}), 
                .axi_s_wvalid_i({axi_S00_wvalid_i[0]}), 
                .axi_s_wdata_i({axi_S00_wdata_i[63:0]}), 
                .axi_s_wstrb_i({axi_S00_wstrb_i[7:0]}), 
                .axi_s_wlast_i({axi_S00_wlast_i[0]}), 
                .axi_s_wuser_i({axi_S00_wuser_i[3:0]}), 
                .axi_s_wready_o({axi_S00_wready_o[0]}), 
                .axi_s_bready_i({axi_S00_bready_i[0]}), 
                .axi_s_bvalid_o({axi_S00_bvalid_o[0]}), 
                .axi_s_bid_o({axi_S00_bid_o[5:0]}), 
                .axi_s_bresp_o({axi_S00_bresp_o[1:0]}), 
                .axi_s_buser_o({axi_S00_buser_o[3:0]}), 
                .axi_s_arvalid_i({axi_S00_arvalid_i[0]}), 
                .axi_s_arid_i({axi_S00_arid_i[5:0]}), 
                .axi_s_araddr_i({axi_S00_araddr_i[31:0]}), 
                .axi_s_arlen_i({axi_S00_arlen_i[7:0]}), 
                .axi_s_arsize_i({axi_S00_arsize_i[2:0]}), 
                .axi_s_arburst_i({axi_S00_arburst_i[1:0]}), 
                .axi_s_arlock_i({axi_S00_arlock_i[0]}), 
                .axi_s_arcache_i({axi_S00_arcache_i[3:0]}), 
                .axi_s_arprot_i({axi_S00_arprot_i[2:0]}), 
                .axi_s_arqos_i({axi_S00_arqos_i[3:0]}), 
                .axi_s_arregion_i({axi_S00_arregion_i[3:0]}), 
                .axi_s_aruser_i({axi_S00_aruser_i[3:0]}), 
                .axi_s_arready_o({axi_S00_arready_o[0]}), 
                .axi_s_rready_i({axi_S00_rready_i[0]}), 
                .axi_s_rvalid_o({axi_S00_rvalid_o[0]}), 
                .axi_s_rid_o({axi_S00_rid_o[5:0]}), 
                .axi_s_rdata_o({axi_S00_rdata_o[63:0]}), 
                .axi_s_rresp_o({axi_S00_rresp_o[1:0]}), 
                .axi_s_rlast_o({axi_S00_rlast_o[0]}), 
                .axi_s_ruser_o({axi_S00_ruser_o[3:0]}), 
                .axi_m_aclk_i({1'b0,
                    1'b0}), 
                .axi_m_aclken_i({1'b0,
                    1'b0}), 
                .axi_m_aresetn_i({1'b0,
                    1'b0}), 
                .axi_m_awvalid_o({axi_M01_awvalid_o[0],
                    axi_M00_awvalid_o[0]}), 
                .axi_m_awid_o({axi_M01_awid_o[10:0],
                    axi_M00_awid_o[10:0]}), 
                .axi_m_awaddr_o({axi_M01_awaddr_o[31:0],
                    axi_M00_awaddr_o[31:0]}), 
                .axi_m_awlen_o({axi_M01_awlen_o[7:0],
                    axi_M00_awlen_o[7:0]}), 
                .axi_m_awsize_o({axi_M01_awsize_o[2:0],
                    axi_M00_awsize_o[2:0]}), 
                .axi_m_awburst_o({axi_M01_awburst_o[1:0],
                    axi_M00_awburst_o[1:0]}), 
                .axi_m_awlock_o({axi_M01_awlock_o[0],
                    axi_M00_awlock_o[0]}), 
                .axi_m_awcache_o({axi_M01_awcache_o[3:0],
                    axi_M00_awcache_o[3:0]}), 
                .axi_m_awprot_o({axi_M01_awprot_o[2:0],
                    axi_M00_awprot_o[2:0]}), 
                .axi_m_awqos_o({axi_M01_awqos_o[3:0],
                    axi_M00_awqos_o[3:0]}), 
                .axi_m_awregion_o({axi_M01_awregion_o[3:0],
                    axi_M00_awregion_o[3:0]}), 
                .axi_m_awuser_o({axi_M01_awuser_o[3:0],
                    axi_M00_awuser_o[3:0]}), 
                .axi_m_awready_i({axi_M01_awready_i[0],
                    axi_M00_awready_i[0]}), 
                .axi_m_wvalid_o({axi_M01_wvalid_o[0],
                    axi_M00_wvalid_o[0]}), 
                .axi_m_wdata_o({axi_M01_wdata_o[31:0],
                    axi_M00_wdata_o[31:0]}), 
                .axi_m_wstrb_o({axi_M01_wstrb_o[3:0],
                    axi_M00_wstrb_o[3:0]}), 
                .axi_m_wlast_o({axi_M01_wlast_o[0],
                    axi_M00_wlast_o[0]}), 
                .axi_m_wuser_o({axi_M01_wuser_o[3:0],
                    axi_M00_wuser_o[3:0]}), 
                .axi_m_wready_i({axi_M01_wready_i[0],
                    axi_M00_wready_i[0]}), 
                .axi_m_bvalid_i({axi_M01_bvalid_i[0],
                    axi_M00_bvalid_i[0]}), 
                .axi_m_bid_i({axi_M01_bid_i[10:0],
                    axi_M00_bid_i[10:0]}), 
                .axi_m_bresp_i({axi_M01_bresp_i[1:0],
                    axi_M00_bresp_i[1:0]}), 
                .axi_m_buser_i({axi_M01_buser_i[3:0],
                    axi_M00_buser_i[3:0]}), 
                .axi_m_bready_o({axi_M01_bready_o[0],
                    axi_M00_bready_o[0]}), 
                .axi_m_arvalid_o({axi_M01_arvalid_o[0],
                    axi_M00_arvalid_o[0]}), 
                .axi_m_arid_o({axi_M01_arid_o[10:0],
                    axi_M00_arid_o[10:0]}), 
                .axi_m_araddr_o({axi_M01_araddr_o[31:0],
                    axi_M00_araddr_o[31:0]}), 
                .axi_m_arlen_o({axi_M01_arlen_o[7:0],
                    axi_M00_arlen_o[7:0]}), 
                .axi_m_arsize_o({axi_M01_arsize_o[2:0],
                    axi_M00_arsize_o[2:0]}), 
                .axi_m_arburst_o({axi_M01_arburst_o[1:0],
                    axi_M00_arburst_o[1:0]}), 
                .axi_m_arlock_o({axi_M01_arlock_o[0],
                    axi_M00_arlock_o[0]}), 
                .axi_m_arcache_o({axi_M01_arcache_o[3:0],
                    axi_M00_arcache_o[3:0]}), 
                .axi_m_arprot_o({axi_M01_arprot_o[2:0],
                    axi_M00_arprot_o[2:0]}), 
                .axi_m_arqos_o({axi_M01_arqos_o[3:0],
                    axi_M00_arqos_o[3:0]}), 
                .axi_m_arregion_o({axi_M01_arregion_o[3:0],
                    axi_M00_arregion_o[3:0]}), 
                .axi_m_aruser_o({axi_M01_aruser_o[3:0],
                    axi_M00_aruser_o[3:0]}), 
                .axi_m_arready_i({axi_M01_arready_i[0],
                    axi_M00_arready_i[0]}), 
                .axi_m_rvalid_i({axi_M01_rvalid_i[0],
                    axi_M00_rvalid_i[0]}), 
                .axi_m_rid_i({axi_M01_rid_i[10:0],
                    axi_M00_rid_i[10:0]}), 
                .axi_m_rdata_i({axi_M01_rdata_i[31:0],
                    axi_M00_rdata_i[31:0]}), 
                .axi_m_rresp_i({axi_M01_rresp_i[1:0],
                    axi_M00_rresp_i[1:0]}), 
                .axi_m_rlast_i({axi_M01_rlast_i[0],
                    axi_M00_rlast_i[0]}), 
                .axi_m_ruser_i({axi_M01_ruser_i[3:0],
                    axi_M00_ruser_i[3:0]}), 
                .axi_m_rready_o({axi_M01_rready_o[0],
                    axi_M00_rready_o[0]})) ; 
endmodule



module axi4_interconnect_ipgen_ard_cdc_ifc (mi_aclk, 
        mi_rst_n, 
        mi_arvalid, 
        mi_araddr, 
        mi_arsize, 
        mi_arlen, 
        mi_arburst, 
        mi_arcache, 
        mi_arid, 
        mi_arprot, 
        mi_arlock, 
        mi_arqos, 
        mi_arregion, 
        mi_aruser, 
        mi_arready, 
        mi_rvalid, 
        mi_rlast, 
        mi_rready, 
        mo_aclk, 
        mo_rst_n, 
        mo_arvalid, 
        mo_araddr, 
        mo_arsize, 
        mo_arlen, 
        mo_arburst, 
        mo_arcache, 
        mo_arid, 
        mo_arprot, 
        mo_arlock, 
        mo_arqos, 
        mo_arregion, 
        mo_aruser, 
        mo_arready) ;
    parameter AXI_ADDR_WIDTH = 32 ; 
    parameter AXI_ID_WIDTH = 8 ; 
    parameter AXI_LEN_WIDTH = 4 ; 
    parameter AXI_USER_WIDTH = 4 ; 
    parameter AXI_RD_FIFO_DEPTH = 8 ; 
    localparam AXI_RD_FIFO_DEPTH_INT = (((((((((AXI_RD_FIFO_DEPTH == 1) || (AXI_RD_FIFO_DEPTH == 3)) || (AXI_RD_FIFO_DEPTH == 5)) || (AXI_RD_FIFO_DEPTH == 7)) || (AXI_RD_FIFO_DEPTH == 9)) || (AXI_RD_FIFO_DEPTH == 11)) || (AXI_RD_FIFO_DEPTH == 13)) || (AXI_RD_FIFO_DEPTH == 15)) ? (AXI_RD_FIFO_DEPTH + 1) : AXI_RD_FIFO_DEPTH) ; 
    localparam PTR_WIDTH = clog2(AXI_RD_FIFO_DEPTH_INT) ; 
    localparam DEPTH = (AXI_RD_FIFO_DEPTH_INT - 1) ; 
    localparam AR_FIFO_DATA_WIDTH = ((((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + AXI_USER_WIDTH) + 22) ; 
    //*********************************INPUTS & OUTPUTS************************************
    input mi_aclk ; 
    input mi_rst_n ; 
    input mi_arvalid ; 
    input [(AXI_ADDR_WIDTH - 1):0] mi_araddr ; 
    input [2:0] mi_arsize ; 
    input [(AXI_LEN_WIDTH - 1):0] mi_arlen ; 
    input [1:0] mi_arburst ; 
    input [3:0] mi_arcache ; 
    input [(AXI_ID_WIDTH - 1):0] mi_arid ; 
    input [2:0] mi_arprot ; 
    input [0:0] mi_arlock ; 
    input [3:0] mi_arqos ; 
    input [3:0] mi_arregion ; 
    input [(AXI_USER_WIDTH - 1):0] mi_aruser ; 
    output logic mi_arready ; 
    input mi_rvalid ; 
    input mi_rlast ; 
    input mi_rready ; 
    input mo_aclk ; 
    input mo_rst_n ; 
    output logic mo_arvalid ; 
    output logic [(AXI_ADDR_WIDTH - 1):0] mo_araddr ; 
    output logic [2:0] mo_arsize ; 
    output logic [(AXI_LEN_WIDTH - 1):0] mo_arlen ; 
    output logic [1:0] mo_arburst ; 
    output logic [3:0] mo_arcache ; 
    output logic [(AXI_ID_WIDTH - 1):0] mo_arid ; 
    output logic [2:0] mo_arprot ; 
    output logic [0:0] mo_arlock ; 
    output logic [3:0] mo_arqos ; 
    output logic [3:0] mo_arregion ; 
    output logic [(AXI_USER_WIDTH - 1):0] mo_aruser ; 
    input mo_arready ; 
    //===================================================================================
    logic [(AXI_ADDR_WIDTH - 1):0] nxt_mo_araddr ; 
    logic nxt_mo_arvalid ; 
    logic [2:0] nxt_mo_arsize ; 
    logic [(AXI_LEN_WIDTH - 1):0] nxt_mo_arlen ; 
    logic [1:0] nxt_mo_arburst ; 
    logic [3:0] nxt_mo_arcache ; 
    logic [(AXI_ID_WIDTH - 1):0] nxt_mo_arid ; 
    logic [2:0] nxt_mo_arprot ; 
    logic [0:0] nxt_mo_arlock ; 
    logic [3:0] nxt_mo_arqos ; 
    logic [3:0] nxt_mo_arregion ; 
    logic [(AXI_USER_WIDTH - 1):0] nxt_mo_aruser ; 
    logic rdata_valid_reg, 
        nxt_rdata_valid_reg ; 
    logic [(AR_FIFO_DATA_WIDTH - 1):0] mo_ard_ff_rdata_reg ; 
    logic mi_ard_ff_wren ; 
    logic mo_ard_ff_rden ; 
    logic ard_ff_empty ; 
    logic ard_ff_full ; 
    logic ard_ff_pre_full ; 
    logic [(AR_FIFO_DATA_WIDTH - 1):0] mi_ard_ff_wdata ; 
    logic [(AR_FIFO_DATA_WIDTH - 1):0] mo_ard_ff_rdata ; 
    logic rdata_valid ; 
    logic [(PTR_WIDTH - 1):0] ram_write_addr ; 
    logic [(PTR_WIDTH - 1):0] ram_read_addr ; 
    logic ram_write_strobe ; 
    logic ram_read_strobe ; 
    localparam AR_ACCEPT_WIDTH = ((AXI_RD_FIFO_DEPTH == 1) ? 1 : (((AXI_RD_FIFO_DEPTH == 2) || (AXI_RD_FIFO_DEPTH == 3)) ? 2 : (((AXI_RD_FIFO_DEPTH >= 4) && (AXI_RD_FIFO_DEPTH <= 7)) ? 3 : (((AXI_RD_FIFO_DEPTH >= 8) && (AXI_RD_FIFO_DEPTH <= 15)) ? 4 : 5)))) ; 
    logic [(AR_ACCEPT_WIDTH - 1):0] rd_accept_cnt ; 
    logic rd_accept_full ; 
    assign rd_accept_full = (rd_accept_cnt == AXI_RD_FIFO_DEPTH) ; 
    logic full_check ; 
    assign full_check = (((((AXI_RD_FIFO_DEPTH == 1) || (AXI_RD_FIFO_DEPTH == 3)) || ((AXI_RD_FIFO_DEPTH >= 5) && (AXI_RD_FIFO_DEPTH <= 7))) || ((AXI_RD_FIFO_DEPTH >= 9) && (AXI_RD_FIFO_DEPTH <= 15))) ? (!ard_ff_full) : (!ard_ff_full)) ; 
    //assign full_check = AXI_RD_FIFO_DEPTH==1 ||  AXI_RD_FIFO_DEPTH==3 || (AXI_RD_FIFO_DEPTH>=5 && AXI_RD_FIFO_DEPTH<=7) || (AXI_RD_FIFO_DEPTH>=9 && AXI_RD_FIFO_DEPTH<=15) ? (!ard_ff_full) : (!ard_ff_full) & (!ard_ff_pre_full) ;
    // ------------------------------------------------------------------------------
    // Function Definition
    // ------------------------------------------------------------------------------
    function integer clog2( 
        input integer depth )  ; 
        begin
            //if (depth == 0)
            if (((depth == 0) || (depth == 1))) 
                clog2 = 1 ;
            else
                for (clog2 = 0 ; (depth > 1) ; clog2 = (clog2 + 1))
                    //for (clog2 = 0; depth > 1;  clog2 = clog2 + 1)
                    depth = (depth >> 1) ;
        end
    endfunction
    axi4_interconnect_ipgen_gen_fifo_async_ctl #(PTR_WIDTH) u_mas_ard_ff (// Outputs
            .wdepth(), 
                .rdepth(), 
                .ram_write_strobe(ram_write_strobe), 
                .ram_write_addr(ram_write_addr), 
                .ram_read_strobe(ram_read_strobe), 
                .ram_read_addr(ram_read_addr), 
                .full(ard_ff_full), 
                .pre_full(ard_ff_pre_full), 
                .empty(ard_ff_empty), 
                .dout_v(rdata_valid), 
                // Inputs
            .wusable(1'b1), 
                .wclk(mi_aclk), 
                .wreset((~mi_rst_n)), 
                .rusable(1'b1), 
                .rclk(mo_aclk), 
                .rreset((~mo_rst_n)), 
                .push(mi_ard_ff_wren), 
                .pop(mo_ard_ff_rden)) ; 
    axi4_interconnect_ipgen_mem_1w1r #(PTR_WIDTH,
            AR_FIFO_DATA_WIDTH,
            DEPTH) u_mas_ard_ff_mem (.wclk(mi_aclk), 
                .waddr(ram_write_addr), 
                .wen(ram_write_strobe), 
                .wdata(mi_ard_ff_wdata), 
                .rclk(mo_aclk), 
                .raddr(ram_read_addr), 
                .ren(ram_read_strobe), 
                .rdata(mo_ard_ff_rdata)) ; 
    //===================================================================================
    // MI Interface based on mi_aclk 
    //===================================================================================
    always
        @(posedge mi_aclk or 
            negedge mi_rst_n)
        begin
            if ((~mi_rst_n)) 
                begin
                    mi_arready <=  1'b1 ;
                    rd_accept_cnt <=  {AR_ACCEPT_WIDTH{1'b0}} ;
                end
            else
                begin
                    //mi_arready     <= (!ard_ff_full) & (!ard_ff_pre_full); 
                    mi_arready <=  (((mi_arvalid & mi_arready) & ((mi_rvalid & mi_rlast) & mi_rready)) ? full_check : ((mi_arvalid & mi_arready) ? ((AXI_RD_FIFO_DEPTH == 1) ? 1'b0 : ((|rd_accept_cnt) ? (!(rd_accept_cnt == (AXI_RD_FIFO_DEPTH - 1))) : ((~rd_accept_full) & full_check))) : (((mi_rvalid & mi_rlast) & mi_rready) ? full_check : ((~rd_accept_full) & full_check)))) ;
                    rd_accept_cnt <=  ((((mi_arvalid & mi_arready) & (~rd_accept_full)) & ((mi_rvalid & mi_rlast) & mi_rready)) ? rd_accept_cnt : (((mi_arvalid & mi_arready) & (~rd_accept_full)) ? (rd_accept_cnt + 1'd1) : (((mi_rvalid & mi_rlast) & mi_rready) ? (rd_accept_cnt - 1'd1) : rd_accept_cnt))) ;
                end
        end
    assign mi_ard_ff_wren = ((mi_arvalid & mi_arready) & (~ard_ff_full)) ; 
    assign mi_ard_ff_wdata = {mi_aruser,
                mi_arregion,
                mi_arqos,
                mi_arlock,
                mi_arprot,
                mi_arid,
                mi_arcache,
                mi_arburst,
                mi_arlen,
                mi_arsize,
                mi_araddr,
                mi_arvalid} ; 
    //===================================================================================
    // MO Interface based on mo_aclk 
    //===================================================================================
    always
        @(posedge mo_aclk or 
            negedge mo_rst_n)
        begin
            if ((~mo_rst_n)) 
                begin
                    mo_arvalid <=  1'd0 ;
                    mo_araddr <=  {AXI_ADDR_WIDTH{1'b0}} ;
                    mo_arsize <=  3'd0 ;
                    mo_arlen <=  {AXI_LEN_WIDTH{1'b0}} ;
                    mo_arburst <=  2'd0 ;
                    mo_arcache <=  4'd0 ;
                    mo_arid <=  {AXI_ID_WIDTH{1'b0}} ;
                    mo_arprot <=  3'd0 ;
                    mo_arlock <=  1'd0 ;
                    mo_arqos <=  4'd0 ;
                    mo_arregion <=  4'd0 ;
                    mo_aruser <=  {AXI_USER_WIDTH{1'b0}} ;
                    rdata_valid_reg <=  1'b0 ;
                    mo_ard_ff_rdata_reg <=  {AR_FIFO_DATA_WIDTH{1'b0}} ;
                end
            else
                begin
                    mo_arvalid <=  nxt_mo_arvalid ;
                    mo_araddr <=  nxt_mo_araddr ;
                    mo_arsize <=  nxt_mo_arsize ;
                    mo_arlen <=  nxt_mo_arlen ;
                    mo_arburst <=  nxt_mo_arburst ;
                    mo_arcache <=  nxt_mo_arcache ;
                    mo_arid <=  nxt_mo_arid ;
                    mo_arprot <=  nxt_mo_arprot ;
                    mo_arlock <=  nxt_mo_arlock ;
                    mo_arqos <=  nxt_mo_arqos ;
                    mo_arregion <=  nxt_mo_arregion ;
                    mo_aruser <=  nxt_mo_aruser ;
                    rdata_valid_reg <=  nxt_rdata_valid_reg ;
                    mo_ard_ff_rdata_reg <=  (rdata_valid ? mo_ard_ff_rdata : mo_ard_ff_rdata_reg) ;
                end
        end
    assign mo_ard_ff_rden = ((~ard_ff_empty) ? ((((mo_arvalid & rdata_valid) & (!mo_arready)) || rdata_valid_reg) ? 1'b0 : 1'b1) : 1'b0) ; 
    always
        @(*)
        begin
            nxt_rdata_valid_reg = (rdata_valid_reg ? (!mo_arready) : (((mo_arvalid & rdata_valid) & (!mo_arready)) ? 1'b1 : rdata_valid_reg)) ;
            nxt_mo_arvalid = mo_arvalid ;
            nxt_mo_araddr = mo_araddr ;
            nxt_mo_arsize = mo_arsize ;
            nxt_mo_arlen = mo_arlen ;
            nxt_mo_arburst = mo_arburst ;
            nxt_mo_arcache = mo_arcache ;
            nxt_mo_arid = mo_arid ;
            nxt_mo_arprot = mo_arprot ;
            nxt_mo_arlock = mo_arlock ;
            nxt_mo_arqos = mo_arqos ;
            nxt_mo_arregion = mo_arregion ;
            nxt_mo_aruser = mo_aruser ;
            if ((((mo_arvalid & mo_arready) & rdata_valid) || ((!mo_arvalid) & rdata_valid))) 
                begin
                    nxt_mo_arvalid = mo_ard_ff_rdata[0] ;
                    nxt_mo_araddr = mo_ard_ff_rdata[AXI_ADDR_WIDTH:1] ;
                    nxt_mo_arsize = mo_ard_ff_rdata[(AXI_ADDR_WIDTH + 3):(AXI_ADDR_WIDTH + 1)] ;
                    nxt_mo_arlen = mo_ard_ff_rdata[((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 3):(AXI_ADDR_WIDTH + 4)] ;
                    nxt_mo_arburst = mo_ard_ff_rdata[((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 5):((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 4)] ;
                    nxt_mo_arcache = mo_ard_ff_rdata[((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 9):((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 6)] ;
                    nxt_mo_arid = mo_ard_ff_rdata[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 9):((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 10)] ;
                    nxt_mo_arprot = mo_ard_ff_rdata[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 12):(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 10)] ;
                    nxt_mo_arlock = mo_ard_ff_rdata[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 13)] ;
                    nxt_mo_arqos = mo_ard_ff_rdata[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 17):(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 14)] ;
                    nxt_mo_arregion = mo_ard_ff_rdata[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 21):(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 18)] ;
                    nxt_mo_aruser = mo_ard_ff_rdata[((((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + AXI_USER_WIDTH) + 21):(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 22)] ;
                end
            else
                if (((mo_arvalid & mo_arready) & rdata_valid_reg)) 
                    begin
                        nxt_mo_arvalid = mo_ard_ff_rdata_reg[0] ;
                        nxt_mo_araddr = mo_ard_ff_rdata_reg[AXI_ADDR_WIDTH:1] ;
                        nxt_mo_arsize = mo_ard_ff_rdata_reg[(AXI_ADDR_WIDTH + 3):(AXI_ADDR_WIDTH + 1)] ;
                        nxt_mo_arlen = mo_ard_ff_rdata_reg[((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 3):(AXI_ADDR_WIDTH + 4)] ;
                        nxt_mo_arburst = mo_ard_ff_rdata_reg[((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 5):((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 4)] ;
                        nxt_mo_arcache = mo_ard_ff_rdata_reg[((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 9):((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 6)] ;
                        nxt_mo_arid = mo_ard_ff_rdata_reg[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 9):((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 10)] ;
                        nxt_mo_arprot = mo_ard_ff_rdata_reg[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 12):(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 10)] ;
                        nxt_mo_arlock = mo_ard_ff_rdata_reg[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 13)] ;
                        nxt_mo_arqos = mo_ard_ff_rdata_reg[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 17):(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 14)] ;
                        nxt_mo_arregion = mo_ard_ff_rdata_reg[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 21):(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 18)] ;
                        nxt_mo_aruser = mo_ard_ff_rdata_reg[((((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + AXI_USER_WIDTH) + 21):(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 22)] ;
                    end
                else
                    begin
                        nxt_mo_arvalid = ((mo_arvalid & mo_arready) ? 1'b0 : mo_arvalid) ;
                    end
        end

// ard_cdc_ifc 
endmodule



module axi4_interconnect_ipgen_awr_cdc_ifc (mi_aclk, 
        mi_rst_n, 
        mi_awvalid, 
        mi_awaddr, 
        mi_awsize, 
        mi_awlen, 
        mi_awburst, 
        mi_awcache, 
        mi_awid, 
        mi_awprot, 
        mi_awlock, 
        mi_awqos, 
        mi_awregion, 
        mi_awuser, 
        mi_awready, 
        mi_bvalid, 
        mi_bready, 
        mo_aclk, 
        mo_rst_n, 
        mo_awvalid, 
        mo_awaddr, 
        mo_awsize, 
        mo_awlen, 
        mo_awburst, 
        mo_awcache, 
        mo_awid, 
        mo_awprot, 
        mo_awlock, 
        mo_awqos, 
        mo_awregion, 
        mo_awuser, 
        mo_awready) ;
    parameter AXI_ADDR_WIDTH = 32 ; 
    parameter AXI_ID_WIDTH = 8 ; 
    parameter AXI_LEN_WIDTH = 4 ; 
    parameter AXI_USER_WIDTH = 4 ; 
    parameter AXI_WR_FIFO_DEPTH = 8 ; 
    localparam AXI_WR_FIFO_DEPTH_INT = (((((((((AXI_WR_FIFO_DEPTH == 1) || (AXI_WR_FIFO_DEPTH == 3)) || (AXI_WR_FIFO_DEPTH == 5)) || (AXI_WR_FIFO_DEPTH == 7)) || (AXI_WR_FIFO_DEPTH == 9)) || (AXI_WR_FIFO_DEPTH == 11)) || (AXI_WR_FIFO_DEPTH == 13)) || (AXI_WR_FIFO_DEPTH == 15)) ? (AXI_WR_FIFO_DEPTH + 1) : AXI_WR_FIFO_DEPTH) ; 
    localparam PTR_WIDTH = clog2(AXI_WR_FIFO_DEPTH_INT) ; 
    localparam DEPTH = (AXI_WR_FIFO_DEPTH_INT - 1) ; 
    localparam AW_FIFO_DATA_WIDTH = ((((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + AXI_USER_WIDTH) + 22) ; 
    //*********************************INPUTS & OUTPUTS************************************
    input mi_aclk ; 
    input mi_rst_n ; 
    input mi_awvalid ; 
    input [(AXI_ADDR_WIDTH - 1):0] mi_awaddr ; 
    input [2:0] mi_awsize ; 
    input [(AXI_LEN_WIDTH - 1):0] mi_awlen ; 
    input [1:0] mi_awburst ; 
    input [3:0] mi_awcache ; 
    input [(AXI_ID_WIDTH - 1):0] mi_awid ; 
    input [2:0] mi_awprot ; 
    input [0:0] mi_awlock ; 
    input [3:0] mi_awqos ; 
    input [3:0] mi_awregion ; 
    input [(AXI_USER_WIDTH - 1):0] mi_awuser ; 
    output logic mi_awready ; 
    input mi_bvalid ; 
    input mi_bready ; 
    input mo_aclk ; 
    input mo_rst_n ; 
    output logic mo_awvalid ; 
    output logic [(AXI_ADDR_WIDTH - 1):0] mo_awaddr ; 
    output logic [2:0] mo_awsize ; 
    output logic [(AXI_LEN_WIDTH - 1):0] mo_awlen ; 
    output logic [1:0] mo_awburst ; 
    output logic [3:0] mo_awcache ; 
    output logic [(AXI_ID_WIDTH - 1):0] mo_awid ; 
    output logic [2:0] mo_awprot ; 
    output logic [0:0] mo_awlock ; 
    output logic [3:0] mo_awqos ; 
    output logic [3:0] mo_awregion ; 
    output logic [(AXI_USER_WIDTH - 1):0] mo_awuser ; 
    input mo_awready ; 
    //===================================================================================
    logic [(AXI_ADDR_WIDTH - 1):0] nxt_mo_awaddr ; 
    logic nxt_mo_awvalid ; 
    logic [2:0] nxt_mo_awsize ; 
    logic [(AXI_LEN_WIDTH - 1):0] nxt_mo_awlen ; 
    logic [1:0] nxt_mo_awburst ; 
    logic [3:0] nxt_mo_awcache ; 
    logic [(AXI_ID_WIDTH - 1):0] nxt_mo_awid ; 
    logic [2:0] nxt_mo_awprot ; 
    logic [0:0] nxt_mo_awlock ; 
    logic [3:0] nxt_mo_awqos ; 
    logic [3:0] nxt_mo_awregion ; 
    logic [(AXI_USER_WIDTH - 1):0] nxt_mo_awuser ; 
    logic rdata_valid_reg, 
        nxt_rdata_valid_reg ; 
    logic [(AW_FIFO_DATA_WIDTH - 1):0] mo_awr_ff_rdata_reg ; 
    logic mi_awr_ff_wren ; 
    logic mo_awr_ff_rden ; 
    logic awr_ff_empty ; 
    logic awr_ff_full ; 
    logic awr_ff_pre_full ; 
    logic [(AW_FIFO_DATA_WIDTH - 1):0] mi_awr_ff_wdata ; 
    logic [(AW_FIFO_DATA_WIDTH - 1):0] mo_awr_ff_rdata ; 
    logic rdata_valid ; 
    logic [(PTR_WIDTH - 1):0] ram_write_addr ; 
    logic [(PTR_WIDTH - 1):0] ram_read_addr ; 
    logic ram_write_strobe ; 
    logic ram_read_strobe ; 
    localparam AW_ACCEPT_WIDTH = ((AXI_WR_FIFO_DEPTH == 1) ? 1 : (((AXI_WR_FIFO_DEPTH == 2) || (AXI_WR_FIFO_DEPTH == 3)) ? 2 : (((AXI_WR_FIFO_DEPTH >= 4) && (AXI_WR_FIFO_DEPTH <= 7)) ? 3 : (((AXI_WR_FIFO_DEPTH >= 8) && (AXI_WR_FIFO_DEPTH <= 15)) ? 4 : 5)))) ; 
    logic [(AW_ACCEPT_WIDTH - 1):0] wr_accept_cnt ; 
    logic wr_accept_full ; 
    assign wr_accept_full = (wr_accept_cnt == AXI_WR_FIFO_DEPTH) ; 
    logic full_check ; 
    assign full_check = (((((AXI_WR_FIFO_DEPTH == 1) || (AXI_WR_FIFO_DEPTH == 3)) || ((AXI_WR_FIFO_DEPTH >= 5) && (AXI_WR_FIFO_DEPTH <= 7))) || ((AXI_WR_FIFO_DEPTH >= 9) && (AXI_WR_FIFO_DEPTH <= 15))) ? (!awr_ff_full) : (!awr_ff_full)) ; 
    //assign full_check = AXI_WR_FIFO_DEPTH==1 ||  AXI_WR_FIFO_DEPTH==3 || (AXI_WR_FIFO_DEPTH>=5 && AXI_WR_FIFO_DEPTH<=7) || (AXI_WR_FIFO_DEPTH>=9 && AXI_WR_FIFO_DEPTH<=15) ? (!awr_ff_full) : (!awr_ff_full) & (!awr_ff_pre_full) ;
    //
    // ------------------------------------------------------------------------------
    // Function Definition
    // ------------------------------------------------------------------------------
    function integer clog2( 
        input integer depth )  ; 
        begin
            //if (depth == 0)
            if (((depth == 0) || (depth == 1))) 
                clog2 = 1 ;
            else
                for (clog2 = 0 ; (depth > 1) ; clog2 = (clog2 + 1))
                    //for (clog2 = 0; depth > 1;  clog2 = clog2 + 1)
                    depth = (depth >> 1) ;
        end
    endfunction
    axi4_interconnect_ipgen_gen_fifo_async_ctl #(PTR_WIDTH) u_mas_awr_ff (// Outputs
            .wdepth(), 
                .rdepth(), 
                .ram_write_strobe(ram_write_strobe), 
                .ram_write_addr(ram_write_addr), 
                .ram_read_strobe(ram_read_strobe), 
                .ram_read_addr(ram_read_addr), 
                .full(awr_ff_full), 
                .pre_full(awr_ff_pre_full), 
                .empty(awr_ff_empty), 
                .dout_v(rdata_valid), 
                // Inputs
            .wusable(1'b1), 
                .wclk(mi_aclk), 
                .wreset((~mi_rst_n)), 
                .rusable(1'b1), 
                .rclk(mo_aclk), 
                .rreset((~mo_rst_n)), 
                .push(mi_awr_ff_wren), 
                .pop(mo_awr_ff_rden)) ; 
    axi4_interconnect_ipgen_mem_1w1r #(PTR_WIDTH,
            AW_FIFO_DATA_WIDTH,
            DEPTH) u_mas_awr_ff_mem (.wclk(mi_aclk), 
                .waddr(ram_write_addr), 
                .wen(ram_write_strobe), 
                .wdata(mi_awr_ff_wdata), 
                .rclk(mo_aclk), 
                .raddr(ram_read_addr), 
                .ren(ram_read_strobe), 
                .rdata(mo_awr_ff_rdata)) ; 
    //===================================================================================
    // MI Interface based on mi_aclk 
    //===================================================================================
    always
        @(posedge mi_aclk or 
            negedge mi_rst_n)
        begin
            if ((~mi_rst_n)) 
                begin
                    mi_awready <=  1'b1 ;
                    wr_accept_cnt <=  {AW_ACCEPT_WIDTH{1'b0}} ;
                end
            else
                begin
                    mi_awready <=  (((mi_awvalid & mi_awready) & (mi_bvalid & mi_bready)) ? full_check : ((mi_awvalid & mi_awready) ? ((AXI_WR_FIFO_DEPTH == 1) ? 1'b0 : ((|wr_accept_cnt) ? (!(wr_accept_cnt == (AXI_WR_FIFO_DEPTH - 1))) : ((~wr_accept_full) & full_check))) : ((mi_bvalid & mi_bready) ? full_check : ((~wr_accept_full) & full_check)))) ;
                    wr_accept_cnt <=  ((((mi_awvalid & mi_awready) & (~wr_accept_full)) & (mi_bvalid & mi_bready)) ? wr_accept_cnt : (((mi_awvalid & mi_awready) & (~wr_accept_full)) ? (wr_accept_cnt + 1'd1) : ((mi_bvalid & mi_bready) ? (wr_accept_cnt - 1'd1) : wr_accept_cnt))) ;
                end
        end
    assign mi_awr_ff_wren = ((mi_awvalid & mi_awready) & (!awr_ff_full)) ; 
    assign mi_awr_ff_wdata = {mi_awuser,
                mi_awregion,
                mi_awqos,
                mi_awlock,
                mi_awprot,
                mi_awid,
                mi_awcache,
                mi_awburst,
                mi_awlen,
                mi_awsize,
                mi_awaddr,
                mi_awvalid} ; 
    //===================================================================================
    // MO Interface based on mo_aclk 
    //===================================================================================
    always
        @(posedge mo_aclk or 
            negedge mo_rst_n)
        begin
            if ((~mo_rst_n)) 
                begin
                    mo_awvalid <=  1'd0 ;
                    mo_awaddr <=  {AXI_ADDR_WIDTH{1'b0}} ;
                    mo_awsize <=  3'd0 ;
                    mo_awlen <=  {AXI_LEN_WIDTH{1'b0}} ;
                    mo_awburst <=  2'd0 ;
                    mo_awcache <=  4'd0 ;
                    mo_awid <=  {AXI_ID_WIDTH{1'b0}} ;
                    mo_awprot <=  3'd0 ;
                    mo_awlock <=  1'd0 ;
                    mo_awqos <=  4'd0 ;
                    mo_awregion <=  4'd0 ;
                    mo_awuser <=  {AXI_USER_WIDTH{1'b0}} ;
                    rdata_valid_reg <=  1'b0 ;
                    mo_awr_ff_rdata_reg <=  {AW_FIFO_DATA_WIDTH{1'b0}} ;
                end
            else
                begin
                    mo_awvalid <=  nxt_mo_awvalid ;
                    mo_awaddr <=  nxt_mo_awaddr ;
                    mo_awsize <=  nxt_mo_awsize ;
                    mo_awlen <=  nxt_mo_awlen ;
                    mo_awburst <=  nxt_mo_awburst ;
                    mo_awcache <=  nxt_mo_awcache ;
                    mo_awid <=  nxt_mo_awid ;
                    mo_awprot <=  nxt_mo_awprot ;
                    mo_awlock <=  nxt_mo_awlock ;
                    mo_awqos <=  nxt_mo_awqos ;
                    mo_awregion <=  nxt_mo_awregion ;
                    mo_awuser <=  nxt_mo_awuser ;
                    rdata_valid_reg <=  nxt_rdata_valid_reg ;
                    mo_awr_ff_rdata_reg <=  (rdata_valid ? mo_awr_ff_rdata : mo_awr_ff_rdata_reg) ;
                end
        end
    assign mo_awr_ff_rden = ((~awr_ff_empty) ? ((((mo_awvalid & rdata_valid) & (!mo_awready)) || rdata_valid_reg) ? 1'b0 : 1'b1) : 1'b0) ; 
    always
        @(*)
        begin
            nxt_rdata_valid_reg = (rdata_valid_reg ? (!mo_awready) : (((mo_awvalid & rdata_valid) & (!mo_awready)) ? 1'b1 : rdata_valid_reg)) ;
            nxt_mo_awvalid = mo_awvalid ;
            nxt_mo_awaddr = mo_awaddr ;
            nxt_mo_awsize = mo_awsize ;
            nxt_mo_awlen = mo_awlen ;
            nxt_mo_awburst = mo_awburst ;
            nxt_mo_awcache = mo_awcache ;
            nxt_mo_awid = mo_awid ;
            nxt_mo_awprot = mo_awprot ;
            nxt_mo_awlock = mo_awlock ;
            nxt_mo_awqos = mo_awqos ;
            nxt_mo_awregion = mo_awregion ;
            nxt_mo_awuser = mo_awuser ;
            if ((((mo_awvalid & mo_awready) & rdata_valid) || ((!mo_awvalid) & rdata_valid))) 
                begin
                    nxt_mo_awvalid = mo_awr_ff_rdata[0] ;
                    nxt_mo_awaddr = mo_awr_ff_rdata[AXI_ADDR_WIDTH:1] ;
                    nxt_mo_awsize = mo_awr_ff_rdata[(AXI_ADDR_WIDTH + 3):(AXI_ADDR_WIDTH + 1)] ;
                    nxt_mo_awlen = mo_awr_ff_rdata[((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 3):(AXI_ADDR_WIDTH + 4)] ;
                    nxt_mo_awburst = mo_awr_ff_rdata[((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 5):((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 4)] ;
                    nxt_mo_awcache = mo_awr_ff_rdata[((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 9):((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 6)] ;
                    nxt_mo_awid = mo_awr_ff_rdata[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 9):((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 10)] ;
                    nxt_mo_awprot = mo_awr_ff_rdata[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 12):(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 10)] ;
                    nxt_mo_awlock = mo_awr_ff_rdata[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 13)] ;
                    nxt_mo_awqos = mo_awr_ff_rdata[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 17):(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 14)] ;
                    nxt_mo_awregion = mo_awr_ff_rdata[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 21):(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 18)] ;
                    nxt_mo_awuser = mo_awr_ff_rdata[((((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + AXI_USER_WIDTH) + 21):(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 22)] ;
                end
            else
                if (((mo_awvalid & mo_awready) & rdata_valid_reg)) 
                    begin
                        nxt_mo_awvalid = mo_awr_ff_rdata_reg[0] ;
                        nxt_mo_awaddr = mo_awr_ff_rdata_reg[AXI_ADDR_WIDTH:1] ;
                        nxt_mo_awsize = mo_awr_ff_rdata_reg[(AXI_ADDR_WIDTH + 3):(AXI_ADDR_WIDTH + 1)] ;
                        nxt_mo_awlen = mo_awr_ff_rdata_reg[((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 3):(AXI_ADDR_WIDTH + 4)] ;
                        nxt_mo_awburst = mo_awr_ff_rdata_reg[((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 5):((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 4)] ;
                        nxt_mo_awcache = mo_awr_ff_rdata_reg[((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 9):((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 6)] ;
                        nxt_mo_awid = mo_awr_ff_rdata_reg[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 9):((AXI_ADDR_WIDTH + AXI_LEN_WIDTH) + 10)] ;
                        nxt_mo_awprot = mo_awr_ff_rdata_reg[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 12):(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 10)] ;
                        nxt_mo_awlock = mo_awr_ff_rdata_reg[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 13)] ;
                        nxt_mo_awqos = mo_awr_ff_rdata_reg[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 17):(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 14)] ;
                        nxt_mo_awregion = mo_awr_ff_rdata_reg[(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 21):(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 18)] ;
                        nxt_mo_awuser = mo_awr_ff_rdata_reg[((((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + AXI_USER_WIDTH) + 21):(((AXI_ADDR_WIDTH + AXI_ID_WIDTH) + AXI_LEN_WIDTH) + 22)] ;
                    end
                else
                    begin
                        nxt_mo_awvalid = ((mo_awvalid & mo_awready) ? 1'b0 : mo_awvalid) ;
                    end
        end

// awr_cdc_ifc 
endmodule



module axi4_interconnect_ipgen_axi_cdc (mi_awaddr, 
        mi_awvalid, 
        mi_awsize, 
        mi_awlen, 
        mi_awburst, 
        mi_awcache, 
        mi_awid, 
        mi_awprot, 
        mi_awlock, 
        mi_awqos, 
        mi_awregion, 
        mi_awuser, 
        mi_awready, 
        mi_aclk, 
        mi_rst_n, 
        mi_araddr, 
        mi_arvalid, 
        mi_arsize, 
        mi_arlen, 
        mi_arburst, 
        mi_arcache, 
        mi_arid, 
        mi_arprot, 
        mi_arlock, 
        mi_arqos, 
        mi_arregion, 
        mi_aruser, 
        mi_arready, 
        mi_wvalid, 
        mi_wdata, 
        mi_wstrb, 
        mi_wlast, 
        mi_wuser, 
        mi_wready, 
        mi_bvalid, 
        mi_bresp, 
        mi_bid, 
        mi_buser, 
        mi_bready, 
        mi_rvalid, 
        mi_rdata, 
        mi_rlast, 
        mi_rresp, 
        mi_rid, 
        mi_ruser, 
        mi_rready, 
        mo_awaddr, 
        mo_awvalid, 
        mo_awsize, 
        mo_awlen, 
        mo_awburst, 
        mo_awcache, 
        mo_awid, 
        mo_awprot, 
        mo_awlock, 
        mo_awqos, 
        mo_awregion, 
        mo_awready, 
        mo_awuser, 
        mo_aclk, 
        mo_rst_n, 
        mo_araddr, 
        mo_arvalid, 
        mo_arsize, 
        mo_arlen, 
        mo_arburst, 
        mo_arcache, 
        mo_arid, 
        mo_arprot, 
        mo_arlock, 
        mo_arqos, 
        mo_arregion, 
        mo_aruser, 
        mo_arready, 
        mo_wvalid, 
        mo_wdata, 
        mo_wstrb, 
        mo_wlast, 
        mo_wuser, 
        mo_wready, 
        mo_bvalid, 
        mo_bresp, 
        mo_bid, 
        mo_buser, 
        mo_bready, 
        mo_rvalid, 
        mo_rdata, 
        mo_rlast, 
        mo_rresp, 
        mo_rid, 
        mo_ruser, 
        mo_rready) ;
    parameter AXI_ADDR_WIDTH = 32 ; 
    parameter AXI_DATA_WIDTH = 128 ; 
    parameter AXI_ID_WIDTH = 8 ; 
    parameter AXI_LEN_WIDTH = 4 ; 
    parameter AXI_USER_WIDTH = 4 ; 
    parameter AXI_WR_FIFO_DEPTH = 8 ; 
    parameter AXI_RD_FIFO_DEPTH = 8 ; 
    parameter ACCESS_TYPE = 2'd2 ; 
    parameter WR_DATA_FIFO_DEPTH = 8 ; 
    parameter BRESP_FIFO_DEPTH = 8 ; 
    parameter RD_DATA_FIFO_DEPTH = 8 ; 
    parameter N = 3 ; 
    //parameter  integer STATE [N] = state_val();
    //
    //  typedef  logic state_t [N];
    //function state_t state_val();
    //for(int i=0; i<N; i=i+1)
    //    state_val[i] = i;
    //endfunction 
    //*********************************INPUTS & OUTPUTS************************************
    input mi_aclk ; 
    input mi_rst_n ; 
    input mi_awvalid ; 
    input [(AXI_ADDR_WIDTH - 1):0] mi_awaddr ; 
    input [2:0] mi_awsize ; 
    input [(AXI_LEN_WIDTH - 1):0] mi_awlen ; 
    input [1:0] mi_awburst ; 
    input [3:0] mi_awcache ; 
    input [(AXI_ID_WIDTH - 1):0] mi_awid ; 
    input [2:0] mi_awprot ; 
    input [0:0] mi_awlock ; 
    input [3:0] mi_awqos ; 
    input [3:0] mi_awregion ; 
    input [(AXI_USER_WIDTH - 1):0] mi_awuser ; 
    output mi_awready ; 
    input mi_wvalid ; 
    input [(AXI_DATA_WIDTH - 1):0] mi_wdata ; 
    input [((AXI_DATA_WIDTH / 8) - 1):0] mi_wstrb ; 
    input mi_wlast ; 
    input [(AXI_USER_WIDTH - 1):0] mi_wuser ; 
    output mi_wready ; 
    output mi_bvalid ; 
    output [(AXI_ID_WIDTH - 1):0] mi_bid ; 
    output [1:0] mi_bresp ; 
    output [(AXI_USER_WIDTH - 1):0] mi_buser ; 
    input mi_bready ; 
    input mi_arvalid ; 
    input [(AXI_ADDR_WIDTH - 1):0] mi_araddr ; 
    input [2:0] mi_arsize ; 
    input [(AXI_LEN_WIDTH - 1):0] mi_arlen ; 
    input [1:0] mi_arburst ; 
    input [3:0] mi_arcache ; 
    input [(AXI_ID_WIDTH - 1):0] mi_arid ; 
    input [2:0] mi_arprot ; 
    input [0:0] mi_arlock ; 
    input [3:0] mi_arqos ; 
    input [3:0] mi_arregion ; 
    input [(AXI_USER_WIDTH - 1):0] mi_aruser ; 
    output mi_arready ; 
    output mi_rvalid ; 
    output [(AXI_DATA_WIDTH - 1):0] mi_rdata ; 
    output [(AXI_ID_WIDTH - 1):0] mi_rid ; 
    output [1:0] mi_rresp ; 
    output mi_rlast ; 
    output [(AXI_USER_WIDTH - 1):0] mi_ruser ; 
    input mi_rready ; 
    input mo_aclk ; 
    input mo_rst_n ; 
    output mo_awvalid ; 
    output [(AXI_ADDR_WIDTH - 1):0] mo_awaddr ; 
    output [2:0] mo_awsize ; 
    output [(AXI_LEN_WIDTH - 1):0] mo_awlen ; 
    output [1:0] mo_awburst ; 
    output [3:0] mo_awcache ; 
    output [(AXI_ID_WIDTH - 1):0] mo_awid ; 
    output [2:0] mo_awprot ; 
    output [0:0] mo_awlock ; 
    output [3:0] mo_awqos ; 
    output [3:0] mo_awregion ; 
    output [(AXI_USER_WIDTH - 1):0] mo_awuser ; 
    input mo_awready ; 
    output mo_wvalid ; 
    output [(AXI_DATA_WIDTH - 1):0] mo_wdata ; 
    output [(AXI_USER_WIDTH - 1):0] mo_wuser ; 
    output [((AXI_DATA_WIDTH / 8) - 1):0] mo_wstrb ; 
    output mo_wlast ; 
    input mo_wready ; 
    input mo_bvalid ; 
    input [(AXI_ID_WIDTH - 1):0] mo_bid ; 
    input [1:0] mo_bresp ; 
    input [(AXI_USER_WIDTH - 1):0] mo_buser ; 
    output mo_bready ; 
    output mo_arvalid ; 
    output [(AXI_ADDR_WIDTH - 1):0] mo_araddr ; 
    output [2:0] mo_arsize ; 
    output [(AXI_LEN_WIDTH - 1):0] mo_arlen ; 
    output [1:0] mo_arburst ; 
    output [3:0] mo_arcache ; 
    output [(AXI_ID_WIDTH - 1):0] mo_arid ; 
    output [2:0] mo_arprot ; 
    output [0:0] mo_arlock ; 
    output [3:0] mo_arqos ; 
    output [3:0] mo_arregion ; 
    output [(AXI_USER_WIDTH - 1):0] mo_aruser ; 
    input mo_arready ; 
    input mo_rvalid ; 
    input [(AXI_DATA_WIDTH - 1):0] mo_rdata ; 
    input [(AXI_ID_WIDTH - 1):0] mo_rid ; 
    input [1:0] mo_rresp ; 
    input mo_rlast ; 
    input [(AXI_USER_WIDTH - 1):0] mo_ruser ; 
    output mo_rready ; 
    generate
        if (((ACCESS_TYPE == 2'd0) || (ACCESS_TYPE == 2'd2))) 
            begin : WO_WR_ACCESS_BLK
                axi4_interconnect_ipgen_awr_cdc_ifc #(.AXI_ADDR_WIDTH(AXI_ADDR_WIDTH),
                        .AXI_ID_WIDTH(AXI_ID_WIDTH),
                        .AXI_LEN_WIDTH(AXI_LEN_WIDTH),
                        .AXI_USER_WIDTH(AXI_USER_WIDTH),
                        .AXI_WR_FIFO_DEPTH(AXI_WR_FIFO_DEPTH)) u_awr_cdc_ifc (.mi_aclk(mi_aclk), 
                            .mi_rst_n(mi_rst_n), 
                            .mi_awvalid(mi_awvalid), 
                            .mi_awaddr(mi_awaddr), 
                            .mi_awsize(mi_awsize), 
                            .mi_awlen(mi_awlen), 
                            .mi_awburst(mi_awburst), 
                            .mi_awcache(mi_awcache), 
                            .mi_awid(mi_awid), 
                            .mi_awprot(mi_awprot), 
                            .mi_awlock(mi_awlock), 
                            .mi_awqos(mi_awqos), 
                            .mi_awuser(mi_awuser), 
                            .mi_awregion(mi_awregion), 
                            .mi_awready(mi_awready), 
                            .mi_bvalid(mi_bvalid), 
                            .mi_bready(mi_bready), 
                            .mo_aclk(mo_aclk), 
                            .mo_rst_n(mo_rst_n), 
                            .mo_awvalid(mo_awvalid), 
                            .mo_awaddr(mo_awaddr), 
                            .mo_awsize(mo_awsize), 
                            .mo_awlen(mo_awlen), 
                            .mo_awburst(mo_awburst), 
                            .mo_awcache(mo_awcache), 
                            .mo_awid(mo_awid), 
                            .mo_awprot(mo_awprot), 
                            .mo_awlock(mo_awlock), 
                            .mo_awqos(mo_awqos), 
                            .mo_awregion(mo_awregion), 
                            .mo_awuser(mo_awuser), 
                            .mo_awready(mo_awready)) ; 
                axi4_interconnect_ipgen_wdata_cdc_ifc #(.AXI_DATA_WIDTH(AXI_DATA_WIDTH),
                        .AXI_ID_WIDTH(AXI_ID_WIDTH),
                        .AXI_USER_WIDTH(AXI_USER_WIDTH),
                        .WR_DATA_FIFO_DEPTH(WR_DATA_FIFO_DEPTH)) u_wdata_cdc_ifc (.mi_aclk(mi_aclk), 
                            .mi_rst_n(mi_rst_n), 
                            .mi_wvalid(mi_wvalid), 
                            .mi_wdata(mi_wdata), 
                            .mi_wstrb(mi_wstrb), 
                            .mi_wlast(mi_wlast), 
                            .mi_wuser(mi_wuser), 
                            .mi_wready(mi_wready), 
                            .mo_aclk(mo_aclk), 
                            .mo_rst_n(mo_rst_n), 
                            .mo_wdata(mo_wdata), 
                            .mo_wvalid(mo_wvalid), 
                            .mo_wstrb(mo_wstrb), 
                            .mo_wlast(mo_wlast), 
                            .mo_wuser(mo_wuser), 
                            .mo_wready(mo_wready)) ; 
                axi4_interconnect_ipgen_b_cdc_ifc #(.AXI_ID_WIDTH(AXI_ID_WIDTH),
                        .AXI_USER_WIDTH(AXI_USER_WIDTH),
                        .BRESP_FIFO_DEPTH(BRESP_FIFO_DEPTH)) u_b_cdc_ifc (.mi_aclk(mo_aclk), 
                            .mi_rst_n(mo_rst_n), 
                            .mi_bvalid(mo_bvalid), 
                            .mi_bid(mo_bid), 
                            .mi_bresp(mo_bresp), 
                            .mi_buser(mo_buser), 
                            .mi_bready(mo_bready), 
                            .mo_aclk(mi_aclk), 
                            .mo_rst_n(mi_rst_n), 
                            .mo_bvalid(mi_bvalid), 
                            .mo_bid(mi_bid), 
                            .mo_bresp(mi_bresp), 
                            .mo_buser(mi_buser), 
                            .mo_bready(mi_bready)) ; 
            end
        if (((ACCESS_TYPE == 2'd1) || (ACCESS_TYPE == 2'd2))) 
            begin : RO_WR_ACCESS_BLK
                axi4_interconnect_ipgen_ard_cdc_ifc #(.AXI_ADDR_WIDTH(AXI_ADDR_WIDTH),
                        .AXI_ID_WIDTH(AXI_ID_WIDTH),
                        .AXI_LEN_WIDTH(AXI_LEN_WIDTH),
                        .AXI_USER_WIDTH(AXI_USER_WIDTH),
                        .AXI_RD_FIFO_DEPTH(AXI_RD_FIFO_DEPTH)) u_ard_cdc_ifc (.mi_aclk(mi_aclk), 
                            .mi_rst_n(mi_rst_n), 
                            .mi_arvalid(mi_arvalid), 
                            .mi_araddr(mi_araddr), 
                            .mi_arsize(mi_arsize), 
                            .mi_arlen(mi_arlen), 
                            .mi_arburst(mi_arburst), 
                            .mi_arcache(mi_arcache), 
                            .mi_arid(mi_arid), 
                            .mi_arprot(mi_arprot), 
                            .mi_arlock(mi_arlock), 
                            .mi_arqos(mi_arqos), 
                            .mi_arregion(mi_arregion), 
                            .mi_aruser(mi_aruser), 
                            .mi_arready(mi_arready), 
                            .mi_rvalid(mi_rvalid), 
                            .mi_rlast(mi_rlast), 
                            .mi_rready(mi_rready), 
                            .mo_aclk(mo_aclk), 
                            .mo_rst_n(mo_rst_n), 
                            .mo_arvalid(mo_arvalid), 
                            .mo_araddr(mo_araddr), 
                            .mo_arsize(mo_arsize), 
                            .mo_arlen(mo_arlen), 
                            .mo_arburst(mo_arburst), 
                            .mo_arcache(mo_arcache), 
                            .mo_arid(mo_arid), 
                            .mo_arprot(mo_arprot), 
                            .mo_arlock(mo_arlock), 
                            .mo_arqos(mo_arqos), 
                            .mo_arregion(mo_arregion), 
                            .mo_aruser(mo_aruser), 
                            .mo_arready(mo_arready)) ; 
                axi4_interconnect_ipgen_rdata_cdc_ifc #(.RD_DATA_FIFO_DEPTH(RD_DATA_FIFO_DEPTH),
                        .AXI_USER_WIDTH(AXI_USER_WIDTH),
                        .AXI_DATA_WIDTH(AXI_DATA_WIDTH),
                        .AXI_ID_WIDTH(AXI_ID_WIDTH)) u_rdata_cdc_ifc (.mi_aclk(mo_aclk), 
                            .mi_rst_n(mo_rst_n), 
                            .mi_rvalid(mo_rvalid), 
                            .mi_rdata(mo_rdata), 
                            .mi_rid(mo_rid), 
                            .mi_rresp(mo_rresp), 
                            .mi_rlast(mo_rlast), 
                            .mi_ruser(mo_ruser), 
                            .mi_rready(mo_rready), 
                            .mo_aclk(mi_aclk), 
                            .mo_rst_n(mi_rst_n), 
                            .mo_rvalid(mi_rvalid), 
                            .mo_rdata(mi_rdata), 
                            .mo_rid(mi_rid), 
                            .mo_rresp(mi_rresp), 
                            .mo_rlast(mi_rlast), 
                            .mo_ruser(mi_ruser), 
                            .mo_rready(mi_rready)) ; 
            end
        if ((ACCESS_TYPE == 2'd0)) 
            begin : WO_ACCESS_BLK
                assign mi_arready = 1'b0 ; 
                assign mi_rvalid = 1'b0 ; 
                assign mi_rdata = {AXI_DATA_WIDTH{1'b0}} ; 
                assign mi_rid = {AXI_ID_WIDTH{1'b0}} ; 
                assign mi_rresp = 2'd0 ; 
                assign mi_rlast = 1'b0 ; 
                assign mi_ruser = {AXI_USER_WIDTH{1'b0}} ; 
                assign mo_arvalid = 1'b0 ; 
                assign mo_araddr = {AXI_ADDR_WIDTH{1'b0}} ; 
                assign mo_arsize = 3'd0 ; 
                assign mo_arlen = {AXI_LEN_WIDTH{1'b0}} ; 
                assign mo_arburst = 2'd0 ; 
                assign mo_arcache = 4'd0 ; 
                assign mo_arid = {AXI_ID_WIDTH{1'b0}} ; 
                assign mo_arprot = 3'd0 ; 
                assign mo_arlock = 1'd0 ; 
                assign mo_arqos = 4'd0 ; 
                assign mo_arregion = 4'd0 ; 
                assign mo_aruser = {AXI_USER_WIDTH{1'b0}} ; 
                assign mo_rready = 1'd0 ; 
            end
        if ((ACCESS_TYPE == 2'd1)) 
            begin : RO_ACCESS_BLK
                assign mi_awready = 1'd0 ; 
                assign mi_wready = 1'b0 ; 
                assign mi_bvalid = 1'b0 ; 
                assign mi_bid = {AXI_ID_WIDTH{1'b0}} ; 
                assign mi_bresp = 2'd0 ; 
                assign mi_buser = {AXI_USER_WIDTH{1'b0}} ; 
                assign mo_awvalid = 1'b0 ; 
                assign mo_awaddr = {AXI_ADDR_WIDTH{1'b0}} ; 
                assign mo_awsize = 3'd0 ; 
                assign mo_awlen = {AXI_LEN_WIDTH{1'b0}} ; 
                assign mo_awburst = 2'd0 ; 
                assign mo_awcache = 4'd0 ; 
                assign mo_awid = {AXI_ID_WIDTH{1'b0}} ; 
                assign mo_awprot = 3'd0 ; 
                assign mo_awlock = 1'd0 ; 
                assign mo_awqos = 4'd0 ; 
                assign mo_awregion = 4'd0 ; 
                assign mo_awuser = {AXI_USER_WIDTH{1'b0}} ; 
                assign mo_wvalid = 1'b0 ; 
                assign mo_wdata = {AXI_DATA_WIDTH{1'b0}} ; 
                assign mo_wuser = {AXI_USER_WIDTH{1'b0}} ; 
                assign mo_wstrb = {(AXI_DATA_WIDTH / 8){1'b0}} ; 
                assign mo_wlast = 1'b0 ; 
                assign mo_bready = 1'b0 ; 
            end
    endgenerate

// axi_cdc
endmodule



module axi4_interconnect_ipgen_axi_cross_bar (aclk_i, 
        aresetn_i, 
        //External master interface from MAS PORT   
    i_m_awvalid, 
        i_m_awaddr, 
        i_m_awsize, 
        i_m_awlen, 
        i_m_awburst, 
        i_m_awcache, 
        i_m_awid, 
        i_m_awprot, 
        i_m_awlock, 
        i_m_awqos, 
        i_m_awregion, 
        i_m_awuser, 
        o_m_awready, 
        o_m_split_awready, 
        i_m_wvalid, 
        i_m_wdata, 
        i_m_wstrb, 
        i_m_wlast, 
        i_m_wuser, 
        o_m_wready, 
        i_m_arvalid, 
        i_m_araddr, 
        i_m_arsize, 
        i_m_arlen, 
        i_m_arburst, 
        i_m_arcache, 
        i_m_arid, 
        i_m_arprot, 
        i_m_arlock, 
        i_m_arqos, 
        i_m_arregion, 
        i_m_aruser, 
        o_m_arready, 
        o_m_split_arready, 
        o_m_bvalid, 
        o_m_bresp, 
        o_m_bid, 
        o_m_buser, 
        i_m_bready, 
        o_m_rvalid, 
        o_m_rdata, 
        o_m_rid, 
        o_m_rlast, 
        o_m_ruser, 
        o_m_rresp, 
        i_m_rready, 
        //External slave interface to SLV PORT   
    o_s_awvalid, 
        o_s_awaddr, 
        o_s_awsize, 
        o_s_awlen, 
        o_s_awburst, 
        o_s_awcache, 
        o_s_awid, 
        o_s_awprot, 
        o_s_awlock, 
        o_s_awqos, 
        o_s_awregion, 
        o_s_awuser, 
        i_s_awready, 
        i_s_split_awready, 
        o_s_wvalid, 
        o_s_wdata, 
        o_s_wstrb, 
        o_s_wlast, 
        o_s_wuser, 
        i_s_wready, 
        o_s_arvalid, 
        o_s_araddr, 
        o_s_arsize, 
        o_s_arlen, 
        o_s_arburst, 
        o_s_arcache, 
        o_s_arid, 
        o_s_arprot, 
        o_s_arlock, 
        o_s_arqos, 
        o_s_arregion, 
        o_s_aruser, 
        i_s_arready, 
        i_s_split_arready, 
        i_s_bvalid, 
        i_s_bresp, 
        i_s_bid, 
        i_s_buser, 
        o_s_bready, 
        i_s_rvalid, 
        i_s_rdata, 
        i_s_rid, 
        i_s_rlast, 
        i_s_ruser, 
        i_s_rresp, 
        o_s_rready, 
        i_ext_mas_slv_wr_sel, 
        i_ext_mas_slv_rd_sel, 
        i_ext_mas_slv_dwr_sel, 
        i_bid_ext_slv_gnt, 
        i_rid_ext_slv_gnt, 
        o_s_ext_mas_awr_gnt, 
        o_s_ext_mas_ard_gnt, 
        o_s_ext_mas_dwr_gnt, 
        o_m_ext_slv_wrresp_gnt, 
        o_m_ext_slv_rdresp_gnt) ;
    parameter TOTAL_EXTMAS_CNT = 32 ; 
    parameter EXT_MAS_AXI_ID_WIDTH = 6 ; 
    parameter EXT_MAS_MAX_ADDR_WIDTH = 16 ; 
    parameter AXI_USER_WIDTH = 128 ; 
    parameter EXT_MAS_MAX_DATA_WIDTH = 32 ; 
    parameter TOTAL_EXTSLV_CNT = 32 ; 
    parameter EXT_SLV_AXI_ID_WIDTH = 11 ; 
    parameter EXT_SLV_MAX_ADDR_WIDTH = 16 ; 
    parameter EXT_SLV_MAX_DATA_WIDTH = 32 ; 
    parameter [((TOTAL_EXTSLV_CNT * 5) - 1):0] EXT_MAS_AWR_GNT_FF_DEPTH = {TOTAL_EXTSLV_CNT{5'd16}} ; 
    parameter [(TOTAL_EXTMAS_CNT - 1):0] ID_ORDER_EN_EXT_MAS = {TOTAL_EXTMAS_CNT{1'b0}} ; 
    parameter integer MAX_NUM_OF_ID_EXT_MAS_SUPPRT = 4 ; 
    parameter [((TOTAL_EXTMAS_CNT * 7) - 1):0] NUM_OF_ID_EXT_MAS_SUPPRT = {TOTAL_EXTMAS_CNT{7'd64}} ; 
    parameter [(TOTAL_EXTMAS_CNT - 1):0] EXT_MAS_PRIORITY_SCHEME = {TOTAL_EXTMAS_CNT{1'b0}} ; 
    parameter [(((TOTAL_EXTMAS_CNT * TOTAL_EXTSLV_CNT) * 5) - 1):0] EXT_MAS_FIXED_PRIORITY = {((TOTAL_EXTMAS_CNT * TOTAL_EXTSLV_CNT) * 5){1'b0}} ; 
    parameter [((TOTAL_EXTMAS_CNT * 2) - 1):0] EXT_MAS_ACCESS_TYPE = {TOTAL_EXTMAS_CNT{2'd2}} ; 
    parameter [TOTAL_EXTSLV_CNT:0] EXT_SLV_PRIORITY_SCHEME = {(TOTAL_EXTSLV_CNT + 1){1'b0}} ; 
    parameter [((((TOTAL_EXTSLV_CNT + 1) * TOTAL_EXTMAS_CNT) * 5) - 1):0] EXT_SLV_FIXED_PRIORITY = {(((TOTAL_EXTSLV_CNT + 1) * TOTAL_EXTMAS_CNT) * 5){1'b0}} ; 
    parameter [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] EXT_SLV_ACCESS_TYPE = {(TOTAL_EXTSLV_CNT + 1){2'd2}} ; 
    parameter LATTICE_FIFO = 1'b0 ; 
    localparam AXI4 = 0 ; 
    localparam AXI4_LITE = 1 ; 
    //================================INPUT & OUTPUTS====================================
    input aclk_i ; 
    input aresetn_i ; 
    //External master interface from MAS PORT   
    input [(TOTAL_EXTMAS_CNT - 1):0] i_m_awvalid ; 
    input [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_ADDR_WIDTH) - 1):0] i_m_awaddr ; 
    input [((TOTAL_EXTMAS_CNT * 3) - 1):0] i_m_awsize ; 
    input [((TOTAL_EXTMAS_CNT * 8) - 1):0] i_m_awlen ; 
    input [((TOTAL_EXTMAS_CNT * 2) - 1):0] i_m_awburst ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] i_m_awcache ; 
    input [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] i_m_awid ; 
    input [((TOTAL_EXTMAS_CNT * 3) - 1):0] i_m_awprot ; 
    input [((TOTAL_EXTMAS_CNT * 1) - 1):0] i_m_awlock ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] i_m_awqos ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] i_m_awregion ; 
    input [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] i_m_awuser ; 
    output [(TOTAL_EXTMAS_CNT - 1):0] o_m_awready ; 
    output [(TOTAL_EXTMAS_CNT - 1):0] o_m_split_awready ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] i_m_wvalid ; 
    input [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_DATA_WIDTH) - 1):0] i_m_wdata ; 
    input [((TOTAL_EXTMAS_CNT * (EXT_MAS_MAX_DATA_WIDTH / 8)) - 1):0] i_m_wstrb ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] i_m_wlast ; 
    input [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] i_m_wuser ; 
    output [(TOTAL_EXTMAS_CNT - 1):0] o_m_wready ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] i_m_arvalid ; 
    input [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_ADDR_WIDTH) - 1):0] i_m_araddr ; 
    input [((TOTAL_EXTMAS_CNT * 3) - 1):0] i_m_arsize ; 
    input [((TOTAL_EXTMAS_CNT * 8) - 1):0] i_m_arlen ; 
    input [((TOTAL_EXTMAS_CNT * 2) - 1):0] i_m_arburst ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] i_m_arcache ; 
    input [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] i_m_arid ; 
    input [((TOTAL_EXTMAS_CNT * 3) - 1):0] i_m_arprot ; 
    input [((TOTAL_EXTMAS_CNT * 1) - 1):0] i_m_arlock ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] i_m_arqos ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] i_m_arregion ; 
    input [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] i_m_aruser ; 
    output [(TOTAL_EXTMAS_CNT - 1):0] o_m_arready ; 
    output [(TOTAL_EXTMAS_CNT - 1):0] o_m_split_arready ; 
    output [(TOTAL_EXTMAS_CNT - 1):0] o_m_bvalid ; 
    output [((TOTAL_EXTMAS_CNT * 2) - 1):0] o_m_bresp ; 
    output [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] o_m_bid ; 
    output [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] o_m_buser ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] i_m_bready ; 
    output [(TOTAL_EXTMAS_CNT - 1):0] o_m_rvalid ; 
    output [((TOTAL_EXTMAS_CNT * EXT_SLV_MAX_DATA_WIDTH) - 1):0] o_m_rdata ; 
    output [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] o_m_rid ; 
    output [(TOTAL_EXTMAS_CNT - 1):0] o_m_rlast ; 
    output [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] o_m_ruser ; 
    output [((TOTAL_EXTMAS_CNT * 2) - 1):0] o_m_rresp ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] i_m_rready ; 
    //External slave interface to SLV PORT   
    output [TOTAL_EXTSLV_CNT:0] o_s_awvalid ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_MAX_ADDR_WIDTH) - 1):0] o_s_awaddr ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 3) - 1):0] o_s_awsize ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 8) - 1):0] o_s_awlen ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] o_s_awburst ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] o_s_awcache ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_AXI_ID_WIDTH) - 1):0] o_s_awid ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 3) - 1):0] o_s_awprot ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 1) - 1):0] o_s_awlock ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] o_s_awqos ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] o_s_awregion ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] o_s_awuser ; 
    input [TOTAL_EXTSLV_CNT:0] i_s_awready ; 
    input [TOTAL_EXTSLV_CNT:0] i_s_split_awready ; 
    output [TOTAL_EXTSLV_CNT:0] o_s_wvalid ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_MAX_DATA_WIDTH) - 1):0] o_s_wdata ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * (EXT_MAS_MAX_DATA_WIDTH / 8)) - 1):0] o_s_wstrb ; 
    output [TOTAL_EXTSLV_CNT:0] o_s_wlast ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] o_s_wuser ; 
    input [TOTAL_EXTSLV_CNT:0] i_s_wready ; 
    output [TOTAL_EXTSLV_CNT:0] o_s_arvalid ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_MAX_ADDR_WIDTH) - 1):0] o_s_araddr ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 3) - 1):0] o_s_arsize ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 8) - 1):0] o_s_arlen ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] o_s_arburst ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] o_s_arcache ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_AXI_ID_WIDTH) - 1):0] o_s_arid ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 3) - 1):0] o_s_arprot ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 1) - 1):0] o_s_arlock ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] o_s_arqos ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] o_s_arregion ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] o_s_aruser ; 
    input [TOTAL_EXTSLV_CNT:0] i_s_arready ; 
    input [TOTAL_EXTSLV_CNT:0] i_s_split_arready ; 
    input [TOTAL_EXTSLV_CNT:0] i_s_bvalid ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_AXI_ID_WIDTH) - 1):0] i_s_bid ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] i_s_bresp ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] i_s_buser ; 
    output [TOTAL_EXTSLV_CNT:0] o_s_bready ; 
    input [TOTAL_EXTSLV_CNT:0] i_s_rvalid ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_MAX_DATA_WIDTH) - 1):0] i_s_rdata ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_AXI_ID_WIDTH) - 1):0] i_s_rid ; 
    input [TOTAL_EXTSLV_CNT:0] i_s_rlast ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] i_s_ruser ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] i_s_rresp ; 
    output [TOTAL_EXTSLV_CNT:0] o_s_rready ; 
    input [((TOTAL_EXTMAS_CNT * 6) - 1):0] i_ext_mas_slv_wr_sel ; 
    input [((TOTAL_EXTMAS_CNT * 6) - 1):0] i_ext_mas_slv_rd_sel ; 
    input [((TOTAL_EXTMAS_CNT * 6) - 1):0] i_ext_mas_slv_dwr_sel ; 
    input [((MAX_NUM_OF_ID_EXT_MAS_SUPPRT * 6) - 1):0] i_bid_ext_slv_gnt [(TOTAL_EXTMAS_CNT - 1):0] ; 
    input [((MAX_NUM_OF_ID_EXT_MAS_SUPPRT * 6) - 1):0] i_rid_ext_slv_gnt [(TOTAL_EXTMAS_CNT - 1):0] ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 6) - 1):0] o_s_ext_mas_awr_gnt ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 6) - 1):0] o_s_ext_mas_ard_gnt ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 6) - 1):0] o_s_ext_mas_dwr_gnt ; 
    output [((TOTAL_EXTMAS_CNT * 6) - 1):0] o_m_ext_slv_wrresp_gnt ; 
    output [((TOTAL_EXTMAS_CNT * 6) - 1):0] o_m_ext_slv_rdresp_gnt ; 
    logic [TOTAL_EXTSLV_CNT:0] ext_mas_awr_gnt_ff_full ; 
    //AW,DW,AR,BRESP,RDATA interface 
    logic [TOTAL_EXTSLV_CNT:0] mo_s_awvalid [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_MAX_ADDR_WIDTH) - 1):0] mo_s_awaddr [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 3) - 1):0] mo_s_awsize [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 8) - 1):0] mo_s_awlen [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] mo_s_awburst [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] mo_s_awcache [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_AXI_ID_WIDTH) - 1):0] mo_s_awid [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 3) - 1):0] mo_s_awprot [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 1) - 1):0] mo_s_awlock [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] mo_s_awqos [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] mo_s_awregion [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] mo_s_awuser [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [TOTAL_EXTSLV_CNT:0] mi_s_awready [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [TOTAL_EXTSLV_CNT:0] mi_s_split_awready [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [TOTAL_EXTSLV_CNT:0] mo_s_wvalid [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [TOTAL_EXTSLV_CNT:0] mo_s_wlast [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * (EXT_MAS_MAX_DATA_WIDTH / 8)) - 1):0] mo_s_wstrb [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_MAX_DATA_WIDTH) - 1):0] mo_s_wdata [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] mo_s_wuser [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [TOTAL_EXTSLV_CNT:0] mi_s_wready [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [TOTAL_EXTSLV_CNT:0] mo_s_arvalid [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_MAX_ADDR_WIDTH) - 1):0] mo_s_araddr [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 3) - 1):0] mo_s_arsize [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 8) - 1):0] mo_s_arlen [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] mo_s_arburst [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] mo_s_arcache [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_AXI_ID_WIDTH) - 1):0] mo_s_arid [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 3) - 1):0] mo_s_arprot [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 1) - 1):0] mo_s_arlock [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] mo_s_arqos [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] mo_s_arregion [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] mo_s_aruser [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [TOTAL_EXTSLV_CNT:0] mi_s_arready [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [TOTAL_EXTSLV_CNT:0] mi_s_split_arready [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] so_m_bvalid [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] so_m_bid [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * 2) - 1):0] so_m_bresp [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] so_m_buser [TOTAL_EXTSLV_CNT:0] ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] so_m_bready [TOTAL_EXTSLV_CNT:0] ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] so_m_rvalid [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_SLV_MAX_DATA_WIDTH) - 1):0] so_m_rdata [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] so_m_rid [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * 2) - 1):0] so_m_rresp [TOTAL_EXTSLV_CNT:0] ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] so_m_rlast [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] so_m_ruser [TOTAL_EXTSLV_CNT:0] ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] si_m_rready [TOTAL_EXTSLV_CNT:0] ; 
    //AW,DW,AR,BRESP,RDATA arbitration
    logic [(TOTAL_EXTMAS_CNT - 1):0] multi_mas_to_slv_awvalid [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_SLV_MAX_ADDR_WIDTH) - 1):0] multi_mas_to_slv_awaddr [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * 3) - 1):0] multi_mas_to_slv_awsize [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * 8) - 1):0] multi_mas_to_slv_awlen [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * 2) - 1):0] multi_mas_to_slv_awburst [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * 4) - 1):0] multi_mas_to_slv_awcache [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] multi_mas_to_slv_awid [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * 3) - 1):0] multi_mas_to_slv_awprot [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * 1) - 1):0] multi_mas_to_slv_awlock [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * 4) - 1):0] multi_mas_to_slv_awqos [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * 4) - 1):0] multi_mas_to_slv_awregion [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] multi_mas_to_slv_awuser [TOTAL_EXTSLV_CNT:0] ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] slv_to_multi_mas_awready [TOTAL_EXTSLV_CNT:0] ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] slv_to_multi_mas_split_awready [TOTAL_EXTSLV_CNT:0] ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] multi_mas_to_slv_wvalid [TOTAL_EXTSLV_CNT:0] ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] multi_mas_to_slv_wlast [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * (EXT_MAS_MAX_DATA_WIDTH / 8)) - 1):0] multi_mas_to_slv_wstrb [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_DATA_WIDTH) - 1):0] multi_mas_to_slv_wdata [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] multi_mas_to_slv_wuser [TOTAL_EXTSLV_CNT:0] ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] slv_to_multi_mas_wready [TOTAL_EXTSLV_CNT:0] ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] multi_mas_to_slv_arvalid [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_SLV_MAX_ADDR_WIDTH) - 1):0] multi_mas_to_slv_araddr [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * 3) - 1):0] multi_mas_to_slv_arsize [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * 8) - 1):0] multi_mas_to_slv_arlen [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * 2) - 1):0] multi_mas_to_slv_arburst [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * 4) - 1):0] multi_mas_to_slv_arcache [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] multi_mas_to_slv_arid [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * 3) - 1):0] multi_mas_to_slv_arprot [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * 1) - 1):0] multi_mas_to_slv_arlock [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * 4) - 1):0] multi_mas_to_slv_arqos [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * 4) - 1):0] multi_mas_to_slv_arregion [TOTAL_EXTSLV_CNT:0] ; 
    logic [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] multi_mas_to_slv_aruser [TOTAL_EXTSLV_CNT:0] ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] slv_to_multi_mas_arready [TOTAL_EXTSLV_CNT:0] ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] slv_to_multi_mas_split_arready [TOTAL_EXTSLV_CNT:0] ; 
    logic [TOTAL_EXTSLV_CNT:0] multi_slv_to_mas_bvalid [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_AXI_ID_WIDTH) - 1):0] multi_slv_to_mas_bid [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] multi_slv_to_mas_bresp [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] multi_slv_to_mas_buser [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [((TOTAL_EXTSLV_CNT + 1) - 1):0] mas_to_multi_slv_bready [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [TOTAL_EXTSLV_CNT:0] multi_slv_to_mas_rvalid [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_MAX_DATA_WIDTH) - 1):0] multi_slv_to_mas_rdata [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_AXI_ID_WIDTH) - 1):0] multi_slv_to_mas_rid [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] multi_slv_to_mas_rresp [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [TOTAL_EXTSLV_CNT:0] multi_slv_to_mas_rlast [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] multi_slv_to_mas_ruser [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [TOTAL_EXTSLV_CNT:0] mas_to_multi_slv_rready [(TOTAL_EXTMAS_CNT - 1):0] ; 
    generate
        genvar slv_cnt ; 
        genvar mas_cnt ; 
        for (slv_cnt = 0;(slv_cnt <= TOTAL_EXTSLV_CNT);slv_cnt = (slv_cnt + 1))
        begin : genblk1
            for (mas_cnt = 0;(mas_cnt < TOTAL_EXTMAS_CNT);mas_cnt = (mas_cnt + 1))
            begin : genblk1
                //AW
                assign multi_mas_to_slv_awvalid[slv_cnt][mas_cnt] = mo_s_awvalid[mas_cnt][slv_cnt] ; 
                assign multi_mas_to_slv_awaddr[slv_cnt][(mas_cnt * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_MAX_ADDR_WIDTH] = mo_s_awaddr[mas_cnt][(slv_cnt * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_MAX_ADDR_WIDTH] ; 
                assign multi_mas_to_slv_awsize[slv_cnt][(mas_cnt * 3) +: 3] = mo_s_awsize[mas_cnt][(slv_cnt * 3) +: 3] ; 
                assign multi_mas_to_slv_awlen[slv_cnt][(mas_cnt * 8) +: 8] = mo_s_awlen[mas_cnt][(slv_cnt * 8) +: 8] ; 
                assign multi_mas_to_slv_awburst[slv_cnt][(mas_cnt * 2) +: 2] = mo_s_awburst[mas_cnt][(slv_cnt * 2) +: 2] ; 
                assign multi_mas_to_slv_awcache[slv_cnt][(mas_cnt * 4) +: 4] = mo_s_awcache[mas_cnt][(slv_cnt * 4) +: 4] ; 
                assign multi_mas_to_slv_awid[slv_cnt][(mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = mo_s_awid[mas_cnt][(slv_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] ; 
                assign multi_mas_to_slv_awprot[slv_cnt][(mas_cnt * 3) +: 3] = mo_s_awprot[mas_cnt][(slv_cnt * 3) +: 3] ; 
                assign multi_mas_to_slv_awlock[slv_cnt][(mas_cnt * 1) +: 1] = mo_s_awlock[mas_cnt][(slv_cnt * 1) +: 1] ; 
                assign multi_mas_to_slv_awqos[slv_cnt][(mas_cnt * 4) +: 4] = mo_s_awqos[mas_cnt][(slv_cnt * 4) +: 4] ; 
                assign multi_mas_to_slv_awregion[slv_cnt][(mas_cnt * 4) +: 4] = mo_s_awregion[mas_cnt][(slv_cnt * 4) +: 4] ; 
                assign multi_mas_to_slv_awuser[slv_cnt][(mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = mo_s_awuser[mas_cnt][(slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ; 
                assign mi_s_awready[mas_cnt][slv_cnt] = slv_to_multi_mas_awready[slv_cnt][mas_cnt] ; 
                assign mi_s_split_awready[mas_cnt][slv_cnt] = slv_to_multi_mas_split_awready[slv_cnt][mas_cnt] ; 
                //WDATA
                assign multi_mas_to_slv_wvalid[slv_cnt][mas_cnt] = mo_s_wvalid[mas_cnt][slv_cnt] ; 
                assign multi_mas_to_slv_wlast[slv_cnt][mas_cnt] = mo_s_wlast[mas_cnt][slv_cnt] ; 
                assign multi_mas_to_slv_wstrb[slv_cnt][(mas_cnt * (EXT_MAS_MAX_DATA_WIDTH / 8)) +: (EXT_MAS_MAX_DATA_WIDTH / 8)] = mo_s_wstrb[mas_cnt][(slv_cnt * (EXT_MAS_MAX_DATA_WIDTH / 8)) +: (EXT_MAS_MAX_DATA_WIDTH / 8)] ; 
                assign multi_mas_to_slv_wdata[slv_cnt][(mas_cnt * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_MAX_DATA_WIDTH] = mo_s_wdata[mas_cnt][(slv_cnt * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_MAX_DATA_WIDTH] ; 
                assign multi_mas_to_slv_wuser[slv_cnt][(mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = mo_s_wuser[mas_cnt][(slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ; 
                assign mi_s_wready[mas_cnt][slv_cnt] = slv_to_multi_mas_wready[slv_cnt][mas_cnt] ; 
                //AR
                assign multi_mas_to_slv_arvalid[slv_cnt][mas_cnt] = mo_s_arvalid[mas_cnt][slv_cnt] ; 
                assign multi_mas_to_slv_araddr[slv_cnt][(mas_cnt * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_MAX_ADDR_WIDTH] = mo_s_araddr[mas_cnt][(slv_cnt * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_MAX_ADDR_WIDTH] ; 
                assign multi_mas_to_slv_arsize[slv_cnt][(mas_cnt * 3) +: 3] = mo_s_arsize[mas_cnt][(slv_cnt * 3) +: 3] ; 
                assign multi_mas_to_slv_arlen[slv_cnt][(mas_cnt * 8) +: 8] = mo_s_arlen[mas_cnt][(slv_cnt * 8) +: 8] ; 
                assign multi_mas_to_slv_arburst[slv_cnt][(mas_cnt * 2) +: 2] = mo_s_arburst[mas_cnt][(slv_cnt * 2) +: 2] ; 
                assign multi_mas_to_slv_arcache[slv_cnt][(mas_cnt * 4) +: 4] = mo_s_arcache[mas_cnt][(slv_cnt * 4) +: 4] ; 
                assign multi_mas_to_slv_arid[slv_cnt][(mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = mo_s_arid[mas_cnt][(slv_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] ; 
                assign multi_mas_to_slv_arprot[slv_cnt][(mas_cnt * 3) +: 3] = mo_s_arprot[mas_cnt][(slv_cnt * 3) +: 3] ; 
                assign multi_mas_to_slv_arlock[slv_cnt][(mas_cnt * 1) +: 1] = mo_s_arlock[mas_cnt][(slv_cnt * 1) +: 1] ; 
                assign multi_mas_to_slv_arqos[slv_cnt][(mas_cnt * 4) +: 4] = mo_s_arqos[mas_cnt][(slv_cnt * 4) +: 4] ; 
                assign multi_mas_to_slv_arregion[slv_cnt][(mas_cnt * 4) +: 4] = mo_s_arregion[mas_cnt][(slv_cnt * 4) +: 4] ; 
                assign multi_mas_to_slv_aruser[slv_cnt][(mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = mo_s_aruser[mas_cnt][(slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ; 
                assign mi_s_arready[mas_cnt][slv_cnt] = slv_to_multi_mas_arready[slv_cnt][mas_cnt] ; 
                assign mi_s_split_arready[mas_cnt][slv_cnt] = slv_to_multi_mas_split_arready[slv_cnt][mas_cnt] ; 
            end
        end
        for (mas_cnt = 0;(mas_cnt < TOTAL_EXTMAS_CNT);mas_cnt = (mas_cnt + 1))
        begin : genblk2
            for (slv_cnt = 0;(slv_cnt <= TOTAL_EXTSLV_CNT);slv_cnt = (slv_cnt + 1))
            begin : genblk1
                //BRESP
                assign multi_slv_to_mas_bvalid[mas_cnt][slv_cnt] = so_m_bvalid[slv_cnt][mas_cnt] ; 
                assign multi_slv_to_mas_bid[mas_cnt][(slv_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = so_m_bid[slv_cnt][(mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] ; 
                assign multi_slv_to_mas_bresp[mas_cnt][(slv_cnt * 2) +: 2] = so_m_bresp[slv_cnt][(mas_cnt * 2) +: 2] ; 
                assign multi_slv_to_mas_buser[mas_cnt][(slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = so_m_buser[slv_cnt][(mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ; 
                assign so_m_bready[slv_cnt][mas_cnt] = mas_to_multi_slv_bready[mas_cnt][slv_cnt] ; 
                //RRESP
                assign multi_slv_to_mas_rvalid[mas_cnt][slv_cnt] = so_m_rvalid[slv_cnt][mas_cnt] ; 
                assign multi_slv_to_mas_rdata[mas_cnt][(slv_cnt * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_MAX_DATA_WIDTH] = so_m_rdata[slv_cnt][(mas_cnt * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_MAX_DATA_WIDTH] ; 
                assign multi_slv_to_mas_rid[mas_cnt][(slv_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = so_m_rid[slv_cnt][(mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] ; 
                assign multi_slv_to_mas_rresp[mas_cnt][(slv_cnt * 2) +: 2] = so_m_rresp[slv_cnt][(mas_cnt * 2) +: 2] ; 
                assign multi_slv_to_mas_ruser[mas_cnt][(slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = so_m_ruser[slv_cnt][(mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ; 
                assign multi_slv_to_mas_rlast[mas_cnt][slv_cnt] = so_m_rlast[slv_cnt][mas_cnt] ; 
                assign si_m_rready[slv_cnt][mas_cnt] = mas_to_multi_slv_rready[mas_cnt][slv_cnt] ; 
            end
        end
    endgenerate
    //===================================================================================
    //*********************External MASTER Interface Instantiation************************
    //===================================================================================
    generate
        genvar i ; 
        for (i = 0;(i < TOTAL_EXTMAS_CNT);i = (i + 1))
        begin : extmas_blk
            localparam NUM_OF_ID_EXT_MAS_SUPPRT_INT = {NUM_OF_ID_EXT_MAS_SUPPRT[(i * 7) +: 7]} ; 
            //for - total_extmas_cnt
            localparam ID_ORDER_EN_EXT_MAS_INT = ID_ORDER_EN_EXT_MAS[i] ; 
            localparam EXT_MAS_PRIORITY_SCHEME_INT = EXT_MAS_PRIORITY_SCHEME[i] ; 
            localparam EXT_MAS_FIXED_PRIORITY_INT = EXT_MAS_FIXED_PRIORITY[(i * (TOTAL_EXTSLV_CNT * 5)) +: (TOTAL_EXTSLV_CNT * 5)] ; 
            localparam EXT_MAS_ACCESS_TYPE_INT = EXT_MAS_ACCESS_TYPE[(i * 2) +: 2] ; 
            if (((EXT_MAS_ACCESS_TYPE_INT == 2'd0) || (EXT_MAS_ACCESS_TYPE_INT == 2'd2))) 
                begin : WO_WR_ACCESS_BLK
                    axi4_interconnect_ipgen_ext_mas_awr_ifc #(.TOTAL_EXTSLV_CNT(TOTAL_EXTSLV_CNT),
                            .EXT_MAS_AXI_ADDR_WIDTH(EXT_MAS_MAX_ADDR_WIDTH),
                            .EXT_MAS_AXI_ID_WIDTH(EXT_MAS_AXI_ID_WIDTH),
                            .EXT_SLV_AXI_ADDR_WIDTH(EXT_SLV_MAX_ADDR_WIDTH),
                            .AXI_USER_WIDTH(AXI_USER_WIDTH)) u_ext_mas_awr_ifc (.mi_awvalid(i_m_awvalid[i]), 
                                .mi_awaddr(i_m_awaddr[(i * EXT_MAS_MAX_ADDR_WIDTH) +: EXT_MAS_MAX_ADDR_WIDTH]), 
                                .mi_awsize(i_m_awsize[(i * 3) +: 3]), 
                                .mi_awlen(i_m_awlen[(i * 8) +: 8]), 
                                .mi_awburst(i_m_awburst[(i * 2) +: 2]), 
                                .mi_awcache(i_m_awcache[(i * 4) +: 4]), 
                                .mi_awid(i_m_awid[(i * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                                .mi_awprot(i_m_awprot[(i * 3) +: 3]), 
                                .mi_awlock(i_m_awlock[(i * 1) +: 1]), 
                                .mi_awqos(i_m_awqos[(i * 4) +: 4]), 
                                .mi_awregion(i_m_awregion[(i * 4) +: 4]), 
                                .mi_awuser(i_m_awuser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mo_awready(o_m_awready[i]), 
                                .mo_split_awready(o_m_split_awready[i]), 
                                .mo_s_awvalid(mo_s_awvalid[i]), 
                                .mo_s_awaddr(mo_s_awaddr[i]), 
                                .mo_s_awsize(mo_s_awsize[i]), 
                                .mo_s_awlen(mo_s_awlen[i]), 
                                .mo_s_awburst(mo_s_awburst[i]), 
                                .mo_s_awcache(mo_s_awcache[i]), 
                                .mo_s_awid(mo_s_awid[i]), 
                                .mo_s_awprot(mo_s_awprot[i]), 
                                .mo_s_awlock(mo_s_awlock[i]), 
                                .mo_s_awqos(mo_s_awqos[i]), 
                                .mo_s_awregion(mo_s_awregion[i]), 
                                .mo_s_awuser(mo_s_awuser[i]), 
                                .mi_s_awready(mi_s_awready[i]), 
                                .mi_s_split_awready(mi_s_split_awready[i]), 
                                .mi_ext_mas_slv_wr_sel(i_ext_mas_slv_wr_sel[(i * 6) +: 6])) ; 
                    //===================================================================================
                    // MASTER Write Data Interface
                    //===================================================================================
                    axi4_interconnect_ipgen_ext_mas_dwr_ifc #(.TOTAL_EXTSLV_CNT(TOTAL_EXTSLV_CNT),
                            .EXT_MAS_AXI_DATA_WIDTH(EXT_MAS_MAX_DATA_WIDTH),
                            .AXI_USER_WIDTH(AXI_USER_WIDTH)) u_ext_mas_dwr_ifc (.mi_wvalid(i_m_wvalid[i]), 
                                .mi_wlast(i_m_wlast[i]), 
                                .mi_wstrb(i_m_wstrb[(i * (EXT_MAS_MAX_DATA_WIDTH / 8)) +: (EXT_MAS_MAX_DATA_WIDTH / 8)]), 
                                .mi_wdata(i_m_wdata[(i * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_MAX_DATA_WIDTH]), 
                                .mi_wuser(i_m_wuser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mo_wready(o_m_wready[i]), 
                                .mo_s_wvalid(mo_s_wvalid[i]), 
                                .mo_s_wlast(mo_s_wlast[i]), 
                                .mo_s_wstrb(mo_s_wstrb[i]), 
                                .mo_s_wdata(mo_s_wdata[i]), 
                                .mo_s_wuser(mo_s_wuser[i]), 
                                .mi_s_wready(mi_s_wready[i]), 
                                .mi_slv_dwr_sel(i_ext_mas_slv_dwr_sel[(i * 6) +: 6])) ; 
                    //===================================================================================
                    // MASTER Write Response Arbitration 
                    //===================================================================================
                    if ((ID_ORDER_EN_EXT_MAS_INT == 1'b1)) 
                        begin : wr_ord_suprt_blk
                            axi4_interconnect_ipgen_ext_mas_wrresp_ord_suprt_arb #(.TOTAL_EXTSLV_CNT(TOTAL_EXTSLV_CNT),
                                    .EXT_MAS_AXI_ID_WIDTH(EXT_MAS_AXI_ID_WIDTH),
                                    .AXI_USER_WIDTH(AXI_USER_WIDTH),
                                    .NUM_OF_ID_EXT_MAS_SUPPRT(NUM_OF_ID_EXT_MAS_SUPPRT_INT),
                                    .MAX_NUM_OF_ID_EXT_MAS_SUPPRT(MAX_NUM_OF_ID_EXT_MAS_SUPPRT)) u_ext_mas_wrresp_ord_suprt_arb (.aclk_i(aclk_i), 
                                        .aresetn_i(aresetn_i), 
                                        .mo_bvalid(o_m_bvalid[i]), 
                                        .mo_bid(o_m_bid[(i * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                                        .mo_bresp(o_m_bresp[(i * 2) +: 2]), 
                                        .mo_buser(o_m_buser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                        .mi_bready(i_m_bready[i]), 
                                        .mi_bid_slv_gnt(i_bid_ext_slv_gnt[i]), 
                                        .mo_slv_wrresp_gnt(o_m_ext_slv_wrresp_gnt[(i * 6) +: 6]), 
                                        .sj_mi_bvalid(multi_slv_to_mas_bvalid[i]), 
                                        .sj_mi_bid(multi_slv_to_mas_bid[i]), 
                                        .sj_mi_bresp(multi_slv_to_mas_bresp[i]), 
                                        .sj_mi_buser(multi_slv_to_mas_buser[i]), 
                                        .sj_mo_bready(mas_to_multi_slv_bready[i])) ; 
                        end
                    else
                        begin : wr_ord_disable_blk
                            axi4_interconnect_ipgen_ext_mas_wrresp_arb #(.TOTAL_EXTSLV_CNT(TOTAL_EXTSLV_CNT),
                                    .EXT_MAS_AXI_ID_WIDTH(EXT_MAS_AXI_ID_WIDTH),
                                    .EXT_MAS_PRIORITY_SCHEME(EXT_MAS_PRIORITY_SCHEME_INT),
                                    .AXI_USER_WIDTH(AXI_USER_WIDTH),
                                    .EXT_MAS_FIXED_GNT(EXT_MAS_FIXED_PRIORITY_INT)) u_ext_mas_wrresp_arb (.aclk_i(aclk_i), 
                                        .aresetn_i(aresetn_i), 
                                        .mo_bvalid(o_m_bvalid[i]), 
                                        .mo_bid(o_m_bid[(i * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                                        .mo_bresp(o_m_bresp[(i * 2) +: 2]), 
                                        .mo_buser(o_m_buser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                        .mi_bready(i_m_bready[i]), 
                                        .sj_mi_bvalid(multi_slv_to_mas_bvalid[i]), 
                                        .sj_mi_bid(multi_slv_to_mas_bid[i]), 
                                        .sj_mi_bresp(multi_slv_to_mas_bresp[i]), 
                                        .sj_mi_buser(multi_slv_to_mas_buser[i]), 
                                        .sj_mo_bready(mas_to_multi_slv_bready[i])) ; 
                        end
                end
            if (((EXT_MAS_ACCESS_TYPE_INT == 2'd1) || (EXT_MAS_ACCESS_TYPE_INT == 2'd2))) 
                begin : RO_WR_ACCESS_BLK
                    //===================================================================================
                    //External MASTER Address Read Interface
                    //===================================================================================
                    axi4_interconnect_ipgen_ext_mas_ard_ifc #(.TOTAL_EXTSLV_CNT(TOTAL_EXTSLV_CNT),
                            .EXT_MAS_AXI_ADDR_WIDTH(EXT_MAS_MAX_ADDR_WIDTH),
                            .EXT_MAS_AXI_ID_WIDTH(EXT_MAS_AXI_ID_WIDTH),
                            .EXT_SLV_AXI_ADDR_WIDTH(EXT_SLV_MAX_ADDR_WIDTH),
                            .AXI_USER_WIDTH(AXI_USER_WIDTH),
                            .EXT_SLV_AXI_ID_WIDTH(EXT_SLV_AXI_ID_WIDTH)) u_ext_mas_ard_ifc (.mi_arvalid(i_m_arvalid[i]), 
                                .mi_araddr(i_m_araddr[(i * EXT_MAS_MAX_ADDR_WIDTH) +: EXT_MAS_MAX_ADDR_WIDTH]), 
                                .mi_arsize(i_m_arsize[(i * 3) +: 3]), 
                                .mi_arlen(i_m_arlen[(i * 8) +: 8]), 
                                .mi_arburst(i_m_arburst[(i * 2) +: 2]), 
                                .mi_arcache(i_m_arcache[(i * 4) +: 4]), 
                                .mi_arid(i_m_arid[(i * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                                .mi_arprot(i_m_arprot[(i * 3) +: 3]), 
                                .mi_arlock(i_m_arlock[(i * 1) +: 1]), 
                                .mi_arqos(i_m_arqos[(i * 4) +: 4]), 
                                .mi_arregion(i_m_arregion[(i * 4) +: 4]), 
                                .mi_aruser(i_m_aruser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mo_arready(o_m_arready[i]), 
                                .mo_split_arready(o_m_split_arready[i]), 
                                .mo_s_arvalid(mo_s_arvalid[i]), 
                                .mo_s_araddr(mo_s_araddr[i]), 
                                .mo_s_arsize(mo_s_arsize[i]), 
                                .mo_s_arlen(mo_s_arlen[i]), 
                                .mo_s_arburst(mo_s_arburst[i]), 
                                .mo_s_arcache(mo_s_arcache[i]), 
                                .mo_s_arid(mo_s_arid[i]), 
                                .mo_s_arprot(mo_s_arprot[i]), 
                                .mo_s_arlock(mo_s_arlock[i]), 
                                .mo_s_arqos(mo_s_arqos[i]), 
                                .mo_s_arregion(mo_s_arregion[i]), 
                                .mo_s_aruser(mo_s_aruser[i]), 
                                .mi_s_arready(mi_s_arready[i]), 
                                .mi_s_split_arready(mi_s_split_arready[i]), 
                                .mi_ext_mas_slv_rd_sel(i_ext_mas_slv_rd_sel[(i * 6) +: 6])) ; 
                    //===================================================================================
                    // MASTER Read Response Arbitration 
                    //===================================================================================
                    if ((ID_ORDER_EN_EXT_MAS_INT == 1'b1)) 
                        begin : rd_ord_suprt_blk
                            axi4_interconnect_ipgen_ext_mas_rdresp_ord_suprt_arb #(.TOTAL_EXTSLV_CNT(TOTAL_EXTSLV_CNT),
                                    .EXT_MAS_AXI_ID_WIDTH(EXT_MAS_AXI_ID_WIDTH),
                                    .AXI_USER_WIDTH(AXI_USER_WIDTH),
                                    .EXT_MAS_AXI_DATA_WIDTH(EXT_SLV_MAX_DATA_WIDTH),
                                    .NUM_OF_ID_EXT_MAS_SUPPRT(NUM_OF_ID_EXT_MAS_SUPPRT_INT),
                                    .MAX_NUM_OF_ID_EXT_MAS_SUPPRT(MAX_NUM_OF_ID_EXT_MAS_SUPPRT)) u_ext_mas_rdresp_ord_suprt_arb (.aclk_i(aclk_i), 
                                        .aresetn_i(aresetn_i), 
                                        .mo_rvalid(o_m_rvalid[i]), 
                                        .mo_rid(o_m_rid[(i * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                                        .mo_rresp(o_m_rresp[(i * 2) +: 2]), 
                                        .mo_rlast(o_m_rlast[i]), 
                                        .mo_rdata(o_m_rdata[(i * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_MAX_DATA_WIDTH]), 
                                        .mo_ruser(o_m_ruser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                        .mi_rready(i_m_rready[i]), 
                                        .mi_rid_slv_gnt(i_rid_ext_slv_gnt[i]), 
                                        .mo_slv_rdresp_gnt(o_m_ext_slv_rdresp_gnt[(i * 6) +: 6]), 
                                        .sj_mi_rvalid(multi_slv_to_mas_rvalid[i]), 
                                        .sj_mi_rid(multi_slv_to_mas_rid[i]), 
                                        .sj_mi_rresp(multi_slv_to_mas_rresp[i]), 
                                        .sj_mi_rlast(multi_slv_to_mas_rlast[i]), 
                                        .sj_mi_rdata(multi_slv_to_mas_rdata[i]), 
                                        .sj_mi_ruser(multi_slv_to_mas_ruser[i]), 
                                        .sj_mo_rready(mas_to_multi_slv_rready[i])) ; 
                        end
                    else
                        begin : rd_ord_disable_blk
                            axi4_interconnect_ipgen_ext_mas_rdresp_arb #(.TOTAL_EXTSLV_CNT(TOTAL_EXTSLV_CNT),
                                    .EXT_MAS_AXI_ID_WIDTH(EXT_MAS_AXI_ID_WIDTH),
                                    .AXI_USER_WIDTH(AXI_USER_WIDTH),
                                    .EXT_MAS_AXI_DATA_WIDTH(EXT_SLV_MAX_DATA_WIDTH),
                                    .EXT_MAS_PRIORITY_SCHEME(EXT_MAS_PRIORITY_SCHEME_INT),
                                    .EXT_MAS_FIXED_GNT(EXT_MAS_FIXED_PRIORITY_INT)) u_ext_mas_rdresp_arb (.aclk_i(aclk_i), 
                                        .aresetn_i(aresetn_i), 
                                        .mo_rvalid(o_m_rvalid[i]), 
                                        .mo_rid(o_m_rid[(i * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                                        .mo_rresp(o_m_rresp[(i * 2) +: 2]), 
                                        .mo_rlast(o_m_rlast[i]), 
                                        .mo_rdata(o_m_rdata[(i * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_MAX_DATA_WIDTH]), 
                                        .mo_ruser(o_m_ruser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                        .mi_rready(i_m_rready[i]), 
                                        .mo_slv_rdresp_gnt(o_m_ext_slv_rdresp_gnt[(i * 6) +: 6]), 
                                        .sj_mi_rvalid(multi_slv_to_mas_rvalid[i]), 
                                        .sj_mi_rid(multi_slv_to_mas_rid[i]), 
                                        .sj_mi_rresp(multi_slv_to_mas_rresp[i]), 
                                        .sj_mi_rlast(multi_slv_to_mas_rlast[i]), 
                                        .sj_mi_rdata(multi_slv_to_mas_rdata[i]), 
                                        .sj_mi_ruser(multi_slv_to_mas_ruser[i]), 
                                        .sj_mo_rready(mas_to_multi_slv_rready[i])) ; 
                        end
                end
            if ((EXT_MAS_ACCESS_TYPE_INT == 2'd0)) 
                begin : WO_ACCESS_BLK
                    assign o_m_arready[i] = 1'b0 ; 
                    assign o_m_split_arready[i] = 1'b0 ; 
                    assign mo_s_arvalid[i] = {(TOTAL_EXTSLV_CNT + 1){1'b0}} ; 
                    assign mo_s_araddr[i] = {((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_MAX_ADDR_WIDTH){1'b0}} ; 
                    assign mo_s_arsize[i] = {((TOTAL_EXTSLV_CNT + 1) * 3){1'b0}} ; 
                    assign mo_s_arlen[i] = {((TOTAL_EXTSLV_CNT + 1) * 8){1'b0}} ; 
                    assign mo_s_arburst[i] = {((TOTAL_EXTSLV_CNT + 1) * 2){1'b0}} ; 
                    assign mo_s_arcache[i] = {((TOTAL_EXTSLV_CNT + 1) * 4){1'b0}} ; 
                    assign mo_s_arid[i] = {((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_AXI_ID_WIDTH){1'b0}} ; 
                    assign mo_s_arprot[i] = {((TOTAL_EXTSLV_CNT + 1) * 3){1'b0}} ; 
                    assign mo_s_arlock[i] = {((TOTAL_EXTSLV_CNT + 1) * 1){1'b0}} ; 
                    assign mo_s_arqos[i] = {((TOTAL_EXTSLV_CNT + 1) * 4){1'b0}} ; 
                    assign mo_s_arregion[i] = {((TOTAL_EXTSLV_CNT + 1) * 4){1'b0}} ; 
                    assign mo_s_aruser[i] = {((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH){1'b0}} ; 
                    assign o_m_rvalid[i] = 1'b0 ; 
                    assign o_m_rid[(i * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ; 
                    assign o_m_rresp[(i * 2) +: 2] = 2'd0 ; 
                    assign o_m_rlast[i] = 1'b0 ; 
                    assign o_m_rdata[(i * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_MAX_DATA_WIDTH] = {EXT_SLV_MAX_DATA_WIDTH{1'b0}} ; 
                    assign o_m_ruser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = {AXI_USER_WIDTH{1'b0}} ; 
                    assign o_m_ext_slv_rdresp_gnt[(i * 6) +: 6] = 6'd0 ; 
                    assign mas_to_multi_slv_rready[i] = {(TOTAL_EXTSLV_CNT + 1){1'b0}} ; 
                end
            if ((EXT_MAS_ACCESS_TYPE_INT == 2'd1)) 
                begin : RO_ACCESS_BLK
                    assign o_m_awready[i] = 1'b0 ; 
                    assign o_m_split_awready[i] = 1'b0 ; 
                    assign mo_s_awvalid[i] = {(TOTAL_EXTSLV_CNT + 1){1'b0}} ; 
                    assign mo_s_awaddr[i] = {((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_MAX_ADDR_WIDTH){1'b0}} ; 
                    assign mo_s_awsize[i] = {((TOTAL_EXTSLV_CNT + 1) * 3){1'b0}} ; 
                    assign mo_s_awlen[i] = {((TOTAL_EXTSLV_CNT + 1) * 8){1'b0}} ; 
                    assign mo_s_awburst[i] = {((TOTAL_EXTSLV_CNT + 1) * 2){1'b0}} ; 
                    assign mo_s_awcache[i] = {((TOTAL_EXTSLV_CNT + 1) * 4){1'b0}} ; 
                    assign mo_s_awid[i] = {((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_AXI_ID_WIDTH){1'b0}} ; 
                    assign mo_s_awprot[i] = {((TOTAL_EXTSLV_CNT + 1) * 3){1'b0}} ; 
                    assign mo_s_awlock[i] = {((TOTAL_EXTSLV_CNT + 1) * 1){1'b0}} ; 
                    assign mo_s_awqos[i] = {((TOTAL_EXTSLV_CNT + 1) * 4){1'b0}} ; 
                    assign mo_s_awregion[i] = {((TOTAL_EXTSLV_CNT + 1) * 4){1'b0}} ; 
                    assign mo_s_awuser[i] = {((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH){1'b0}} ; 
                    assign o_m_wready[i] = 1'b0 ; 
                    assign mo_s_wvalid[i] = {(TOTAL_EXTSLV_CNT + 1){1'b0}} ; 
                    assign mo_s_wlast[i] = {(TOTAL_EXTSLV_CNT + 1){1'b0}} ; 
                    assign mo_s_wdata[i] = {((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_MAX_DATA_WIDTH){1'b0}} ; 
                    assign mo_s_wstrb[i] = {((TOTAL_EXTSLV_CNT + 1) * (EXT_MAS_MAX_DATA_WIDTH / 8)){1'b0}} ; 
                    assign mo_s_wuser[i] = {((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH){1'b0}} ; 
                    assign o_m_bvalid[i] = 1'b0 ; 
                    assign o_m_bid[(i * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ; 
                    assign o_m_bresp[(i * 2) +: 2] = 2'd0 ; 
                    assign o_m_buser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = {AXI_USER_WIDTH{1'b0}} ; 
                    assign o_m_ext_slv_wrresp_gnt[(i * 6) +: 6] = 6'd0 ; 
                    assign mas_to_multi_slv_bready[i] = {(TOTAL_EXTSLV_CNT + 1){1'b0}} ; 
                end
        end
        genvar j ; 
        for (j = 0;(j <= TOTAL_EXTSLV_CNT);j = (j + 1))
        begin : extslv_blk
            localparam EXT_SLV_PRIORITY_SCHEME_INT = EXT_SLV_PRIORITY_SCHEME[j] ; 
            //for - total_extslv_cnt
            localparam [((TOTAL_EXTMAS_CNT * 5) - 1):0] EXT_SLV_FIXED_PRIORITY_INT = EXT_SLV_FIXED_PRIORITY[(j * (TOTAL_EXTMAS_CNT * 5)) +: (TOTAL_EXTMAS_CNT * 5)] ; 
            localparam EXT_SLV_ACCESS_TYPE_INT = EXT_SLV_ACCESS_TYPE[(j * 2) +: 2] ; 
            localparam EXT_MAS_AWR_GNT_FF_DEPTH_INT = ((j == TOTAL_EXTSLV_CNT) ? 1 : ((EXT_MAS_AWR_GNT_FF_DEPTH[(j * 5) +: 5] == 1) ? 2 : ((EXT_MAS_AWR_GNT_FF_DEPTH[(j * 5) +: 5] <= 3) ? 4 : ((EXT_MAS_AWR_GNT_FF_DEPTH[(j * 5) +: 5] <= 7) ? 8 : ((EXT_MAS_AWR_GNT_FF_DEPTH[(j * 5) +: 5] <= 15) ? 16 : 32))))) ; 
            if (((EXT_SLV_ACCESS_TYPE_INT == 2'd0) || (EXT_SLV_ACCESS_TYPE_INT == 2'd2))) 
                begin : WO_WR_ACCESS_BLK
                    //===================================================================================
                    // SLAVE Write Response Interface 
                    //===================================================================================
                    axi4_interconnect_ipgen_ext_slv_wrresp_ifc #(.TOTAL_EXTMAS_CNT(TOTAL_EXTMAS_CNT),
                            .EXT_MAS_AXI_ID_WIDTH(EXT_MAS_AXI_ID_WIDTH),
                            .AXI_USER_WIDTH(AXI_USER_WIDTH),
                            .EXT_SLV_AXI_ID_WIDTH(EXT_SLV_AXI_ID_WIDTH)) u_ext_slv_wrresp_ifc (.aclk_i(aclk_i), 
                                .aresetn_i(aresetn_i), 
                                .si_bvalid(i_s_bvalid[j]), 
                                .si_bid(i_s_bid[(j * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                                .si_bresp(i_s_bresp[(j * 2) +: 2]), 
                                .si_buser(i_s_buser[(j * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .so_bready(o_s_bready[j]), 
                                .so_m_bvalid(so_m_bvalid[j]), 
                                .so_m_bid(so_m_bid[j]), 
                                .so_m_bresp(so_m_bresp[j]), 
                                .so_m_buser(so_m_buser[j]), 
                                .si_m_bready(so_m_bready[j])) ; 
                    //===================================================================================
                    // SLAVE Address Write Interface arbitration
                    //===================================================================================
                    axi4_interconnect_ipgen_ext_slv_awr_arb #(.TOTAL_EXTMAS_CNT(TOTAL_EXTMAS_CNT),
                            .EXT_SLV_MAX_ADDR_WIDTH(EXT_SLV_MAX_ADDR_WIDTH),
                            .EXT_SLV_AXI_ID_WIDTH(EXT_SLV_AXI_ID_WIDTH),
                            .AXI_USER_WIDTH(AXI_USER_WIDTH),
                            .EXT_SLV_PRIORITY_SCHEME(EXT_SLV_PRIORITY_SCHEME_INT),
                            .EXT_MAS_AXI_ID_WIDTH(EXT_MAS_AXI_ID_WIDTH),
                            .EXT_SLV_FIXED_GNT(EXT_SLV_FIXED_PRIORITY_INT)) u_ext_slv_awr_arb (.aclk_i(aclk_i), 
                                .aresetn_i(aresetn_i), 
                                .so_awvalid(o_s_awvalid[j]), 
                                .so_awaddr(o_s_awaddr[(j * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_MAX_ADDR_WIDTH]), 
                                .so_awsize(o_s_awsize[(j * 3) +: 3]), 
                                .so_awlen(o_s_awlen[(j * 8) +: 8]), 
                                .so_awburst(o_s_awburst[(j * 2) +: 2]), 
                                .so_awcache(o_s_awcache[(j * 4) +: 4]), 
                                .so_awid(o_s_awid[(j * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                                .so_awprot(o_s_awprot[(j * 3) +: 3]), 
                                .so_awlock(o_s_awlock[(j * 1) +: 1]), 
                                .so_awqos(o_s_awqos[(j * 4) +: 4]), 
                                .so_awregion(o_s_awregion[(j * 4) +: 4]), 
                                .so_awuser(o_s_awuser[(j * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .si_awready(i_s_awready[j]), 
                                .si_split_awready(i_s_split_awready[j]), 
                                .mi_sj_awvalid(multi_mas_to_slv_awvalid[j]), 
                                .mi_sj_awaddr(multi_mas_to_slv_awaddr[j]), 
                                .mi_sj_awsize(multi_mas_to_slv_awsize[j]), 
                                .mi_sj_awlen(multi_mas_to_slv_awlen[j]), 
                                .mi_sj_awburst(multi_mas_to_slv_awburst[j]), 
                                .mi_sj_awcache(multi_mas_to_slv_awcache[j]), 
                                .mi_sj_awid(multi_mas_to_slv_awid[j]), 
                                .mi_sj_awprot(multi_mas_to_slv_awprot[j]), 
                                .mi_sj_awlock(multi_mas_to_slv_awlock[j]), 
                                .mi_sj_awqos(multi_mas_to_slv_awqos[j]), 
                                .mi_sj_awregion(multi_mas_to_slv_awregion[j]), 
                                .mi_sj_awuser(multi_mas_to_slv_awuser[j]), 
                                .mo_sj_awready(slv_to_multi_mas_awready[j]), 
                                .mo_sj_split_awready(slv_to_multi_mas_split_awready[j]), 
                                .sj_ext_mas_awr_gnt(o_s_ext_mas_awr_gnt[(j * 6) +: 6]),  // hold the master number for which grant is given
                            .ext_mas_awr_gnt_ff_full(ext_mas_awr_gnt_ff_full[j])) ; 
                    //===================================================================================
                    // SLAVE Write Data Interface arbitration
                    //===================================================================================
                    if ((j == TOTAL_EXTSLV_CNT)) 
                        begin : def_slave
                            axi4_interconnect_ipgen_ext_slv_dwr_arb #(.TOTAL_EXTMAS_CNT(TOTAL_EXTMAS_CNT),
                                    .AXI_USER_WIDTH(AXI_USER_WIDTH),
                                    .EXT_MAS_MAX_DATA_WIDTH(EXT_MAS_MAX_DATA_WIDTH),
                                    .EXT_MAS_AWR_GNT_FF_DEPTH(1),
                                    .LATTICE_FIFO(LATTICE_FIFO)) u_ext_slv_dwr_arb (// since this has to match with the issue capacity of default slave which is 1
                                    //.EXT_MAS_AWR_GNT_FF_DEPTH(EXT_MAS_AWR_GNT_FF_DEPTH)  ,
                                    .aclk_i(aclk_i), 
                                        .aresetn_i(aresetn_i), 
                                        .so_wvalid(o_s_wvalid[j]), 
                                        .so_wdata(o_s_wdata[(j * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_MAX_DATA_WIDTH]), 
                                        .so_wstrb(o_s_wstrb[(j * (EXT_MAS_MAX_DATA_WIDTH / 8)) +: (EXT_MAS_MAX_DATA_WIDTH / 8)]), 
                                        .so_wlast(o_s_wlast[j]), 
                                        .so_wuser(o_s_wuser[(j * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                        .si_wready(i_s_wready[j]), 
                                        .sj_awvalid(o_s_awvalid[j]), 
                                        .sj_awready(i_s_awready[j]),  //differnt
                                    .sj_ext_mas_awr_gnt(o_s_ext_mas_awr_gnt[(j * 6) +: 6]), 
                                        .ext_mas_awr_gnt_ff_full(ext_mas_awr_gnt_ff_full[j]), 
                                        .mi_sj_wvalid(multi_mas_to_slv_wvalid[j]), 
                                        .mi_sj_wdata(multi_mas_to_slv_wdata[j]), 
                                        .mi_sj_wstrb(multi_mas_to_slv_wstrb[j]), 
                                        .mi_sj_wlast(multi_mas_to_slv_wlast[j]), 
                                        .mi_sj_wuser(multi_mas_to_slv_wuser[j]), 
                                        .mo_sj_wready(slv_to_multi_mas_wready[j]), 
                                        .sj_ext_mas_dwr_gnt(o_s_ext_mas_dwr_gnt[(j * 6) +: 6])) ; 
                        end
                    else
                        begin : ext_slave
                            axi4_interconnect_ipgen_ext_slv_dwr_arb #(.TOTAL_EXTMAS_CNT(TOTAL_EXTMAS_CNT),
                                    .AXI_USER_WIDTH(AXI_USER_WIDTH),
                                    .EXT_MAS_MAX_DATA_WIDTH(EXT_MAS_MAX_DATA_WIDTH),
                                    .EXT_MAS_AWR_GNT_FF_DEPTH(EXT_MAS_AWR_GNT_FF_DEPTH_INT),
                                    .LATTICE_FIFO(LATTICE_FIFO)) u_ext_slv_dwr_arb (//.EXT_MAS_AWR_GNT_FF_DEPTH(EXT_MAS_AWR_GNT_FF_DEPTH) ,
                                    .aclk_i(aclk_i), 
                                        .aresetn_i(aresetn_i), 
                                        .so_wvalid(o_s_wvalid[j]), 
                                        .so_wdata(o_s_wdata[(j * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_MAX_DATA_WIDTH]), 
                                        .so_wstrb(o_s_wstrb[(j * (EXT_MAS_MAX_DATA_WIDTH / 8)) +: (EXT_MAS_MAX_DATA_WIDTH / 8)]), 
                                        .so_wlast(o_s_wlast[j]), 
                                        .so_wuser(o_s_wuser[(j * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                        .si_wready(i_s_wready[j]), 
                                        .sj_awvalid(o_s_awvalid[j]), 
                                        .sj_awready(i_s_split_awready[j]),  //different
                                    .sj_ext_mas_awr_gnt(o_s_ext_mas_awr_gnt[(j * 6) +: 6]), 
                                        .ext_mas_awr_gnt_ff_full(ext_mas_awr_gnt_ff_full[j]), 
                                        .mi_sj_wvalid(multi_mas_to_slv_wvalid[j]), 
                                        .mi_sj_wdata(multi_mas_to_slv_wdata[j]), 
                                        .mi_sj_wstrb(multi_mas_to_slv_wstrb[j]), 
                                        .mi_sj_wlast(multi_mas_to_slv_wlast[j]), 
                                        .mi_sj_wuser(multi_mas_to_slv_wuser[j]), 
                                        .mo_sj_wready(slv_to_multi_mas_wready[j]), 
                                        .sj_ext_mas_dwr_gnt(o_s_ext_mas_dwr_gnt[(j * 6) +: 6])) ; 
                        end
                end
            if (((EXT_SLV_ACCESS_TYPE_INT == 2'd1) || (EXT_SLV_ACCESS_TYPE_INT == 2'd2))) 
                begin : RO_WR_ACCESS_BLK
                    //===================================================================================
                    // SLAVE Read Response Interface 
                    //===================================================================================
                    axi4_interconnect_ipgen_ext_slv_rdresp_ifc #(.TOTAL_EXTMAS_CNT(TOTAL_EXTMAS_CNT),
                            .EXT_MAS_AXI_ID_WIDTH(EXT_MAS_AXI_ID_WIDTH),
                            .AXI_USER_WIDTH(AXI_USER_WIDTH),
                            .EXT_SLV_AXI_ID_WIDTH(EXT_SLV_AXI_ID_WIDTH),
                            .EXT_SLV_AXI_DATA_WIDTH(EXT_SLV_MAX_DATA_WIDTH)) u_ext_slv_rdresp_ifc (.aclk_i(aclk_i), 
                                .aresetn_i(aresetn_i), 
                                .si_rvalid(i_s_rvalid[j]), 
                                .si_rdata(i_s_rdata[(j * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_MAX_DATA_WIDTH]), 
                                .si_rid(i_s_rid[(j * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                                .si_rresp(i_s_rresp[(j * 2) +: 2]), 
                                .si_rlast(i_s_rlast[j]), 
                                .si_ruser(i_s_ruser[(j * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .so_rready(o_s_rready[j]), 
                                .so_m_rvalid(so_m_rvalid[j]), 
                                .so_m_rdata(so_m_rdata[j]), 
                                .so_m_rid(so_m_rid[j]), 
                                .so_m_rresp(so_m_rresp[j]), 
                                .so_m_rlast(so_m_rlast[j]), 
                                .so_m_ruser(so_m_ruser[j]), 
                                .si_m_rready(si_m_rready[j])) ; 
                    //===================================================================================
                    // SLAVE Address Read Interface arbitration
                    //===================================================================================
                    axi4_interconnect_ipgen_ext_slv_ard_arb #(.TOTAL_EXTMAS_CNT(TOTAL_EXTMAS_CNT),
                            .EXT_SLV_MAX_ADDR_WIDTH(EXT_SLV_MAX_ADDR_WIDTH),
                            .AXI_USER_WIDTH(AXI_USER_WIDTH),
                            .EXT_SLV_AXI_ID_WIDTH(EXT_SLV_AXI_ID_WIDTH),
                            .EXT_SLV_PRIORITY_SCHEME(EXT_SLV_PRIORITY_SCHEME_INT),
                            .EXT_MAS_AXI_ID_WIDTH(EXT_MAS_AXI_ID_WIDTH),
                            .EXT_SLV_FIXED_GNT(EXT_SLV_FIXED_PRIORITY_INT)) u_ext_slv_ard_arb (.aclk_i(aclk_i), 
                                .aresetn_i(aresetn_i), 
                                .so_arvalid(o_s_arvalid[j]), 
                                .so_araddr(o_s_araddr[(j * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_MAX_ADDR_WIDTH]), 
                                .so_arsize(o_s_arsize[(j * 3) +: 3]), 
                                .so_arlen(o_s_arlen[(j * 8) +: 8]), 
                                .so_arburst(o_s_arburst[(j * 2) +: 2]), 
                                .so_arcache(o_s_arcache[(j * 4) +: 4]), 
                                .so_arid(o_s_arid[(j * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                                .so_arprot(o_s_arprot[(j * 3) +: 3]), 
                                .so_arlock(o_s_arlock[(j * 1) +: 1]), 
                                .so_arqos(o_s_arqos[(j * 4) +: 4]), 
                                .so_arregion(o_s_arregion[(j * 4) +: 4]), 
                                .so_aruser(o_s_aruser[(j * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .si_arready(i_s_arready[j]), 
                                .si_split_arready(i_s_split_arready[j]), 
                                .mi_sj_arvalid(multi_mas_to_slv_arvalid[j]), 
                                .mi_sj_araddr(multi_mas_to_slv_araddr[j]), 
                                .mi_sj_arsize(multi_mas_to_slv_arsize[j]), 
                                .mi_sj_arlen(multi_mas_to_slv_arlen[j]), 
                                .mi_sj_arburst(multi_mas_to_slv_arburst[j]), 
                                .mi_sj_arcache(multi_mas_to_slv_arcache[j]), 
                                .mi_sj_arid(multi_mas_to_slv_arid[j]), 
                                .mi_sj_arprot(multi_mas_to_slv_arprot[j]), 
                                .mi_sj_arlock(multi_mas_to_slv_arlock[j]), 
                                .mi_sj_arqos(multi_mas_to_slv_arqos[j]), 
                                .mi_sj_arregion(multi_mas_to_slv_arregion[j]), 
                                .mi_sj_aruser(multi_mas_to_slv_aruser[j]), 
                                .mo_sj_arready(slv_to_multi_mas_arready[j]), 
                                .mo_sj_split_arready(slv_to_multi_mas_split_arready[j]), 
                                .sj_ext_mas_ard_gnt(o_s_ext_mas_ard_gnt[(j * 6) +: 6]) // hold the master number for which grant is given
                            ) ; 
                end
            if ((EXT_SLV_ACCESS_TYPE_INT == 2'd0)) 
                begin : WO_ACCESS_BLK
                    assign o_s_rready[j] = 1'b0 ; 
                    assign so_m_rvalid[j] = {TOTAL_EXTMAS_CNT{1'b0}} ; 
                    assign so_m_rdata[j] = {(TOTAL_EXTMAS_CNT * EXT_SLV_MAX_DATA_WIDTH){1'b0}} ; 
                    assign so_m_rid[j] = {(TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH){1'b0}} ; 
                    assign so_m_rresp[j] = {(TOTAL_EXTMAS_CNT * 2){1'b0}} ; 
                    assign so_m_rlast[j] = {TOTAL_EXTMAS_CNT{1'b0}} ; 
                    assign so_m_ruser[j] = {(TOTAL_EXTMAS_CNT * AXI_USER_WIDTH){1'b0}} ; 
                    assign o_s_arvalid[j] = 1'b0 ; 
                    assign o_s_araddr[(j * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_MAX_ADDR_WIDTH] = {EXT_SLV_MAX_ADDR_WIDTH{1'b0}} ; 
                    assign o_s_arsize[(j * 3) +: 3] = 3'd0 ; 
                    assign o_s_arlen[(j * 8) +: 8] = 8'd0 ; 
                    assign o_s_arburst[(j * 2) +: 2] = 2'd0 ; 
                    assign o_s_arcache[(j * 4) +: 4] = 4'd0 ; 
                    assign o_s_arid[(j * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH] = {EXT_SLV_AXI_ID_WIDTH{1'b0}} ; 
                    assign o_s_arprot[(j * 3) +: 3] = 3'd0 ; 
                    assign o_s_arlock[(j * 1) +: 1] = 1'd0 ; 
                    assign o_s_arqos[(j * 4) +: 4] = 4'd0 ; 
                    assign o_s_arregion[(j * 4) +: 4] = 4'd0 ; 
                    assign o_s_aruser[(j * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = {AXI_USER_WIDTH{1'b0}} ; 
                    assign slv_to_multi_mas_arready[j] = {TOTAL_EXTMAS_CNT{1'b0}} ; 
                    assign slv_to_multi_mas_split_arready[j] = {TOTAL_EXTMAS_CNT{1'b0}} ; 
                    assign o_s_ext_mas_ard_gnt[(j * 6) +: 6] = 6'd0 ; 
                end
            if ((EXT_SLV_ACCESS_TYPE_INT == 2'd1)) 
                begin : RO_ACCESS_BLK
                    assign o_s_bready[j] = 1'b0 ; 
                    assign so_m_bvalid[j] = {TOTAL_EXTMAS_CNT{1'b0}} ; 
                    assign so_m_bid[j] = {(TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH){1'b0}} ; 
                    assign so_m_bresp[j] = {(TOTAL_EXTMAS_CNT * 2){1'b0}} ; 
                    assign so_m_buser[j] = {(TOTAL_EXTMAS_CNT * AXI_USER_WIDTH){1'b0}} ; 
                    assign o_s_awvalid[j] = 1'b0 ; 
                    assign o_s_awaddr[(j * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_MAX_ADDR_WIDTH] = {EXT_SLV_MAX_ADDR_WIDTH{1'b0}} ; 
                    assign o_s_awsize[(j * 3) +: 3] = 3'd0 ; 
                    assign o_s_awlen[(j * 8) +: 8] = 8'd0 ; 
                    assign o_s_awburst[(j * 2) +: 2] = 2'd0 ; 
                    assign o_s_awcache[(j * 4) +: 4] = 4'd0 ; 
                    assign o_s_awid[(j * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH] = {EXT_SLV_AXI_ID_WIDTH{1'b0}} ; 
                    assign o_s_awprot[(j * 3) +: 3] = 3'd0 ; 
                    assign o_s_awlock[(j * 1) +: 1] = 1'd0 ; 
                    assign o_s_awqos[(j * 4) +: 4] = 4'd0 ; 
                    assign o_s_awregion[(j * 4) +: 4] = 4'd0 ; 
                    assign o_s_awuser[(j * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = {AXI_USER_WIDTH{1'b0}} ; 
                    assign slv_to_multi_mas_awready[j] = {TOTAL_EXTMAS_CNT{1'b0}} ; 
                    assign slv_to_multi_mas_split_awready[j] = {TOTAL_EXTMAS_CNT{1'b0}} ; 
                    assign o_s_ext_mas_awr_gnt[(j * 6) +: 6] = 6'd0 ; 
                    assign o_s_wvalid[j] = 1'b0 ; 
                    assign o_s_wdata[(j * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_MAX_DATA_WIDTH] = {EXT_MAS_MAX_DATA_WIDTH{1'b0}} ; 
                    assign o_s_wstrb[(j * (EXT_MAS_MAX_DATA_WIDTH / 8)) +: (EXT_MAS_MAX_DATA_WIDTH / 8)] = {(EXT_MAS_MAX_DATA_WIDTH / 8){1'b0}} ; 
                    assign o_s_wlast[j] = 1'b0 ; 
                    assign o_s_wuser[(j * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = {AXI_USER_WIDTH{1'b0}} ; 
                    assign slv_to_multi_mas_wready[j] = {TOTAL_EXTMAS_CNT{1'b0}} ; 
                    assign o_s_ext_mas_dwr_gnt[(j * 6) +: 6] = 6'd0 ; 
                end
        end
    endgenerate

// axi_cross_bar
endmodule



`timescale 1ns/1ps
module axi4_interconnect_ipgen_b_cdc_ifc (mi_bvalid, 
        mi_bresp, 
        mi_bid, 
        mi_buser, 
        mi_bready, 
        mi_aclk, 
        mi_rst_n, 
        mo_bvalid, 
        mo_bresp, 
        mo_bid, 
        mo_buser, 
        mo_bready, 
        mo_aclk, 
        mo_rst_n) ;
    parameter AXI_ID_WIDTH = 12 ; 
    parameter AXI_USER_WIDTH = 4 ; 
    parameter BRESP_FIFO_DEPTH = 8 ; 
    localparam PTR_WIDTH = clog2(BRESP_FIFO_DEPTH) ; 
    localparam DEPTH = (BRESP_FIFO_DEPTH - 1) ; 
    localparam BRESP_FIFO_DATA_WIDTH = ((AXI_ID_WIDTH + AXI_USER_WIDTH) + 3) ; 
    // Function Definition
    function integer clog2( 
        input integer depth )  ; 
        begin
            //if (depth == 0)
            if (((depth == 0) || (depth == 1))) 
                clog2 = 1 ;
            else
                for (clog2 = 0 ; (depth > 1) ; clog2 = (clog2 + 1))
                    //for (clog2 = 0; depth > 1;  clog2 = clog2 + 1)
                    depth = (depth >> 1) ;
        end
    endfunction
    //*********************************INPUTS & OUTPUTS************************************
    input mi_aclk ; 
    input mi_rst_n ; 
    input mi_bvalid ; 
    input [(AXI_ID_WIDTH - 1):0] mi_bid ; 
    input [1:0] mi_bresp ; 
    input [(AXI_USER_WIDTH - 1):0] mi_buser ; 
    output logic mi_bready ; 
    input mo_aclk ; 
    input mo_rst_n ; 
    output logic mo_bvalid ; 
    output logic [(AXI_ID_WIDTH - 1):0] mo_bid ; 
    output logic [1:0] mo_bresp ; 
    output logic [(AXI_USER_WIDTH - 1):0] mo_buser ; 
    input mo_bready ; 
    //===================================================================================
    logic nxt_mo_bvalid ; 
    logic [(AXI_ID_WIDTH - 1):0] nxt_mo_bid ; 
    logic [1:0] nxt_mo_bresp ; 
    logic [(AXI_USER_WIDTH - 1):0] nxt_mo_buser ; 
    logic mo_b_ff_rden ; 
    logic mi_b_ff_wren ; 
    logic b_ff_empty ; 
    logic b_ff_full ; 
    logic b_ff_pre_full ; 
    logic [(BRESP_FIFO_DATA_WIDTH - 1):0] mi_b_ff_wdata ; 
    logic [(BRESP_FIFO_DATA_WIDTH - 1):0] mo_b_ff_rdata ; 
    logic [(BRESP_FIFO_DATA_WIDTH - 1):0] mo_b_ff_rdata_reg ; 
    logic rdata_valid_reg, 
        nxt_rdata_valid_reg ; 
    logic [(PTR_WIDTH - 1):0] ram_write_addr ; 
    logic [(PTR_WIDTH - 1):0] ram_read_addr ; 
    logic ram_write_strobe ; 
    logic ram_read_strobe ; 
    axi4_interconnect_ipgen_gen_fifo_async_ctl #(PTR_WIDTH) u_mas_b_ff (// Outputs
            .wdepth(), 
                .rdepth(), 
                .ram_write_strobe(ram_write_strobe), 
                .ram_write_addr(ram_write_addr), 
                .ram_read_strobe(ram_read_strobe), 
                .ram_read_addr(ram_read_addr), 
                .full(b_ff_full), 
                .pre_full(b_ff_pre_full), 
                .empty(b_ff_empty), 
                .dout_v(rdata_valid), 
                // Inputs
            .wusable(1'b1), 
                .wclk(mi_aclk), 
                .wreset((~mi_rst_n)), 
                .rusable(1'b1), 
                .rclk(mo_aclk), 
                .rreset((~mo_rst_n)), 
                .push(mi_b_ff_wren), 
                .pop(mo_b_ff_rden)) ; 
    axi4_interconnect_ipgen_mem_1w1r #(PTR_WIDTH,
            BRESP_FIFO_DATA_WIDTH,
            DEPTH) u_mas_b_ff_mem (.wclk(mi_aclk), 
                .waddr(ram_write_addr), 
                .wen(ram_write_strobe), 
                .wdata(mi_b_ff_wdata), 
                .rclk(mo_aclk), 
                .raddr(ram_read_addr), 
                .ren(ram_read_strobe), 
                .rdata(mo_b_ff_rdata)) ; 
    // MI clock interface
    always
        @(posedge mi_aclk or 
            negedge mi_rst_n)
        begin
            if ((~mi_rst_n)) 
                begin
                    mi_bready <=  1'b1 ;
                end
            else
                begin
                    mi_bready <=  ((!b_ff_full) & (!b_ff_pre_full)) ;
                end
        end
    assign mi_b_ff_wren = ((mi_bvalid & mi_bready) & (~b_ff_full)) ; 
    assign mi_b_ff_wdata = {mi_buser,
                mi_bid,
                mi_bresp,
                mi_bvalid} ; 
    // MO clock interface
    always
        @(posedge mo_aclk or 
            negedge mo_rst_n)
        begin
            if ((~mo_rst_n)) 
                begin
                    mo_b_ff_rdata_reg <=  {BRESP_FIFO_DATA_WIDTH{1'b0}} ;
                    rdata_valid_reg <=  1'b0 ;
                    mo_bvalid <=  1'd0 ;
                    mo_bresp <=  2'd0 ;
                    mo_bid <=  {AXI_ID_WIDTH{1'b0}} ;
                    mo_buser <=  {AXI_USER_WIDTH{1'b0}} ;
                end
            else
                begin
                    mo_b_ff_rdata_reg <=  (rdata_valid ? mo_b_ff_rdata : mo_b_ff_rdata_reg) ;
                    rdata_valid_reg <=  nxt_rdata_valid_reg ;
                    mo_bvalid <=  nxt_mo_bvalid ;
                    mo_bresp <=  nxt_mo_bresp ;
                    mo_bid <=  nxt_mo_bid ;
                    mo_buser <=  nxt_mo_buser ;
                end
        end
    assign mo_b_ff_rden = ((~b_ff_empty) ? ((((mo_bvalid & rdata_valid) & (!mo_bready)) || rdata_valid_reg) ? 1'b0 : 1'b1) : 1'b0) ; 
    always
        @(*)
        begin
            nxt_rdata_valid_reg = (rdata_valid_reg ? (!mo_bready) : (((mo_bvalid & rdata_valid) & (!mo_bready)) ? 1'b1 : rdata_valid_reg)) ;
            nxt_mo_bvalid = mo_bvalid ;
            nxt_mo_bresp = mo_bresp ;
            nxt_mo_bid = mo_bid ;
            nxt_mo_buser = mo_buser ;
            if ((((mo_bvalid & mo_bready) & rdata_valid) || ((!mo_bvalid) & rdata_valid))) 
                begin
                    nxt_mo_bvalid = mo_b_ff_rdata[0] ;
                    nxt_mo_bresp = mo_b_ff_rdata[2:1] ;
                    nxt_mo_bid = mo_b_ff_rdata[(AXI_ID_WIDTH + 2):3] ;
                    nxt_mo_buser = mo_b_ff_rdata[((AXI_ID_WIDTH + AXI_USER_WIDTH) + 2):(AXI_ID_WIDTH + 3)] ;
                end
            else
                if (((mo_bvalid & mo_bready) & rdata_valid_reg)) 
                    begin
                        nxt_mo_bvalid = mo_b_ff_rdata_reg[0] ;
                        nxt_mo_bresp = mo_b_ff_rdata_reg[2:1] ;
                        nxt_mo_bid = mo_b_ff_rdata_reg[(AXI_ID_WIDTH + 2):3] ;
                        nxt_mo_buser = mo_b_ff_rdata_reg[((AXI_ID_WIDTH + AXI_USER_WIDTH) + 2):(AXI_ID_WIDTH + 3)] ;
                    end
                else
                    begin
                        nxt_mo_bvalid = ((mo_bvalid & mo_bready) ? 1'b0 : mo_bvalid) ;
                    end
        end

// b_cdc_ifc 
endmodule



//===================================================================================
//
// Default Slave Port
//
//===================================================================================
module axi4_interconnect_ipgen_def_slave (aclk, 
        areset_n, 
        s_awvalid, 
        s_awid, 
        s_awuser, 
        s_awready, 
        s_split_awready, 
        s_wvalid, 
        s_wlast, 
        s_wready, 
        s_arvalid, 
        s_arid, 
        s_arlen, 
        s_aruser, 
        s_split_arready, 
        s_arready, 
        s_bready, 
        s_bvalid, 
        s_bresp, 
        s_buser, 
        s_bid, 
        s_rready, 
        s_rdata, 
        s_rvalid, 
        s_rid, 
        s_ruser, 
        s_rlast, 
        s_rresp) ;
    parameter EXT_SLV_AXI_ADDR_WIDTH = 32 ; 
    parameter EXT_SLV_AXI_DATA_WIDTH = 32 ; 
    parameter EXT_SLV_AXI_ID_WIDTH = 11 ; 
    parameter EXT_MAS_MAX_DATA_WIDTH = 32 ; 
    parameter AXI_USER_WIDTH = 128 ; 
    //===================================INPUTS & OUTPUTS=================================
    input aclk ; 
    input areset_n ; 
    input s_awvalid ; 
    input [(EXT_SLV_AXI_ID_WIDTH - 1):0] s_awid ; 
    input [(AXI_USER_WIDTH - 1):0] s_awuser ; 
    output logic s_awready ; 
    output logic s_split_awready ; 
    input s_wvalid ; 
    input s_wlast ; 
    output logic s_wready ; 
    input s_arvalid ; 
    input [(EXT_SLV_AXI_ID_WIDTH - 1):0] s_arid ; 
    input [7:0] s_arlen ; 
    input [(AXI_USER_WIDTH - 1):0] s_aruser ; 
    output logic s_split_arready ; 
    output logic s_arready ; 
    output logic s_bvalid ; 
    output logic [1:0] s_bresp ; 
    output logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] s_bid ; 
    output logic [(AXI_USER_WIDTH - 1):0] s_buser ; 
    input s_bready ; 
    output logic [(EXT_SLV_AXI_DATA_WIDTH - 1):0] s_rdata ; 
    output logic s_rvalid ; 
    output logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] s_rid ; 
    output logic s_rlast ; 
    output logic [1:0] s_rresp ; 
    output logic [(AXI_USER_WIDTH - 1):0] s_ruser ; 
    input s_rready ; 
    //===================================================================================
    parameter WR_IDLE = 2'b00 ; 
    parameter WR_DATA = 2'b01 ; 
    parameter WR_RESP = 2'b10 ; 
    parameter RD_IDLE = 2'b01 ; 
    parameter RD_DATA = 2'b10 ; 
    logic [1:0] cur_wr_state, 
        nxt_wr_state ; 
    logic nxt_s_awready ; 
    logic nxt_s_split_awready ; 
    logic nxt_s_wready ; 
    logic nxt_s_bvalid ; 
    logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] nxt_s_bid ; 
    logic [(AXI_USER_WIDTH - 1):0] nxt_s_buser ; 
    logic [1:0] cur_rd_state, 
        nxt_rd_state ; 
    logic nxt_s_arready ; 
    logic nxt_s_split_arready ; 
    logic [7:0] nxt_rd_len_cnt, 
        rd_len_cnt ; 
    logic nxt_s_rvalid ; 
    logic nxt_s_rlast ; 
    logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] nxt_s_rid ; 
    logic [(AXI_USER_WIDTH - 1):0] nxt_s_ruser ; 
    //===================================================================================
    // Write Transaction
    //===================================================================================
    assign s_bresp = 2'd3 ; //decoder error
    always
        @(*)
        begin
            nxt_wr_state = cur_wr_state ;
            nxt_s_wready = s_wready ;
            nxt_s_awready = s_awready ;
            nxt_s_split_awready = s_split_awready ;
            nxt_s_bvalid = s_bvalid ;
            nxt_s_bid = s_bid ;
            nxt_s_buser = s_buser ;
            case (cur_wr_state)
            WR_IDLE : 
                begin
                    if ((s_awvalid & s_awready)) 
                        begin
                            nxt_s_awready = 1'b0 ;
                            nxt_s_split_awready = 1'b0 ;
                            nxt_s_wready = 1'b1 ;
                            nxt_wr_state = WR_DATA ;
                            nxt_s_bid = s_awid ;
                            nxt_s_buser = s_awuser ;
                        end
                    else
                        begin
                            nxt_wr_state = cur_wr_state ;
                            nxt_s_wready = s_wready ;
                        end
                end
            WR_DATA : 
                begin
                    if ((s_wvalid & s_wlast)) 
                        begin
                            nxt_wr_state = WR_RESP ;
                            nxt_s_wready = 1'b0 ;
                            nxt_s_bvalid = 1'b1 ;
                            nxt_s_bid = s_bid ;
                            nxt_s_buser = s_buser ;
                        end
                    else
                        begin
                            nxt_s_wready = s_wready ;
                            nxt_wr_state = cur_wr_state ;
                        end
                end
            WR_RESP : 
                begin
                    if ((s_bvalid & s_bready)) 
                        begin
                            nxt_wr_state = WR_IDLE ;
                            nxt_s_bvalid = 1'b0 ;
                            nxt_s_awready = 1'b1 ;
                            nxt_s_split_awready = 1'b1 ;
                        end
                    else
                        begin
                            nxt_wr_state = cur_wr_state ;
                        end
                end
            default : 
                begin
                    nxt_wr_state = WR_IDLE ;
                end
            endcase 
        end
    always
        @(posedge aclk or 
            negedge areset_n)
        begin
            if ((~areset_n)) 
                begin
                    cur_wr_state <=  WR_IDLE ;
                    s_awready <=  1'b1 ;
                    s_split_awready <=  1'b1 ;
                    s_wready <=  1'b0 ;
                    s_bvalid <=  1'b0 ;
                    s_bid <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                    s_buser <=  {AXI_USER_WIDTH{1'b0}} ;
                end
            else
                begin
                    cur_wr_state <=  nxt_wr_state ;
                    s_awready <=  nxt_s_awready ;
                    s_split_awready <=  nxt_s_split_awready ;
                    s_wready <=  nxt_s_wready ;
                    s_bvalid <=  nxt_s_bvalid ;
                    s_bid <=  nxt_s_bid ;
                    s_buser <=  nxt_s_buser ;
                end
        end
    always
        @(*)
        begin
            nxt_s_arready = s_arready ;
            nxt_s_split_arready = s_split_arready ;
            nxt_rd_len_cnt = rd_len_cnt ;
            nxt_s_rvalid = s_rvalid ;
            nxt_s_rlast = s_rlast ;
            nxt_s_rid = s_rid ;
            nxt_s_ruser = s_ruser ;
            case (cur_rd_state)
            RD_IDLE : 
                begin
                    if ((s_arvalid & s_arready)) 
                        begin
                            nxt_s_arready = 1'b0 ;
                            nxt_s_split_arready = 1'b0 ;
                            nxt_rd_len_cnt = s_arlen ;
                            nxt_s_rvalid = 1'b1 ;
                            nxt_s_rlast = ((|s_arlen) ? 1'b0 : 1'b1) ;
                            nxt_s_rid = s_arid ;
                            nxt_s_ruser = s_aruser ;
                            nxt_rd_state = RD_DATA ;
                        end
                    else
                        begin
                            nxt_rd_state = cur_rd_state ;
                        end
                end
            RD_DATA : 
                begin
                    if ((s_rvalid & s_rready)) 
                        begin
                            nxt_s_arready = (s_rlast ? 1'b1 : s_arready) ;
                            nxt_s_split_arready = (s_rlast ? 1'b1 : s_split_arready) ;
                            nxt_rd_state = (s_rlast ? RD_IDLE : cur_rd_state) ;
                            nxt_s_rvalid = (s_rlast ? 1'b0 : 1'b1) ;
                            nxt_s_rlast = ((rd_len_cnt == 'd1) ? 1'b1 : 1'b0) ;
                            nxt_rd_len_cnt = ((|rd_len_cnt) ? (rd_len_cnt - 1'd1) : rd_len_cnt) ;
                        end
                    else
                        begin
                            nxt_rd_state = cur_rd_state ;
                        end
                end
            default : 
                begin
                    nxt_rd_state = RD_IDLE ;
                end
            endcase 
        end
    assign s_rdata = {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ; 
    assign s_rresp = 2'd3 ; //decoder error
    always
        @(posedge aclk or 
            negedge areset_n)
        begin
            if ((~areset_n)) 
                begin
                    cur_rd_state <=  RD_IDLE ;
                    s_arready <=  1'b1 ;
                    s_split_arready <=  1'b1 ;
                    rd_len_cnt <=  8'd0 ;
                    s_rvalid <=  1'b0 ;
                    s_rlast <=  1'b0 ;
                    s_rid <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                    s_ruser <=  {AXI_USER_WIDTH{1'b0}} ;
                end
            else
                begin
                    cur_rd_state <=  nxt_rd_state ;
                    s_arready <=  nxt_s_arready ;
                    s_split_arready <=  nxt_s_split_arready ;
                    rd_len_cnt <=  nxt_rd_len_cnt ;
                    s_rvalid <=  nxt_s_rvalid ;
                    s_rlast <=  nxt_s_rlast ;
                    s_rid <=  nxt_s_rid ;
                    s_ruser <=  nxt_s_ruser ;
                end
        end

// def_slave
endmodule



`timescale 1ns/1ps
module axi4_interconnect_ipgen_ext_mas_adr_dec (aclk_i, 
        aresetn_i, 
        ext_mas_addr_valid, 
        ext_mas_addr, 
        ext_slv_sel) ;
    parameter TOTAL_EXTSLV_CNT = 2 ; 
    parameter EXT_MAS_AXI_ADDR_WIDTH = 32 ; 
    parameter EXT_SLV_MAX_FRAGMENT_CNT = 8 ; 
    parameter [((TOTAL_EXTSLV_CNT * 4) - 1):0] EXT_SLV_FRAGMENT_CNT = {TOTAL_EXTSLV_CNT{4'd8}} ; 
    //localparam ADDR_WIDTH_BITS          = EXT_MAS_MAX_ADDR_WIDTH * EXT_SLV_MAX_FRAGMENT_CNT;
    //localparam ADDR_WIDTH_BITS          = 64 * EXT_SLV_MAX_FRAGMENT_CNT;
    parameter [(((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_FRAGMENT_CNT) * 64) - 1):0] EXT_SLV_FRAGMENT_BASE_ADDR = {((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_FRAGMENT_CNT) * 64){1'b0}} ; 
    parameter [(((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_FRAGMENT_CNT) * 64) - 1):0] EXT_SLV_FRAGMENT_END_ADDR = {((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_FRAGMENT_CNT) * 64){1'b0}} ; 
    //parameter  [TOTAL_EXTSLV_CNT*7-1:0]  NUM_OF_ID_EXT_MAS_SUPPRT_SCALAR = {TOTAL_EXTSLV_CNT{7'd64}};
    //genvar para_cnt;
    //for(para_cnt =0 ;  para_cnt < TOTAL_EXTSLV_CNT ; para_cnt= para_cnt+1)
    //begin
    //localparam [6:0] NUM_OF_ID_EXT_MAS_SUPPRT[TOTAL_EXTSLV_CNT-1:0] = '{para_cnt:NUM_OF_ID_EXT_MAS_SUPPRT_SCALAR[para_cnt*7+:7], default:7'h0};
    //end
    //===================================INPUTS & OUTPUTS=================================
    input aclk_i ; 
    input aresetn_i ; 
    input ext_mas_addr_valid ; 
    input [(EXT_MAS_AXI_ADDR_WIDTH - 1):0] ext_mas_addr ; 
    output logic [5:0] ext_slv_sel ; 
    //===================================================================================
    logic [5:0] nxt_ext_slv_sel ; 
    always
        @(posedge aclk_i or 
            negedge aresetn_i)
        begin
            if ((~aresetn_i)) 
                begin
                    ext_slv_sel <=  TOTAL_EXTSLV_CNT ;
                    //ext_slv_sel <= 6'd32;
                end
            else
                begin
                    ext_slv_sel <=  nxt_ext_slv_sel ;
                end
        end
    //genvar ext_slv, frag;
    //generate
    //begin:SLV_BASE_END_BLK
    //   for(ext_slv=0 ; ext_slv< TOTAL_EXTSLV_CNT ; ext_slv=ext_slv+1)
    //   begin:ext_slv_blk
    //   localparam integer EXT_SLV_FRAGMENT_CNT_INT = EXT_SLV_FRAGMENT_CNT[ext_slv*4 +:4];
    //      for (frag = 0 ; frag < EXT_SLV_FRAGMENT_CNT_INT; frag = frag + 1)
    //      begin:frag_blk
    //   localparam EXT_SLV_FRAGMENT_BASE_ADDR_INT = EXT_SLV_FRAGMENT_BASE_ADDR[(ext_slv*ADDR_WIDTH_BITS)+(frag*64) +: 64];
    //   localparam EXT_SLV_FRAGMENT_END_ADDR_INT  = EXT_SLV_FRAGMENT_END_ADDR [(ext_slv*ADDR_WIDTH_BITS)+(frag*64) +: 64];
    //      end
    //   end
    //end
    //endgenerate
    //genvar ext_slv_cnt , frag_cnt;
    integer ext_slv_cnt, 
        frag_cnt ; 
    always
        @(*)
        begin
            //nxt_ext_slv_sel   =  ext_slv_sel;
            nxt_ext_slv_sel = TOTAL_EXTSLV_CNT ;
            //nxt_ext_slv_sel   =  6'd32;
            for (ext_slv_cnt = 0 ; (ext_slv_cnt < TOTAL_EXTSLV_CNT) ; ext_slv_cnt = (ext_slv_cnt + 1))
                begin
                    for (frag_cnt = 0 ; (frag_cnt < EXT_SLV_FRAGMENT_CNT[(ext_slv_cnt * 4) +: 4]) ; frag_cnt = (frag_cnt + 1))
                        //for (frag_cnt = 0 ; frag_cnt < SLV_BASE_END_BLK.ext_slv_blk[ext_slv_cnt].EXT_SLV_FRAGMENT_CNT_INT; frag_cnt = frag_cnt + 1)
                        begin
                            if ((ext_mas_addr_valid & ((ext_mas_addr >= EXT_SLV_FRAGMENT_BASE_ADDR[(((ext_slv_cnt * EXT_SLV_MAX_FRAGMENT_CNT) * 64) + (frag_cnt * 64)) +: 64]) && (ext_mas_addr <= EXT_SLV_FRAGMENT_END_ADDR[(((ext_slv_cnt * EXT_SLV_MAX_FRAGMENT_CNT) * 64) + (frag_cnt * 64)) +: 64])))) 
                                begin
                                    nxt_ext_slv_sel = ext_slv_cnt[5:0] ;
                                end
                            else
                                ; 
                        end// frag_cnt
                end//ext_slv_cnt
        end
endmodule



module axi4_interconnect_ipgen_ext_mas_ard_ifc (mi_arvalid, 
        mi_araddr, 
        mi_arsize, 
        mi_arlen, 
        mi_arburst, 
        mi_arcache, 
        mi_arid, 
        mi_arprot, 
        mi_arlock, 
        mi_arqos, 
        mi_arregion, 
        mi_aruser, 
        mo_arready, 
        mo_split_arready, 
        mo_s_arvalid, 
        mo_s_araddr, 
        mo_s_arsize, 
        mo_s_arlen, 
        mo_s_arburst, 
        mo_s_arcache, 
        mo_s_arid, 
        mo_s_arprot, 
        mo_s_arlock, 
        mo_s_arqos, 
        mo_s_arregion, 
        mo_s_aruser, 
        mi_s_arready, 
        mi_s_split_arready, 
        mi_ext_mas_slv_rd_sel) ;
    parameter TOTAL_EXTMAS_CNT = 32 ; 
    parameter TOTAL_EXTSLV_CNT = 32 ; 
    parameter EXT_MAS_AXI_ADDR_WIDTH = 64 ; 
    parameter EXT_MAS_AXI_ID_WIDTH = 6 ; 
    parameter AXI_USER_WIDTH = 4 ; 
    parameter EXT_SLV_AXI_ADDR_WIDTH = 64 ; 
    parameter EXT_SLV_AXI_ID_WIDTH = 11 ; 
    //*********************************INPUTS & OUTPUTS************************************
    input mi_arvalid ; 
    input [(EXT_MAS_AXI_ADDR_WIDTH - 1):0] mi_araddr ; 
    input [2:0] mi_arsize ; 
    input [7:0] mi_arlen ; 
    input [1:0] mi_arburst ; 
    input [3:0] mi_arcache ; 
    input [(EXT_MAS_AXI_ID_WIDTH - 1):0] mi_arid ; 
    input [2:0] mi_arprot ; 
    input [0:0] mi_arlock ; 
    input [3:0] mi_arqos ; 
    input [3:0] mi_arregion ; 
    input [(AXI_USER_WIDTH - 1):0] mi_aruser ; 
    output logic mo_arready ; 
    output logic mo_split_arready ; 
    output [TOTAL_EXTSLV_CNT:0] mo_s_arvalid ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_AXI_ADDR_WIDTH) - 1):0] mo_s_araddr ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 3) - 1):0] mo_s_arsize ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 8) - 1):0] mo_s_arlen ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] mo_s_arburst ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] mo_s_arcache ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_AXI_ID_WIDTH) - 1):0] mo_s_arid ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 3) - 1):0] mo_s_arprot ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 1) - 1):0] mo_s_arlock ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] mo_s_arqos ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] mo_s_arregion ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] mo_s_aruser ; 
    input [TOTAL_EXTSLV_CNT:0] mi_s_arready ; 
    input [TOTAL_EXTSLV_CNT:0] mi_s_split_arready ; 
    input [5:0] mi_ext_mas_slv_rd_sel ; 
    genvar j ; 
    generate
        for (j = 0;(j <= TOTAL_EXTSLV_CNT);j = (j + 1))
        begin : genblk1
            assign mo_s_arvalid[j] = (mi_arvalid & (mi_ext_mas_slv_rd_sel == j)) ; 
            assign mo_s_araddr[(j * EXT_SLV_AXI_ADDR_WIDTH) +: EXT_SLV_AXI_ADDR_WIDTH] = mi_araddr ; 
            assign mo_s_arsize[(j * 3) +: 3] = mi_arsize ; 
            assign mo_s_arlen[(j * 8) +: 8] = mi_arlen ; 
            assign mo_s_arburst[(j * 2) +: 2] = mi_arburst ; 
            assign mo_s_arcache[(j * 4) +: 4] = mi_arcache ; 
            assign mo_s_arid[(j * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = mi_arid ; 
            assign mo_s_arprot[(j * 3) +: 3] = mi_arprot ; 
            assign mo_s_arlock[(j * 1) +: 1] = mi_arlock ; 
            assign mo_s_arqos[(j * 4) +: 4] = mi_arqos ; 
            assign mo_s_arregion[(j * 4) +: 4] = mi_arregion ; 
            assign mo_s_aruser[(j * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = mi_aruser ; 
        end
    endgenerate
    integer ext_slv_cnt ; 
    always
        @(*)
        begin
            mo_arready = 1'b0 ;
            mo_split_arready = 1'b0 ;
            for (ext_slv_cnt = 0 ; (ext_slv_cnt <= TOTAL_EXTSLV_CNT) ; ext_slv_cnt = (ext_slv_cnt + 1))
                begin
                    if ((mi_ext_mas_slv_rd_sel == ext_slv_cnt)) 
                        begin
                            mo_arready = mi_s_arready[ext_slv_cnt] ;
                            mo_split_arready = mi_s_split_arready[ext_slv_cnt] ;
                        end
                    else
                        ; 
                end
        end

// ext_mas_ard_ifc 
endmodule



module axi4_interconnect_ipgen_ext_mas_awr_ifc (mi_awvalid, 
        mi_awaddr, 
        mi_awsize, 
        mi_awlen, 
        mi_awburst, 
        mi_awcache, 
        mi_awid, 
        mi_awprot, 
        mi_awlock, 
        mi_awqos, 
        mi_awregion, 
        mi_awuser, 
        mo_awready, 
        mo_split_awready, 
        mo_s_awvalid, 
        mo_s_awaddr, 
        mo_s_awsize, 
        mo_s_awlen, 
        mo_s_awburst, 
        mo_s_awcache, 
        mo_s_awid, 
        mo_s_awprot, 
        mo_s_awlock, 
        mo_s_awqos, 
        mo_s_awregion, 
        mo_s_awuser, 
        mi_s_awready, 
        mi_s_split_awready, 
        mi_ext_mas_slv_wr_sel) ;
    parameter TOTAL_EXTSLV_CNT = 32 ; 
    parameter EXT_MAS_AXI_ADDR_WIDTH = 64 ; 
    parameter AXI_USER_WIDTH = 4 ; 
    parameter EXT_MAS_AXI_ID_WIDTH = 6 ; 
    parameter EXT_SLV_AXI_ADDR_WIDTH = 64 ; 
    //*********************************INPUTS & OUTPUTS************************************
    input mi_awvalid ; 
    input [(EXT_MAS_AXI_ADDR_WIDTH - 1):0] mi_awaddr ; 
    input [2:0] mi_awsize ; 
    input [7:0] mi_awlen ; 
    input [1:0] mi_awburst ; 
    input [3:0] mi_awcache ; 
    input [(EXT_MAS_AXI_ID_WIDTH - 1):0] mi_awid ; 
    input [2:0] mi_awprot ; 
    input [0:0] mi_awlock ; 
    input [3:0] mi_awqos ; 
    input [3:0] mi_awregion ; 
    input [(AXI_USER_WIDTH - 1):0] mi_awuser ; 
    output logic mo_awready ; 
    output logic mo_split_awready ; 
    output [TOTAL_EXTSLV_CNT:0] mo_s_awvalid ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_AXI_ADDR_WIDTH) - 1):0] mo_s_awaddr ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 3) - 1):0] mo_s_awsize ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 8) - 1):0] mo_s_awlen ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] mo_s_awburst ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] mo_s_awcache ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_AXI_ID_WIDTH) - 1):0] mo_s_awid ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 3) - 1):0] mo_s_awprot ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 1) - 1):0] mo_s_awlock ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] mo_s_awqos ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] mo_s_awregion ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] mo_s_awuser ; 
    input [TOTAL_EXTSLV_CNT:0] mi_s_awready ; 
    input [TOTAL_EXTSLV_CNT:0] mi_s_split_awready ; 
    input [5:0] mi_ext_mas_slv_wr_sel ; 
    genvar j ; 
    generate
        for (j = 0;(j <= TOTAL_EXTSLV_CNT);j = (j + 1))
        begin : genblk1
            assign mo_s_awvalid[j] = (mi_awvalid & (mi_ext_mas_slv_wr_sel == j)) ; 
            assign mo_s_awaddr[(j * EXT_SLV_AXI_ADDR_WIDTH) +: EXT_SLV_AXI_ADDR_WIDTH] = {{(EXT_SLV_AXI_ADDR_WIDTH - EXT_MAS_AXI_ADDR_WIDTH){1'b0}},
                        mi_awaddr} ; 
            assign mo_s_awsize[(j * 3) +: 3] = mi_awsize ; 
            assign mo_s_awlen[(j * 8) +: 8] = mi_awlen ; 
            assign mo_s_awburst[(j * 2) +: 2] = mi_awburst ; 
            assign mo_s_awcache[(j * 4) +: 4] = mi_awcache ; 
            assign mo_s_awid[(j * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = mi_awid ; 
            assign mo_s_awprot[(j * 3) +: 3] = mi_awprot ; 
            assign mo_s_awlock[(j * 1) +: 1] = mi_awlock ; 
            assign mo_s_awqos[(j * 4) +: 4] = mi_awqos ; 
            assign mo_s_awregion[(j * 4) +: 4] = mi_awregion ; 
            assign mo_s_awuser[(j * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = mi_awuser ; 
        end
    endgenerate
    integer ext_slv_cnt ; 
    always
        @(*)
        begin
            mo_awready = 1'b0 ;
            mo_split_awready = 1'b0 ;
            for (ext_slv_cnt = 0 ; (ext_slv_cnt <= TOTAL_EXTSLV_CNT) ; ext_slv_cnt = (ext_slv_cnt + 1))
                begin
                    if ((mi_ext_mas_slv_wr_sel == ext_slv_cnt)) 
                        begin
                            mo_awready = mi_s_awready[ext_slv_cnt] ;
                            mo_split_awready = mi_s_split_awready[ext_slv_cnt] ;
                        end
                    else
                        ; 
                end
        end

// ext_mas_awr_ifc 
endmodule



module axi4_interconnect_ipgen_ext_mas_dwr_ifc (mi_wvalid, 
        mi_wlast, 
        mi_wstrb, 
        mi_wdata, 
        mi_wuser, 
        mo_wready, 
        mo_s_wvalid, 
        mo_s_wlast, 
        mo_s_wstrb, 
        mo_s_wdata, 
        mo_s_wuser, 
        mi_s_wready, 
        mi_slv_dwr_sel) ;
    parameter TOTAL_EXTSLV_CNT = 32 ; 
    parameter EXT_MAS_AXI_DATA_WIDTH = 1024 ; 
    parameter AXI_USER_WIDTH = 4 ; 
    //*********************************INPUTS & OUTPUTS************************************
    input mi_wvalid ; 
    input [(EXT_MAS_AXI_DATA_WIDTH - 1):0] mi_wdata ; 
    input [((EXT_MAS_AXI_DATA_WIDTH / 8) - 1):0] mi_wstrb ; 
    input mi_wlast ; 
    input [(AXI_USER_WIDTH - 1):0] mi_wuser ; 
    output logic mo_wready ; 
    output [TOTAL_EXTSLV_CNT:0] mo_s_wvalid ; 
    output [TOTAL_EXTSLV_CNT:0] mo_s_wlast ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * (EXT_MAS_AXI_DATA_WIDTH / 8)) - 1):0] mo_s_wstrb ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_AXI_DATA_WIDTH) - 1):0] mo_s_wdata ; 
    output [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] mo_s_wuser ; 
    input [TOTAL_EXTSLV_CNT:0] mi_s_wready ; 
    input [5:0] mi_slv_dwr_sel ; 
    genvar j ; 
    generate
        for (j = 0;(j <= TOTAL_EXTSLV_CNT);j = (j + 1))
        begin : genblk1
            assign mo_s_wvalid[j] = (mi_wvalid & (mi_slv_dwr_sel == j)) ; 
            assign mo_s_wstrb[(j * (EXT_MAS_AXI_DATA_WIDTH / 8)) +: (EXT_MAS_AXI_DATA_WIDTH / 8)] = mi_wstrb ; 
            assign mo_s_wdata[(j * EXT_MAS_AXI_DATA_WIDTH) +: EXT_MAS_AXI_DATA_WIDTH] = mi_wdata ; 
            assign mo_s_wuser[(j * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = mi_wuser ; 
            assign mo_s_wlast[j] = (mi_wlast & (mi_slv_dwr_sel == j)) ; 
        end
    endgenerate
    integer ext_slv_cnt ; 
    always
        @(*)
        begin
            mo_wready = 1'b0 ;
            for (ext_slv_cnt = 0 ; (ext_slv_cnt <= TOTAL_EXTSLV_CNT) ; ext_slv_cnt = (ext_slv_cnt + 1))
                begin
                    if ((mi_slv_dwr_sel == ext_slv_cnt)) 
                        begin
                            mo_wready = mi_s_wready[ext_slv_cnt] ;
                        end
                    else
                        ; 
                end
        end
endmodule



module axi4_interconnect_ipgen_ext_mas_port (aclk_i, 
        aresetn_i, 
        o_m_awvalid, 
        o_m_awaddr, 
        o_m_awsize, 
        o_m_awlen, 
        o_m_awburst, 
        o_m_awcache, 
        o_m_awid, 
        o_m_awprot, 
        o_m_awlock, 
        o_m_awqos, 
        o_m_awregion, 
        o_m_awuser, 
        i_m_awready, 
        i_m_split_awready, 
        o_m_wvalid, 
        o_m_wdata, 
        o_m_wstrb, 
        o_m_wlast, 
        o_m_wuser, 
        i_m_wready, 
        o_m_arvalid, 
        o_m_araddr, 
        o_m_arsize, 
        o_m_arlen, 
        o_m_arburst, 
        o_m_arcache, 
        o_m_arid, 
        o_m_arprot, 
        o_m_arlock, 
        o_m_arqos, 
        o_m_arregion, 
        o_m_aruser, 
        i_m_arready, 
        i_m_split_arready, 
        i_m_bvalid, 
        i_m_bresp, 
        i_m_bid, 
        i_m_buser, 
        o_m_bready, 
        i_m_rvalid, 
        i_m_rdata, 
        i_m_rid, 
        i_m_rlast, 
        i_m_ruser, 
        i_m_rresp, 
        o_m_rready, 
        ext_mas_slv_wr_sel, 
        ext_mas_slv_rd_sel, 
        ext_mas_slv_dwr_sel, 
        o_bid_ext_slv_gnt, 
        o_rid_ext_slv_gnt, 
        i_ext_slv_wrresp_gnt, 
        i_ext_slv_rdresp_gnt, 
        i_ext_mas_prt_awvalid, 
        i_ext_mas_prt_awaddr, 
        i_ext_mas_prt_awsize, 
        i_ext_mas_prt_awlen, 
        i_ext_mas_prt_awburst, 
        i_ext_mas_prt_awcache, 
        i_ext_mas_prt_awid, 
        i_ext_mas_prt_awprot, 
        i_ext_mas_prt_awlock, 
        i_ext_mas_prt_awqos, 
        i_ext_mas_prt_awregion, 
        i_ext_mas_prt_awuser, 
        o_ext_mas_prt_awready, 
        i_ext_mas_prt_wvalid, 
        i_ext_mas_prt_wdata, 
        i_ext_mas_prt_wstrb, 
        i_ext_mas_prt_wlast, 
        i_ext_mas_prt_wuser, 
        o_ext_mas_prt_wready, 
        i_ext_mas_prt_arvalid, 
        i_ext_mas_prt_araddr, 
        i_ext_mas_prt_arsize, 
        i_ext_mas_prt_arlen, 
        i_ext_mas_prt_arburst, 
        i_ext_mas_prt_arcache, 
        i_ext_mas_prt_arid, 
        i_ext_mas_prt_arprot, 
        i_ext_mas_prt_arlock, 
        i_ext_mas_prt_arqos, 
        i_ext_mas_prt_arregion, 
        i_ext_mas_prt_aruser, 
        o_ext_mas_prt_arready, 
        o_ext_mas_prt_bvalid, 
        o_ext_mas_prt_bresp, 
        o_ext_mas_prt_bid, 
        o_ext_mas_prt_buser, 
        i_ext_mas_prt_bready, 
        o_ext_mas_prt_rvalid, 
        o_ext_mas_prt_rdata, 
        o_ext_mas_prt_rid, 
        o_ext_mas_prt_rlast, 
        o_ext_mas_prt_ruser, 
        o_ext_mas_prt_rresp, 
        i_ext_mas_prt_rready) ;
    parameter EXT_MAS_CDC_EN = 0 ; 
    parameter EXT_MAS_AXI_ID_WIDTH = 6 ; 
    parameter EXT_MAS_AXI_DATA_WIDTH = 8 ; 
    parameter EXT_MAS_AXI_ADDR_WIDTH = 16 ; 
    parameter EXT_MAS_MAX_ADDR_WIDTH = 16 ; 
    parameter EXT_MAS_AXI_PROTOCOL = 0 ; 
    parameter AXI_USER_WIDTH = 4 ; 
    parameter [3:0] EXT_MAS_AXI_LEN_WIDTH = 4'd8 ; 
    parameter EXT_MAS_AXI_WR_ACCEPT = 8 ; 
    parameter EXT_MAS_AXI_RD_ACCEPT = 8 ; 
    parameter ID_ORDER_EN_EXT_MAS = 1'b1 ; 
    parameter integer NUM_OF_ID_EXT_MAS_SUPPRT = 4 ; 
    parameter AR_FF_DEPTH = 8 ; 
    parameter EXT_MAS_WR_DATA_FIFO_DEPTH = 8 ; 
    parameter EXT_MAS_BRESP_FIFO_DEPTH = 8 ; 
    parameter EXT_MAS_RD_DATA_FIFO_DEPTH = 8 ; 
    parameter EXT_MAS_ACCESS_TYPE = 2'd2 ; 
    parameter TOTAL_EXTSLV_CNT = 32 ; 
    parameter [(TOTAL_EXTSLV_CNT - 1):0] EXT_SLV_AXI_PROTOCOL = {TOTAL_EXTSLV_CNT{1'b1}} ; 
    parameter EXT_SLV_MAX_DATA_WIDTH = 32 ; 
    parameter [((TOTAL_EXTSLV_CNT * 11) - 1):0] EXT_SLV_AXI_DATA_WIDTH = {TOTAL_EXTSLV_CNT{11'd32}} ; 
    parameter EXT_SLV_MAX_FRAGMENT_CNT = 8 ; 
    parameter [((TOTAL_EXTSLV_CNT * 4) - 1):0] EXT_SLV_FRAGMENT_CNT = {TOTAL_EXTSLV_CNT{4'd8}} ; 
    parameter [(((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_FRAGMENT_CNT) * 64) - 1):0] EXT_SLV_FRAGMENT_BASE_ADDR = {((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_FRAGMENT_CNT) * 64){1'b0}} ; 
    parameter [(((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_FRAGMENT_CNT) * 64) - 1):0] EXT_SLV_FRAGMENT_END_ADDR = {((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_FRAGMENT_CNT) * 64){1'b0}} ; 
    parameter LATTICE_FIFO = 1'b0 ; 
    //parameter [TOTAL_EXTSLV_CNT*2-1:0] EXT_SLV_ACCESS_TYPE  = {TOTAL_EXTSLV_CNT{2'd2}};
    localparam [(TOTAL_EXTSLV_CNT - 1):0] EXT_MAS_CONNECTED_SLAVE = {TOTAL_EXTSLV_CNT{1'b1}} ; 
    //localparam AW_ACCEPT_WIDTH = clog2 (EXT_MAS_AXI_WR_ACCEPT);
    //localparam AR_ACCEPT_WIDTH = clog2 (EXT_MAS_AXI_RD_ACCEPT);
    localparam AW_ACCEPT_WIDTH = ((EXT_MAS_AXI_WR_ACCEPT == 1) ? 1 : (((EXT_MAS_AXI_WR_ACCEPT == 2) || (EXT_MAS_AXI_WR_ACCEPT == 3)) ? 2 : (((EXT_MAS_AXI_WR_ACCEPT >= 4) && (EXT_MAS_AXI_WR_ACCEPT <= 7)) ? 3 : (((EXT_MAS_AXI_WR_ACCEPT >= 8) && (EXT_MAS_AXI_WR_ACCEPT <= 15)) ? 4 : 5)))) ; 
    localparam AR_ACCEPT_WIDTH = ((EXT_MAS_AXI_RD_ACCEPT == 1) ? 1 : (((EXT_MAS_AXI_RD_ACCEPT == 2) || (EXT_MAS_AXI_RD_ACCEPT == 3)) ? 2 : (((EXT_MAS_AXI_RD_ACCEPT >= 4) && (EXT_MAS_AXI_RD_ACCEPT <= 7)) ? 3 : (((EXT_MAS_AXI_RD_ACCEPT >= 8) && (EXT_MAS_AXI_RD_ACCEPT <= 15)) ? 4 : 5)))) ; 
    function integer clog2( 
        input integer depth )  ; 
        begin
            //if (depth == 0)
            if (((depth == 0) || (depth == 1))) 
                clog2 = 1 ;
            else
                for (clog2 = 0 ; (depth > 1) ; clog2 = (clog2 + 1))
                    //for (clog2 = 0; depth > 1;  clog2 = clog2 + 1)
                    depth = (depth >> 1) ;
        end
    endfunction
    //*********************************INPUTS & OUTPUTS************************************
    input aclk_i ; 
    input aresetn_i ; 
    //External master interface from MAS PORT   
    input i_ext_mas_prt_awvalid ; 
    input [(EXT_MAS_AXI_ADDR_WIDTH - 1):0] i_ext_mas_prt_awaddr ; 
    input [(3 - 1):0] i_ext_mas_prt_awsize ; 
    input [(8 - 1):0] i_ext_mas_prt_awlen ; 
    input [(2 - 1):0] i_ext_mas_prt_awburst ; 
    input [(4 - 1):0] i_ext_mas_prt_awcache ; 
    input [(EXT_MAS_AXI_ID_WIDTH - 1):0] i_ext_mas_prt_awid ; 
    input [(3 - 1):0] i_ext_mas_prt_awprot ; 
    input [(1 - 1):0] i_ext_mas_prt_awlock ; 
    input [(4 - 1):0] i_ext_mas_prt_awqos ; 
    input [(4 - 1):0] i_ext_mas_prt_awregion ; 
    input [(AXI_USER_WIDTH - 1):0] i_ext_mas_prt_awuser ; 
    output logic o_ext_mas_prt_awready ; 
    input i_ext_mas_prt_wvalid ; 
    input [(EXT_MAS_AXI_DATA_WIDTH - 1):0] i_ext_mas_prt_wdata ; 
    input [((EXT_MAS_AXI_DATA_WIDTH / 8) - 1):0] i_ext_mas_prt_wstrb ; 
    input i_ext_mas_prt_wlast ; 
    input [(AXI_USER_WIDTH - 1):0] i_ext_mas_prt_wuser ; 
    output logic o_ext_mas_prt_wready ; 
    input i_ext_mas_prt_arvalid ; 
    input [(EXT_MAS_AXI_ADDR_WIDTH - 1):0] i_ext_mas_prt_araddr ; 
    input [(3 - 1):0] i_ext_mas_prt_arsize ; 
    input [(8 - 1):0] i_ext_mas_prt_arlen ; 
    input [(2 - 1):0] i_ext_mas_prt_arburst ; 
    input [(4 - 1):0] i_ext_mas_prt_arcache ; 
    input [(EXT_MAS_AXI_ID_WIDTH - 1):0] i_ext_mas_prt_arid ; 
    input [(3 - 1):0] i_ext_mas_prt_arprot ; 
    input [(1 - 1):0] i_ext_mas_prt_arlock ; 
    input [(4 - 1):0] i_ext_mas_prt_arqos ; 
    input [(4 - 1):0] i_ext_mas_prt_arregion ; 
    input [(AXI_USER_WIDTH - 1):0] i_ext_mas_prt_aruser ; 
    output logic o_ext_mas_prt_arready ; 
    output logic o_ext_mas_prt_bvalid ; 
    output logic [(2 - 1):0] o_ext_mas_prt_bresp ; 
    output logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] o_ext_mas_prt_bid ; 
    output logic [(AXI_USER_WIDTH - 1):0] o_ext_mas_prt_buser ; 
    input i_ext_mas_prt_bready ; 
    output logic o_ext_mas_prt_rvalid ; 
    output logic [(EXT_MAS_AXI_DATA_WIDTH - 1):0] o_ext_mas_prt_rdata ; 
    output logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] o_ext_mas_prt_rid ; 
    output logic o_ext_mas_prt_rlast ; 
    output logic [(AXI_USER_WIDTH - 1):0] o_ext_mas_prt_ruser ; 
    output logic [(2 - 1):0] o_ext_mas_prt_rresp ; 
    input i_ext_mas_prt_rready ; 
    //Interface with crossbar
    output logic [5:0] ext_mas_slv_wr_sel ; 
    output logic [5:0] ext_mas_slv_rd_sel ; 
    output logic [5:0] ext_mas_slv_dwr_sel ; 
    output logic [((NUM_OF_ID_EXT_MAS_SUPPRT * 6) - 1):0] o_bid_ext_slv_gnt ; 
    output logic [((NUM_OF_ID_EXT_MAS_SUPPRT * 6) - 1):0] o_rid_ext_slv_gnt ; 
    input [5:0] i_ext_slv_wrresp_gnt ; 
    input [5:0] i_ext_slv_rdresp_gnt ; 
    output logic o_m_awvalid ; 
    output logic [(EXT_MAS_AXI_ADDR_WIDTH - 1):0] o_m_awaddr ; 
    output logic [(3 - 1):0] o_m_awsize ; 
    output logic [(8 - 1):0] o_m_awlen ; 
    output logic [(2 - 1):0] o_m_awburst ; 
    output logic [(4 - 1):0] o_m_awcache ; 
    output logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] o_m_awid ; 
    output logic [(3 - 1):0] o_m_awprot ; 
    output logic [(1 - 1):0] o_m_awlock ; 
    output logic [(4 - 1):0] o_m_awqos ; 
    output logic [(4 - 1):0] o_m_awregion ; 
    output logic [(AXI_USER_WIDTH - 1):0] o_m_awuser ; 
    input i_m_awready ; 
    input i_m_split_awready ; 
    output logic o_m_wvalid ; 
    output logic [(EXT_MAS_AXI_DATA_WIDTH - 1):0] o_m_wdata ; 
    output logic [((EXT_MAS_AXI_DATA_WIDTH / 8) - 1):0] o_m_wstrb ; 
    output logic [(AXI_USER_WIDTH - 1):0] o_m_wuser ; 
    output logic o_m_wlast ; 
    input i_m_wready ; 
    output logic o_m_arvalid ; 
    output logic [(EXT_MAS_AXI_ADDR_WIDTH - 1):0] o_m_araddr ; 
    output logic [(3 - 1):0] o_m_arsize ; 
    output logic [(8 - 1):0] o_m_arlen ; 
    output logic [(2 - 1):0] o_m_arburst ; 
    output logic [(4 - 1):0] o_m_arcache ; 
    output logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] o_m_arid ; 
    output logic [(3 - 1):0] o_m_arprot ; 
    output logic [(1 - 1):0] o_m_arlock ; 
    output logic [(4 - 1):0] o_m_arqos ; 
    output logic [(4 - 1):0] o_m_arregion ; 
    output logic [(AXI_USER_WIDTH - 1):0] o_m_aruser ; 
    input i_m_arready ; 
    input i_m_split_arready ; 
    input i_m_bvalid ; 
    input [(2 - 1):0] i_m_bresp ; 
    input [(EXT_MAS_AXI_ID_WIDTH - 1):0] i_m_bid ; 
    input [(AXI_USER_WIDTH - 1):0] i_m_buser ; 
    output o_m_bready ; 
    input i_m_rvalid ; 
    input [(EXT_SLV_MAX_DATA_WIDTH - 1):0] i_m_rdata ; 
    //input  [EXT_MAS_AXI_DATA_WIDTH-1:0]     i_m_rdata;
    input [(EXT_MAS_AXI_ID_WIDTH - 1):0] i_m_rid ; 
    input i_m_rlast ; 
    input [(AXI_USER_WIDTH - 1):0] i_m_ruser ; 
    input [(2 - 1):0] i_m_rresp ; 
    output logic o_m_rready ; 
    localparam AXI4 = 0 ; 
    localparam AXI3 = 1 ; 
    localparam AXI4_LITE = 2 ; 
    genvar id_cnt ; 
    genvar ext_slv_cnt ; 
    generate
        if (((EXT_MAS_ACCESS_TYPE == 2'd0) || (EXT_MAS_ACCESS_TYPE == 2'd2))) 
            begin : WO_WR_BLK
                logic [(AW_ACCEPT_WIDTH - 1):0] wr_accept_cnt, 
                    nxt_wr_accept_cnt ; 
                logic nxt_o_ext_mas_prt_bvalid ; 
                logic [1:0] nxt_o_ext_mas_prt_bresp ; 
                logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] nxt_o_ext_mas_prt_bid ; 
                logic [(AXI_USER_WIDTH - 1):0] nxt_o_ext_mas_prt_buser ; 
                logic wr_accept_full ; 
                assign wr_accept_full = (wr_accept_cnt == EXT_MAS_AXI_WR_ACCEPT) ; 
                logic i_ext_mas_prt_wlast_int ; 
                assign i_ext_mas_prt_wlast_int = ((EXT_MAS_AXI_PROTOCOL == 1'b0) ? i_ext_mas_prt_wlast : 1'b1) ; 
                always
                    @(posedge aclk_i or 
                        negedge aresetn_i)
                    begin
                        if ((~aresetn_i)) 
                            begin
                                wr_accept_cnt <=  {AW_ACCEPT_WIDTH{1'b0}} ;
                            end
                        else
                            begin
                                wr_accept_cnt <=  nxt_wr_accept_cnt ;
                            end
                    end
                always
                    @(*)
                    begin
                        nxt_wr_accept_cnt = ((((i_ext_mas_prt_awvalid & o_ext_mas_prt_awready) & (~wr_accept_full)) & (o_ext_mas_prt_bvalid & i_ext_mas_prt_bready)) ? wr_accept_cnt : (((i_ext_mas_prt_awvalid & o_ext_mas_prt_awready) & (~wr_accept_full)) ? (wr_accept_cnt + 1'd1) : ((o_ext_mas_prt_bvalid & i_ext_mas_prt_bready) ? (wr_accept_cnt - 1'd1) : wr_accept_cnt))) ;
                    end
                logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] awid_rdata ; 
                logic [(EXT_MAS_AXI_ADDR_WIDTH - 1):0] awaddr_rdata ; 
                //===================================================================================
                // ADDRESS DECODER
                //===================================================================================
                if ((EXT_MAS_CDC_EN == 0)) 
                    begin : EXT_MAS_CDC_DIS_BLK
                        localparam AW_DATA_WIDTH = ((((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + AXI_USER_WIDTH) + 22) ; 
                        //localparam AW_PTR_WIDTH = clog2(EXT_MAS_AXI_WR_ACCEPT);
                        localparam AW_PTR_WIDTH = (((EXT_MAS_AXI_WR_ACCEPT == 1) || (EXT_MAS_AXI_WR_ACCEPT == 2)) ? 1 : (((EXT_MAS_AXI_WR_ACCEPT == 3) || (EXT_MAS_AXI_WR_ACCEPT == 4)) ? 2 : (((EXT_MAS_AXI_WR_ACCEPT >= 5) && (EXT_MAS_AXI_WR_ACCEPT <= 8)) ? 3 : 4))) ; 
                        logic nxt_o_m_awvalid ; 
                        logic [(EXT_MAS_AXI_ADDR_WIDTH - 1):0] nxt_o_m_awaddr ; 
                        logic [(3 - 1):0] nxt_o_m_awsize ; 
                        logic [(8 - 1):0] nxt_o_m_awlen ; 
                        logic [(2 - 1):0] nxt_o_m_awburst ; 
                        logic [(4 - 1):0] nxt_o_m_awcache ; 
                        logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] nxt_o_m_awid ; 
                        logic [(3 - 1):0] nxt_o_m_awprot ; 
                        logic [(1 - 1):0] nxt_o_m_awlock ; 
                        logic [(4 - 1):0] nxt_o_m_awqos ; 
                        logic [(4 - 1):0] nxt_o_m_awregion ; 
                        logic [(AXI_USER_WIDTH - 1):0] nxt_o_m_awuser ; 
                        logic nxt_o_m_wvalid ; 
                        logic [(EXT_MAS_AXI_DATA_WIDTH - 1):0] nxt_o_m_wdata ; 
                        logic [((EXT_MAS_AXI_DATA_WIDTH / 8) - 1):0] nxt_o_m_wstrb ; 
                        logic [(AXI_USER_WIDTH - 1):0] nxt_o_m_wuser ; 
                        logic nxt_o_m_wlast ; 
                        logic ext_mas_awff_full ; 
                        logic ext_mas_awff_empty ; 
                        logic ext_mas_awff_wr_en ; 
                        logic ext_mas_awff_rd_en ; 
                        logic [(AW_DATA_WIDTH - 1):0] ext_mas_awff_wdata ; 
                        logic [(AW_DATA_WIDTH - 1):0] ext_mas_awff_rdata ; 
                        assign ext_mas_awff_wr_en = ((((~ext_mas_awff_full) & i_ext_mas_prt_awvalid) & o_ext_mas_prt_awready) & (~wr_accept_full)) ; 
                        assign ext_mas_awff_wdata = ((EXT_MAS_AXI_PROTOCOL == 1) ? {i_ext_mas_prt_awuser,
                                    i_ext_mas_prt_awregion,
                                    i_ext_mas_prt_awqos,
                                    i_ext_mas_prt_awlock,
                                    i_ext_mas_prt_awprot,
                                    i_ext_mas_prt_awid,
                                    i_ext_mas_prt_awcache,
                                    i_ext_mas_prt_awburst,
                                    i_ext_mas_prt_awlen[0],
                                    i_ext_mas_prt_awsize,
                                    i_ext_mas_prt_awaddr,
                                    i_ext_mas_prt_awvalid} : {i_ext_mas_prt_awuser,
                                    i_ext_mas_prt_awregion,
                                    i_ext_mas_prt_awqos,
                                    i_ext_mas_prt_awlock,
                                    i_ext_mas_prt_awprot,
                                    i_ext_mas_prt_awid,
                                    i_ext_mas_prt_awcache,
                                    i_ext_mas_prt_awburst,
                                    i_ext_mas_prt_awlen,
                                    i_ext_mas_prt_awsize,
                                    i_ext_mas_prt_awaddr,
                                    i_ext_mas_prt_awvalid}) ; 
                        assign ext_mas_awff_rd_en = (o_m_awvalid ? (i_m_awready && (!ext_mas_awff_empty)) : (!ext_mas_awff_empty)) ; 
                        //assign o_ext_mas_prt_awready = ~wr_accept_full & ~ext_mas_awff_full ; 
                        if ((LATTICE_FIFO == 1)) 
                            begin : LSCC_FF_BLK
                            end
                        else
                            begin : CUSTOM_FF_BLK
                                axi4_interconnect_ipgen_gen_fifo #(AW_PTR_WIDTH,
                                        AW_DATA_WIDTH,
                                        0,
                                        EXT_MAS_AXI_WR_ACCEPT) u_ext_mas_awd_fifo (// Pointer Width
                                        // Data Width { size}
                                        // Whether Output needs to be registered or not
                                        // Number of entries in FIFO
                                        .clk(aclk_i), 
                                            .aresetn_i(aresetn_i), 
                                            .we(ext_mas_awff_wr_en), 
                                            .wdata(ext_mas_awff_wdata), 
                                            .re(ext_mas_awff_rd_en), 
                                            .rdata(ext_mas_awff_rdata), 
                                            .full(ext_mas_awff_full), 
                                            .pre_full(), 
                                            .empty(ext_mas_awff_empty)) ; 
                            end
                        //===================================================================================
                        //===================================================================================
                        always
                            @(posedge aclk_i or 
                                negedge aresetn_i)
                            begin
                                if ((!aresetn_i)) 
                                    begin
                                        //      cur_miaw_state <= MI_AW_IDLE;
                                        o_m_awvalid <=  1'd0 ;
                                        o_m_awaddr <=  {EXT_MAS_AXI_ADDR_WIDTH{1'b0}} ;
                                        o_m_awsize <=  3'd0 ;
                                        o_m_awlen <=  {EXT_MAS_AXI_LEN_WIDTH{1'b0}} ;
                                        o_m_awburst <=  2'd0 ;
                                        o_m_awcache <=  4'd0 ;
                                        o_m_awid <=  {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                                        o_m_awprot <=  3'd0 ;
                                        o_m_awlock <=  1'd0 ;
                                        o_m_awqos <=  4'd0 ;
                                        o_m_awuser <=  {AXI_USER_WIDTH{1'b0}} ;
                                        o_m_awregion <=  4'd0 ;
                                        o_ext_mas_prt_awready <=  1'b1 ;
                                    end
                                else
                                    begin
                                        //      cur_miaw_state  <= nxt_miaw_state;
                                        o_m_awvalid <=  nxt_o_m_awvalid ;
                                        o_m_awaddr <=  nxt_o_m_awaddr ;
                                        o_m_awsize <=  nxt_o_m_awsize ;
                                        o_m_awlen <=  nxt_o_m_awlen ;
                                        o_m_awburst <=  nxt_o_m_awburst ;
                                        o_m_awcache <=  nxt_o_m_awcache ;
                                        o_m_awid <=  nxt_o_m_awid ;
                                        o_m_awprot <=  nxt_o_m_awprot ;
                                        o_m_awlock <=  nxt_o_m_awlock ;
                                        o_m_awqos <=  nxt_o_m_awqos ;
                                        o_m_awuser <=  nxt_o_m_awuser ;
                                        o_m_awregion <=  nxt_o_m_awregion ;
                                        o_ext_mas_prt_awready <=  (((i_ext_mas_prt_awvalid & o_ext_mas_prt_awready) & (o_ext_mas_prt_bvalid & i_ext_mas_prt_bready)) ? (~ext_mas_awff_full) : ((i_ext_mas_prt_awvalid & o_ext_mas_prt_awready) ? ((EXT_MAS_AXI_WR_ACCEPT == 1) ? 1'b0 : ((|wr_accept_cnt) ? (!(wr_accept_cnt == (EXT_MAS_AXI_WR_ACCEPT - 1))) : (~ext_mas_awff_full))) : ((o_ext_mas_prt_bvalid & i_ext_mas_prt_bready) ? (~ext_mas_awff_full) : ((~wr_accept_full) & (~ext_mas_awff_full))))) ;
                                        //o_ext_mas_prt_awready <= ~wr_accept_full & ~ext_mas_awff_full; 
                                    end
                            end
                        always
                            @(*)
                            begin
                                nxt_o_m_awvalid = (ext_mas_awff_rd_en ? ext_mas_awff_rdata[0] : (i_m_awready ? 1'b0 : o_m_awvalid)) ;
                                nxt_o_m_awaddr = (ext_mas_awff_rd_en ? ext_mas_awff_rdata[EXT_MAS_AXI_ADDR_WIDTH:1] : o_m_awaddr) ;
                                nxt_o_m_awsize = (ext_mas_awff_rd_en ? ext_mas_awff_rdata[(EXT_MAS_AXI_ADDR_WIDTH + 3):(EXT_MAS_AXI_ADDR_WIDTH + 1)] : o_m_awsize) ;
                                nxt_o_m_awlen = (ext_mas_awff_rd_en ? ext_mas_awff_rdata[((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_LEN_WIDTH) + 3):(EXT_MAS_AXI_ADDR_WIDTH + 4)] : o_m_awlen) ;
                                nxt_o_m_awburst = (ext_mas_awff_rd_en ? ext_mas_awff_rdata[((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_LEN_WIDTH) + 5):((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_LEN_WIDTH) + 4)] : o_m_awburst) ;
                                nxt_o_m_awcache = (ext_mas_awff_rd_en ? ext_mas_awff_rdata[((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_LEN_WIDTH) + 9):((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_LEN_WIDTH) + 6)] : o_m_awcache) ;
                                nxt_o_m_awid = (ext_mas_awff_rd_en ? ext_mas_awff_rdata[(((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + 9):((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_LEN_WIDTH) + 10)] : o_m_awid) ;
                                nxt_o_m_awprot = (ext_mas_awff_rd_en ? ext_mas_awff_rdata[(((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + 12):(((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + 10)] : o_m_awprot) ;
                                nxt_o_m_awlock = (ext_mas_awff_rd_en ? ext_mas_awff_rdata[(((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + 13)] : o_m_awlock) ;
                                nxt_o_m_awqos = (ext_mas_awff_rd_en ? ext_mas_awff_rdata[(((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + 17):(((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + 14)] : o_m_awqos) ;
                                nxt_o_m_awregion = (ext_mas_awff_rd_en ? ext_mas_awff_rdata[(((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + 21):(((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + 18)] : o_m_awregion) ;
                                nxt_o_m_awuser = (ext_mas_awff_rd_en ? ext_mas_awff_rdata[((((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + AXI_USER_WIDTH) + 21):(((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + 22)] : o_m_awuser) ;
                            end
                        axi4_interconnect_ipgen_ext_mas_adr_dec #(.TOTAL_EXTSLV_CNT(TOTAL_EXTSLV_CNT),
                                .EXT_MAS_AXI_ADDR_WIDTH(EXT_MAS_AXI_ADDR_WIDTH),
                                .EXT_SLV_MAX_FRAGMENT_CNT(EXT_SLV_MAX_FRAGMENT_CNT),
                                .EXT_SLV_FRAGMENT_CNT(EXT_SLV_FRAGMENT_CNT),
                                .EXT_SLV_FRAGMENT_BASE_ADDR(EXT_SLV_FRAGMENT_BASE_ADDR),
                                .EXT_SLV_FRAGMENT_END_ADDR(EXT_SLV_FRAGMENT_END_ADDR)) u_ext_mas_awr_adr_dec (.aclk_i(aclk_i), 
                                    .aresetn_i(aresetn_i), 
                                    .ext_mas_addr_valid(nxt_o_m_awvalid), 
                                    .ext_mas_addr(nxt_o_m_awaddr), 
                                    .ext_slv_sel(ext_mas_slv_wr_sel)) ; 
                        localparam WR_FF_PTR_WIDTH = clog2(EXT_MAS_WR_DATA_FIFO_DEPTH) ; 
                        localparam WR_FF_DATA_WIDTH = (((EXT_MAS_AXI_DATA_WIDTH + (EXT_MAS_AXI_DATA_WIDTH / 8)) + AXI_USER_WIDTH) + 2) ; 
                        logic ext_mas_wrff_full ; 
                        logic ext_mas_wrff_pre_full ; 
                        logic ext_mas_wrff_empty ; 
                        logic [(WR_FF_DATA_WIDTH - 1):0] ext_mas_wrff_wdata ; 
                        logic [(WR_FF_DATA_WIDTH - 1):0] ext_mas_wrff_rdata ; 
                        logic ext_mas_wrff_wr_en ; 
                        logic ext_mas_wrff_rd_en ; 
                        logic wlast_reg ; 
                        assign ext_mas_wrff_wdata = {i_ext_mas_prt_wlast_int,
                                    i_ext_mas_prt_wuser,
                                    i_ext_mas_prt_wstrb,
                                    i_ext_mas_prt_wdata,
                                    i_ext_mas_prt_wvalid} ; 
                        assign ext_mas_wrff_wr_en = (((~ext_mas_wrff_full) & i_ext_mas_prt_wvalid) & o_ext_mas_prt_wready) ; 
                        //assign o_ext_mas_prt_wready = ~ext_mas_wrff_full;
                        if ((LATTICE_FIFO == 1)) 
                            begin : LSCC_WDAT_FF_BLK
                            end
                        else
                            begin : CUSTOM_WDAT_FF_BLK
                                axi4_interconnect_ipgen_gen_fifo #(WR_FF_PTR_WIDTH,
                                        WR_FF_DATA_WIDTH,
                                        0,
                                        EXT_MAS_WR_DATA_FIFO_DEPTH) u_ext_mas_wr_fifo (// Pointer Width
                                        // Data Width { size}
                                        // Whether Output needs to be registered or not
                                        // Number of entries in FIFO
                                        .clk(aclk_i), 
                                            .aresetn_i(aresetn_i), 
                                            .we(ext_mas_wrff_wr_en), 
                                            .wdata(ext_mas_wrff_wdata), 
                                            .re(ext_mas_wrff_rd_en), 
                                            .rdata(ext_mas_wrff_rdata), 
                                            .full(ext_mas_wrff_full), 
                                            .pre_full(ext_mas_wrff_pre_full), 
                                            .empty(ext_mas_wrff_empty)) ; 
                            end
                        always
                            @(posedge aclk_i or 
                                negedge aresetn_i)
                            begin
                                if ((!aresetn_i)) 
                                    begin
                                        o_m_wvalid <=  1'b0 ;
                                        o_m_wdata <=  {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ;
                                        o_m_wstrb <=  {(EXT_MAS_AXI_DATA_WIDTH / 8){1'b0}} ;
                                        o_m_wuser <=  {AXI_USER_WIDTH{1'b0}} ;
                                        o_m_wlast <=  1'b0 ;
                                        o_ext_mas_prt_wready <=  1'b1 ;
                                    end
                                else
                                    begin
                                        o_m_wvalid <=  nxt_o_m_wvalid ;
                                        o_m_wdata <=  nxt_o_m_wdata ;
                                        o_m_wstrb <=  nxt_o_m_wstrb ;
                                        o_m_wuser <=  nxt_o_m_wuser ;
                                        o_m_wlast <=  nxt_o_m_wlast ;
                                        o_ext_mas_prt_wready <=  ((~ext_mas_wrff_pre_full) && (~ext_mas_wrff_full)) ;
                                    end
                            end
                        always
                            @(*)
                            begin
                                nxt_o_m_wvalid = (ext_mas_wrff_rd_en ? ext_mas_wrff_rdata[0] : (i_m_wready ? 1'b0 : o_m_wvalid)) ;
                                nxt_o_m_wdata = (ext_mas_wrff_rd_en ? ext_mas_wrff_rdata[1 +: EXT_MAS_AXI_DATA_WIDTH] : o_m_wdata) ;
                                nxt_o_m_wstrb = (ext_mas_wrff_rd_en ? ext_mas_wrff_rdata[(EXT_MAS_AXI_DATA_WIDTH + 1) +: (EXT_MAS_AXI_DATA_WIDTH / 8)] : o_m_wstrb) ;
                                nxt_o_m_wuser = (ext_mas_wrff_rd_en ? ext_mas_wrff_rdata[(((EXT_MAS_AXI_DATA_WIDTH / 8) + EXT_MAS_AXI_DATA_WIDTH) + 1) +: AXI_USER_WIDTH] : o_m_wuser) ;
                                nxt_o_m_wlast = (ext_mas_wrff_rd_en ? ext_mas_wrff_rdata[(WR_FF_DATA_WIDTH - 1)] : (i_m_wready ? 1'b0 : o_m_wlast)) ;
                            end
                        //===================================================================================
                        // Master Write address FIFO
                        //===================================================================================
                        if ((ID_ORDER_EN_EXT_MAS == 1)) 
                            begin : ID_ORDER_ENB_BLK
                                localparam AWADDR_AWID_DWSEL_FF_DWIDTH = (EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) ; 
                                logic awaddr_awid_dwrsel_ff_wr_en ; 
                                logic awaddr_awid_dwrsel_ff_rd_en ; 
                                logic awaddr_awid_dwrsel_ff_rd_en_d ; 
                                logic awaddr_awid_dwrsel_ff_empty ; 
                                logic awaddr_awid_dwrsel_ff_full ; 
                                logic [(AWADDR_AWID_DWSEL_FF_DWIDTH - 1):0] awaddr_awid_dwrsel_ff_wdata ; 
                                logic [(AWADDR_AWID_DWSEL_FF_DWIDTH - 1):0] awaddr_awid_dwrsel_ff_rdata ; 
                                always
                                    @(posedge aclk_i or 
                                        negedge aresetn_i)
                                    begin
                                        if ((!aresetn_i)) 
                                            begin
                                                wlast_reg <=  1'b0 ;
                                                awaddr_awid_dwrsel_ff_rd_en_d <=  1'b0 ;
                                            end
                                        else
                                            begin
                                                wlast_reg <=  (wlast_reg ? (!awaddr_awid_dwrsel_ff_rd_en_d) : ((o_m_wvalid & o_m_wlast) & i_m_wready)) ;
                                                awaddr_awid_dwrsel_ff_rd_en_d <=  awaddr_awid_dwrsel_ff_rd_en ;
                                            end
                                    end
                                assign awaddr_awid_dwrsel_ff_wr_en = ((o_m_awvalid & i_m_awready) & (~awaddr_awid_dwrsel_ff_full)) ; 
                                //assign awaddr_awid_dwrsel_ff_wr_en = o_m_awvalid & i_m_split_awready & ~awaddr_awid_dwrsel_ff_full;  
                                assign awaddr_awid_dwrsel_ff_rd_en = (((o_m_wvalid & o_m_wlast) & i_m_wready) & (~awaddr_awid_dwrsel_ff_empty)) ; 
                                assign awaddr_awid_dwrsel_ff_wdata = {o_m_awid,
                                            o_m_awaddr} ; 
                                assign awid_rdata = awaddr_awid_dwrsel_ff_rdata[EXT_MAS_AXI_ADDR_WIDTH +: EXT_MAS_AXI_ID_WIDTH] ; 
                                assign awaddr_rdata = awaddr_awid_dwrsel_ff_rdata[(EXT_MAS_AXI_ADDR_WIDTH - 1):0] ; 
                                assign ext_mas_wrff_rd_en = (((o_m_wvalid & o_m_wlast) || wlast_reg) ? ((~ext_mas_wrff_empty) & awaddr_awid_dwrsel_ff_rd_en_d) : (o_m_wvalid ? (((~ext_mas_wrff_empty) & i_m_wready) & (~awaddr_awid_dwrsel_ff_empty)) : ((~ext_mas_wrff_empty) & (~awaddr_awid_dwrsel_ff_empty)))) ; 
                                //assign ext_mas_wrff_rd_en  = o_m_wvalid ? ~ext_mas_wrff_empty & i_m_wready & (~awaddr_awid_dwrsel_ff_empty) : (~ext_mas_wrff_empty) & (~awaddr_awid_dwrsel_ff_empty) ;
                                //assign ext_mas_wrff_rd_en  = ~ext_mas_wrff_empty & i_m_wready & (~awaddr_awid_dwrsel_ff_empty) ;
                                if ((LATTICE_FIFO == 1)) 
                                    begin : LSCC_FF_BLK
                                    end
                                else
                                    begin : CUSTOM_FF_BLK
                                        axi4_interconnect_ipgen_gen_fifo #(4,
                                                AWADDR_AWID_DWSEL_FF_DWIDTH,
                                                0,
                                                (1 << 4)) u_awaddr_awid_dwrsel_fifo (// Pointer Width
                                                // Data Width
                                                // Whether Output needs to be registered or not
                                                // Number of entries in FIFO
                                                .clk(aclk_i), 
                                                    .aresetn_i(aresetn_i), 
                                                    .we(awaddr_awid_dwrsel_ff_wr_en), 
                                                    .wdata(awaddr_awid_dwrsel_ff_wdata), 
                                                    .re(awaddr_awid_dwrsel_ff_rd_en), 
                                                    .rdata(awaddr_awid_dwrsel_ff_rdata), 
                                                    .full(awaddr_awid_dwrsel_ff_full), 
                                                    .pre_full(), 
                                                    .empty(awaddr_awid_dwrsel_ff_empty)) ; 
                                    end
                            end
                        else
                            begin : ID_ORDER_DISB_BLK
                                localparam AWADDR_DWSEL_FF_DWIDTH = EXT_MAS_AXI_ADDR_WIDTH ; 
                                logic awaddr_dwrsel_ff_wr_en ; 
                                logic awaddr_dwrsel_ff_rd_en ; 
                                logic awaddr_dwrsel_ff_rd_en_d ; 
                                logic [(AWADDR_DWSEL_FF_DWIDTH - 1):0] awaddr_dwrsel_ff_wdata ; 
                                logic [(AWADDR_DWSEL_FF_DWIDTH - 1):0] awaddr_dwrsel_ff_rdata ; 
                                logic awaddr_dwrsel_ff_empty ; 
                                logic awaddr_dwrsel_ff_full ; 
                                always
                                    @(posedge aclk_i or 
                                        negedge aresetn_i)
                                    begin
                                        if ((!aresetn_i)) 
                                            begin
                                                wlast_reg <=  1'b0 ;
                                                awaddr_dwrsel_ff_rd_en_d <=  1'b0 ;
                                            end
                                        else
                                            begin
                                                wlast_reg <=  (wlast_reg ? (!awaddr_dwrsel_ff_rd_en_d) : ((o_m_wvalid & o_m_wlast) & i_m_wready)) ;
                                                awaddr_dwrsel_ff_rd_en_d <=  awaddr_dwrsel_ff_rd_en ;
                                            end
                                    end
                                assign awaddr_dwrsel_ff_wr_en = ((o_m_awvalid & i_m_awready) & (~awaddr_dwrsel_ff_full)) ; 
                                //assign awaddr_dwrsel_ff_wr_en = o_m_awvalid & i_m_split_awready & ~awaddr_dwrsel_ff_full;  
                                assign awaddr_dwrsel_ff_rd_en = (((o_m_wvalid & o_m_wlast) & i_m_wready) & (~awaddr_dwrsel_ff_empty)) ; 
                                assign awaddr_dwrsel_ff_wdata = {o_m_awaddr} ; 
                                assign awaddr_rdata = awaddr_dwrsel_ff_rdata[(EXT_MAS_AXI_ADDR_WIDTH - 1):0] ; 
                                assign ext_mas_wrff_rd_en = (((o_m_wvalid & o_m_wlast) || wlast_reg) ? ((~ext_mas_wrff_empty) & awaddr_dwrsel_ff_rd_en_d) : (o_m_wvalid ? (((~ext_mas_wrff_empty) & i_m_wready) & (~awaddr_dwrsel_ff_empty)) : ((~ext_mas_wrff_empty) & (~awaddr_dwrsel_ff_empty)))) ; 
                                //assign ext_mas_wrff_rd_en  = o_m_wvalid ? ~ext_mas_wrff_empty & i_m_wready & (~awaddr_dwrsel_ff_empty) : ~ext_mas_wrff_empty & (~awaddr_dwrsel_ff_empty) ;
                                //assign ext_mas_wrff_rd_en  = ~ext_mas_wrff_empty & i_m_wready & (~awaddr_dwrsel_ff_empty) ;
                                if ((LATTICE_FIFO == 1)) 
                                    begin : genblk1
                                    end
                                else
                                    begin : CUSTOM_FF_BLK
                                        axi4_interconnect_ipgen_gen_fifo #(4,
                                                AWADDR_DWSEL_FF_DWIDTH,
                                                0,
                                                (1 << 4)) u_awaddr_dwrsel_fifo (// Pointer Width
                                                // Data Width
                                                // Whether Output needs to be registered or not
                                                // Number of entries in FIFO
                                                .clk(aclk_i), 
                                                    .aresetn_i(aresetn_i), 
                                                    .we(awaddr_dwrsel_ff_wr_en), 
                                                    .wdata(awaddr_dwrsel_ff_wdata), 
                                                    .re(awaddr_dwrsel_ff_rd_en), 
                                                    .rdata(awaddr_dwrsel_ff_rdata), 
                                                    .full(awaddr_dwrsel_ff_full), 
                                                    .pre_full(), 
                                                    .empty(awaddr_dwrsel_ff_empty)) ; 
                                    end
                            end
                        axi4_interconnect_ipgen_ext_mas_adr_dec #(.TOTAL_EXTSLV_CNT(TOTAL_EXTSLV_CNT),
                                .EXT_MAS_AXI_ADDR_WIDTH(EXT_MAS_AXI_ADDR_WIDTH),
                                .EXT_SLV_MAX_FRAGMENT_CNT(EXT_SLV_MAX_FRAGMENT_CNT),
                                .EXT_SLV_FRAGMENT_CNT(EXT_SLV_FRAGMENT_CNT),
                                .EXT_SLV_FRAGMENT_BASE_ADDR(EXT_SLV_FRAGMENT_BASE_ADDR),
                                .EXT_SLV_FRAGMENT_END_ADDR(EXT_SLV_FRAGMENT_END_ADDR)) u_ext_mas_dwr_adr_dec (.aclk_i(aclk_i), 
                                    .aresetn_i(aresetn_i), 
                                    .ext_mas_addr_valid(nxt_o_m_wvalid),  // awaddr_awid_dwrsel_ff_empty or awaddr_dwrsel_ff_empty check not required; Since it checked in ext_mas_wrff_rd_en
                                .ext_mas_addr(awaddr_rdata), 
                                    .ext_slv_sel(ext_mas_slv_dwr_sel)) ; 
                    end
                else
                    begin : EXT_MAS_CDC_ENB_BLK
                        logic awvalid_reg ; 
                        //logic    o_m_awvalid_d;
                        //logic i_ext_mas_prt_awvalid_d;
                        logic wr_acpt_full_i_m_awready ; 
                        axi4_interconnect_ipgen_ext_mas_adr_dec #(.TOTAL_EXTSLV_CNT(TOTAL_EXTSLV_CNT),
                                .EXT_MAS_AXI_ADDR_WIDTH(EXT_MAS_AXI_ADDR_WIDTH),
                                .EXT_SLV_MAX_FRAGMENT_CNT(EXT_SLV_MAX_FRAGMENT_CNT),
                                .EXT_SLV_FRAGMENT_CNT(EXT_SLV_FRAGMENT_CNT),
                                .EXT_SLV_FRAGMENT_BASE_ADDR(EXT_SLV_FRAGMENT_BASE_ADDR),
                                .EXT_SLV_FRAGMENT_END_ADDR(EXT_SLV_FRAGMENT_END_ADDR)) u_ext_mas_awr_adr_dec (.aclk_i(aclk_i), 
                                    .aresetn_i(aresetn_i), 
                                    .ext_mas_addr_valid(i_ext_mas_prt_awvalid), 
                                    .ext_mas_addr(i_ext_mas_prt_awaddr), 
                                    .ext_slv_sel(ext_mas_slv_wr_sel)) ; 
                        always
                            @(posedge aclk_i or 
                                negedge aresetn_i)
                            begin
                                if ((!aresetn_i)) 
                                    begin
                                        o_ext_mas_prt_awready <=  1'b0 ;
                                        awvalid_reg <=  1'b0 ;
                                        o_m_awvalid <=  1'b0 ;
                                        o_m_awaddr <=  {EXT_MAS_AXI_ADDR_WIDTH{1'b0}} ;
                                        o_m_awsize <=  3'd0 ;
                                        o_m_awlen <=  8'd0 ;
                                        o_m_awburst <=  2'd0 ;
                                        o_m_awcache <=  4'd0 ;
                                        o_m_awid <=  {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                                        o_m_awprot <=  3'd0 ;
                                        o_m_awlock <=  1'd0 ;
                                        o_m_awqos <=  4'd0 ;
                                        o_m_awregion <=  4'd0 ;
                                        o_m_awuser <=  {AXI_USER_WIDTH{1'b0}} ;
                                        //o_m_awvalid_d         <= 1'b0;
                                        //i_ext_mas_prt_awvalid_d <= 1'b0;
                                    end
                                else
                                    begin
                                        o_ext_mas_prt_awready <=  (wr_accept_full ? 1'b0 : (o_m_awvalid & i_m_awready)) ;
                                        awvalid_reg <=  (awvalid_reg ? (!o_ext_mas_prt_awready) : (((!wr_accept_full) & i_ext_mas_prt_awvalid) & (!o_ext_mas_prt_awready))) ;
                                        if (((o_m_awvalid & i_m_awready) || (!o_m_awvalid))) 
                                        //o_m_awvalid     <=  i_ext_mas_prt_awvalid & i_m_awready & o_m_awvalid ? 1'b0 : i_ext_mas_prt_awvalid & (~wr_accept_full) & ((!o_ext_mas_prt_awready) ||  (o_ext_mas_prt_awready & (!o_m_awvalid_d)) ||  (o_ext_mas_prt_awready & o_m_awvalid_d & (!i_ext_mas_prt_awvalid_d))  ) ;
                                        //o_m_awvalid_d    <= o_m_awvalid;
                                        //i_ext_mas_prt_awvalid_d <= i_ext_mas_prt_awvalid;
                                            begin
                                                o_m_awvalid <=  (((i_ext_mas_prt_awvalid & (!wr_accept_full)) & (!awvalid_reg)) ? 1'b1 : 1'b0) ;
                                                o_m_awaddr <=  i_ext_mas_prt_awaddr ;
                                                o_m_awsize <=  i_ext_mas_prt_awsize ;
                                                o_m_awlen <=  i_ext_mas_prt_awlen ;
                                                o_m_awburst <=  i_ext_mas_prt_awburst ;
                                                o_m_awcache <=  i_ext_mas_prt_awcache ;
                                                o_m_awid <=  i_ext_mas_prt_awid ;
                                                o_m_awprot <=  i_ext_mas_prt_awprot ;
                                                o_m_awlock <=  i_ext_mas_prt_awlock ;
                                                o_m_awqos <=  i_ext_mas_prt_awqos ;
                                                o_m_awregion <=  i_ext_mas_prt_awregion ;
                                                o_m_awuser <=  i_ext_mas_prt_awuser ;
                                            end
                                        else
                                            begin
                                                o_m_awvalid <=  o_m_awvalid ;
                                                o_m_awaddr <=  o_m_awaddr ;
                                                o_m_awsize <=  o_m_awsize ;
                                                o_m_awlen <=  o_m_awlen ;
                                                o_m_awburst <=  o_m_awburst ;
                                                o_m_awcache <=  o_m_awcache ;
                                                o_m_awid <=  o_m_awid ;
                                                o_m_awprot <=  o_m_awprot ;
                                                o_m_awlock <=  o_m_awlock ;
                                                o_m_awqos <=  o_m_awqos ;
                                                o_m_awregion <=  o_m_awregion ;
                                                o_m_awuser <=  o_m_awuser ;
                                            end
                                    end
                            end
                        assign wr_acpt_full_i_m_awready = (i_m_awready & (~wr_accept_full)) ; 
                        //assign wr_acpt_full_i_m_awready = i_m_split_awready & ~wr_accept_full;
                        //assign o_m_awaddr      = i_ext_mas_prt_awaddr;
                        //assign o_m_awsize      = i_ext_mas_prt_awsize;
                        //assign o_m_awlen       = i_ext_mas_prt_awlen;
                        //assign o_m_awburst     = i_ext_mas_prt_awburst;
                        //assign o_m_awcache     = i_ext_mas_prt_awcache;
                        //assign o_m_awid        = i_ext_mas_prt_awid;
                        //assign o_m_awprot      = i_ext_mas_prt_awprot;
                        //assign o_m_awlock      = i_ext_mas_prt_awlock;
                        //assign o_m_awqos       = i_ext_mas_prt_awqos;
                        //assign o_m_awregion    = i_ext_mas_prt_awregion;
                        //assign o_m_awuser      = i_ext_mas_prt_awuser;
                        //assign o_m_wdata      = i_ext_mas_prt_wdata;
                        //assign o_m_wstrb      = i_ext_mas_prt_wstrb;
                        //assign o_m_wuser      = i_ext_mas_prt_wuser;
                        //===================================================================================
                        // Master Write address FIFO
                        //===================================================================================
                        logic wvalid_reg ; 
                        //logic o_m_wvalid_d;
                        //logic i_ext_mas_prt_wvalid_d;
                        if ((ID_ORDER_EN_EXT_MAS == 1)) 
                            begin : ID_ORDER_ENB_BLK
                                localparam AWADDR_AWID_DWSEL_FF_DWIDTH = (EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) ; 
                                logic awaddr_awid_dwrsel_ff_wr_en ; 
                                logic awaddr_awid_dwrsel_ff_rd_en ; 
                                logic awaddr_awid_dwrsel_ff_empty ; 
                                logic awaddr_awid_dwrsel_ff_full ; 
                                logic [(AWADDR_AWID_DWSEL_FF_DWIDTH - 1):0] awaddr_awid_dwrsel_ff_wdata ; 
                                logic [(AWADDR_AWID_DWSEL_FF_DWIDTH - 1):0] awaddr_awid_dwrsel_ff_rdata ; 
                                assign awaddr_awid_dwrsel_ff_wr_en = ((o_m_awvalid & wr_acpt_full_i_m_awready) & (~awaddr_awid_dwrsel_ff_full)) ; 
                                //assign awaddr_awid_dwrsel_ff_wr_en =  i_ext_mas_prt_awvalid & wr_acpt_full_i_m_awready & ~awaddr_awid_dwrsel_ff_full;  
                                assign awaddr_awid_dwrsel_ff_rd_en = ((i_ext_mas_prt_wvalid & i_ext_mas_prt_wlast_int) & o_ext_mas_prt_wready) ; // o_ext_mas_prt_wready = i_m_wready & ~awaddr_awid_dwrsel_ff_empty;
                                assign awaddr_awid_dwrsel_ff_wdata = {i_ext_mas_prt_awid,
                                            i_ext_mas_prt_awaddr} ; 
                                assign awid_rdata = awaddr_awid_dwrsel_ff_rdata[EXT_MAS_AXI_ADDR_WIDTH +: EXT_MAS_AXI_ID_WIDTH] ; 
                                assign awaddr_rdata = awaddr_awid_dwrsel_ff_rdata[(EXT_MAS_AXI_ADDR_WIDTH - 1):0] ; 
                                //assign o_ext_mas_prt_wready   = i_m_wready & ~ awaddr_awid_dwrsel_ff_empty ;
                                if ((LATTICE_FIFO == 1)) 
                                    begin : LSCC_FF_BLK
                                    end
                                else
                                    begin : CUSTOM_FF_BLK
                                        axi4_interconnect_ipgen_gen_fifo #(4,
                                                AWADDR_AWID_DWSEL_FF_DWIDTH,
                                                0,
                                                (1 << 4)) u_awaddr_awid_dwrsel_fifo (// Pointer Width
                                                // Data Width
                                                // Whether Output needs to be registered or not
                                                // Number of entries in FIFO
                                                .clk(aclk_i), 
                                                    .aresetn_i(aresetn_i), 
                                                    .we(awaddr_awid_dwrsel_ff_wr_en), 
                                                    .wdata(awaddr_awid_dwrsel_ff_wdata), 
                                                    .re(awaddr_awid_dwrsel_ff_rd_en), 
                                                    .rdata(awaddr_awid_dwrsel_ff_rdata), 
                                                    .full(awaddr_awid_dwrsel_ff_full), 
                                                    .pre_full(), 
                                                    .empty(awaddr_awid_dwrsel_ff_empty)) ; 
                                    end
                                axi4_interconnect_ipgen_ext_mas_adr_dec #(.TOTAL_EXTSLV_CNT(TOTAL_EXTSLV_CNT),
                                        .EXT_MAS_AXI_ADDR_WIDTH(EXT_MAS_AXI_ADDR_WIDTH),
                                        .EXT_SLV_MAX_FRAGMENT_CNT(EXT_SLV_MAX_FRAGMENT_CNT),
                                        .EXT_SLV_FRAGMENT_CNT(EXT_SLV_FRAGMENT_CNT),
                                        .EXT_SLV_FRAGMENT_BASE_ADDR(EXT_SLV_FRAGMENT_BASE_ADDR),
                                        .EXT_SLV_FRAGMENT_END_ADDR(EXT_SLV_FRAGMENT_END_ADDR)) u_ext_mas_dwr_adr_dec (.aclk_i(aclk_i), 
                                            .aresetn_i(aresetn_i), 
                                            .ext_mas_addr_valid((i_ext_mas_prt_wvalid & (!awaddr_awid_dwrsel_ff_empty))), 
                                            .ext_mas_addr(awaddr_rdata), 
                                            .ext_slv_sel(ext_mas_slv_dwr_sel)) ; 
                                always
                                    @(posedge aclk_i or 
                                        negedge aresetn_i)
                                    begin
                                        if ((!aresetn_i)) 
                                            begin
                                                o_ext_mas_prt_wready <=  1'b1 ;
                                                wvalid_reg <=  1'b0 ;
                                                o_m_wvalid <=  1'b0 ;
                                                o_m_wlast <=  1'b0 ;
                                                o_m_wdata <=  {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ;
                                                o_m_wstrb <=  {(EXT_MAS_AXI_DATA_WIDTH / 8){1'b0}} ;
                                                o_m_wuser <=  {AXI_USER_WIDTH{1'b0}} ;
                                                //o_m_wvalid_d <= 1'b0;
                                                //i_ext_mas_prt_wvalid_d <= 1'b0;
                                            end
                                        else
                                            begin
                                                o_ext_mas_prt_wready <=  ((o_m_wvalid & i_m_wready) & (~awaddr_awid_dwrsel_ff_empty)) ;
                                                wvalid_reg <=  (wvalid_reg ? (!o_ext_mas_prt_wready) : (((!awaddr_awid_dwrsel_ff_empty) & i_ext_mas_prt_wvalid) & (!o_ext_mas_prt_wready))) ;
                                                if (((o_m_wvalid & i_m_wready) || (!o_m_wvalid))) 
                                                //o_m_wvalid      <=  i_ext_mas_prt_wvalid & i_m_wready & o_m_wvalid ? 1'b0 : i_ext_mas_prt_wvalid & !(awaddr_awid_dwrsel_ff_empty) & ((!o_ext_mas_prt_wready) ||  (o_ext_mas_prt_wready & (!o_m_wvalid_d))||  (o_ext_mas_prt_wready & o_m_wvalid_d & (!i_ext_mas_prt_wvalid_d))  ) ;
                                                //o_m_wlast       <=  i_ext_mas_prt_wvalid & i_m_wready & o_m_wlast ? 1'b0 : i_ext_mas_prt_wvalid & i_ext_mas_prt_wlast_int & !(awaddr_awid_dwrsel_ff_empty) & ((!o_ext_mas_prt_wready) ||  (o_ext_mas_prt_wready & (!o_m_wvalid_d)) ||  (o_ext_mas_prt_wready & o_m_wvalid_d & (!i_ext_mas_prt_wvalid_d)) ) ;
                                                //o_m_wvalid_d <= o_m_wvalid;
                                                //i_ext_mas_prt_wvalid_d <= i_ext_mas_prt_wvalid;
                                                    begin
                                                        o_m_wvalid <=  (((i_ext_mas_prt_wvalid & (!awaddr_awid_dwrsel_ff_empty)) & (!wvalid_reg)) ? 1'b1 : 1'b0) ;
                                                        o_m_wlast <=  ((((i_ext_mas_prt_wvalid & i_ext_mas_prt_wlast_int) & (!awaddr_awid_dwrsel_ff_empty)) & (!wvalid_reg)) ? 1'b1 : 1'b0) ;
                                                        o_m_wdata <=  i_ext_mas_prt_wdata ;
                                                        o_m_wstrb <=  i_ext_mas_prt_wstrb ;
                                                        o_m_wuser <=  i_ext_mas_prt_wuser ;
                                                    end
                                                else
                                                    begin
                                                        o_m_wvalid <=  o_m_wvalid ;
                                                        o_m_wlast <=  o_m_wlast ;
                                                        o_m_wdata <=  o_m_wdata ;
                                                        o_m_wstrb <=  o_m_wstrb ;
                                                        o_m_wuser <=  o_m_wuser ;
                                                    end
                                            end
                                    end
                            end
                        else
                            begin : ID_ORDER_DISB_BLK
                                localparam AWADDR_DWSEL_FF_DWIDTH = EXT_MAS_AXI_ADDR_WIDTH ; 
                                logic awaddr_dwrsel_ff_wr_en ; 
                                logic awaddr_dwrsel_ff_rd_en ; 
                                logic awaddr_dwrsel_ff_empty ; 
                                logic awaddr_dwrsel_ff_full ; 
                                logic [(AWADDR_DWSEL_FF_DWIDTH - 1):0] awaddr_dwrsel_ff_wdata ; 
                                logic [(AWADDR_DWSEL_FF_DWIDTH - 1):0] awaddr_dwrsel_ff_rdata ; 
                                assign awaddr_dwrsel_ff_wr_en = ((o_m_awvalid & wr_acpt_full_i_m_awready) & (~awaddr_dwrsel_ff_full)) ; 
                                assign awaddr_dwrsel_ff_rd_en = ((i_ext_mas_prt_wvalid & i_ext_mas_prt_wlast_int) & o_ext_mas_prt_wready) ; // o_ext_mas_prt_wready= i_m_wready & ~awaddr_dwrsel_ff_empty;
                                assign awaddr_dwrsel_ff_wdata = {i_ext_mas_prt_awaddr} ; 
                                assign awaddr_rdata = awaddr_dwrsel_ff_rdata[(EXT_MAS_AXI_ADDR_WIDTH - 1):0] ; 
                                //assign o_ext_mas_prt_wready   = i_m_wready & ~ awaddr_dwrsel_ff_empty ;
                                if ((LATTICE_FIFO == 1)) 
                                    begin : LSCC_FF_BLK
                                    end
                                else
                                    begin : CUSTOM_FF_BLK
                                        axi4_interconnect_ipgen_gen_fifo #(4,
                                                AWADDR_DWSEL_FF_DWIDTH,
                                                0,
                                                (1 << 4)) u_awaddr_dwrsel_fifo (// Pointer Width
                                                // Data Width
                                                // Whether Output needs to be registered or not
                                                // Number of entries in FIFO
                                                .clk(aclk_i), 
                                                    .aresetn_i(aresetn_i), 
                                                    .we(awaddr_dwrsel_ff_wr_en), 
                                                    .wdata(awaddr_dwrsel_ff_wdata), 
                                                    .re(awaddr_dwrsel_ff_rd_en), 
                                                    .rdata(awaddr_dwrsel_ff_rdata), 
                                                    .full(awaddr_dwrsel_ff_full), 
                                                    .pre_full(), 
                                                    .empty(awaddr_dwrsel_ff_empty)) ; 
                                    end
                                axi4_interconnect_ipgen_ext_mas_adr_dec #(.TOTAL_EXTSLV_CNT(TOTAL_EXTSLV_CNT),
                                        .EXT_MAS_AXI_ADDR_WIDTH(EXT_MAS_AXI_ADDR_WIDTH),
                                        .EXT_SLV_MAX_FRAGMENT_CNT(EXT_SLV_MAX_FRAGMENT_CNT),
                                        .EXT_SLV_FRAGMENT_CNT(EXT_SLV_FRAGMENT_CNT),
                                        .EXT_SLV_FRAGMENT_BASE_ADDR(EXT_SLV_FRAGMENT_BASE_ADDR),
                                        .EXT_SLV_FRAGMENT_END_ADDR(EXT_SLV_FRAGMENT_END_ADDR)) u_ext_mas_dwr_adr_dec (.aclk_i(aclk_i), 
                                            .aresetn_i(aresetn_i), 
                                            .ext_mas_addr_valid((i_ext_mas_prt_wvalid & (!awaddr_dwrsel_ff_empty))), 
                                            .ext_mas_addr(awaddr_rdata), 
                                            .ext_slv_sel(ext_mas_slv_dwr_sel)) ; 
                                always
                                    @(posedge aclk_i or 
                                        negedge aresetn_i)
                                    begin
                                        if ((!aresetn_i)) 
                                            begin
                                                o_ext_mas_prt_wready <=  1'b1 ;
                                                wvalid_reg <=  1'b0 ;
                                                o_m_wvalid <=  1'b0 ;
                                                o_m_wlast <=  1'b0 ;
                                                o_m_wdata <=  {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ;
                                                o_m_wstrb <=  {(EXT_MAS_AXI_DATA_WIDTH / 8){1'b0}} ;
                                                o_m_wuser <=  {AXI_USER_WIDTH{1'b0}} ;
                                                //o_m_wvalid_d <= 1'b0;
                                                //i_ext_mas_prt_wvalid_d <= 1'b0;
                                            end
                                        else
                                            begin
                                                wvalid_reg <=  (wvalid_reg ? (!o_ext_mas_prt_wready) : (((!awaddr_dwrsel_ff_empty) & i_ext_mas_prt_wvalid) & (!o_ext_mas_prt_wready))) ;
                                                o_ext_mas_prt_wready <=  ((o_m_wvalid & i_m_wready) & (~awaddr_dwrsel_ff_empty)) ;
                                                if (((o_m_wvalid & i_m_wready) || (!o_m_wvalid))) 
                                                //o_m_wvalid      <=  i_ext_mas_prt_wvalid & i_m_wready & o_m_wvalid ? 1'b0 : i_ext_mas_prt_wvalid & !(awaddr_dwrsel_ff_empty) & ((!o_ext_mas_prt_wready) ||  (o_ext_mas_prt_wready & (!o_m_wvalid_d))||  (o_ext_mas_prt_wready & o_m_wvalid_d & (!i_ext_mas_prt_wvalid_d)) ) ;
                                                //o_m_wlast       <=  i_ext_mas_prt_wvalid & i_m_wready & o_m_wlast ? 1'b0 : i_ext_mas_prt_wvalid & i_ext_mas_prt_wlast_int & !(awaddr_dwrsel_ff_empty) & ((!o_ext_mas_prt_wready) ||  (o_ext_mas_prt_wready & (!o_m_wvalid_d)) ||  (o_ext_mas_prt_wready & o_m_wvalid_d & (!i_ext_mas_prt_wvalid_d)) ) ;
                                                //o_m_wvalid_d <= o_m_wvalid;
                                                //i_ext_mas_prt_wvalid_d <= i_ext_mas_prt_wvalid;
                                                    begin
                                                        o_m_wvalid <=  (((i_ext_mas_prt_wvalid & (!awaddr_dwrsel_ff_empty)) & (!wvalid_reg)) ? 1'b1 : 1'b0) ;
                                                        o_m_wlast <=  ((((i_ext_mas_prt_wvalid & i_ext_mas_prt_wlast_int) & (!awaddr_dwrsel_ff_empty)) & (!wvalid_reg)) ? 1'b1 : 1'b0) ;
                                                        o_m_wdata <=  i_ext_mas_prt_wdata ;
                                                        o_m_wstrb <=  i_ext_mas_prt_wstrb ;
                                                        o_m_wuser <=  i_ext_mas_prt_wuser ;
                                                    end
                                                else
                                                    begin
                                                        o_m_wvalid <=  o_m_wvalid ;
                                                        o_m_wlast <=  o_m_wlast ;
                                                        o_m_wdata <=  o_m_wdata ;
                                                        o_m_wstrb <=  o_m_wstrb ;
                                                        o_m_wuser <=  o_m_wuser ;
                                                    end
                                            end
                                    end
                            end
                    end
                if ((ID_ORDER_EN_EXT_MAS == 1)) 
                    begin : BID_SLV_GNT_BLK
                        localparam AWID_ID_ORDER_FIFO_DEPTH = 8 ; 
                        localparam AWID_ID_ORDER_FF_PTR_WIDTH = clog2(AWID_ID_ORDER_FIFO_DEPTH) ; 
                        logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] awid_ff_wr_en ; 
                        logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] awid_ff_rd_en ; 
                        logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] awid_ff_full ; 
                        logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] awid_ff_empty ; 
                        logic [((NUM_OF_ID_EXT_MAS_SUPPRT * 6) - 1):0] awid_ff_wdata ; 
                        logic [((NUM_OF_ID_EXT_MAS_SUPPRT * 6) - 1):0] awid_ff_rdata_sig ; 
                        for (id_cnt = 0;(id_cnt < NUM_OF_ID_EXT_MAS_SUPPRT);id_cnt = (id_cnt + 1))
                        begin : NUM_OF_ID_EXT_MAS_BLK
                            assign awid_ff_wr_en[id_cnt] = ((((o_m_wvalid & o_m_wlast) & i_m_wready) & (awid_rdata[(EXT_MAS_AXI_ID_WIDTH - 1):0] == id_cnt)) & (~awid_ff_full[id_cnt])) ; 
                            //for
                            assign awid_ff_rd_en[id_cnt] = ((((i_m_bvalid & o_m_bready) & (i_m_bid[(EXT_MAS_AXI_ID_WIDTH - 1):0] == id_cnt)) & (~awid_ff_empty[id_cnt])) & (i_ext_slv_wrresp_gnt == awid_ff_rdata_sig[(id_cnt * 6) +: 6])) ; 
                            assign awid_ff_wdata[(id_cnt * 6) +: 6] = ext_mas_slv_dwr_sel ; 
                            //assign o_bid_ext_slv_gnt[id_cnt*6 +: 6] = (awid_ff_empty[id_cnt]) ? TOTAL_EXTSLV_CNT : awid_ff_rdata_sig[id_cnt*6 +: 6];
                            always
                                @(posedge aclk_i or 
                                    negedge aresetn_i)
                                begin
                                    if ((~aresetn_i)) 
                                        begin
                                            o_bid_ext_slv_gnt[(id_cnt * 6) +: 6] <=  TOTAL_EXTSLV_CNT ;
                                            //o_bid_ext_slv_gnt[id_cnt*6 +: 6]  <= 6'd32;
                                        end
                                    else
                                        begin
                                            o_bid_ext_slv_gnt[(id_cnt * 6) +: 6] <=  (awid_ff_empty[id_cnt] ? TOTAL_EXTSLV_CNT : awid_ff_rdata_sig[(id_cnt * 6) +: 6]) ;
                                            //o_bid_ext_slv_gnt[id_cnt*6 +: 6]  <= (awid_ff_empty[id_cnt]) ? 6'd32 : awid_ff_rdata_sig[id_cnt*6 +: 6];
                                        end
                                end
                            if ((LATTICE_FIFO == 1)) 
                                begin : LSCC_FF_BLK
                                end
                            else
                                begin : CUSTOM_FF_BLK
                                    axi4_interconnect_ipgen_gen_fifo #(AWID_ID_ORDER_FF_PTR_WIDTH,
                                            6,
                                            0,
                                            AWID_ID_ORDER_FIFO_DEPTH) u_awid_ff (// Pointer Width
                                            // Data Width
                                            // Whether Output needs to be registered or not
                                            // Number of entries in FIFO
                                            .clk(aclk_i), 
                                                .aresetn_i(aresetn_i), 
                                                .we(awid_ff_wr_en[id_cnt]), 
                                                .wdata(awid_ff_wdata[(id_cnt * 6) +: 6]), 
                                                .re(awid_ff_rd_en[id_cnt]), 
                                                .rdata(awid_ff_rdata_sig[(id_cnt * 6) +: 6]), 
                                                .full(awid_ff_full[id_cnt]), 
                                                .pre_full(), 
                                                .empty(awid_ff_empty[id_cnt])) ; 
                                end
                        end
                    end
                //+++++++++++++++++++++++++++++++
                // WR RESPONSE  
                //+++++++++++++++++++++++++++++++
                logic mas_wresp_ff_full ; 
                logic mas_wresp_ff_empty ; 
                localparam WR_DWID = ((EXT_MAS_AXI_ID_WIDTH + AXI_USER_WIDTH) + 3) ; 
                logic [(WR_DWID - 1):0] mas_wresp_ff_wdata ; 
                logic [(WR_DWID - 1):0] mas_wresp_ff_rdata ; 
                logic mas_wresp_ff_rd_en ; 
                logic mas_wresp_ff_wr_en ; 
                assign o_m_bready = (~mas_wresp_ff_full) ; 
                assign mas_wresp_ff_wr_en = ((~mas_wresp_ff_full) & i_m_bvalid) ; 
                assign mas_wresp_ff_wdata = {i_m_buser,
                            i_m_bresp,
                            i_m_bid,
                            i_m_bvalid} ; 
                assign mas_wresp_ff_rd_en = (o_ext_mas_prt_bvalid ? (o_m_bready & (~mas_wresp_ff_empty)) : (~mas_wresp_ff_empty)) ; 
                //assign mas_wresp_ff_rd_en   = ( cur_mib_state == MI_B_IDLE ) & ~mas_wresp_ff_empty; 
                if ((LATTICE_FIFO == 1)) 
                    begin : LSCC_BRESP_FF_BLK
                    end
                else
                    begin : CUSTOM_BRESP_FF_BLK
                        axi4_interconnect_ipgen_gen_fifo #(clog2(EXT_MAS_BRESP_FIFO_DEPTH),
                                WR_DWID,
                                0,
                                EXT_MAS_BRESP_FIFO_DEPTH) u_mas_wresp_fifo (// Pointer Width
                                // Data Width { size}
                                // Whether Output needs to be registered or not
                                // Number of entries in FIFO
                                .clk(aclk_i), 
                                    .aresetn_i(aresetn_i), 
                                    .we(mas_wresp_ff_wr_en), 
                                    .wdata(mas_wresp_ff_wdata), 
                                    .re(mas_wresp_ff_rd_en), 
                                    .rdata(mas_wresp_ff_rdata), 
                                    .full(mas_wresp_ff_full), 
                                    .pre_full(), 
                                    .empty(mas_wresp_ff_empty)) ; 
                    end
                //===================================================================================
                //===================================================================================
                always
                    @(posedge aclk_i or 
                        negedge aresetn_i)
                    begin
                        if ((!aresetn_i)) 
                            begin
                                o_ext_mas_prt_bvalid <=  1'd0 ;
                                o_ext_mas_prt_bid <=  {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                                o_ext_mas_prt_bresp <=  2'd0 ;
                                o_ext_mas_prt_buser <=  {AXI_USER_WIDTH{1'b0}} ;
                            end
                        else
                            begin
                                o_ext_mas_prt_bvalid <=  nxt_o_ext_mas_prt_bvalid ;
                                o_ext_mas_prt_bid <=  nxt_o_ext_mas_prt_bid ;
                                o_ext_mas_prt_bresp <=  nxt_o_ext_mas_prt_bresp ;
                                o_ext_mas_prt_buser <=  nxt_o_ext_mas_prt_buser ;
                            end
                    end
                always
                    @(*)
                    begin
                        nxt_o_ext_mas_prt_bvalid = (mas_wresp_ff_rd_en ? mas_wresp_ff_rdata[0] : (i_ext_mas_prt_bready ? 1'b0 : o_ext_mas_prt_bvalid)) ;
                        nxt_o_ext_mas_prt_bid = (mas_wresp_ff_rd_en ? mas_wresp_ff_rdata[EXT_MAS_AXI_ID_WIDTH:1] : o_ext_mas_prt_bid) ;
                        nxt_o_ext_mas_prt_bresp = (mas_wresp_ff_rd_en ? mas_wresp_ff_rdata[(EXT_MAS_AXI_ID_WIDTH + 2):(EXT_MAS_AXI_ID_WIDTH + 1)] : o_ext_mas_prt_bresp) ;
                        nxt_o_ext_mas_prt_buser = (mas_wresp_ff_rd_en ? mas_wresp_ff_rdata[((EXT_MAS_AXI_ID_WIDTH + AXI_USER_WIDTH) + 2):(EXT_MAS_AXI_ID_WIDTH + 3)] : o_ext_mas_prt_buser) ;
                    end
            end
        if (((EXT_MAS_ACCESS_TYPE == 2'd1) || (EXT_MAS_ACCESS_TYPE == 2'd2))) 
            begin : RO_WR_BLK
                logic [(AR_ACCEPT_WIDTH - 1):0] rd_accept_cnt, 
                    nxt_rd_accept_cnt ; 
                logic [TOTAL_EXTSLV_CNT:0] int_ext_mas_prt_rvalid ; 
                logic [(EXT_MAS_AXI_DATA_WIDTH - 1):0] int_ext_mas_prt_rdata [(TOTAL_EXTSLV_CNT + 1)] ; 
                logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] int_ext_mas_prt_rid [(TOTAL_EXTSLV_CNT + 1)] ; 
                logic [(AXI_USER_WIDTH - 1):0] int_ext_mas_prt_ruser [(TOTAL_EXTSLV_CNT + 1)] ; 
                logic [(2 - 1):0] int_ext_mas_prt_rresp [(TOTAL_EXTSLV_CNT + 1)] ; 
                logic [TOTAL_EXTSLV_CNT:0] int_ext_mas_prt_rlast ; 
                logic [TOTAL_EXTSLV_CNT:0] int_ext_mas_prt_rready ; 
                logic [(TOTAL_EXTSLV_CNT - 1):0] nxt_int_ext_mas_prt_rvalid ; 
                logic [(EXT_MAS_AXI_DATA_WIDTH - 1):0] nxt_int_ext_mas_prt_rdata [TOTAL_EXTSLV_CNT] ; 
                logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] nxt_int_ext_mas_prt_rid [TOTAL_EXTSLV_CNT] ; 
                logic [(AXI_USER_WIDTH - 1):0] nxt_int_ext_mas_prt_ruser [TOTAL_EXTSLV_CNT] ; 
                logic [(2 - 1):0] nxt_int_ext_mas_prt_rresp [TOTAL_EXTSLV_CNT] ; 
                logic [(TOTAL_EXTSLV_CNT - 1):0] nxt_int_ext_mas_prt_rlast ; 
                logic nxt_o_m_rready ; 
                logic rd_accept_full ; 
                assign rd_accept_full = (rd_accept_cnt == EXT_MAS_AXI_RD_ACCEPT) ; 
                always
                    @(posedge aclk_i or 
                        negedge aresetn_i)
                    begin
                        if ((~aresetn_i)) 
                            begin
                                rd_accept_cnt <=  {AR_ACCEPT_WIDTH{1'b0}} ;
                            end
                        else
                            begin
                                rd_accept_cnt <=  nxt_rd_accept_cnt ;
                            end
                    end
                always
                    @(*)
                    begin
                        nxt_rd_accept_cnt = ((((i_ext_mas_prt_arvalid & o_ext_mas_prt_arready) & (~rd_accept_full)) & ((o_ext_mas_prt_rvalid & o_ext_mas_prt_rlast) & i_ext_mas_prt_rready)) ? rd_accept_cnt : (((i_ext_mas_prt_arvalid & o_ext_mas_prt_arready) & (~rd_accept_full)) ? (rd_accept_cnt + 1'd1) : (((o_ext_mas_prt_rvalid & o_ext_mas_prt_rlast) & i_ext_mas_prt_rready) ? (rd_accept_cnt - 1'd1) : rd_accept_cnt))) ;
                    end
                logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] arid_rdata ; 
                logic [(EXT_MAS_AXI_ADDR_WIDTH - 1):0] araddr_rdata ; 
                logic [5:0] i_ext_slv_rdresp_gnt_final ; 
                logic rdata_ff_full ; 
                logic rdata_ff_wr_en ; 
                //===================================================================================
                // ADDRESS DECODER
                //===================================================================================
                if ((EXT_MAS_CDC_EN == 0)) 
                    begin : EXT_MAS_CDC_DIS_BLK
                        localparam AR_DATA_WIDTH = ((((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + AXI_USER_WIDTH) + 22) ; 
                        //localparam AR_PTR_WIDTH = clog2(EXT_MAS_AXI_RD_ACCEPT);
                        localparam AR_PTR_WIDTH = (((EXT_MAS_AXI_RD_ACCEPT == 1) || (EXT_MAS_AXI_RD_ACCEPT == 2)) ? 1 : (((EXT_MAS_AXI_RD_ACCEPT == 3) || (EXT_MAS_AXI_RD_ACCEPT == 4)) ? 2 : (((EXT_MAS_AXI_RD_ACCEPT >= 5) && (EXT_MAS_AXI_RD_ACCEPT <= 8)) ? 3 : 4))) ; 
                        //    logic [1:0] cur_miar_state, nxt_miar_state;
                        logic nxt_o_m_arvalid ; 
                        logic [(EXT_MAS_AXI_ADDR_WIDTH - 1):0] nxt_o_m_araddr ; 
                        logic [(3 - 1):0] nxt_o_m_arsize ; 
                        logic [(8 - 1):0] nxt_o_m_arlen ; 
                        logic [(2 - 1):0] nxt_o_m_arburst ; 
                        logic [(4 - 1):0] nxt_o_m_arcache ; 
                        logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] nxt_o_m_arid ; 
                        logic [(3 - 1):0] nxt_o_m_arprot ; 
                        logic [(1 - 1):0] nxt_o_m_arlock ; 
                        logic [(4 - 1):0] nxt_o_m_arqos ; 
                        logic [(4 - 1):0] nxt_o_m_arregion ; 
                        logic [(AXI_USER_WIDTH - 1):0] nxt_o_m_aruser ; 
                        logic ext_mas_arff_full ; 
                        logic ext_mas_arff_empty ; 
                        logic ext_mas_arff_wr_en ; 
                        logic ext_mas_arff_rd_en ; 
                        logic [(AR_DATA_WIDTH - 1):0] ext_mas_arff_wdata ; 
                        logic [(AR_DATA_WIDTH - 1):0] ext_mas_arff_rdata ; 
                        assign ext_mas_arff_wr_en = ((((~ext_mas_arff_full) & i_ext_mas_prt_arvalid) & o_ext_mas_prt_arready) & (~rd_accept_full)) ; 
                        assign ext_mas_arff_wdata = ((EXT_MAS_AXI_PROTOCOL == 1) ? {i_ext_mas_prt_aruser,
                                    i_ext_mas_prt_arregion,
                                    i_ext_mas_prt_arqos,
                                    i_ext_mas_prt_arlock,
                                    i_ext_mas_prt_arprot,
                                    i_ext_mas_prt_arid,
                                    i_ext_mas_prt_arcache,
                                    i_ext_mas_prt_arburst,
                                    i_ext_mas_prt_arlen[0],
                                    i_ext_mas_prt_arsize,
                                    i_ext_mas_prt_araddr,
                                    i_ext_mas_prt_arvalid} : {i_ext_mas_prt_aruser,
                                    i_ext_mas_prt_arregion,
                                    i_ext_mas_prt_arqos,
                                    i_ext_mas_prt_arlock,
                                    i_ext_mas_prt_arprot,
                                    i_ext_mas_prt_arid,
                                    i_ext_mas_prt_arcache,
                                    i_ext_mas_prt_arburst,
                                    i_ext_mas_prt_arlen,
                                    i_ext_mas_prt_arsize,
                                    i_ext_mas_prt_araddr,
                                    i_ext_mas_prt_arvalid}) ; 
                        assign ext_mas_arff_rd_en = (o_m_arvalid ? (i_m_arready && (!ext_mas_arff_empty)) : (!ext_mas_arff_empty)) ; 
                        //assign ext_mas_arff_rd_en = ( cur_miar_state == MI_AR_IDLE ) && (!ext_mas_arff_empty); 
                        //assign o_ext_mas_prt_arready = ~rd_accept_full & ~ext_mas_arff_full ; 
                        if ((LATTICE_FIFO == 1)) 
                            begin : LSCC_AR_FF_BLK
                            end
                        else
                            begin : CUSTOM_AR_FF_BLK
                                axi4_interconnect_ipgen_gen_fifo #(AR_PTR_WIDTH,
                                        AR_DATA_WIDTH,
                                        0,
                                        EXT_MAS_AXI_RD_ACCEPT) u_ext_mas_ard_fifo (// Pointer Width
                                        // Data Width { size}
                                        // Whether Output needs to be registered or not
                                        // Number of entries in FIFO
                                        .clk(aclk_i), 
                                            .aresetn_i(aresetn_i), 
                                            .we(ext_mas_arff_wr_en), 
                                            .wdata(ext_mas_arff_wdata), 
                                            .re(ext_mas_arff_rd_en), 
                                            .rdata(ext_mas_arff_rdata), 
                                            .full(ext_mas_arff_full), 
                                            .pre_full(), 
                                            .empty(ext_mas_arff_empty)) ; 
                            end
                        always
                            @(posedge aclk_i or 
                                negedge aresetn_i)
                            begin
                                if ((!aresetn_i)) 
                                    begin
                                        o_m_arvalid <=  1'd0 ;
                                        o_m_araddr <=  {EXT_MAS_AXI_ADDR_WIDTH{1'b0}} ;
                                        o_m_arsize <=  3'd0 ;
                                        o_m_arlen <=  {EXT_MAS_AXI_LEN_WIDTH{1'b0}} ;
                                        o_m_arburst <=  2'd0 ;
                                        o_m_arcache <=  4'd0 ;
                                        o_m_arid <=  {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                                        o_m_arprot <=  3'd0 ;
                                        o_m_arlock <=  1'd0 ;
                                        o_m_arqos <=  4'd0 ;
                                        o_m_aruser <=  {AXI_USER_WIDTH{1'b0}} ;
                                        o_m_arregion <=  4'd0 ;
                                        o_ext_mas_prt_arready <=  1'b1 ;
                                    end
                                else
                                    begin
                                        o_m_arvalid <=  nxt_o_m_arvalid ;
                                        o_m_araddr <=  nxt_o_m_araddr ;
                                        o_m_arsize <=  nxt_o_m_arsize ;
                                        o_m_arlen <=  nxt_o_m_arlen ;
                                        o_m_arburst <=  nxt_o_m_arburst ;
                                        o_m_arcache <=  nxt_o_m_arcache ;
                                        o_m_arid <=  nxt_o_m_arid ;
                                        o_m_arprot <=  nxt_o_m_arprot ;
                                        o_m_arlock <=  nxt_o_m_arlock ;
                                        o_m_arqos <=  nxt_o_m_arqos ;
                                        o_m_aruser <=  nxt_o_m_aruser ;
                                        o_m_arregion <=  nxt_o_m_arregion ;
                                        //o_ext_mas_prt_arready <= ~rd_accept_full & ~ext_mas_arff_full ; 
                                        o_ext_mas_prt_arready <=  (((i_ext_mas_prt_arvalid & o_ext_mas_prt_arready) & ((o_ext_mas_prt_rvalid & o_ext_mas_prt_rlast) & i_ext_mas_prt_rready)) ? (~ext_mas_arff_full) : ((i_ext_mas_prt_arvalid & o_ext_mas_prt_arready) ? ((EXT_MAS_AXI_RD_ACCEPT == 1) ? 1'b0 : ((|rd_accept_cnt) ? (!(rd_accept_cnt == (EXT_MAS_AXI_RD_ACCEPT - 1))) : (~ext_mas_arff_full))) : (((o_ext_mas_prt_rvalid & o_ext_mas_prt_rlast) & i_ext_mas_prt_rready) ? (~ext_mas_arff_full) : ((~rd_accept_full) & (~ext_mas_arff_full))))) ;
                                    end
                            end
                        always
                            @(*)
                            begin
                                nxt_o_m_arvalid = (ext_mas_arff_rd_en ? ext_mas_arff_rdata[0] : (i_m_arready ? 1'b0 : o_m_arvalid)) ;
                                nxt_o_m_araddr = (ext_mas_arff_rd_en ? ext_mas_arff_rdata[EXT_MAS_AXI_ADDR_WIDTH:1] : o_m_araddr) ;
                                nxt_o_m_arsize = (ext_mas_arff_rd_en ? ext_mas_arff_rdata[(EXT_MAS_AXI_ADDR_WIDTH + 3):(EXT_MAS_AXI_ADDR_WIDTH + 1)] : o_m_arsize) ;
                                nxt_o_m_arlen = (ext_mas_arff_rd_en ? ext_mas_arff_rdata[((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_LEN_WIDTH) + 3):(EXT_MAS_AXI_ADDR_WIDTH + 4)] : o_m_arlen) ;
                                nxt_o_m_arburst = (ext_mas_arff_rd_en ? ext_mas_arff_rdata[((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_LEN_WIDTH) + 5):((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_LEN_WIDTH) + 4)] : o_m_arburst) ;
                                nxt_o_m_arcache = (ext_mas_arff_rd_en ? ext_mas_arff_rdata[((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_LEN_WIDTH) + 9):((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_LEN_WIDTH) + 6)] : o_m_arcache) ;
                                nxt_o_m_arid = (ext_mas_arff_rd_en ? ext_mas_arff_rdata[(((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + 9):((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_LEN_WIDTH) + 10)] : o_m_arid) ;
                                nxt_o_m_arprot = (ext_mas_arff_rd_en ? ext_mas_arff_rdata[(((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + 12):(((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + 10)] : o_m_arprot) ;
                                nxt_o_m_arlock = (ext_mas_arff_rd_en ? ext_mas_arff_rdata[(((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + 13)] : o_m_arlock) ;
                                nxt_o_m_arqos = (ext_mas_arff_rd_en ? ext_mas_arff_rdata[(((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + 17):(((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + 14)] : o_m_arqos) ;
                                nxt_o_m_arregion = (ext_mas_arff_rd_en ? ext_mas_arff_rdata[(((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + 21):(((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + 18)] : o_m_arregion) ;
                                nxt_o_m_aruser = (ext_mas_arff_rd_en ? ext_mas_arff_rdata[((((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + AXI_USER_WIDTH) + 21):(((EXT_MAS_AXI_ADDR_WIDTH + EXT_MAS_AXI_ID_WIDTH) + EXT_MAS_AXI_LEN_WIDTH) + 22)] : o_m_aruser) ;
                            end
                        axi4_interconnect_ipgen_ext_mas_adr_dec #(.TOTAL_EXTSLV_CNT(TOTAL_EXTSLV_CNT),
                                .EXT_MAS_AXI_ADDR_WIDTH(EXT_MAS_AXI_ADDR_WIDTH),
                                .EXT_SLV_MAX_FRAGMENT_CNT(EXT_SLV_MAX_FRAGMENT_CNT),
                                .EXT_SLV_FRAGMENT_CNT(EXT_SLV_FRAGMENT_CNT),
                                .EXT_SLV_FRAGMENT_BASE_ADDR(EXT_SLV_FRAGMENT_BASE_ADDR),
                                .EXT_SLV_FRAGMENT_END_ADDR(EXT_SLV_FRAGMENT_END_ADDR)) u_ext_mas_ard_adr_dec (.aclk_i(aclk_i), 
                                    .aresetn_i(aresetn_i), 
                                    .ext_mas_addr_valid(nxt_o_m_arvalid), 
                                    .ext_mas_addr(nxt_o_m_araddr), 
                                    .ext_slv_sel(ext_mas_slv_rd_sel)) ; 
                    end
                else
                    begin : EXT_MAS_CDC_ENB_BLK
                        logic arvalid_reg ; 
                        //logic o_m_arvalid_d;
                        //logic i_ext_mas_prt_arvalid_d;
                        axi4_interconnect_ipgen_ext_mas_adr_dec #(.TOTAL_EXTSLV_CNT(TOTAL_EXTSLV_CNT),
                                .EXT_MAS_AXI_ADDR_WIDTH(EXT_MAS_AXI_ADDR_WIDTH),
                                .EXT_SLV_MAX_FRAGMENT_CNT(EXT_SLV_MAX_FRAGMENT_CNT),
                                .EXT_SLV_FRAGMENT_CNT(EXT_SLV_FRAGMENT_CNT),
                                .EXT_SLV_FRAGMENT_BASE_ADDR(EXT_SLV_FRAGMENT_BASE_ADDR),
                                .EXT_SLV_FRAGMENT_END_ADDR(EXT_SLV_FRAGMENT_END_ADDR)) u_ext_mas_ard_adr_dec (.aclk_i(aclk_i), 
                                    .aresetn_i(aresetn_i), 
                                    .ext_mas_addr_valid(i_ext_mas_prt_arvalid), 
                                    .ext_mas_addr(i_ext_mas_prt_araddr), 
                                    .ext_slv_sel(ext_mas_slv_rd_sel)) ; 
                        always
                            @(posedge aclk_i or 
                                negedge aresetn_i)
                            begin
                                if ((!aresetn_i)) 
                                    begin
                                        o_ext_mas_prt_arready <=  1'b0 ;
                                        arvalid_reg <=  1'b0 ;
                                        o_m_arvalid <=  1'b0 ;
                                        o_m_araddr <=  {EXT_MAS_AXI_ADDR_WIDTH{1'b0}} ;
                                        o_m_arsize <=  3'd0 ;
                                        o_m_arlen <=  8'd0 ;
                                        o_m_arburst <=  2'd0 ;
                                        o_m_arcache <=  4'd0 ;
                                        o_m_arid <=  {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                                        o_m_arprot <=  3'd0 ;
                                        o_m_arlock <=  1'd0 ;
                                        o_m_arqos <=  4'd0 ;
                                        o_m_arregion <=  4'd0 ;
                                        o_m_aruser <=  {AXI_USER_WIDTH{1'b0}} ;
                                        //o_m_arvalid_d     <= 1'b0 ;
                                        //i_ext_mas_prt_arvalid_d <= 1'b0;
                                    end
                                else
                                    begin
                                        o_ext_mas_prt_arready <=  (rd_accept_full ? 1'b0 : (o_m_arvalid & i_m_arready)) ;
                                        arvalid_reg <=  (arvalid_reg ? (!o_ext_mas_prt_arready) : (((!rd_accept_full) & i_ext_mas_prt_arvalid) & (!o_ext_mas_prt_arready))) ;
                                        if (((o_m_arvalid & i_m_arready) || (!o_m_arvalid))) 
                                        //o_m_arvalid     <=  i_ext_mas_prt_arvalid & i_m_arready & o_m_arvalid ? 1'b0 : i_ext_mas_prt_arvalid & ~rd_accept_full & ((!o_ext_mas_prt_arready) ||  (o_ext_mas_prt_arready & (!o_m_arvalid_d)) ||  (o_ext_mas_prt_arready & o_m_arvalid_d & (!i_ext_mas_prt_arvalid_d))   ) ;
                                        //o_m_arvalid_d     <= o_m_arvalid;
                                        //i_ext_mas_prt_arvalid_d <= i_ext_mas_prt_arvalid;
                                            begin
                                                o_m_arvalid <=  (((i_ext_mas_prt_arvalid & (!rd_accept_full)) & (!arvalid_reg)) ? 1'b1 : 1'b0) ;
                                                o_m_araddr <=  i_ext_mas_prt_araddr ;
                                                o_m_arsize <=  i_ext_mas_prt_arsize ;
                                                o_m_arlen <=  i_ext_mas_prt_arlen ;
                                                o_m_arburst <=  i_ext_mas_prt_arburst ;
                                                o_m_arcache <=  i_ext_mas_prt_arcache ;
                                                o_m_arid <=  i_ext_mas_prt_arid ;
                                                o_m_arprot <=  i_ext_mas_prt_arprot ;
                                                o_m_arlock <=  i_ext_mas_prt_arlock ;
                                                o_m_arqos <=  i_ext_mas_prt_arqos ;
                                                o_m_arregion <=  i_ext_mas_prt_arregion ;
                                                o_m_aruser <=  i_ext_mas_prt_aruser ;
                                            end
                                        else
                                            begin
                                                o_m_arvalid <=  o_m_arvalid ;
                                                o_m_araddr <=  o_m_araddr ;
                                                o_m_arsize <=  o_m_arsize ;
                                                o_m_arlen <=  o_m_arlen ;
                                                o_m_arburst <=  o_m_arburst ;
                                                o_m_arcache <=  o_m_arcache ;
                                                o_m_arid <=  o_m_arid ;
                                                o_m_arprot <=  o_m_arprot ;
                                                o_m_arlock <=  o_m_arlock ;
                                                o_m_arqos <=  o_m_arqos ;
                                                o_m_arregion <=  o_m_arregion ;
                                                o_m_aruser <=  o_m_aruser ;
                                            end
                                    end
                            end
                    end
                if ((ID_ORDER_EN_EXT_MAS == 1)) 
                    begin : RID_SLV_GNT_BLK
                        logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] arid_ff_wr_en ; 
                        logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] arid_ff_rd_en ; 
                        logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] arid_ff_full ; 
                        logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] arid_ff_empty ; 
                        logic [((NUM_OF_ID_EXT_MAS_SUPPRT * 6) - 1):0] arid_ff_wdata ; 
                        logic [((NUM_OF_ID_EXT_MAS_SUPPRT * 6) - 1):0] arid_ff_rdata_sig ; 
                        for (id_cnt = 0;(id_cnt < NUM_OF_ID_EXT_MAS_SUPPRT);id_cnt = (id_cnt + 1))
                        begin : NUM_OF_ID_EXT_MAS_BLK
                            localparam ARID_ID_ORDER_FIFO_DEPTH = 8 ; 
                            //for
                            localparam ARID_ID_ORDER_FF_PTR_WIDTH = clog2(ARID_ID_ORDER_FIFO_DEPTH) ; 
                            assign arid_ff_wr_en[id_cnt] = (((o_m_arvalid & i_m_arready) & (o_m_arid[(EXT_MAS_AXI_ID_WIDTH - 1):0] == id_cnt)) & (~arid_ff_full[id_cnt])) ; 
                            assign arid_ff_rd_en[id_cnt] = ((((i_m_rvalid & i_m_rlast) & (i_m_rid[(EXT_MAS_AXI_ID_WIDTH - 1):0] == id_cnt)) & (~arid_ff_empty[id_cnt])) & (i_ext_slv_rdresp_gnt == arid_ff_rdata_sig[(id_cnt * 6) +: 6])) ; 
                            assign arid_ff_wdata[(id_cnt * 6) +: 6] = ext_mas_slv_rd_sel ; 
                            //assign o_rid_ext_slv_gnt[id_cnt*6 +: 6] = (arid_ff_empty[id_cnt]) ? TOTAL_EXTSLV_CNT : arid_ff_rdata_sig[id_cnt*6 +: 6];
                            always
                                @(posedge aclk_i or 
                                    negedge aresetn_i)
                                begin
                                    if ((~aresetn_i)) 
                                        begin
                                            o_rid_ext_slv_gnt[(id_cnt * 6) +: 6] <=  TOTAL_EXTSLV_CNT ;
                                            //o_rid_ext_slv_gnt[id_cnt*6 +: 6]  <= 6'd32;
                                        end
                                    else
                                        begin
                                            o_rid_ext_slv_gnt[(id_cnt * 6) +: 6] <=  (arid_ff_empty[id_cnt] ? TOTAL_EXTSLV_CNT : arid_ff_rdata_sig[(id_cnt * 6) +: 6]) ;
                                            //o_rid_ext_slv_gnt[id_cnt*6 +: 6]  <= (arid_ff_empty[id_cnt]) ? 6'd32 : arid_ff_rdata_sig[id_cnt*6 +: 6];
                                        end
                                end
                            if ((LATTICE_FIFO == 1)) 
                                begin : LSCC_FF_BLK
                                end
                            else
                                begin : CUSTOM_FF_BLK
                                    axi4_interconnect_ipgen_gen_fifo #(ARID_ID_ORDER_FF_PTR_WIDTH,
                                            6,
                                            0,
                                            ARID_ID_ORDER_FIFO_DEPTH) u_arid_ff (// Pointer Width
                                            // Data Width
                                            // Whether Output needs to be registered or not
                                            // Number of entries in FIFO
                                            .clk(aclk_i), 
                                                .aresetn_i(aresetn_i), 
                                                .we(arid_ff_wr_en[id_cnt]), 
                                                .wdata(arid_ff_wdata[(id_cnt * 6) +: 6]), 
                                                .re(arid_ff_rd_en[id_cnt]), 
                                                .rdata(arid_ff_rdata_sig[(id_cnt * 6) +: 6]), 
                                                .full(arid_ff_full[id_cnt]), 
                                                .pre_full(), 
                                                .empty(arid_ff_empty[id_cnt])) ; 
                                end
                        end
                    end
                //Read data channel
                integer ext_slv_val ; 
                always
                    @(*)
                    begin
                        //nxt_o_m_rready  = o_m_rready;
                        o_m_rready = 1'b1 ;
                        for (ext_slv_val = 0 ; (ext_slv_val < TOTAL_EXTSLV_CNT) ; ext_slv_val = (ext_slv_val + 1))
                            begin
                                if ((i_ext_slv_rdresp_gnt == ext_slv_val)) 
                                    begin
                                        //nxt_o_m_rready  = int_ext_mas_prt_rready[ext_slv_val];
                                        o_m_rready = int_ext_mas_prt_rready[ext_slv_val] ;
                                    end
                            end
                    end
                if ((EXT_MAS_AXI_PROTOCOL == 0)) 
                    begin : AXI4_EXTMAS_BLK
                        for (ext_slv_cnt = 0;(ext_slv_cnt <= TOTAL_EXTSLV_CNT);ext_slv_cnt = (ext_slv_cnt + 1))
                        begin : EXT_SLV_BLK
                            always
                            //for -ext_slv_cnt
                                @(posedge aclk_i or 
                                    negedge aresetn_i)
                                begin
                                    if ((~aresetn_i)) 
                                        begin
                                            i_ext_slv_rdresp_gnt_final <=  6'd0 ;
                                        end
                                    else
                                        begin
                                            i_ext_slv_rdresp_gnt_final <=  i_ext_slv_rdresp_gnt ;
                                        end
                                end
                            if ((ext_slv_cnt == TOTAL_EXTSLV_CNT)) 
                                begin : DEF_SLV_BLK
                                    always
                                        @(posedge aclk_i or 
                                            negedge aresetn_i)
                                        begin
                                            if ((~aresetn_i)) 
                                                begin
                                                    //i_ext_slv_rdresp_gnt_final          <= 6'd0;
                                                    int_ext_mas_prt_rvalid[ext_slv_cnt] <=  1'b0 ;
                                                end
                                            else
                                                begin
                                                    //i_ext_slv_rdresp_gnt_final          <= i_ext_slv_rdresp_gnt;
                                                    int_ext_mas_prt_rvalid[ext_slv_cnt] <=  ((i_m_rvalid & o_m_rready) & (i_ext_slv_rdresp_gnt == ext_slv_cnt)) ;
                                                end
                                        end
                                    assign int_ext_mas_prt_rready[ext_slv_cnt] = ((i_ext_slv_rdresp_gnt_final == ext_slv_cnt) & (~rdata_ff_full)) ; 
                                    assign int_ext_mas_prt_rdata[ext_slv_cnt] = {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ; 
                                    assign int_ext_mas_prt_rresp[ext_slv_cnt] = 2'd3 ; 
                                    assign int_ext_mas_prt_rid[ext_slv_cnt] = i_m_rid ; 
                                    assign int_ext_mas_prt_rlast[ext_slv_cnt] = i_m_rlast ; 
                                    assign int_ext_mas_prt_ruser[ext_slv_cnt] = i_m_ruser ; 
                                end
                            else
                                begin : ACTUAL_SLV_BLK
                                    localparam EXT_SLV_AXI_DATA_WIDTH_INT = EXT_SLV_AXI_DATA_WIDTH[(ext_slv_cnt * 11) +: 11] ; 
                                    if ((EXT_MAS_CONNECTED_SLAVE[ext_slv_cnt] == 1)) 
                                        begin : EXTMAS_CNCT_EXTSLV_BLK
                                            if ((EXT_SLV_AXI_PROTOCOL[ext_slv_cnt] == 0)) 
                                                begin : AXI4_EXTSLV_BLK
                                                    if ((EXT_MAS_AXI_DATA_WIDTH < EXT_SLV_AXI_DATA_WIDTH_INT)) 
                                                        begin : DOWN_BLK
                                                            localparam DOWN_SIZE = (EXT_SLV_AXI_DATA_WIDTH_INT / EXT_MAS_AXI_DATA_WIDTH) ; 
                                                            localparam AR_FF_DWIDTH = 13 ; 
                                                            localparam AR_FF_PTR_WIDTH = clog2(AR_FF_DEPTH) ; 
                                                            localparam EXT_MAS_BUS_SIZE = ((EXT_MAS_AXI_DATA_WIDTH == 8) ? 0 : clog2((EXT_MAS_AXI_DATA_WIDTH / 8))) ; 
                                                            //=====================================================
                                                            //RD ADDRESS FIFO
                                                            //=====================================================
                                                            logic sar_ff_full ; 
                                                            logic sar_ff_empty ; 
                                                            logic sar_ff_wr_en ; 
                                                            logic sar_ff_rd_en ; 
                                                            logic [(AR_FF_DWIDTH - 1):0] sar_ff_wdata ; 
                                                            logic [(AR_FF_DWIDTH - 1):0] sar_ff_rdata_sig ; 
                                                            logic [(AR_FF_DWIDTH - 1):0] sar_ff_rdata ; 
                                                            logic [2:0] sar_size ; 
                                                            logic [7:0] sar_addr ; 
                                                            logic [1:0] sar_burst ; 
                                                            assign sar_ff_wr_en = (((o_m_arvalid & i_m_arready) & (ext_mas_slv_rd_sel == ext_slv_cnt)) & (!sar_ff_full)) ; 
                                                            //assign sar_ff_wr_en  = o_m_arvalid & i_m_split_arready & (ext_mas_slv_rd_sel==ext_slv_cnt) & (!sar_ff_full);
                                                            assign sar_ff_wdata = {o_m_arburst[1:0],
                                                                        o_m_arsize[2:0],
                                                                        o_m_araddr[7:0]} ; // 8 bits to represent 128 bytes of address for maximum bus width 1024 bits
                                                            assign sar_ff_rd_en = ((((i_m_rvalid & i_m_rlast) & int_ext_mas_prt_rready[ext_slv_cnt]) & (i_ext_slv_rdresp_gnt == ext_slv_cnt)) & (~sar_ff_empty)) ; 
                                                            if ((LATTICE_FIFO == 1)) 
                                                                begin : LSCC_FF_BLK
                                                                end
                                                            else
                                                                begin : CUSTOM_FF_BLK
                                                                    axi4_interconnect_ipgen_gen_fifo #(AR_FF_PTR_WIDTH,
                                                                            AR_FF_DWIDTH,
                                                                            0,
                                                                            AR_FF_DEPTH) u_saraddr_arsize_arburst_fifo (// Pointer Width
                                                                            // Data Width {awaddr[7:0]} 
                                                                            // Whether Output needs to be registered or not
                                                                            // Number of entries in FIFO
                                                                            .clk(aclk_i), 
                                                                                .aresetn_i(aresetn_i), 
                                                                                .we(sar_ff_wr_en), 
                                                                                .wdata(sar_ff_wdata), 
                                                                                .re(sar_ff_rd_en), 
                                                                                .rdata(sar_ff_rdata_sig), 
                                                                                .full(sar_ff_full), 
                                                                                .pre_full(), 
                                                                                .empty(sar_ff_empty)) ; 
                                                                end
                                                            assign sar_ff_rdata = (sar_ff_empty ? 'd0 : sar_ff_rdata_sig) ; 
                                                            assign sar_addr = sar_ff_rdata[7:0] ; 
                                                            assign sar_size = sar_ff_rdata[8 +: 3] ; 
                                                            assign sar_burst = sar_ff_rdata[(AR_FF_DWIDTH - 1) -: 2] ; 
                                                            localparam RD_DOWN_IDLE = 2'd0 ; 
                                                            localparam RD_DOWN_VALID = 2'd1 ; 
                                                            localparam RD_DOWN_NARROW_VALID = 2'd2 ; 
                                                            //localparam ADDR_WIDTH   = clog2(DOWN_SIZE);
                                                            localparam ADDR_WIDTH = clog2((EXT_SLV_AXI_DATA_WIDTH_INT / 8)) ; // maximum possible width
                                                            localparam MSB_NARROW_ADDR = clog2((EXT_SLV_AXI_DATA_WIDTH_INT / 8)) ; 
                                                            localparam MSB_ADDR = (clog2((EXT_SLV_AXI_DATA_WIDTH_INT / 8)) - 1) ; 
                                                            localparam ADDR_BIT_WIDTH = ((DOWN_SIZE == 2) ? 1 : ((DOWN_SIZE == 4) ? 2 : ((DOWN_SIZE == 8) ? 3 : ((DOWN_SIZE == 16) ? 4 : ((DOWN_SIZE == 32) ? 5 : ((DOWN_SIZE == 64) ? 6 : 7)))))) ; 
                                                            logic [1:0] cur_rd_down_state, 
                                                                nxt_rd_down_state ; 
                                                            logic [(ADDR_WIDTH - 1):0] lsb_addr, 
                                                                nxt_lsb_addr ; 
                                                            logic [6:0] ext_mas_req_size_bytes ; 
                                                            logic [9:0] ext_mas_req_size_bits ; 
                                                            logic [7:0] narrow_down_cnt ; 
                                                            logic [(ADDR_BIT_WIDTH - 1):0] downsize_addr, 
                                                                nxt_downsize_addr ; 
                                                            assign ext_mas_req_size_bytes = (1'd1 << sar_size) ; 
                                                            assign ext_mas_req_size_bits = (4'b1000 << sar_size) ; 
                                                            assign narrow_down_cnt = ((EXT_SLV_AXI_DATA_WIDTH_INT / 8) / ext_mas_req_size_bytes) ; 
                                                            assign int_ext_mas_prt_rready[ext_slv_cnt] = ((i_ext_slv_rdresp_gnt_final == ext_slv_cnt) & (~rdata_ff_full)) ; 
                                                            //assign int_ext_mas_prt_rready[ext_slv_cnt] =  ~rdata_ff_full;
                                                            //         assign int_ext_mas_prt_split_rready[ext_slv_cnt] = ~rdata_ff_full;
                                                            always
                                                                @(posedge aclk_i or 
                                                                    negedge aresetn_i)
                                                                begin
                                                                    if ((~aresetn_i)) 
                                                                        begin
                                                                            //i_ext_slv_rdresp_gnt_final          <= 6'd0;
                                                                            int_ext_mas_prt_rvalid[ext_slv_cnt] <=  1'b0 ;
                                                                            int_ext_mas_prt_rdata[ext_slv_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH_INT{1'b0}} ;
                                                                            int_ext_mas_prt_rresp[ext_slv_cnt] <=  2'd0 ;
                                                                            int_ext_mas_prt_rid[ext_slv_cnt] <=  {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                                                                            int_ext_mas_prt_rlast[ext_slv_cnt] <=  1'b0 ;
                                                                            int_ext_mas_prt_ruser[ext_slv_cnt] <=  {AXI_USER_WIDTH{1'b0}} ;
                                                                            cur_rd_down_state <=  RD_DOWN_IDLE ;
                                                                            lsb_addr <=  {ADDR_WIDTH{1'b0}} ;
                                                                            downsize_addr <=  {ADDR_BIT_WIDTH{1'b0}} ;
                                                                        end
                                                                    else
                                                                        begin
                                                                            // i_ext_slv_rdresp_gnt_final          <= i_ext_slv_rdresp_gnt;
                                                                            int_ext_mas_prt_rvalid[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] ;
                                                                            int_ext_mas_prt_rdata[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rdata[ext_slv_cnt] ;
                                                                            int_ext_mas_prt_rresp[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rresp[ext_slv_cnt] ;
                                                                            int_ext_mas_prt_rid[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rid[ext_slv_cnt] ;
                                                                            int_ext_mas_prt_rlast[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rlast[ext_slv_cnt] ;
                                                                            int_ext_mas_prt_ruser[ext_slv_cnt] <=  nxt_int_ext_mas_prt_ruser[ext_slv_cnt] ;
                                                                            cur_rd_down_state <=  nxt_rd_down_state ;
                                                                            lsb_addr <=  nxt_lsb_addr ;
                                                                            downsize_addr <=  nxt_downsize_addr ;
                                                                        end
                                                                end
                                                            integer downsize_cnt ; 
                                                            always
                                                                @(*)
                                                                begin
                                                                    nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = int_ext_mas_prt_rvalid[ext_slv_cnt] ;
                                                                    nxt_int_ext_mas_prt_rdata[ext_slv_cnt] = int_ext_mas_prt_rdata[ext_slv_cnt] ;
                                                                    nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = int_ext_mas_prt_rresp[ext_slv_cnt] ;
                                                                    nxt_int_ext_mas_prt_ruser[ext_slv_cnt] = int_ext_mas_prt_ruser[ext_slv_cnt] ;
                                                                    nxt_int_ext_mas_prt_rid[ext_slv_cnt] = int_ext_mas_prt_rid[ext_slv_cnt] ;
                                                                    nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = int_ext_mas_prt_rlast[ext_slv_cnt] ;
                                                                    nxt_lsb_addr = lsb_addr ;
                                                                    nxt_rd_down_state = cur_rd_down_state ;
                                                                    nxt_downsize_addr = downsize_addr ;
                                                                    case (cur_rd_down_state)
                                                                    RD_DOWN_IDLE : 
                                                                        begin
                                                                            nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (int_ext_mas_prt_rready ? 1'b0 : int_ext_mas_prt_rvalid[ext_slv_cnt]) ;
                                                                            nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = (int_ext_mas_prt_rready ? 1'b0 : int_ext_mas_prt_rlast[ext_slv_cnt]) ;
                                                                            nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = 2'd0 ;
                                                                            if ((((i_ext_slv_rdresp_gnt == ext_slv_cnt) & (!rdata_ff_full)) & (!sar_ff_empty))) 
                                                                                begin
                                                                                nxt_rd_down_state = ((sar_size < EXT_MAS_BUS_SIZE) ? RD_DOWN_NARROW_VALID : RD_DOWN_VALID) ;
                                                                                nxt_downsize_addr = ((sar_size < EXT_MAS_BUS_SIZE) ? sar_ff_rdata[clog2((EXT_MAS_AXI_DATA_WIDTH / 8)) +: clog2(DOWN_SIZE)] : downsize_addr) ;
                                                                                //nxt_downsize_addr    = sar_size < EXT_MAS_BUS_SIZE ? ((|sar_ff_rdata[clog2(EXT_MAS_AXI_DATA_WIDTH/8) +:clog2(DOWN_SIZE)]) ? 
                                                                                //                       {sar_ff_rdata[clog2(EXT_MAS_AXI_DATA_WIDTH/8) +: clog2(DOWN_SIZE)], {clog2(EXT_MAS_AXI_DATA_WIDTH/8){1'b0}} }: 
                                                                                //                      {ADDR_WIDTH{1'b0}} ) : downsize_addr;
                                                                                //                  nxt_downsize_addr    = sar_size < EXT_MAS_BUS_SIZE ? ((|sar_ff_rdata[clog2(EXT_MAS_AXI_DATA_WIDTH/8) +:clog2(DOWN_SIZE)]) ? 
                                                                                //                                      (sar_size==3'd0 ? {sar_ff_rdata[1 +:MSB_NARROW_ADDR], 1'd0} :    
                                                                                //                                       sar_size==3'd1 ? {sar_ff_rdata[2 +:MSB_NARROW_ADDR], 2'd0} : 
                                                                                //                                       sar_size==3'd2 ? {sar_ff_rdata[3 +:MSB_NARROW_ADDR], 3'd0} : 
                                                                                //                                       sar_size==3'd3 ? {sar_ff_rdata[4 +:MSB_NARROW_ADDR], 4'd0} : 
                                                                                //                                       sar_size==3'd4 ? {sar_ff_rdata[5 +:MSB_NARROW_ADDR], 5'd0} :  {sar_ff_rdata[6 +:MSB_NARROW_ADDR], 6'd0}) :downsize_addr ) : downsize_addr;
                                                                                nxt_lsb_addr = ((sar_size < EXT_MAS_BUS_SIZE) ? ((sar_size == 3'd0) ? sar_ff_rdata[0 +: MSB_NARROW_ADDR] : ((sar_size == 3'd1) ? sar_ff_rdata[1 +: MSB_NARROW_ADDR] : ((sar_size == 3'd2) ? sar_ff_rdata[2 +: MSB_NARROW_ADDR] : ((sar_size == 3'd3) ? sar_ff_rdata[3 +: MSB_NARROW_ADDR] : ((sar_size == 3'd4) ? sar_ff_rdata[4 +: MSB_NARROW_ADDR] : sar_ff_rdata[5 +: MSB_NARROW_ADDR]))))) : sar_ff_rdata[MSB_ADDR -: ADDR_BIT_WIDTH]) ;
                                                                                end
                                                                            else
                                                                                begin
                                                                                nxt_rd_down_state = RD_DOWN_IDLE ;
                                                                                end
                                                                        end
                                                                    RD_DOWN_VALID : 
                                                                        begin
                                                                            if ((((i_m_rvalid & o_m_rready) & (~rdata_ff_full)) & (i_ext_slv_rdresp_gnt == ext_slv_cnt))) 
                                                                                begin
                                                                                nxt_lsb_addr = ((sar_burst == 2'd0) ? lsb_addr : (((lsb_addr == (DOWN_SIZE - 1)) || i_m_rlast) ? {ADDR_WIDTH{1'b0}} : (lsb_addr + 1'b1))) ;
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = 1'b1 ;
                                                                                nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = i_m_rresp ;
                                                                                nxt_int_ext_mas_prt_rid[ext_slv_cnt] = i_m_rid ;
                                                                                nxt_int_ext_mas_prt_ruser[ext_slv_cnt] = i_m_ruser ;
                                                                                nxt_int_ext_mas_prt_rdata[ext_slv_cnt] = (i_m_rdata[0 +: EXT_SLV_AXI_DATA_WIDTH_INT] >> (lsb_addr * EXT_MAS_AXI_DATA_WIDTH)) ;
                                                                                nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = i_m_rlast ;
                                                                                nxt_rd_down_state = (i_m_rlast ? RD_DOWN_IDLE : cur_rd_down_state) ;
                                                                                end
                                                                            else
                                                                                begin
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (int_ext_mas_prt_rready[ext_slv_cnt] ? 1'b0 : int_ext_mas_prt_rvalid[ext_slv_cnt]) ;
                                                                                end
                                                                        end
                                                                    RD_DOWN_NARROW_VALID : 
                                                                        begin
                                                                            if ((((i_m_rvalid & o_m_rready) & (~rdata_ff_full)) & (i_ext_slv_rdresp_gnt == ext_slv_cnt))) 
                                                                                begin
                                                                                nxt_lsb_addr = ((sar_burst == 2'd0) ? lsb_addr : (((lsb_addr == (narrow_down_cnt - 1)) || i_m_rlast) ? {ADDR_WIDTH{1'b0}} : (lsb_addr + ext_mas_req_size_bytes))) ;
                                                                                nxt_downsize_addr = ((sar_burst == 2'd0) ? downsize_addr : (i_m_rlast ? {ADDR_BIT_WIDTH{1'b0}} : (((sar_size == 3'd0) & (&lsb_addr[0 +: clog2((EXT_MAS_AXI_DATA_WIDTH / 8))])) ? (downsize_addr + 1'd1) : (((sar_size == 3'd1) & (&lsb_addr[1 +: clog2((EXT_MAS_AXI_DATA_WIDTH / 8))])) ? (downsize_addr + 1'd1) : (((sar_size == 3'd2) & (&lsb_addr[2 +: clog2((EXT_MAS_AXI_DATA_WIDTH / 8))])) ? (downsize_addr + 1'd1) : (((sar_size == 3'd3) & (&lsb_addr[3 +: clog2((EXT_MAS_AXI_DATA_WIDTH / 8))])) ? (downsize_addr + 1'd1) : (((sar_size == 3'd4) & (&lsb_addr[4 +: clog2((EXT_MAS_AXI_DATA_WIDTH / 8))])) ? (downsize_addr + 1'd1) : (((sar_size == 3'd5) & (&lsb_addr[5 +: clog2((EXT_MAS_AXI_DATA_WIDTH / 8))])) ? (downsize_addr + 1'd1) : downsize_addr)))))))) ;
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = 1'b1 ;
                                                                                nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = i_m_rresp ;
                                                                                nxt_int_ext_mas_prt_rid[ext_slv_cnt] = i_m_rid ;
                                                                                nxt_int_ext_mas_prt_ruser[ext_slv_cnt] = i_m_ruser ;
                                                                                nxt_int_ext_mas_prt_rdata[ext_slv_cnt] = (i_m_rdata[0 +: EXT_SLV_AXI_DATA_WIDTH_INT] >> (downsize_addr * EXT_MAS_AXI_DATA_WIDTH)) ;
                                                                                //nxt_int_ext_mas_prt_rdata[ext_slv_cnt]  = i_m_rdata[0+:EXT_SLV_AXI_DATA_WIDTH_INT] >> (downsize_addr*ext_mas_req_size_bits);
                                                                                nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = i_m_rlast ;
                                                                                nxt_rd_down_state = (i_m_rlast ? RD_DOWN_IDLE : cur_rd_down_state) ;
                                                                                end
                                                                            else
                                                                                begin
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (int_ext_mas_prt_rready[ext_slv_cnt] ? 1'b0 : int_ext_mas_prt_rvalid[ext_slv_cnt]) ;
                                                                                end
                                                                        end
                                                                    default : 
                                                                        begin
                                                                            nxt_rd_down_state = RD_DOWN_IDLE ;
                                                                        end
                                                                    endcase 
                                                                end
                                                        end
                                                    else
                                                        if ((EXT_MAS_AXI_DATA_WIDTH > EXT_SLV_AXI_DATA_WIDTH_INT)) 
                                                            begin : UP_BLK
                                                                localparam EXT_MAS_BYTE_CNT = (EXT_MAS_AXI_DATA_WIDTH / 8) ; 
                                                                localparam ADDR_BIT_SELECT = ((EXT_SLV_AXI_DATA_WIDTH_INT == 8) ? 0 : ((EXT_SLV_AXI_DATA_WIDTH_INT == 16) ? 1 : ((EXT_SLV_AXI_DATA_WIDTH_INT == 32) ? 2 : ((EXT_SLV_AXI_DATA_WIDTH_INT == 64) ? 3 : ((EXT_SLV_AXI_DATA_WIDTH_INT == 128) ? 4 : ((EXT_SLV_AXI_DATA_WIDTH_INT == 256) ? 5 : 6)))))) ; 
                                                                localparam UPSIZE_FACTOR = (EXT_MAS_AXI_DATA_WIDTH / EXT_SLV_AXI_DATA_WIDTH_INT) ; 
                                                                localparam UP_RD_CNT_WIDTH = clog2((EXT_MAS_AXI_DATA_WIDTH / 8)) ; 
                                                                localparam MASTER_SIZE = ((EXT_MAS_AXI_DATA_WIDTH == 16) ? 3'd1 : ((EXT_MAS_AXI_DATA_WIDTH == 32) ? 3'd2 : ((EXT_MAS_AXI_DATA_WIDTH == 64) ? 3'd3 : ((EXT_MAS_AXI_DATA_WIDTH == 128) ? 3'd4 : ((EXT_MAS_AXI_DATA_WIDTH == 256) ? 3'd5 : ((EXT_MAS_AXI_DATA_WIDTH == 512) ? 3'd6 : 3'd7)))))) ; 
                                                                localparam FULL_EXT_SLV_SIZE = ((EXT_SLV_AXI_DATA_WIDTH_INT == 8) ? 3'd0 : ((EXT_SLV_AXI_DATA_WIDTH_INT == 16) ? 3'd1 : ((EXT_SLV_AXI_DATA_WIDTH_INT == 32) ? 3'd2 : ((EXT_SLV_AXI_DATA_WIDTH_INT == 64) ? 3'd3 : ((EXT_SLV_AXI_DATA_WIDTH_INT == 128) ? 3'd4 : ((EXT_SLV_AXI_DATA_WIDTH_INT == 256) ? 3'd5 : 3'd6)))))) ; 
                                                                localparam MSB_ADDR = (clog2((EXT_MAS_AXI_DATA_WIDTH / 8)) - 1) ; 
                                                                localparam ADDR_BIT_WIDTH = ((UPSIZE_FACTOR == 2) ? 1 : ((UPSIZE_FACTOR == 4) ? 2 : ((UPSIZE_FACTOR == 8) ? 3 : ((UPSIZE_FACTOR == 16) ? 4 : ((UPSIZE_FACTOR == 32) ? 5 : ((UPSIZE_FACTOR == 64) ? 6 : 7)))))) ; 
                                                                localparam RD_CNT_WIDTH = 8 ; 
                                                                localparam ADDR_WIDTH = clog2((EXT_MAS_AXI_DATA_WIDTH / 8)) ; // maximum possible width
                                                                //localparam ADDR_WIDTH   = clog2(UPSIZE_FACTOR);
                                                                localparam EXT_MAS_ARSIZE_1_IN_BYTES = 2 ; 
                                                                localparam EXT_MAS_ARSIZE_2_IN_BYTES = 4 ; 
                                                                localparam EXT_MAS_ARSIZE_3_IN_BYTES = 8 ; 
                                                                localparam EXT_MAS_ARSIZE_4_IN_BYTES = 16 ; 
                                                                localparam EXT_MAS_ARSIZE_5_IN_BYTES = 32 ; 
                                                                localparam EXT_MAS_ARSIZE_6_IN_BYTES = 64 ; 
                                                                localparam EXT_MAS_ARSIZE_7_IN_BYTES = 128 ; 
                                                                localparam RD_UP_IDLE = 1'b0 ; 
                                                                localparam RD_UP_VALID = 1'b1 ; 
                                                                //=====================================================
                                                                //RD ADDRESS FIFO
                                                                //=====================================================
                                                                localparam AR_FF_DWIDTH = 21 ; 
                                                                localparam AR_FF_PTR_WIDTH = clog2(AR_FF_DEPTH) ; 
                                                                logic sar_ff_full ; 
                                                                logic sar_ff_empty ; 
                                                                logic sar_ff_wr_en ; 
                                                                logic sar_ff_rd_en ; 
                                                                logic [(AR_FF_DWIDTH - 1):0] sar_ff_wdata ; 
                                                                logic [(AR_FF_DWIDTH - 1):0] sar_ff_rdata_sig ; 
                                                                logic [(AR_FF_DWIDTH - 1):0] sar_ff_rdata ; 
                                                                logic [2:0] sar_size ; 
                                                                logic [7:0] sar_addr ; 
                                                                logic [7:0] sar_len ; 
                                                                logic [1:0] sar_burst ; 
                                                                assign sar_ff_wr_en = (((o_m_arvalid & i_m_arready) & (ext_mas_slv_rd_sel == ext_slv_cnt)) & (!sar_ff_full)) ; 
                                                                //assign sar_ff_wr_en  = o_m_arvalid & i_m_split_arready & (ext_mas_slv_rd_sel==ext_slv_cnt) & (!sar_ff_full);
                                                                assign sar_ff_wdata = {o_m_arburst[1:0],
                                                                            o_m_arlen[7:0],
                                                                            o_m_arsize[2:0],
                                                                            o_m_araddr[7:0]} ; // 8 bits to represent 128 bytes of address for maximum bus width 1024 bits
                                                                assign sar_ff_rd_en = ((((i_m_rvalid & i_m_rlast) & int_ext_mas_prt_rready[ext_slv_cnt]) & (i_ext_slv_rdresp_gnt == ext_slv_cnt)) & (~sar_ff_empty)) ; 
                                                                if ((LATTICE_FIFO == 1)) 
                                                                    begin : LSCC_FF_BLK
                                                                    end
                                                                else
                                                                    begin : CUSTOM_FF_BLK
                                                                        axi4_interconnect_ipgen_gen_fifo #(AR_FF_PTR_WIDTH,
                                                                                AR_FF_DWIDTH,
                                                                                0,
                                                                                AR_FF_DEPTH) u_saraddr_arsize_arlen_arburst_fifo (// Pointer Width
                                                                                // Data Width {awaddr[7:0]} 
                                                                                // Whether Output needs to be registered or not
                                                                                // Number of entries in FIFO
                                                                                .clk(aclk_i), 
                                                                                .aresetn_i(aresetn_i), 
                                                                                .we(sar_ff_wr_en), 
                                                                                .wdata(sar_ff_wdata), 
                                                                                .re(sar_ff_rd_en), 
                                                                                .rdata(sar_ff_rdata_sig), 
                                                                                .full(sar_ff_full), 
                                                                                .pre_full(), 
                                                                                .empty(sar_ff_empty)) ; 
                                                                    end
                                                                assign sar_ff_rdata = (sar_ff_empty ? 'd0 : sar_ff_rdata_sig) ; 
                                                                assign sar_addr = sar_ff_rdata[7:0] ; 
                                                                assign sar_size = sar_ff_rdata[10:8] ; 
                                                                assign sar_len = sar_ff_rdata[18:11] ; 
                                                                assign sar_burst = sar_ff_rdata[(AR_FF_DWIDTH - 1) -: 2] ; 
                                                                logic [(RD_CNT_WIDTH - 1):0] rd_cnt, 
                                                                    nxt_rd_cnt ; 
                                                                logic cur_rd_up_state, 
                                                                    nxt_rd_up_state ; 
                                                                logic [(ADDR_WIDTH - 1):0] lsb_addr, 
                                                                    nxt_lsb_addr ; 
                                                                logic [(UP_RD_CNT_WIDTH - 1):0] upsize_rd_cnt, 
                                                                    nxt_upsize_rd_cnt ; 
                                                                logic [(UP_RD_CNT_WIDTH - 1):0] upsize_rd_cnt_reg, 
                                                                    nxt_upsize_rd_cnt_reg ; 
                                                                logic [(EXT_MAS_AXI_DATA_WIDTH - 1):0] i_m_rdata_sig ; 
                                                                logic [6:0] ext_mas_req_size_bytes ; 
                                                                //logic [6:0] narrow_rd_byte_cnt, nxt_narrow_rd_byte_cnt;
                                                                assign ext_mas_req_size_bytes = (1'd1 << sar_size) ; 
                                                                assign i_m_rdata_sig = {{(EXT_MAS_AXI_DATA_WIDTH - EXT_SLV_AXI_DATA_WIDTH_INT){1'b0}},
                                                                            i_m_rdata[0 +: EXT_SLV_AXI_DATA_WIDTH_INT]} ; 
                                                                //assign int_ext_mas_prt_rready[ext_slv_cnt] =  ~rdata_ff_full;
                                                                assign int_ext_mas_prt_rready[ext_slv_cnt] = ((i_ext_slv_rdresp_gnt_final == ext_slv_cnt) & (~rdata_ff_full)) ; 
                                                                //         assign int_ext_mas_prt_split_rready[ext_slv_cnt] = ~rdata_ff_full;
                                                                always
                                                                    @(posedge aclk_i or 
                                                                        negedge aresetn_i)
                                                                    begin
                                                                        if ((~aresetn_i)) 
                                                                            begin
                                                                                //i_ext_slv_rdresp_gnt_final          <= 6'd0;
                                                                                int_ext_mas_prt_rvalid[ext_slv_cnt] <=  1'b0 ;
                                                                                int_ext_mas_prt_rdata[ext_slv_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH_INT{1'b0}} ;
                                                                                int_ext_mas_prt_rresp[ext_slv_cnt] <=  2'd0 ;
                                                                                int_ext_mas_prt_rid[ext_slv_cnt] <=  {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                                                                                int_ext_mas_prt_rlast[ext_slv_cnt] <=  1'b0 ;
                                                                                int_ext_mas_prt_ruser[ext_slv_cnt] <=  {AXI_USER_WIDTH{1'b0}} ;
                                                                                rd_cnt <=  {RD_CNT_WIDTH{1'b0}} ;
                                                                                cur_rd_up_state <=  RD_UP_IDLE ;
                                                                                lsb_addr <=  {ADDR_WIDTH{1'b0}} ;
                                                                                upsize_rd_cnt <=  {UP_RD_CNT_WIDTH{1'b0}} ;
                                                                                upsize_rd_cnt_reg <=  {UP_RD_CNT_WIDTH{1'b0}} ;
                                                                                //narrow_rd_byte_cnt                  <= 7'd0;
                                                                            end
                                                                        else
                                                                            begin
                                                                                // i_ext_slv_rdresp_gnt_final          <= i_ext_slv_rdresp_gnt;
                                                                                int_ext_mas_prt_rvalid[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] ;
                                                                                int_ext_mas_prt_rdata[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rdata[ext_slv_cnt] ;
                                                                                int_ext_mas_prt_rresp[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rresp[ext_slv_cnt] ;
                                                                                int_ext_mas_prt_rid[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rid[ext_slv_cnt] ;
                                                                                int_ext_mas_prt_rlast[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rlast[ext_slv_cnt] ;
                                                                                int_ext_mas_prt_ruser[ext_slv_cnt] <=  nxt_int_ext_mas_prt_ruser[ext_slv_cnt] ;
                                                                                rd_cnt <=  nxt_rd_cnt ;
                                                                                cur_rd_up_state <=  nxt_rd_up_state ;
                                                                                lsb_addr <=  nxt_lsb_addr ;
                                                                                upsize_rd_cnt <=  nxt_upsize_rd_cnt ;
                                                                                upsize_rd_cnt_reg <=  nxt_upsize_rd_cnt_reg ;
                                                                                //narrow_rd_byte_cnt                  <= nxt_narrow_rd_byte_cnt;
                                                                            end
                                                                    end
                                                                integer upsize_cnt ; 
                                                                always
                                                                    @(*)
                                                                    begin
                                                                        nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = int_ext_mas_prt_rvalid[ext_slv_cnt] ;
                                                                        nxt_int_ext_mas_prt_rdata[ext_slv_cnt] = int_ext_mas_prt_rdata[ext_slv_cnt] ;
                                                                        nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = int_ext_mas_prt_rresp[ext_slv_cnt] ;
                                                                        nxt_int_ext_mas_prt_rid[ext_slv_cnt] = int_ext_mas_prt_rid[ext_slv_cnt] ;
                                                                        nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = int_ext_mas_prt_rlast[ext_slv_cnt] ;
                                                                        nxt_int_ext_mas_prt_ruser[ext_slv_cnt] = int_ext_mas_prt_ruser[ext_slv_cnt] ;
                                                                        nxt_rd_up_state = cur_rd_up_state ;
                                                                        nxt_lsb_addr = lsb_addr ;
                                                                        nxt_rd_cnt = rd_cnt ;
                                                                        nxt_upsize_rd_cnt = upsize_rd_cnt ;
                                                                        nxt_upsize_rd_cnt_reg = upsize_rd_cnt_reg ;
                                                                        //nxt_narrow_rd_byte_cnt =  narrow_rd_byte_cnt;
                                                                        case (cur_rd_up_state)
                                                                        RD_UP_IDLE : 
                                                                            begin
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (int_ext_mas_prt_rready ? 1'b0 : int_ext_mas_prt_rvalid[ext_slv_cnt]) ;
                                                                                nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = (int_ext_mas_prt_rready ? 1'b0 : int_ext_mas_prt_rlast[ext_slv_cnt]) ;
                                                                                nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = 2'd0 ;
                                                                                if ((((i_ext_slv_rdresp_gnt == ext_slv_cnt) & (!rdata_ff_full)) & (!sar_ff_empty))) 
                                                                                begin
                                                                                nxt_rd_up_state = RD_UP_VALID ;
                                                                                nxt_rd_cnt = sar_len ;
                                                                                if ((sar_size <= FULL_EXT_SLV_SIZE)) 
                                                                                // Narrow_rd_byte_cnt is used only when external master initates narrow transfer whose size is greater than the external slave bus width.
                                                                                begin
                                                                                nxt_upsize_rd_cnt = 'd0 ;
                                                                                case (sar_size)
                                                                                3'd0 : 
                                                                                nxt_lsb_addr = sar_addr[7:0] ;
                                                                                3'd1 : 
                                                                                nxt_lsb_addr = {sar_addr[7:1],
                                                                                1'b0} ;
                                                                                3'd2 : 
                                                                                nxt_lsb_addr = {sar_addr[7:2],
                                                                                2'd0} ;
                                                                                3'd3 : 
                                                                                nxt_lsb_addr = {sar_addr[7:3],
                                                                                3'd0} ;
                                                                                3'd4 : 
                                                                                nxt_lsb_addr = {sar_addr[7:4],
                                                                                4'd0} ;
                                                                                3'd5 : 
                                                                                nxt_lsb_addr = {sar_addr[7:5],
                                                                                5'd0} ;
                                                                                3'd6 : 
                                                                                nxt_lsb_addr = {sar_addr[7:6],
                                                                                6'd0} ;
                                                                                endcase 
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_lsb_addr = sar_addr[MSB_ADDR -: ADDR_BIT_WIDTH] ;
                                                                                case (sar_size)
                                                                                3'd1 : 
                                                                                begin
                                                                                nxt_upsize_rd_cnt = (((EXT_MAS_ARSIZE_1_IN_BYTES / (EXT_SLV_AXI_DATA_WIDTH_INT / 8)) - (sar_addr[0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_upsize_rd_cnt_reg = (((EXT_MAS_ARSIZE_1_IN_BYTES / (EXT_SLV_AXI_DATA_WIDTH_INT / 8)) - (sar_addr[0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                end
                                                                                3'd2 : 
                                                                                begin
                                                                                nxt_upsize_rd_cnt = (((EXT_MAS_ARSIZE_2_IN_BYTES / (EXT_SLV_AXI_DATA_WIDTH_INT / 8)) - (sar_addr[1:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_upsize_rd_cnt_reg = (((EXT_MAS_ARSIZE_2_IN_BYTES / (EXT_SLV_AXI_DATA_WIDTH_INT / 8)) - (sar_addr[1:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                end
                                                                                3'd3 : 
                                                                                begin
                                                                                nxt_upsize_rd_cnt = (((EXT_MAS_ARSIZE_3_IN_BYTES / (EXT_SLV_AXI_DATA_WIDTH_INT / 8)) - (sar_addr[2:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_upsize_rd_cnt_reg = (((EXT_MAS_ARSIZE_3_IN_BYTES / (EXT_SLV_AXI_DATA_WIDTH_INT / 8)) - (sar_addr[2:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                end
                                                                                3'd4 : 
                                                                                begin
                                                                                nxt_upsize_rd_cnt = (((EXT_MAS_ARSIZE_4_IN_BYTES / (EXT_SLV_AXI_DATA_WIDTH_INT / 8)) - (sar_addr[3:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_upsize_rd_cnt_reg = (((EXT_MAS_ARSIZE_4_IN_BYTES / (EXT_SLV_AXI_DATA_WIDTH_INT / 8)) - (sar_addr[3:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                end
                                                                                3'd5 : 
                                                                                begin
                                                                                nxt_upsize_rd_cnt = (((EXT_MAS_ARSIZE_5_IN_BYTES / (EXT_SLV_AXI_DATA_WIDTH_INT / 8)) - (sar_addr[4:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_upsize_rd_cnt_reg = (((EXT_MAS_ARSIZE_5_IN_BYTES / (EXT_SLV_AXI_DATA_WIDTH_INT / 8)) - (sar_addr[4:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                end
                                                                                3'd6 : 
                                                                                begin
                                                                                nxt_upsize_rd_cnt = (((EXT_MAS_ARSIZE_6_IN_BYTES / (EXT_SLV_AXI_DATA_WIDTH_INT / 8)) - (sar_addr[5:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_upsize_rd_cnt_reg = (((EXT_MAS_ARSIZE_6_IN_BYTES / (EXT_SLV_AXI_DATA_WIDTH_INT / 8)) - (sar_addr[5:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                end
                                                                                3'd7 : 
                                                                                begin
                                                                                nxt_upsize_rd_cnt = (((EXT_MAS_ARSIZE_7_IN_BYTES / (EXT_SLV_AXI_DATA_WIDTH_INT / 8)) - (sar_addr[6:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_upsize_rd_cnt_reg = (((EXT_MAS_ARSIZE_7_IN_BYTES / (EXT_SLV_AXI_DATA_WIDTH_INT / 8)) - (sar_addr[6:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                end
                                                                                default : 
                                                                                begin
                                                                                nxt_upsize_rd_cnt = upsize_rd_cnt ;
                                                                                nxt_upsize_rd_cnt_reg = upsize_rd_cnt_reg ;
                                                                                end
                                                                                endcase 
                                                                                end
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_rd_up_state = RD_UP_IDLE ;
                                                                                end
                                                                            end
                                                                        RD_UP_VALID : 
                                                                            begin
                                                                                if ((((i_m_rvalid & o_m_rready) & (~rdata_ff_full)) & (i_ext_slv_rdresp_gnt == ext_slv_cnt))) 
                                                                                begin
                                                                                if ((sar_size <= FULL_EXT_SLV_SIZE)) 
                                                                                // Narrow transfer with request size is less than or equal to slave bus width
                                                                                begin
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = 1'b1 ;
                                                                                nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = i_m_rlast ;
                                                                                nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = i_m_rresp ;
                                                                                nxt_int_ext_mas_prt_rid[ext_slv_cnt] = i_m_rid ;
                                                                                nxt_rd_up_state = (i_m_rlast ? RD_UP_IDLE : cur_rd_up_state) ;
                                                                                //nxt_lsb_addr              = (lsb_addr + ext_mas_req_size_bytes);
                                                                                nxt_lsb_addr = ((sar_burst == 2'd0) ? lsb_addr : (lsb_addr + ext_mas_req_size_bytes)) ;
                                                                                nxt_int_ext_mas_prt_rdata[ext_slv_cnt][(lsb_addr[(ADDR_WIDTH - 1) -: ADDR_BIT_WIDTH] * EXT_SLV_AXI_DATA_WIDTH_INT) +: EXT_SLV_AXI_DATA_WIDTH_INT] = i_m_rdata_sig[0 +: EXT_SLV_AXI_DATA_WIDTH_INT] ;
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_rd_up_state = ((|rd_cnt) ? cur_rd_up_state : (i_m_rlast ? RD_UP_IDLE : cur_rd_up_state)) ;
                                                                                nxt_lsb_addr = ((lsb_addr == (UPSIZE_FACTOR - 1)) ? ((sar_burst == 2'd0) ? sar_addr[MSB_ADDR -: ADDR_BIT_WIDTH] : {ADDR_WIDTH{1'b0}}) : (lsb_addr + 1'd1)) ;
                                                                                nxt_rd_cnt = ((|upsize_rd_cnt) ? rd_cnt : ((|rd_cnt) ? (rd_cnt - 1'd1) : rd_cnt)) ;
                                                                                nxt_upsize_rd_cnt = ((|upsize_rd_cnt) ? (upsize_rd_cnt - 1'd1) : ((sar_burst == 2'd0) ? upsize_rd_cnt_reg : ((ext_mas_req_size_bytes / (EXT_SLV_AXI_DATA_WIDTH_INT / 8)) - 1'd1))) ;
                                                                                //nxt_upsize_rd_cnt  = |upsize_rd_cnt ? upsize_rd_cnt - 1'd1 : (ext_mas_req_size_bytes/(EXT_SLV_AXI_DATA_WIDTH_INT/8)) - 1'd1;
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (!(|upsize_rd_cnt)) ;
                                                                                nxt_int_ext_mas_prt_rdata[ext_slv_cnt][(lsb_addr * EXT_SLV_AXI_DATA_WIDTH_INT) +: EXT_SLV_AXI_DATA_WIDTH_INT] = i_m_rdata[0 +: EXT_SLV_AXI_DATA_WIDTH_INT] ;
                                                                                nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = ((|int_ext_mas_prt_rresp[ext_slv_cnt]) ? ((|lsb_addr) ? int_ext_mas_prt_rresp[ext_slv_cnt] : i_m_rresp) : i_m_rresp) ;
                                                                                nxt_int_ext_mas_prt_ruser[ext_slv_cnt] = i_m_ruser ;
                                                                                nxt_int_ext_mas_prt_rid[ext_slv_cnt] = i_m_rid ;
                                                                                //nxt_int_ext_mas_prt_rlast[ext_slv_cnt]  = |rd_cnt ? 1'b0 : i_m_rlast;
                                                                                nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = ((|rd_cnt) ? 1'b0 : (!(|upsize_rd_cnt))) ;
                                                                                end
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (int_ext_mas_prt_rready[ext_slv_cnt] ? 1'b0 : int_ext_mas_prt_rvalid[ext_slv_cnt]) ;
                                                                                end
                                                                            end//RD_UP_VALID
                                                                        endcase 
                                                                    end
                                                            end
                                                        else
                                                            begin : EQ_BLK
                                                                //assign int_ext_mas_prt_rready[ext_slv_cnt] =  ~rdata_ff_full;
                                                                assign int_ext_mas_prt_rready[ext_slv_cnt] = ((i_ext_slv_rdresp_gnt_final == ext_slv_cnt) & (~rdata_ff_full)) ; 
                                                                //            assign int_ext_mas_prt_split_rready[ext_slv_cnt] = ~rdata_ff_full;
                                                                always
                                                                    @(posedge aclk_i or 
                                                                        negedge aresetn_i)
                                                                    begin
                                                                        if ((!aresetn_i)) 
                                                                            begin
                                                                                //i_ext_slv_rdresp_gnt_final          <= 6'd0;
                                                                                int_ext_mas_prt_rvalid[ext_slv_cnt] <=  1'b0 ;
                                                                                int_ext_mas_prt_rdata[ext_slv_cnt] <=  {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ;
                                                                                int_ext_mas_prt_rresp[ext_slv_cnt] <=  2'd0 ;
                                                                                int_ext_mas_prt_rid[ext_slv_cnt] <=  {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                                                                                int_ext_mas_prt_rlast[ext_slv_cnt] <=  1'b0 ;
                                                                                int_ext_mas_prt_ruser[ext_slv_cnt] <=  {AXI_USER_WIDTH{1'b0}} ;
                                                                            end
                                                                        else
                                                                            begin
                                                                                // i_ext_slv_rdresp_gnt_final          <= i_ext_slv_rdresp_gnt;
                                                                                int_ext_mas_prt_rvalid[ext_slv_cnt] <=  ((i_m_rvalid & o_m_rready) & (i_ext_slv_rdresp_gnt == ext_slv_cnt)) ;
                                                                                int_ext_mas_prt_rdata[ext_slv_cnt] <=  i_m_rdata[0 +: EXT_SLV_AXI_DATA_WIDTH_INT] ;
                                                                                int_ext_mas_prt_rresp[ext_slv_cnt] <=  i_m_rresp ;
                                                                                int_ext_mas_prt_rid[ext_slv_cnt] <=  i_m_rid ;
                                                                                int_ext_mas_prt_rlast[ext_slv_cnt] <=  i_m_rlast ;
                                                                                int_ext_mas_prt_ruser[ext_slv_cnt] <=  i_m_ruser ;
                                                                            end
                                                                    end
                                                            end
                                                end
                                            else
                                                begin : AXI4LITE_EXTSLV_BLK
                                                    if ((EXT_MAS_AXI_DATA_WIDTH < EXT_SLV_AXI_DATA_WIDTH_INT)) 
                                                        begin : DOWN_BLK
                                                            localparam DOWN_SIZE = (EXT_SLV_AXI_DATA_WIDTH_INT / EXT_MAS_AXI_DATA_WIDTH) ; 
                                                            localparam AR_FF_DWIDTH = 21 ; 
                                                            localparam AR_FF_PTR_WIDTH = clog2(AR_FF_DEPTH) ; 
                                                            localparam EXT_MAS_BUS_SIZE = ((EXT_MAS_AXI_DATA_WIDTH == 8) ? 0 : clog2((EXT_MAS_AXI_DATA_WIDTH / 8))) ; 
                                                            localparam RD_CNT_WIDTH = 8 ; 
                                                            //=====================================================
                                                            //RD ADDRESS FIFO
                                                            //=====================================================
                                                            logic sar_ff_full ; 
                                                            logic sar_ff_empty ; 
                                                            logic sar_ff_wr_en ; 
                                                            logic sar_ff_rd_en ; 
                                                            logic [(AR_FF_DWIDTH - 1):0] sar_ff_wdata ; 
                                                            logic [(AR_FF_DWIDTH - 1):0] sar_ff_rdata_sig ; 
                                                            logic [(AR_FF_DWIDTH - 1):0] sar_ff_rdata ; 
                                                            logic [2:0] sar_size ; 
                                                            logic [7:0] sar_addr ; 
                                                            logic [7:0] sar_len ; 
                                                            logic [1:0] sar_burst ; 
                                                            assign sar_ff_wr_en = (((o_m_arvalid & i_m_arready) & (ext_mas_slv_rd_sel == ext_slv_cnt)) & (!sar_ff_full)) ; 
                                                            //assign sar_ff_wr_en  = o_m_arvalid & i_m_split_arready & (ext_mas_slv_rd_sel==ext_slv_cnt) & (!sar_ff_full);
                                                            assign sar_ff_wdata = {o_m_arburst[1:0],
                                                                        o_m_arlen[7:0],
                                                                        o_m_arsize[2:0],
                                                                        o_m_araddr[7:0]} ; // 8 bits to represent 128 bytes of address for maximum bus width 1024 bits
                                                            assign sar_ff_rd_en = ((((i_m_rvalid & i_m_rlast) & int_ext_mas_prt_rready[ext_slv_cnt]) & (i_ext_slv_rdresp_gnt == ext_slv_cnt)) & (~sar_ff_empty)) ; 
                                                            if ((LATTICE_FIFO == 1)) 
                                                                begin : LSCC_FF_BLK
                                                                end
                                                            else
                                                                begin : CUSTOM_FF_BLK
                                                                    axi4_interconnect_ipgen_gen_fifo #(AR_FF_PTR_WIDTH,
                                                                            AR_FF_DWIDTH,
                                                                            0,
                                                                            AR_FF_DEPTH) u_saraddr_arsize_arlen_arburst_fifo (// Pointer Width
                                                                            // Data Width {awaddr[7:0]} 
                                                                            // Whether Output needs to be registered or not
                                                                            // Number of entries in FIFO
                                                                            .clk(aclk_i), 
                                                                                .aresetn_i(aresetn_i), 
                                                                                .we(sar_ff_wr_en), 
                                                                                .wdata(sar_ff_wdata), 
                                                                                .re(sar_ff_rd_en), 
                                                                                .rdata(sar_ff_rdata_sig), 
                                                                                .full(sar_ff_full), 
                                                                                .pre_full(), 
                                                                                .empty(sar_ff_empty)) ; 
                                                                end
                                                            assign sar_ff_rdata = (sar_ff_empty ? 'd0 : sar_ff_rdata_sig) ; 
                                                            assign sar_addr = sar_ff_rdata[7:0] ; 
                                                            assign sar_size = sar_ff_rdata[10:8] ; 
                                                            assign sar_len = sar_ff_rdata[18:11] ; 
                                                            assign sar_burst = sar_ff_rdata[(AR_FF_DWIDTH - 1) -: 2] ; 
                                                            localparam RD_DOWN_IDLE = 2'd0 ; 
                                                            localparam RD_DOWN_VALID = 2'd1 ; 
                                                            localparam RD_DOWN_NARROW_VALID = 2'd2 ; 
                                                            //localparam ADDR_WIDTH   = clog2(DOWN_SIZE);
                                                            localparam ADDR_WIDTH = clog2((EXT_SLV_AXI_DATA_WIDTH_INT / 8)) ; // maximum possible width
                                                            localparam MSB_ADDR = (clog2((EXT_SLV_AXI_DATA_WIDTH_INT / 8)) - 1) ; 
                                                            localparam MSB_NARROW_ADDR = clog2((EXT_SLV_AXI_DATA_WIDTH_INT / 8)) ; 
                                                            localparam ADDR_BIT_WIDTH = ((DOWN_SIZE == 2) ? 1 : ((DOWN_SIZE == 4) ? 2 : ((DOWN_SIZE == 8) ? 3 : ((DOWN_SIZE == 16) ? 4 : ((DOWN_SIZE == 32) ? 5 : ((DOWN_SIZE == 64) ? 6 : 7)))))) ; 
                                                            logic [1:0] cur_rd_down_state, 
                                                                nxt_rd_down_state ; 
                                                            logic [(ADDR_WIDTH - 1):0] lsb_addr, 
                                                                nxt_lsb_addr ; 
                                                            logic [(RD_CNT_WIDTH - 1):0] rd_cnt, 
                                                                nxt_rd_cnt ; 
                                                            logic [2:0] ext_mas_req_size_bytes ; 
                                                            logic [5:0] ext_mas_req_size_bits ; 
                                                            logic [7:0] narrow_down_cnt, 
                                                                nxt_narrow_down_cnt ; 
                                                            logic [(ADDR_BIT_WIDTH - 1):0] downsize_addr, 
                                                                nxt_downsize_addr ; 
                                                            assign ext_mas_req_size_bytes = (1'd1 << sar_size) ; 
                                                            assign ext_mas_req_size_bits = (4'b1000 << sar_size) ; 
                                                            // assign int_ext_mas_prt_rready[ext_slv_cnt] =  ~rdata_ff_full;
                                                            assign int_ext_mas_prt_rready[ext_slv_cnt] = ((i_ext_slv_rdresp_gnt_final == ext_slv_cnt) & (~rdata_ff_full)) ; 
                                                            assign int_ext_mas_prt_ruser[ext_slv_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                            //         assign int_ext_mas_prt_split_rready[ext_slv_cnt] = ~rdata_ff_full;
                                                            always
                                                                @(posedge aclk_i or 
                                                                    negedge aresetn_i)
                                                                begin
                                                                    if ((~aresetn_i)) 
                                                                        begin
                                                                            //i_ext_slv_rdresp_gnt_final          <= 6'd0;
                                                                            int_ext_mas_prt_rvalid[ext_slv_cnt] <=  1'b0 ;
                                                                            int_ext_mas_prt_rdata[ext_slv_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH_INT{1'b0}} ;
                                                                            int_ext_mas_prt_rresp[ext_slv_cnt] <=  2'd0 ;
                                                                            int_ext_mas_prt_rid[ext_slv_cnt] <=  {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                                                                            int_ext_mas_prt_rlast[ext_slv_cnt] <=  1'b0 ;
                                                                            cur_rd_down_state <=  RD_DOWN_IDLE ;
                                                                            lsb_addr <=  {ADDR_WIDTH{1'b0}} ;
                                                                            rd_cnt <=  {RD_CNT_WIDTH{1'b0}} ;
                                                                            narrow_down_cnt <=  8'd0 ;
                                                                            downsize_addr <=  {ADDR_BIT_WIDTH{1'b0}} ;
                                                                        end
                                                                    else
                                                                        begin
                                                                            //i_ext_slv_rdresp_gnt_final          <= i_ext_slv_rdresp_gnt;
                                                                            int_ext_mas_prt_rvalid[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] ;
                                                                            int_ext_mas_prt_rdata[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rdata[ext_slv_cnt] ;
                                                                            int_ext_mas_prt_rresp[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rresp[ext_slv_cnt] ;
                                                                            int_ext_mas_prt_rid[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rid[ext_slv_cnt] ;
                                                                            int_ext_mas_prt_rlast[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rlast[ext_slv_cnt] ;
                                                                            cur_rd_down_state <=  nxt_rd_down_state ;
                                                                            lsb_addr <=  nxt_lsb_addr ;
                                                                            rd_cnt <=  nxt_rd_cnt ;
                                                                            narrow_down_cnt <=  nxt_narrow_down_cnt ;
                                                                            downsize_addr <=  nxt_downsize_addr ;
                                                                        end
                                                                end
                                                            integer downsize_cnt ; 
                                                            always
                                                                @(*)
                                                                begin
                                                                    nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = int_ext_mas_prt_rvalid[ext_slv_cnt] ;
                                                                    nxt_int_ext_mas_prt_rdata[ext_slv_cnt] = int_ext_mas_prt_rdata[ext_slv_cnt] ;
                                                                    nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = int_ext_mas_prt_rresp[ext_slv_cnt] ;
                                                                    nxt_int_ext_mas_prt_rid[ext_slv_cnt] = int_ext_mas_prt_rid[ext_slv_cnt] ;
                                                                    nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = int_ext_mas_prt_rlast[ext_slv_cnt] ;
                                                                    nxt_lsb_addr = lsb_addr ;
                                                                    nxt_rd_down_state = cur_rd_down_state ;
                                                                    nxt_rd_cnt = rd_cnt ;
                                                                    nxt_narrow_down_cnt = narrow_down_cnt ;
                                                                    nxt_downsize_addr = downsize_addr ;
                                                                    case (cur_rd_down_state)
                                                                    RD_DOWN_IDLE : 
                                                                        begin
                                                                            nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (int_ext_mas_prt_rready ? 1'b0 : int_ext_mas_prt_rvalid[ext_slv_cnt]) ;
                                                                            nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = (int_ext_mas_prt_rready ? 1'b0 : int_ext_mas_prt_rlast[ext_slv_cnt]) ;
                                                                            nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = 2'd0 ;
                                                                            if ((((i_ext_slv_rdresp_gnt == ext_slv_cnt) & (!rdata_ff_full)) & (!sar_ff_empty))) 
                                                                                begin
                                                                                nxt_rd_cnt = sar_len ;
                                                                                nxt_rd_down_state = ((sar_size < EXT_MAS_BUS_SIZE) ? RD_DOWN_NARROW_VALID : RD_DOWN_VALID) ;
                                                                                nxt_narrow_down_cnt = ((EXT_SLV_AXI_DATA_WIDTH_INT / 8) / ext_mas_req_size_bytes) ;
                                                                                nxt_downsize_addr = ((sar_size < EXT_MAS_BUS_SIZE) ? sar_ff_rdata[clog2((EXT_MAS_AXI_DATA_WIDTH / 8)) +: clog2(DOWN_SIZE)] : downsize_addr) ;
                                                                                //nxt_downsize_addr   = sar_size < EXT_MAS_BUS_SIZE ? ((|sar_ff_rdata[clog2(EXT_MAS_AXI_DATA_WIDTH/8) +:clog2(DOWN_SIZE)]) ? 
                                                                                //                       {sar_ff_rdata[clog2(EXT_MAS_AXI_DATA_WIDTH/8) +: clog2(DOWN_SIZE)], {clog2(EXT_MAS_AXI_DATA_WIDTH/8){1'b0}} }: 
                                                                                //                      {ADDR_WIDTH{1'b0}} ) : downsize_addr;
                                                                                nxt_lsb_addr = ((sar_size < EXT_MAS_BUS_SIZE) ? ((sar_size == 3'd0) ? sar_ff_rdata[0 +: MSB_NARROW_ADDR] : sar_ff_rdata[1 +: MSB_NARROW_ADDR]) : sar_ff_rdata[MSB_ADDR -: ADDR_BIT_WIDTH]) ;
                                                                                end
                                                                            else
                                                                                begin
                                                                                nxt_rd_down_state = RD_DOWN_IDLE ;
                                                                                end
                                                                        end
                                                                    RD_DOWN_VALID : 
                                                                        begin
                                                                            if ((((i_m_rvalid & o_m_rready) & (~rdata_ff_full)) & (i_ext_slv_rdresp_gnt == ext_slv_cnt))) 
                                                                                begin
                                                                                nxt_rd_cnt = ((|rd_cnt) ? (rd_cnt - 1'd1) : rd_cnt) ;
                                                                                nxt_lsb_addr = ((sar_burst == 2'd0) ? lsb_addr : (((lsb_addr == (DOWN_SIZE - 1)) || (!(|rd_cnt))) ? {ADDR_WIDTH{1'b0}} : (lsb_addr + 1'd1))) ;
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = 1'b1 ;
                                                                                nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = i_m_rresp ;
                                                                                nxt_int_ext_mas_prt_rdata[ext_slv_cnt] = (i_m_rdata[0 +: EXT_SLV_AXI_DATA_WIDTH_INT] >> (lsb_addr * EXT_MAS_AXI_DATA_WIDTH)) ;
                                                                                nxt_int_ext_mas_prt_rid[ext_slv_cnt] = i_m_rid ;
                                                                                nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = i_m_rlast ;
                                                                                //nxt_int_ext_mas_prt_rlast[ext_slv_cnt]  = !(|rd_cnt);
                                                                                nxt_rd_down_state = ((|rd_cnt) ? cur_rd_down_state : RD_DOWN_IDLE) ;
                                                                                end
                                                                            else
                                                                                begin
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (int_ext_mas_prt_rready[ext_slv_cnt] ? 1'b0 : int_ext_mas_prt_rvalid[ext_slv_cnt]) ;
                                                                                end
                                                                        end
                                                                    RD_DOWN_NARROW_VALID : 
                                                                        begin
                                                                            if ((((i_m_rvalid & o_m_rready) & (~rdata_ff_full)) & (i_ext_slv_rdresp_gnt == ext_slv_cnt))) 
                                                                                begin
                                                                                nxt_rd_cnt = ((|rd_cnt) ? (rd_cnt - 1'd1) : rd_cnt) ;
                                                                                nxt_lsb_addr = ((sar_burst == 2'd0) ? lsb_addr : (((lsb_addr == (narrow_down_cnt - 1)) || (!(|rd_cnt))) ? {ADDR_WIDTH{1'b0}} : (lsb_addr + ext_mas_req_size_bytes))) ;
                                                                                nxt_downsize_addr = ((sar_burst == 2'd0) ? downsize_addr : ((!(|rd_cnt)) ? {ADDR_BIT_WIDTH{1'b0}} : (((sar_size == 3'd0) & (&lsb_addr[0 +: clog2((EXT_MAS_AXI_DATA_WIDTH / 8))])) ? (downsize_addr + 1'd1) : (((sar_size == 3'd1) & (&lsb_addr[1 +: clog2((EXT_MAS_AXI_DATA_WIDTH / 8))])) ? (downsize_addr + 1'd1) : downsize_addr)))) ;
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = 1'b1 ;
                                                                                nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = i_m_rresp ;
                                                                                nxt_int_ext_mas_prt_rid[ext_slv_cnt] = i_m_rid ;
                                                                                nxt_int_ext_mas_prt_rdata[ext_slv_cnt] = (i_m_rdata[0 +: EXT_SLV_AXI_DATA_WIDTH_INT] >> (downsize_addr * EXT_MAS_AXI_DATA_WIDTH)) ;
                                                                                //nxt_int_ext_mas_prt_rdata[ext_slv_cnt]  = i_m_rdata[0+:EXT_SLV_AXI_DATA_WIDTH_INT] >> (downsize_addr*ext_mas_req_size_bits);
                                                                                nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = i_m_rlast ;
                                                                                nxt_rd_down_state = ((|rd_cnt) ? cur_rd_down_state : RD_DOWN_IDLE) ;
                                                                                end
                                                                            else
                                                                                begin
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (int_ext_mas_prt_rready[ext_slv_cnt] ? 1'b0 : int_ext_mas_prt_rvalid[ext_slv_cnt]) ;
                                                                                end
                                                                        end
                                                                    default : 
                                                                        begin
                                                                            nxt_rd_down_state = RD_DOWN_IDLE ;
                                                                        end
                                                                    endcase 
                                                                end
                                                        end
                                                    else
                                                        if ((EXT_MAS_AXI_DATA_WIDTH > EXT_SLV_AXI_DATA_WIDTH_INT)) 
                                                            begin : UP_BLK
                                                                localparam EXT_MAS_BYTE_CNT = (EXT_MAS_AXI_DATA_WIDTH / 8) ; 
                                                                localparam ADDR_BIT_SELECT = ((EXT_SLV_AXI_DATA_WIDTH_INT == 32) ? 2 : 3) ; 
                                                                localparam UPSIZE_FACTOR = (EXT_MAS_AXI_DATA_WIDTH / EXT_SLV_AXI_DATA_WIDTH_INT) ; 
                                                                localparam MASTER_SIZE = ((EXT_MAS_AXI_DATA_WIDTH == 64) ? 3'd3 : ((EXT_MAS_AXI_DATA_WIDTH == 128) ? 3'd4 : ((EXT_MAS_AXI_DATA_WIDTH == 256) ? 3'd5 : ((EXT_MAS_AXI_DATA_WIDTH == 512) ? 3'd6 : 3'd7)))) ; 
                                                                localparam FULL_EXT_SLV_SIZE = ((EXT_SLV_AXI_DATA_WIDTH_INT == 32) ? 3'd2 : 3'd3) ; 
                                                                localparam MSB_ADDR = (clog2((EXT_MAS_AXI_DATA_WIDTH / 8)) - 1) ; 
                                                                localparam ADDR_BIT_WIDTH = ((UPSIZE_FACTOR == 2) ? 1 : ((UPSIZE_FACTOR == 4) ? 2 : ((UPSIZE_FACTOR == 8) ? 3 : ((UPSIZE_FACTOR == 16) ? 4 : 5)))) ; 
                                                                localparam RD_CNT_WIDTH = 8 ; 
                                                                localparam ADDR_WIDTH = clog2((EXT_MAS_AXI_DATA_WIDTH / 8)) ; // maximum possible width
                                                                //localparam ADDR_WIDTH   = clog2(UPSIZE_FACTOR);
                                                                localparam UP_RD_CNT_WIDTH = clog2((EXT_MAS_AXI_DATA_WIDTH / 8)) ; 
                                                                //localparam UP_RD_CNT_WIDTH = clog2(UPSIZE_FACTOR);
                                                                localparam EXT_MAS_ARSIZE_3_IN_BYTES = 8 ; 
                                                                localparam EXT_MAS_ARSIZE_4_IN_BYTES = 16 ; 
                                                                localparam EXT_MAS_ARSIZE_5_IN_BYTES = 32 ; 
                                                                localparam EXT_MAS_ARSIZE_6_IN_BYTES = 64 ; 
                                                                localparam EXT_MAS_ARSIZE_7_IN_BYTES = 128 ; 
                                                                localparam EXT_SLV_AXI_DATA_WIDTH_BYTES = (EXT_SLV_AXI_DATA_WIDTH_INT / 8) ; 
                                                                localparam RD_UP_IDLE = 1'b0 ; 
                                                                localparam RD_UP_VALID = 1'b1 ; 
                                                                //=====================================================
                                                                //RD ADDRESS FIFO
                                                                //=====================================================
                                                                localparam AR_FF_DWIDTH = 21 ; 
                                                                localparam AR_FF_PTR_WIDTH = clog2(AR_FF_DEPTH) ; 
                                                                logic sar_ff_full ; 
                                                                logic sar_ff_empty ; 
                                                                logic sar_ff_wr_en ; 
                                                                logic sar_ff_rd_en ; 
                                                                logic [(AR_FF_DWIDTH - 1):0] sar_ff_wdata ; 
                                                                logic [(AR_FF_DWIDTH - 1):0] sar_ff_rdata_sig ; 
                                                                logic [(AR_FF_DWIDTH - 1):0] sar_ff_rdata ; 
                                                                logic [2:0] sar_size ; 
                                                                logic [7:0] sar_addr ; 
                                                                logic [7:0] sar_len ; 
                                                                logic [1:0] sar_burst ; 
                                                                assign sar_ff_wr_en = (((o_m_arvalid & i_m_arready) & (ext_mas_slv_rd_sel == ext_slv_cnt)) & (!sar_ff_full)) ; 
                                                                //assign sar_ff_wr_en  = o_m_arvalid & i_m_split_arready & (ext_mas_slv_rd_sel==ext_slv_cnt) & (!sar_ff_full);
                                                                assign sar_ff_wdata = {o_m_arburst[1:0],
                                                                            o_m_arlen[7:0],
                                                                            o_m_arsize[2:0],
                                                                            o_m_araddr[7:0]} ; // 8 bits to represent 128 bytes of address for maximum bus width 1024 bits
                                                                assign sar_ff_rd_en = ((((i_m_rvalid & i_m_rlast) & int_ext_mas_prt_rready[ext_slv_cnt]) & (i_ext_slv_rdresp_gnt == ext_slv_cnt)) & (~sar_ff_empty)) ; 
                                                                if ((LATTICE_FIFO == 1)) 
                                                                    begin : LSCC_FF_BLK
                                                                    end
                                                                else
                                                                    begin : CUSTOM_FF_BLK
                                                                        axi4_interconnect_ipgen_gen_fifo #(AR_FF_PTR_WIDTH,
                                                                                AR_FF_DWIDTH,
                                                                                0,
                                                                                AR_FF_DEPTH) u_saraddr_arsize_arlen_arburst_fifo (// Pointer Width
                                                                                // Data Width {awaddr[7:0]} 
                                                                                // Whether Output needs to be registered or not
                                                                                // Number of entries in FIFO
                                                                                .clk(aclk_i), 
                                                                                .aresetn_i(aresetn_i), 
                                                                                .we(sar_ff_wr_en), 
                                                                                .wdata(sar_ff_wdata), 
                                                                                .re(sar_ff_rd_en), 
                                                                                .rdata(sar_ff_rdata_sig), 
                                                                                .full(sar_ff_full), 
                                                                                .pre_full(), 
                                                                                .empty(sar_ff_empty)) ; 
                                                                    end
                                                                assign sar_ff_rdata = (sar_ff_empty ? 'd0 : sar_ff_rdata_sig) ; 
                                                                assign sar_addr = sar_ff_rdata[7:0] ; 
                                                                assign sar_size = sar_ff_rdata[10:8] ; 
                                                                assign sar_len = sar_ff_rdata[18:11] ; 
                                                                assign sar_burst = sar_ff_rdata[(AR_FF_DWIDTH - 1) -: 2] ; 
                                                                logic [(RD_CNT_WIDTH - 1):0] rd_cnt, 
                                                                    nxt_rd_cnt ; 
                                                                logic cur_rd_up_state, 
                                                                    nxt_rd_up_state ; 
                                                                logic [(ADDR_WIDTH - 1):0] lsb_addr, 
                                                                    nxt_lsb_addr ; 
                                                                logic [(UP_RD_CNT_WIDTH - 1):0] upsize_rd_cnt, 
                                                                    nxt_upsize_rd_cnt ; 
                                                                logic [(UP_RD_CNT_WIDTH - 1):0] upsize_rd_cnt_reg, 
                                                                    nxt_upsize_rd_cnt_reg ; 
                                                                logic [(EXT_MAS_AXI_DATA_WIDTH - 1):0] i_m_rdata_sig ; 
                                                                logic [6:0] ext_mas_req_size_bytes ; 
                                                                assign ext_mas_req_size_bytes = (1'd1 << sar_size) ; 
                                                                assign i_m_rdata_sig = {{(EXT_MAS_AXI_DATA_WIDTH - EXT_SLV_AXI_DATA_WIDTH_INT){1'b0}},
                                                                            i_m_rdata[0 +: EXT_SLV_AXI_DATA_WIDTH_INT]} ; 
                                                                //assign int_ext_mas_prt_rready[ext_slv_cnt] =  ~rdata_ff_full;
                                                                assign int_ext_mas_prt_rready[ext_slv_cnt] = ((i_ext_slv_rdresp_gnt_final == ext_slv_cnt) & (~rdata_ff_full)) ; 
                                                                assign int_ext_mas_prt_ruser[ext_slv_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                                always
                                                                    @(posedge aclk_i or 
                                                                        negedge aresetn_i)
                                                                    begin
                                                                        if ((~aresetn_i)) 
                                                                            begin
                                                                                //i_ext_slv_rdresp_gnt_final          <= 6'd0;
                                                                                int_ext_mas_prt_rvalid[ext_slv_cnt] <=  1'b0 ;
                                                                                int_ext_mas_prt_rdata[ext_slv_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH_INT{1'b0}} ;
                                                                                int_ext_mas_prt_rresp[ext_slv_cnt] <=  2'd0 ;
                                                                                int_ext_mas_prt_rid[ext_slv_cnt] <=  {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                                                                                int_ext_mas_prt_rlast[ext_slv_cnt] <=  1'b0 ;
                                                                                rd_cnt <=  {RD_CNT_WIDTH{1'b0}} ;
                                                                                cur_rd_up_state <=  RD_UP_IDLE ;
                                                                                lsb_addr <=  {ADDR_WIDTH{1'b0}} ;
                                                                                upsize_rd_cnt <=  {UP_RD_CNT_WIDTH{1'b0}} ;
                                                                                upsize_rd_cnt_reg <=  {UP_RD_CNT_WIDTH{1'b0}} ;
                                                                            end
                                                                        else
                                                                            begin
                                                                                //i_ext_slv_rdresp_gnt_final          <= i_ext_slv_rdresp_gnt;
                                                                                int_ext_mas_prt_rvalid[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] ;
                                                                                int_ext_mas_prt_rdata[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rdata[ext_slv_cnt] ;
                                                                                int_ext_mas_prt_rresp[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rresp[ext_slv_cnt] ;
                                                                                int_ext_mas_prt_rid[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rid[ext_slv_cnt] ;
                                                                                int_ext_mas_prt_rlast[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rlast[ext_slv_cnt] ;
                                                                                rd_cnt <=  nxt_rd_cnt ;
                                                                                cur_rd_up_state <=  nxt_rd_up_state ;
                                                                                lsb_addr <=  nxt_lsb_addr ;
                                                                                upsize_rd_cnt <=  nxt_upsize_rd_cnt ;
                                                                                upsize_rd_cnt_reg <=  nxt_upsize_rd_cnt_reg ;
                                                                            end
                                                                    end
                                                                integer upsize_cnt ; 
                                                                always
                                                                    @(*)
                                                                    begin
                                                                        nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = int_ext_mas_prt_rvalid[ext_slv_cnt] ;
                                                                        nxt_int_ext_mas_prt_rdata[ext_slv_cnt] = int_ext_mas_prt_rdata[ext_slv_cnt] ;
                                                                        nxt_int_ext_mas_prt_rid[ext_slv_cnt] = int_ext_mas_prt_rid[ext_slv_cnt] ;
                                                                        nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = int_ext_mas_prt_rresp[ext_slv_cnt] ;
                                                                        nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = int_ext_mas_prt_rlast[ext_slv_cnt] ;
                                                                        nxt_rd_up_state = cur_rd_up_state ;
                                                                        nxt_lsb_addr = lsb_addr ;
                                                                        nxt_rd_cnt = rd_cnt ;
                                                                        nxt_upsize_rd_cnt = upsize_rd_cnt ;
                                                                        nxt_upsize_rd_cnt_reg = upsize_rd_cnt_reg ;
                                                                        case (cur_rd_up_state)
                                                                        RD_UP_IDLE : 
                                                                            begin
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (int_ext_mas_prt_rready ? 1'b0 : int_ext_mas_prt_rvalid[ext_slv_cnt]) ;
                                                                                nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = (int_ext_mas_prt_rready ? 1'b0 : int_ext_mas_prt_rlast[ext_slv_cnt]) ;
                                                                                nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = 2'd0 ;
                                                                                if ((((i_ext_slv_rdresp_gnt == ext_slv_cnt) & (!rdata_ff_full)) & (!sar_ff_empty))) 
                                                                                begin
                                                                                nxt_rd_up_state = RD_UP_VALID ;
                                                                                nxt_rd_cnt = sar_len ;
                                                                                //nxt_lsb_addr = sar_addr[MSB_ADDR-:ADDR_BIT_WIDTH];
                                                                                if ((sar_size <= FULL_EXT_SLV_SIZE)) 
                                                                                begin
                                                                                nxt_upsize_rd_cnt = 'd0 ;
                                                                                case (sar_size)
                                                                                3'd0 : 
                                                                                nxt_lsb_addr = sar_addr[7:0] ;
                                                                                3'd1 : 
                                                                                nxt_lsb_addr = {sar_addr[7:1],
                                                                                1'b0} ;
                                                                                3'd2 : 
                                                                                nxt_lsb_addr = {sar_addr[7:2],
                                                                                2'd0} ;
                                                                                3'd3 : 
                                                                                nxt_lsb_addr = {sar_addr[7:3],
                                                                                3'd0} ;
                                                                                endcase 
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_lsb_addr = sar_addr[MSB_ADDR -: ADDR_BIT_WIDTH] ;
                                                                                case (sar_size)
                                                                                3'd3 : 
                                                                                begin
                                                                                nxt_upsize_rd_cnt = (((EXT_MAS_ARSIZE_3_IN_BYTES / EXT_SLV_AXI_DATA_WIDTH_BYTES) - (sar_addr[2:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_upsize_rd_cnt_reg = (((EXT_MAS_ARSIZE_3_IN_BYTES / EXT_SLV_AXI_DATA_WIDTH_BYTES) - (sar_addr[2:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                end
                                                                                3'd4 : 
                                                                                begin
                                                                                nxt_upsize_rd_cnt = (((EXT_MAS_ARSIZE_4_IN_BYTES / EXT_SLV_AXI_DATA_WIDTH_BYTES) - (sar_addr[3:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_upsize_rd_cnt_reg = (((EXT_MAS_ARSIZE_4_IN_BYTES / EXT_SLV_AXI_DATA_WIDTH_BYTES) - (sar_addr[3:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                end
                                                                                3'd5 : 
                                                                                begin
                                                                                nxt_upsize_rd_cnt = (((EXT_MAS_ARSIZE_5_IN_BYTES / EXT_SLV_AXI_DATA_WIDTH_BYTES) - (sar_addr[4:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_upsize_rd_cnt_reg = (((EXT_MAS_ARSIZE_5_IN_BYTES / EXT_SLV_AXI_DATA_WIDTH_BYTES) - (sar_addr[4:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                end
                                                                                3'd6 : 
                                                                                begin
                                                                                nxt_upsize_rd_cnt = (((EXT_MAS_ARSIZE_6_IN_BYTES / EXT_SLV_AXI_DATA_WIDTH_BYTES) - (sar_addr[5:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_upsize_rd_cnt_reg = (((EXT_MAS_ARSIZE_6_IN_BYTES / EXT_SLV_AXI_DATA_WIDTH_BYTES) - (sar_addr[5:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                end
                                                                                3'd7 : 
                                                                                begin
                                                                                nxt_upsize_rd_cnt = (((EXT_MAS_ARSIZE_7_IN_BYTES / EXT_SLV_AXI_DATA_WIDTH_BYTES) - (sar_addr[6:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_upsize_rd_cnt_reg = (((EXT_MAS_ARSIZE_7_IN_BYTES / EXT_SLV_AXI_DATA_WIDTH_BYTES) - (sar_addr[6:0] >> ADDR_BIT_SELECT)) - 1'd1) ;
                                                                                end
                                                                                default : 
                                                                                begin
                                                                                nxt_upsize_rd_cnt = upsize_rd_cnt ;
                                                                                nxt_upsize_rd_cnt_reg = upsize_rd_cnt_reg ;
                                                                                end
                                                                                endcase 
                                                                                end
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_rd_up_state = RD_UP_IDLE ;
                                                                                end
                                                                            end
                                                                        RD_UP_VALID : 
                                                                            begin
                                                                                if ((((i_m_rvalid & o_m_rready) & (~rdata_ff_full)) & (i_ext_slv_rdresp_gnt == ext_slv_cnt))) 
                                                                                begin
                                                                                if ((sar_size <= FULL_EXT_SLV_SIZE)) 
                                                                                // Narrow transfer with request size is less than or equal to slave bus width
                                                                                begin
                                                                                nxt_rd_cnt = ((|rd_cnt) ? (rd_cnt - 1'd1) : rd_cnt) ;
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = 1'b1 ;
                                                                                nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = ((|rd_cnt) ? 1'b0 : 1'b1) ;
                                                                                nxt_int_ext_mas_prt_rid[ext_slv_cnt] = i_m_rid ;
                                                                                nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = i_m_rresp ;
                                                                                nxt_rd_up_state = ((|rd_cnt) ? cur_rd_up_state : RD_UP_IDLE) ;
                                                                                nxt_lsb_addr = ((sar_burst == 2'd0) ? lsb_addr : (lsb_addr + ext_mas_req_size_bytes)) ;
                                                                                nxt_int_ext_mas_prt_rdata[ext_slv_cnt][(lsb_addr[(ADDR_WIDTH - 1) -: ADDR_BIT_WIDTH] * EXT_SLV_AXI_DATA_WIDTH_INT) +: EXT_SLV_AXI_DATA_WIDTH_INT] = i_m_rdata_sig[0 +: EXT_SLV_AXI_DATA_WIDTH_INT] ;
                                                                                //nxt_lsb_addr                          = lsb_addr==UPSIZE_FACTOR-1 ? {ADDR_WIDTH{1'b0}} : (lsb_addr + 1'd1 );
                                                                                //nxt_int_ext_mas_prt_rdata[ext_slv_cnt]  = i_m_rdata_sig << (lsb_addr*EXT_SLV_AXI_DATA_WIDTH_INT);
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_rd_up_state = ((|rd_cnt) ? cur_rd_up_state : ((|upsize_rd_cnt) ? cur_rd_up_state : RD_UP_IDLE)) ;
                                                                                nxt_lsb_addr = ((lsb_addr == (UPSIZE_FACTOR - 1)) ? ((sar_burst == 2'd0) ? sar_addr[MSB_ADDR -: ADDR_BIT_WIDTH] : {ADDR_WIDTH{1'b0}}) : (lsb_addr + 1'd1)) ;
                                                                                nxt_rd_cnt = ((|upsize_rd_cnt) ? rd_cnt : ((|rd_cnt) ? (rd_cnt - 1'd1) : rd_cnt)) ;
                                                                                nxt_upsize_rd_cnt = ((|upsize_rd_cnt) ? (upsize_rd_cnt - 1'd1) : ((sar_burst == 2'd0) ? upsize_rd_cnt_reg : ((ext_mas_req_size_bytes / EXT_SLV_AXI_DATA_WIDTH_BYTES) - 1'd1))) ;
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (!(|upsize_rd_cnt)) ;
                                                                                nxt_int_ext_mas_prt_rdata[ext_slv_cnt][(lsb_addr * EXT_SLV_AXI_DATA_WIDTH_INT) +: EXT_SLV_AXI_DATA_WIDTH_INT] = i_m_rdata[0 +: EXT_SLV_AXI_DATA_WIDTH_INT] ;
                                                                                nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = ((|int_ext_mas_prt_rresp[ext_slv_cnt]) ? ((|upsize_rd_cnt) ? int_ext_mas_prt_rresp[ext_slv_cnt] : i_m_rresp) : i_m_rresp) ;
                                                                                nxt_int_ext_mas_prt_rid[ext_slv_cnt] = i_m_rid ;
                                                                                nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = ((|rd_cnt) ? 1'b0 : (!(|upsize_rd_cnt))) ;
                                                                                end
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (int_ext_mas_prt_rready[ext_slv_cnt] ? 1'b0 : int_ext_mas_prt_rvalid[ext_slv_cnt]) ;
                                                                                end
                                                                            end//RD_UP_VALID
                                                                        endcase 
                                                                    end
                                                            end
                                                        else
                                                            begin : EQ_BLK
                                                                localparam RD_EQ_IDLE = 1'b0 ; 
                                                                localparam RD_EQ_VALID = 1'b1 ; 
                                                                localparam ADDR_WIDTH = clog2((EXT_MAS_AXI_DATA_WIDTH / 8)) ; // maximum possible width
                                                                localparam RD_CNT_WIDTH = 8 ; 
                                                                assign int_ext_mas_prt_rready[ext_slv_cnt] = ((i_ext_slv_rdresp_gnt_final == ext_slv_cnt) & (~rdata_ff_full)) ; 
                                                                //assign int_ext_mas_prt_rready[ext_slv_cnt] =  ~rdata_ff_full;
                                                                assign int_ext_mas_prt_ruser[ext_slv_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                                logic [(RD_CNT_WIDTH - 1):0] rd_cnt, 
                                                                    nxt_rd_cnt ; 
                                                                logic cur_rd_eq_state, 
                                                                    nxt_rd_eq_state ; 
                                                                logic [(ADDR_WIDTH - 1):0] lsb_addr, 
                                                                    nxt_lsb_addr ; 
                                                                //=====================================================
                                                                //RD ADDRESS FIFO
                                                                //=====================================================
                                                                localparam AR_FF_DWIDTH = 21 ; 
                                                                localparam AR_FF_PTR_WIDTH = clog2(AR_FF_DEPTH) ; 
                                                                logic sar_ff_full ; 
                                                                logic sar_ff_empty ; 
                                                                logic sar_ff_wr_en ; 
                                                                logic sar_ff_rd_en ; 
                                                                logic [(AR_FF_DWIDTH - 1):0] sar_ff_wdata ; 
                                                                logic [(AR_FF_DWIDTH - 1):0] sar_ff_rdata_sig ; 
                                                                logic [(AR_FF_DWIDTH - 1):0] sar_ff_rdata ; 
                                                                logic [2:0] sar_size ; 
                                                                logic [7:0] sar_addr ; 
                                                                logic [7:0] sar_len ; 
                                                                logic [1:0] sar_burst ; 
                                                                logic [6:0] ext_mas_req_size_bytes ; 
                                                                assign sar_ff_wr_en = (((o_m_arvalid & i_m_arready) & (ext_mas_slv_rd_sel == ext_slv_cnt)) & (!sar_ff_full)) ; 
                                                                assign sar_ff_wdata = {o_m_arburst[1:0],
                                                                            o_m_arlen[7:0],
                                                                            o_m_arsize[2:0],
                                                                            o_m_araddr[7:0]} ; // 8 bits to represent 128 bytes of address for maximum bus width 1024 bits
                                                                assign sar_ff_rd_en = ((((i_m_rvalid & i_m_rlast) & int_ext_mas_prt_rready[ext_slv_cnt]) & (i_ext_slv_rdresp_gnt == ext_slv_cnt)) & (~sar_ff_empty)) ; 
                                                                assign ext_mas_req_size_bytes = (1'd1 << sar_size) ; 
                                                                if ((LATTICE_FIFO == 1)) 
                                                                    begin : LSCC_FF_BLK
                                                                    end
                                                                else
                                                                    begin : CUSTOM_FF_BLK
                                                                        axi4_interconnect_ipgen_gen_fifo #(AR_FF_PTR_WIDTH,
                                                                                AR_FF_DWIDTH,
                                                                                0,
                                                                                AR_FF_DEPTH) u_saraddr_arsize_arlen_arburst_fifo (// Pointer Width
                                                                                // Data Width {awaddr[7:0]} 
                                                                                // Whether Output needs to be registered or not
                                                                                // Number of entries in FIFO
                                                                                .clk(aclk_i), 
                                                                                .aresetn_i(aresetn_i), 
                                                                                .we(sar_ff_wr_en), 
                                                                                .wdata(sar_ff_wdata), 
                                                                                .re(sar_ff_rd_en), 
                                                                                .rdata(sar_ff_rdata_sig), 
                                                                                .full(sar_ff_full), 
                                                                                .pre_full(), 
                                                                                .empty(sar_ff_empty)) ; 
                                                                    end
                                                                assign sar_ff_rdata = (sar_ff_empty ? 'd0 : sar_ff_rdata_sig) ; 
                                                                assign sar_addr = sar_ff_rdata[7:0] ; 
                                                                assign sar_size = sar_ff_rdata[10:8] ; 
                                                                assign sar_len = sar_ff_rdata[18:11] ; 
                                                                assign sar_burst = sar_ff_rdata[(AR_FF_DWIDTH - 1) -: 2] ; 
                                                                always
                                                                    @(posedge aclk_i or 
                                                                        negedge aresetn_i)
                                                                    begin
                                                                        if ((!aresetn_i)) 
                                                                            begin
                                                                                //i_ext_slv_rdresp_gnt_final          <= 6'd0;
                                                                                int_ext_mas_prt_rvalid[ext_slv_cnt] <=  1'b0 ;
                                                                                int_ext_mas_prt_rdata[ext_slv_cnt] <=  {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ;
                                                                                int_ext_mas_prt_rresp[ext_slv_cnt] <=  2'd0 ;
                                                                                int_ext_mas_prt_rid[ext_slv_cnt] <=  {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                                                                                int_ext_mas_prt_rlast[ext_slv_cnt] <=  1'b0 ;
                                                                                rd_cnt <=  {RD_CNT_WIDTH{1'b0}} ;
                                                                                cur_rd_eq_state <=  RD_EQ_IDLE ;
                                                                                lsb_addr <=  {ADDR_WIDTH{1'b0}} ;
                                                                            end
                                                                        else
                                                                            begin
                                                                                // i_ext_slv_rdresp_gnt_final          <= i_ext_slv_rdresp_gnt;
                                                                                int_ext_mas_prt_rvalid[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] ;
                                                                                int_ext_mas_prt_rdata[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rdata[ext_slv_cnt] ;
                                                                                int_ext_mas_prt_rresp[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rresp[ext_slv_cnt] ;
                                                                                int_ext_mas_prt_rid[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rid[ext_slv_cnt] ;
                                                                                int_ext_mas_prt_rlast[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rlast[ext_slv_cnt] ;
                                                                                rd_cnt <=  nxt_rd_cnt ;
                                                                                cur_rd_eq_state <=  nxt_rd_eq_state ;
                                                                                lsb_addr <=  nxt_lsb_addr ;
                                                                            end
                                                                    end
                                                                always
                                                                    @(*)
                                                                    begin
                                                                        nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = int_ext_mas_prt_rvalid[ext_slv_cnt] ;
                                                                        nxt_int_ext_mas_prt_rdata[ext_slv_cnt] = int_ext_mas_prt_rdata[ext_slv_cnt] ;
                                                                        nxt_int_ext_mas_prt_rid[ext_slv_cnt] = int_ext_mas_prt_rid[ext_slv_cnt] ;
                                                                        nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = int_ext_mas_prt_rresp[ext_slv_cnt] ;
                                                                        nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = int_ext_mas_prt_rlast[ext_slv_cnt] ;
                                                                        nxt_rd_cnt = rd_cnt ;
                                                                        nxt_rd_eq_state = cur_rd_eq_state ;
                                                                        nxt_lsb_addr = lsb_addr ;
                                                                        case (cur_rd_eq_state)
                                                                        RD_EQ_IDLE : 
                                                                            begin
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (int_ext_mas_prt_rready ? 1'b0 : int_ext_mas_prt_rvalid[ext_slv_cnt]) ;
                                                                                nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = (int_ext_mas_prt_rready ? 1'b0 : int_ext_mas_prt_rlast[ext_slv_cnt]) ;
                                                                                nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = 2'd0 ;
                                                                                if ((((i_ext_slv_rdresp_gnt == ext_slv_cnt) & (!rdata_ff_full)) & (!sar_ff_empty))) 
                                                                                begin
                                                                                nxt_rd_eq_state = RD_EQ_VALID ;
                                                                                nxt_rd_cnt = sar_len ;
                                                                                //case(sar_size)
                                                                                //   3'd0: nxt_lsb_addr     = sar_addr[7:0];
                                                                                //   3'd1: nxt_lsb_addr     = {sar_addr[7:1]};
                                                                                //   3'd2: nxt_lsb_addr     = {sar_addr[7:2]};
                                                                                //   3'd3: nxt_lsb_addr     = {sar_addr[7:3]};
                                                                                //endcase
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_rd_eq_state = RD_EQ_IDLE ;
                                                                                end
                                                                            end
                                                                        RD_EQ_VALID : 
                                                                            begin
                                                                                if ((((i_m_rvalid & o_m_rready) & (~rdata_ff_full)) & (i_ext_slv_rdresp_gnt == ext_slv_cnt))) 
                                                                                begin
                                                                                nxt_rd_cnt = ((|rd_cnt) ? (rd_cnt - 1'd1) : rd_cnt) ;
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = 1'b1 ;
                                                                                nxt_int_ext_mas_prt_rlast[ext_slv_cnt] = ((|rd_cnt) ? 1'b0 : 1'b1) ;
                                                                                nxt_int_ext_mas_prt_rid[ext_slv_cnt] = i_m_rid ;
                                                                                nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = i_m_rresp ;
                                                                                nxt_rd_eq_state = ((|rd_cnt) ? cur_rd_eq_state : RD_EQ_IDLE) ;
                                                                                //nxt_lsb_addr                            = lsb_addr;
                                                                                //if(sar_burst==2'd0)
                                                                                //begin
                                                                                //   case(sar_size)
                                                                                //      3'd0: nxt_int_ext_mas_prt_rdata[ext_slv_cnt][lsb_addr*8 +:8] = i_m_rdata[lsb_addr*8 +:8];
                                                                                //      3'd1: nxt_int_ext_mas_prt_rdata[ext_slv_cnt][lsb_addr*16 +:16] = i_m_rdata[lsb_addr*16 +:16] ;
                                                                                //      3'd2: nxt_int_ext_mas_prt_rdata[ext_slv_cnt][lsb_addr*32 +:32] = i_m_rdata[lsb_addr*32 +:32] ;
                                                                                //      3'd3: nxt_int_ext_mas_prt_rdata[ext_slv_cnt][lsb_addr*64 +:64] = i_m_rdata[lsb_addr*64 +64] ;
                                                                                //   endcase
                                                                                //end
                                                                                //else
                                                                                //begin
                                                                                nxt_int_ext_mas_prt_rdata[ext_slv_cnt] = i_m_rdata[0 +: EXT_SLV_AXI_DATA_WIDTH_INT] ;
                                                                                //end
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_rd_cnt = rd_cnt ;
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (int_ext_mas_prt_rready[ext_slv_cnt] ? 1'b0 : int_ext_mas_prt_rvalid[ext_slv_cnt]) ;
                                                                                end
                                                                            end//RD_EQ_VALID
                                                                        endcase 
                                                                    end
                                                            end
                                                end
                                        end
                                    else
                                        begin : NO_EXT_SLV_CONNECT_BLK
                                            assign int_ext_mas_prt_rready[ext_slv_cnt] = 1'b0 ; 
                                            assign int_ext_mas_prt_rvalid[ext_slv_cnt] = 1'b0 ; 
                                            assign int_ext_mas_prt_rdata[ext_slv_cnt] = {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ; 
                                            assign int_ext_mas_prt_ruser[ext_slv_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                            assign int_ext_mas_prt_rid[ext_slv_cnt] = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ; 
                                            assign int_ext_mas_prt_rresp[ext_slv_cnt] = 2'd0 ; 
                                            assign int_ext_mas_prt_rlast[ext_slv_cnt] = 1'b0 ; 
                                        end
                                end
                        end
                    end
                else
                    begin : AXI4LITE_EXTMAS_BLK
                        for (ext_slv_cnt = 0;(ext_slv_cnt <= TOTAL_EXTSLV_CNT);ext_slv_cnt = (ext_slv_cnt + 1))
                        begin : EXT_SLV_BLK
                            always
                            //for -ext_slv_cnt
                                @(posedge aclk_i or 
                                    negedge aresetn_i)
                                begin
                                    if ((~aresetn_i)) 
                                        begin
                                            i_ext_slv_rdresp_gnt_final <=  6'd0 ;
                                        end
                                    else
                                        begin
                                            i_ext_slv_rdresp_gnt_final <=  i_ext_slv_rdresp_gnt ;
                                        end
                                end
                            if ((ext_slv_cnt == TOTAL_EXTSLV_CNT)) 
                                begin : DEF_SLV_BLK
                                    always
                                        @(posedge aclk_i or 
                                            negedge aresetn_i)
                                        begin
                                            if ((~aresetn_i)) 
                                                begin
                                                    //i_ext_slv_rdresp_gnt_final          <= 6'd0;
                                                    int_ext_mas_prt_rvalid[ext_slv_cnt] <=  1'b0 ;
                                                end
                                            else
                                                begin
                                                    //i_ext_slv_rdresp_gnt_final          <= i_ext_slv_rdresp_gnt;
                                                    int_ext_mas_prt_rvalid[ext_slv_cnt] <=  ((i_m_rvalid & o_m_rready) & (i_ext_slv_rdresp_gnt == ext_slv_cnt)) ;
                                                end
                                        end
                                    //assign int_ext_mas_prt_rready[ext_slv_cnt] =  ~rdata_ff_full;
                                    assign int_ext_mas_prt_rready[ext_slv_cnt] = ((i_ext_slv_rdresp_gnt_final == ext_slv_cnt) & (~rdata_ff_full)) ; 
                                    assign int_ext_mas_prt_rdata[ext_slv_cnt] = {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ; 
                                    assign int_ext_mas_prt_rresp[ext_slv_cnt] = 2'd3 ; 
                                    assign int_ext_mas_prt_rid[ext_slv_cnt] = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ; 
                                    assign int_ext_mas_prt_rlast[ext_slv_cnt] = 1'b1 ; 
                                    assign int_ext_mas_prt_ruser[ext_slv_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                end
                            else
                                begin : ACTUAL_SLV_BLK
                                    localparam EXT_SLV_AXI_DATA_WIDTH_INT = EXT_SLV_AXI_DATA_WIDTH[(ext_slv_cnt * 11) +: 11] ; 
                                    if ((EXT_MAS_CONNECTED_SLAVE[ext_slv_cnt] == 1)) 
                                        begin : EXTMAS_CNCT_EXTSLV_BLK
                                            if ((EXT_SLV_AXI_PROTOCOL[ext_slv_cnt] == 0)) 
                                                begin : AXI4_EXTSLV_BLK
                                                    if ((EXT_MAS_AXI_DATA_WIDTH < EXT_SLV_AXI_DATA_WIDTH_INT)) 
                                                        begin : DOWN_BLK
                                                            localparam DOWN_SIZE = (EXT_SLV_AXI_DATA_WIDTH_INT / EXT_MAS_AXI_DATA_WIDTH) ; 
                                                            localparam AR_FF_DWIDTH = 11 ; 
                                                            localparam AR_FF_PTR_WIDTH = clog2(AR_FF_DEPTH) ; 
                                                            //=====================================================
                                                            //RD ADDRESS FIFO
                                                            //=====================================================
                                                            logic sar_ff_full ; 
                                                            logic sar_ff_empty ; 
                                                            logic sar_ff_wr_en ; 
                                                            logic sar_ff_rd_en ; 
                                                            logic [(AR_FF_DWIDTH - 1):0] sar_ff_wdata ; 
                                                            logic [(AR_FF_DWIDTH - 1):0] sar_ff_rdata_sig ; 
                                                            logic [(AR_FF_DWIDTH - 1):0] sar_ff_rdata ; 
                                                            logic [2:0] sar_size ; 
                                                            logic [7:0] sar_addr ; 
                                                            assign sar_ff_wr_en = (((o_m_arvalid & i_m_arready) & (ext_mas_slv_rd_sel == ext_slv_cnt)) & (!sar_ff_full)) ; 
                                                            //assign sar_ff_wr_en  = o_m_arvalid & i_m_split_arready & (ext_mas_slv_rd_sel==ext_slv_cnt) & (!sar_ff_full);
                                                            assign sar_ff_wdata = {o_m_arsize[2:0],
                                                                        o_m_araddr[7:0]} ; // 8 bits to represent 128 bytes of address for maximum bus width 1024 bits
                                                            assign sar_ff_rd_en = ((((i_m_rvalid & i_m_rlast) & int_ext_mas_prt_rready[ext_slv_cnt]) & (i_ext_slv_rdresp_gnt == ext_slv_cnt)) & (~sar_ff_empty)) ; 
                                                            if ((LATTICE_FIFO == 1)) 
                                                                begin : LSCC_FF_BLK
                                                                end
                                                            else
                                                                begin : CUSTOM_FF_BLK
                                                                    axi4_interconnect_ipgen_gen_fifo #(AR_FF_PTR_WIDTH,
                                                                            AR_FF_DWIDTH,
                                                                            0,
                                                                            AR_FF_DEPTH) u_saraddr_arsize_fifo (// Pointer Width
                                                                            // Data Width {awaddr[7:0]} 
                                                                            // Whether Output needs to be registered or not
                                                                            // Number of entries in FIFO
                                                                            .clk(aclk_i), 
                                                                                .aresetn_i(aresetn_i), 
                                                                                .we(sar_ff_wr_en), 
                                                                                .wdata(sar_ff_wdata), 
                                                                                .re(sar_ff_rd_en), 
                                                                                .rdata(sar_ff_rdata_sig), 
                                                                                .full(sar_ff_full), 
                                                                                .pre_full(), 
                                                                                .empty(sar_ff_empty)) ; 
                                                                end
                                                            assign sar_ff_rdata = (sar_ff_empty ? 'd0 : sar_ff_rdata_sig) ; 
                                                            assign sar_addr = sar_ff_rdata[7:0] ; 
                                                            assign sar_size = sar_ff_rdata[10:8] ; 
                                                            localparam RD_DOWN_IDLE = 1'b0 ; 
                                                            localparam RD_DOWN_VALID = 1'b1 ; 
                                                            localparam ADDR_WIDTH = clog2(DOWN_SIZE) ; 
                                                            logic cur_rd_down_state, 
                                                                nxt_rd_down_state ; 
                                                            logic [(ADDR_WIDTH - 1):0] lsb_addr, 
                                                                nxt_lsb_addr ; 
                                                            localparam MSB_ADDR = (clog2((EXT_SLV_AXI_DATA_WIDTH_INT / 8)) - 1) ; 
                                                            //localparam MSB_ADDR        = clog2(EXT_MAS_AXI_DATA_WIDTH/8)-1;
                                                            localparam ADDR_BIT_WIDTH = ((DOWN_SIZE == 2) ? 1 : ((DOWN_SIZE == 4) ? 2 : ((DOWN_SIZE == 8) ? 3 : ((DOWN_SIZE == 16) ? 4 : ((DOWN_SIZE == 32) ? 5 : ((DOWN_SIZE == 64) ? 6 : 7)))))) ; 
                                                            // assign int_ext_mas_prt_rready[ext_slv_cnt] =  ~rdata_ff_full;
                                                            assign int_ext_mas_prt_rready[ext_slv_cnt] = ((i_ext_slv_rdresp_gnt_final == ext_slv_cnt) & (~rdata_ff_full)) ; 
                                                            assign int_ext_mas_prt_rlast[ext_slv_cnt] = 1'b1 ; 
                                                            assign int_ext_mas_prt_ruser[ext_slv_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                            assign int_ext_mas_prt_rid[ext_slv_cnt] = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ; 
                                                            //         assign int_ext_mas_prt_split_rready[ext_slv_cnt] = ~rdata_ff_full;
                                                            always
                                                                @(posedge aclk_i or 
                                                                    negedge aresetn_i)
                                                                begin
                                                                    if ((~aresetn_i)) 
                                                                        begin
                                                                            //i_ext_slv_rdresp_gnt_final          <= 6'd0;
                                                                            int_ext_mas_prt_rvalid[ext_slv_cnt] <=  1'b0 ;
                                                                            int_ext_mas_prt_rdata[ext_slv_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH_INT{1'b0}} ;
                                                                            int_ext_mas_prt_rresp[ext_slv_cnt] <=  2'd0 ;
                                                                        end
                                                                    else
                                                                        begin
                                                                            //i_ext_slv_rdresp_gnt_final          <= i_ext_slv_rdresp_gnt;
                                                                            int_ext_mas_prt_rvalid[ext_slv_cnt] <=  ((i_m_rvalid & o_m_rready) & (i_ext_slv_rdresp_gnt == ext_slv_cnt)) ;
                                                                            int_ext_mas_prt_rdata[ext_slv_cnt] <=  (i_m_rdata[0 +: EXT_SLV_AXI_DATA_WIDTH_INT] >> (sar_addr[MSB_ADDR -: ADDR_BIT_WIDTH] * EXT_MAS_AXI_DATA_WIDTH)) ;
                                                                            int_ext_mas_prt_rresp[ext_slv_cnt] <=  i_m_rresp ;
                                                                        end
                                                                end
                                                        end
                                                    else
                                                        if ((EXT_MAS_AXI_DATA_WIDTH > EXT_SLV_AXI_DATA_WIDTH_INT)) 
                                                            begin : UP_BLK
                                                                localparam EXT_MAS_BYTE_CNT = (EXT_MAS_AXI_DATA_WIDTH / 8) ; 
                                                                localparam ADDR_BIT_SELECT = ((EXT_MAS_AXI_DATA_WIDTH == 32) ? 2 : 64) ; 
                                                                localparam UPSIZE_FACTOR = (EXT_MAS_AXI_DATA_WIDTH / EXT_SLV_AXI_DATA_WIDTH_INT) ; 
                                                                localparam MASTER_SIZE = ((EXT_MAS_AXI_DATA_WIDTH == 32) ? 3'd2 : 3'd3) ; 
                                                                localparam FULL_EXT_SLV_SIZE = ((EXT_SLV_AXI_DATA_WIDTH_INT == 8) ? 3'd0 : ((EXT_SLV_AXI_DATA_WIDTH_INT == 16) ? 3'd1 : 3'd2)) ; 
                                                                localparam MSB_ADDR = (clog2((EXT_MAS_AXI_DATA_WIDTH / 8)) - 1) ; 
                                                                localparam ADDR_BIT_WIDTH = ((UPSIZE_FACTOR == 2) ? 1 : ((UPSIZE_FACTOR == 4) ? 2 : 3)) ; 
                                                                localparam ADDR_WIDTH = clog2(UPSIZE_FACTOR) ; 
                                                                localparam RD_UP_IDLE = 1'b0 ; 
                                                                localparam RD_UP_VALID = 1'b1 ; 
                                                                //=====================================================
                                                                //RD ADDRESS FIFO
                                                                //=====================================================
                                                                localparam AR_FF_DWIDTH = 11 ; 
                                                                localparam AR_FF_PTR_WIDTH = clog2(AR_FF_DEPTH) ; 
                                                                logic sar_ff_full ; 
                                                                logic sar_ff_empty ; 
                                                                logic sar_ff_wr_en ; 
                                                                logic sar_ff_rd_en ; 
                                                                logic [(AR_FF_DWIDTH - 1):0] sar_ff_wdata ; 
                                                                logic [(AR_FF_DWIDTH - 1):0] sar_ff_rdata_sig ; 
                                                                logic [(AR_FF_DWIDTH - 1):0] sar_ff_rdata ; 
                                                                logic [2:0] sar_size ; 
                                                                logic [7:0] sar_addr ; 
                                                                assign sar_ff_wr_en = (((o_m_arvalid & i_m_arready) & (ext_mas_slv_rd_sel == ext_slv_cnt)) & (!sar_ff_full)) ; 
                                                                //assign sar_ff_wr_en  = o_m_arvalid & i_m_split_arready & (ext_mas_slv_rd_sel==ext_slv_cnt) & (!sar_ff_full);
                                                                assign sar_ff_wdata = {o_m_arsize[2:0],
                                                                            o_m_araddr[7:0]} ; // 8 bits to represent 128 bytes of address for maximum bus width 1024 bits
                                                                assign sar_ff_rd_en = ((((i_m_rvalid & i_m_rlast) & int_ext_mas_prt_rready[ext_slv_cnt]) & (i_ext_slv_rdresp_gnt == ext_slv_cnt)) & (~sar_ff_empty)) ; 
                                                                if ((LATTICE_FIFO == 1)) 
                                                                    begin : LSCC_FF_BLK
                                                                    end
                                                                else
                                                                    begin : CUSTOM_FF_BLK
                                                                        axi4_interconnect_ipgen_gen_fifo #(AR_FF_PTR_WIDTH,
                                                                                AR_FF_DWIDTH,
                                                                                0,
                                                                                AR_FF_DEPTH) u_saraddr_arsize_fifo (// Pointer Width
                                                                                // Data Width {awaddr[7:0]} 
                                                                                // Whether Output needs to be registered or not
                                                                                // Number of entries in FIFO
                                                                                .clk(aclk_i), 
                                                                                .aresetn_i(aresetn_i), 
                                                                                .we(sar_ff_wr_en), 
                                                                                .wdata(sar_ff_wdata), 
                                                                                .re(sar_ff_rd_en), 
                                                                                .rdata(sar_ff_rdata_sig), 
                                                                                .full(sar_ff_full), 
                                                                                .pre_full(), 
                                                                                .empty(sar_ff_empty)) ; 
                                                                    end
                                                                assign sar_ff_rdata = (sar_ff_empty ? 'd0 : sar_ff_rdata_sig) ; 
                                                                assign sar_addr = sar_ff_rdata[7:0] ; 
                                                                assign sar_size = sar_ff_rdata[10:8] ; 
                                                                logic cur_rd_up_state, 
                                                                    nxt_rd_up_state ; 
                                                                logic [(ADDR_WIDTH - 1):0] lsb_addr, 
                                                                    nxt_lsb_addr ; 
                                                                logic [(EXT_MAS_AXI_DATA_WIDTH - 1):0] i_m_rdata_sig ; 
                                                                assign i_m_rdata_sig = {{(EXT_MAS_AXI_DATA_WIDTH - EXT_SLV_AXI_DATA_WIDTH_INT){1'b0}},
                                                                            i_m_rdata[0 +: EXT_SLV_AXI_DATA_WIDTH_INT]} ; 
                                                                //assign int_ext_mas_prt_rready[ext_slv_cnt] =  ~rdata_ff_full;
                                                                assign int_ext_mas_prt_rready[ext_slv_cnt] = ((i_ext_slv_rdresp_gnt_final == ext_slv_cnt) & (~rdata_ff_full)) ; 
                                                                assign int_ext_mas_prt_rlast[ext_slv_cnt] = 1'b1 ; 
                                                                assign int_ext_mas_prt_ruser[ext_slv_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                                assign int_ext_mas_prt_rid[ext_slv_cnt] = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ; 
                                                                //         assign int_ext_mas_prt_split_rready[ext_slv_cnt] = ~rdata_ff_full;
                                                                always
                                                                    @(posedge aclk_i or 
                                                                        negedge aresetn_i)
                                                                    begin
                                                                        if ((~aresetn_i)) 
                                                                            begin
                                                                                //i_ext_slv_rdresp_gnt_final          <= 6'd0;
                                                                                int_ext_mas_prt_rvalid[ext_slv_cnt] <=  1'b0 ;
                                                                                int_ext_mas_prt_rdata[ext_slv_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH_INT{1'b0}} ;
                                                                                int_ext_mas_prt_rresp[ext_slv_cnt] <=  2'd0 ;
                                                                                cur_rd_up_state <=  RD_UP_IDLE ;
                                                                                lsb_addr <=  {ADDR_WIDTH{1'b0}} ;
                                                                            end
                                                                        else
                                                                            begin
                                                                                //i_ext_slv_rdresp_gnt_final          <= i_ext_slv_rdresp_gnt;
                                                                                int_ext_mas_prt_rvalid[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] ;
                                                                                int_ext_mas_prt_rdata[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rdata[ext_slv_cnt] ;
                                                                                int_ext_mas_prt_rresp[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rresp[ext_slv_cnt] ;
                                                                                cur_rd_up_state <=  nxt_rd_up_state ;
                                                                                lsb_addr <=  nxt_lsb_addr ;
                                                                            end
                                                                    end
                                                                integer upsize_cnt ; 
                                                                always
                                                                    @(*)
                                                                    begin
                                                                        nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = int_ext_mas_prt_rvalid[ext_slv_cnt] ;
                                                                        nxt_int_ext_mas_prt_rdata[ext_slv_cnt] = int_ext_mas_prt_rdata[ext_slv_cnt] ;
                                                                        nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = int_ext_mas_prt_rresp[ext_slv_cnt] ;
                                                                        nxt_rd_up_state = cur_rd_up_state ;
                                                                        nxt_lsb_addr = lsb_addr ;
                                                                        case (cur_rd_up_state)
                                                                        RD_UP_IDLE : 
                                                                            begin
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (int_ext_mas_prt_rready ? 1'b0 : int_ext_mas_prt_rvalid[ext_slv_cnt]) ;
                                                                                nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = 2'd0 ;
                                                                                if ((((i_ext_slv_rdresp_gnt == ext_slv_cnt) & (!rdata_ff_full)) & (!sar_ff_empty))) 
                                                                                begin
                                                                                nxt_rd_up_state = RD_UP_VALID ;
                                                                                nxt_lsb_addr = sar_addr[MSB_ADDR -: ADDR_BIT_WIDTH] ;
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_rd_up_state = RD_UP_IDLE ;
                                                                                end
                                                                            end
                                                                        RD_UP_VALID : 
                                                                            begin
                                                                                if ((((i_m_rvalid & o_m_rready) & (~rdata_ff_full)) & (i_ext_slv_rdresp_gnt == ext_slv_cnt))) 
                                                                                begin
                                                                                //for(upsize_cnt=0 ;  upsize_cnt<UPSIZE_FACTOR ; upsize_cnt = upsize_cnt +1 )
                                                                                //begin
                                                                                //      if (lsb_addr==upsize_cnt)
                                                                                //      begin
                                                                                nxt_lsb_addr = ((lsb_addr == (UPSIZE_FACTOR - 1)) ? {ADDR_WIDTH{1'b0}} : (lsb_addr + 1'd1)) ;
                                                                                nxt_rd_up_state = (i_m_rlast ? RD_UP_IDLE : cur_rd_up_state) ;
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = i_m_rlast ;
                                                                                nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = ((|int_ext_mas_prt_rresp[ext_slv_cnt]) ? int_ext_mas_prt_rresp[ext_slv_cnt] : i_m_rresp) ;
                                                                                nxt_int_ext_mas_prt_rdata[ext_slv_cnt][(lsb_addr * EXT_SLV_AXI_DATA_WIDTH_INT) +: EXT_SLV_AXI_DATA_WIDTH_INT] = i_m_rdata[0 +: EXT_SLV_AXI_DATA_WIDTH_INT] ;
                                                                                //      end
                                                                                //      else;
                                                                                //end
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (int_ext_mas_prt_rready[ext_slv_cnt] ? 1'b0 : int_ext_mas_prt_rvalid[ext_slv_cnt]) ;
                                                                                end
                                                                            end//RD_UP_VALID
                                                                        endcase 
                                                                    end
                                                            end
                                                        else
                                                            begin : EQ_BLK
                                                                //assign int_ext_mas_prt_rready[ext_slv_cnt] =  ~rdata_ff_full;
                                                                assign int_ext_mas_prt_rready[ext_slv_cnt] = ((i_ext_slv_rdresp_gnt_final == ext_slv_cnt) & (~rdata_ff_full)) ; 
                                                                assign int_ext_mas_prt_rlast[ext_slv_cnt] = 1'b1 ; 
                                                                assign int_ext_mas_prt_ruser[ext_slv_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                                //            assign int_ext_mas_prt_split_rready[ext_slv_cnt] = ~rdata_ff_full;
                                                                always
                                                                    @(posedge aclk_i or 
                                                                        negedge aresetn_i)
                                                                    begin
                                                                        if ((!aresetn_i)) 
                                                                            begin
                                                                                //i_ext_slv_rdresp_gnt_final          <= 6'd0;
                                                                                int_ext_mas_prt_rvalid[ext_slv_cnt] <=  1'b0 ;
                                                                                int_ext_mas_prt_rdata[ext_slv_cnt] <=  {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ;
                                                                                int_ext_mas_prt_rresp[ext_slv_cnt] <=  2'd0 ;
                                                                            end
                                                                        else
                                                                            begin
                                                                                //i_ext_slv_rdresp_gnt_final          <= i_ext_slv_rdresp_gnt;
                                                                                int_ext_mas_prt_rvalid[ext_slv_cnt] <=  ((i_m_rvalid & o_m_rready) & (i_ext_slv_rdresp_gnt == ext_slv_cnt)) ;
                                                                                int_ext_mas_prt_rdata[ext_slv_cnt] <=  i_m_rdata[0 +: EXT_SLV_AXI_DATA_WIDTH_INT] ;
                                                                                int_ext_mas_prt_rresp[ext_slv_cnt] <=  i_m_rresp ;
                                                                            end
                                                                    end
                                                            end
                                                end
                                            else
                                                begin : AXI4LITE_EXTSLV_BLK
                                                    if ((EXT_MAS_AXI_DATA_WIDTH < EXT_SLV_AXI_DATA_WIDTH_INT)) 
                                                        begin : DOWN_BLK
                                                            localparam DOWN_SIZE = (EXT_SLV_AXI_DATA_WIDTH_INT / EXT_MAS_AXI_DATA_WIDTH) ; 
                                                            localparam AR_FF_DWIDTH = 1 ; 
                                                            localparam AR_FF_PTR_WIDTH = clog2(AR_FF_DEPTH) ; 
                                                            //=====================================================
                                                            //RD ADDRESS FIFO
                                                            //=====================================================
                                                            logic sar_ff_full ; 
                                                            logic sar_ff_empty ; 
                                                            logic sar_ff_wr_en ; 
                                                            logic sar_ff_rd_en ; 
                                                            logic [(AR_FF_DWIDTH - 1):0] sar_ff_wdata ; 
                                                            logic [(AR_FF_DWIDTH - 1):0] sar_ff_rdata_sig ; 
                                                            logic [(AR_FF_DWIDTH - 1):0] sar_ff_rdata ; 
                                                            logic sar_addr ; 
                                                            assign sar_ff_wr_en = (((o_m_arvalid & i_m_arready) & (ext_mas_slv_rd_sel == ext_slv_cnt)) & (!sar_ff_full)) ; 
                                                            //assign sar_ff_wr_en  = o_m_arvalid & i_m_split_arready & (ext_mas_slv_rd_sel==ext_slv_cnt) & (!sar_ff_full);
                                                            assign sar_ff_wdata = {o_m_araddr[2]} ; // 8 bits to represent 128 bytes of address for maximum bus width 1024 bits
                                                            assign sar_ff_rd_en = ((((i_m_rvalid & i_m_rlast) & int_ext_mas_prt_rready[ext_slv_cnt]) & (i_ext_slv_rdresp_gnt == ext_slv_cnt)) & (~sar_ff_empty)) ; 
                                                            if ((LATTICE_FIFO == 1)) 
                                                                begin : LSCC_FF_BLK
                                                                end
                                                            else
                                                                begin : CUSTOM_FF_BLK
                                                                    axi4_interconnect_ipgen_gen_fifo #(AR_FF_PTR_WIDTH,
                                                                            AR_FF_DWIDTH,
                                                                            0,
                                                                            AR_FF_DEPTH) u_saraddr_arsize_arlen_fifo (// Pointer Width
                                                                            // Data Width {awaddr[7:0]} 
                                                                            // Whether Output needs to be registered or not
                                                                            // Number of entries in FIFO
                                                                            .clk(aclk_i), 
                                                                                .aresetn_i(aresetn_i), 
                                                                                .we(sar_ff_wr_en), 
                                                                                .wdata(sar_ff_wdata), 
                                                                                .re(sar_ff_rd_en), 
                                                                                .rdata(sar_ff_rdata_sig), 
                                                                                .full(sar_ff_full), 
                                                                                .pre_full(), 
                                                                                .empty(sar_ff_empty)) ; 
                                                                end
                                                            assign sar_ff_rdata = (sar_ff_empty ? 'd0 : sar_ff_rdata_sig) ; 
                                                            assign sar_addr = sar_ff_rdata[0] ; 
                                                            localparam MSB_ADDR = 2 ; 
                                                            localparam ADDR_BIT_WIDTH = 1 ; 
                                                            //assign int_ext_mas_prt_rready[ext_slv_cnt] =  ~rdata_ff_full;
                                                            assign int_ext_mas_prt_rready[ext_slv_cnt] = ((i_ext_slv_rdresp_gnt_final == ext_slv_cnt) & (~rdata_ff_full)) ; 
                                                            assign int_ext_mas_prt_ruser[ext_slv_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                            assign int_ext_mas_prt_rid[ext_slv_cnt] = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ; 
                                                            assign int_ext_mas_prt_rlast[ext_slv_cnt] = 1'b1 ; 
                                                            always
                                                                @(posedge aclk_i or 
                                                                    negedge aresetn_i)
                                                                begin
                                                                    if ((~aresetn_i)) 
                                                                        begin
                                                                            //i_ext_slv_rdresp_gnt_final          <= 6'd0;
                                                                            int_ext_mas_prt_rvalid[ext_slv_cnt] <=  1'b0 ;
                                                                            int_ext_mas_prt_rdata[ext_slv_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH_INT{1'b0}} ;
                                                                            int_ext_mas_prt_rresp[ext_slv_cnt] <=  2'd0 ;
                                                                        end
                                                                    else
                                                                        begin
                                                                            //i_ext_slv_rdresp_gnt_final          <= i_ext_slv_rdresp_gnt;
                                                                            int_ext_mas_prt_rvalid[ext_slv_cnt] <=  i_m_rvalid ;
                                                                            int_ext_mas_prt_rdata[ext_slv_cnt] <=  (i_m_rdata[0 +: EXT_SLV_AXI_DATA_WIDTH_INT] >> (sar_addr * EXT_MAS_AXI_DATA_WIDTH)) ;
                                                                            int_ext_mas_prt_rresp[ext_slv_cnt] <=  i_m_rresp ;
                                                                        end
                                                                end
                                                        end
                                                    else
                                                        if ((EXT_MAS_AXI_DATA_WIDTH > EXT_SLV_AXI_DATA_WIDTH_INT)) 
                                                            begin : UP_BLK
                                                                localparam UPSIZE_FACTOR = (EXT_MAS_AXI_DATA_WIDTH / EXT_SLV_AXI_DATA_WIDTH_INT) ; 
                                                                localparam UP_RD_CNT_WIDTH = clog2(UPSIZE_FACTOR) ; 
                                                                localparam EXT_SLV_AXI_DATA_WIDTH_BYTES = (EXT_SLV_AXI_DATA_WIDTH_INT / 8) ; 
                                                                localparam RD_UP_IDLE = 1'b0 ; 
                                                                localparam RD_UP_VALID = 1'b1 ; 
                                                                //=====================================================
                                                                //RD ADDRESS FIFO
                                                                //=====================================================
                                                                localparam AR_FF_DWIDTH = 1 ; 
                                                                localparam AR_FF_PTR_WIDTH = clog2(AR_FF_DEPTH) ; 
                                                                logic sar_ff_full ; 
                                                                logic sar_ff_empty ; 
                                                                logic sar_ff_wr_en ; 
                                                                logic sar_ff_rd_en ; 
                                                                logic [(AR_FF_DWIDTH - 1):0] sar_ff_wdata ; 
                                                                logic [(AR_FF_DWIDTH - 1):0] sar_ff_rdata_sig ; 
                                                                logic [(AR_FF_DWIDTH - 1):0] sar_ff_rdata ; 
                                                                logic [2:0] sar_size ; 
                                                                logic sar_addr ; 
                                                                assign sar_ff_wr_en = (((o_m_arvalid & i_m_arready) & (ext_mas_slv_rd_sel == ext_slv_cnt)) & (!sar_ff_full)) ; 
                                                                //assign sar_ff_wr_en  = o_m_arvalid & i_m_split_arready & (ext_mas_slv_rd_sel==ext_slv_cnt) & (!sar_ff_full);
                                                                assign sar_ff_wdata = {o_m_araddr[2]} ; // 8 bits to represent 128 bytes of address for maximum bus width 1024 bits
                                                                assign sar_ff_rd_en = ((((i_m_rvalid & i_m_rlast) & int_ext_mas_prt_rready[ext_slv_cnt]) & (i_ext_slv_rdresp_gnt == ext_slv_cnt)) & (~sar_ff_empty)) ; 
                                                                if ((LATTICE_FIFO == 1)) 
                                                                    begin : LSCC_FF_BLK
                                                                    end
                                                                else
                                                                    begin : CUSTOM_FF_BLK
                                                                        axi4_interconnect_ipgen_gen_fifo #(AR_FF_PTR_WIDTH,
                                                                                AR_FF_DWIDTH,
                                                                                0,
                                                                                AR_FF_DEPTH) u_saraddr_fifo (// Pointer Width
                                                                                // Data Width {awaddr[7:0]} 
                                                                                // Whether Output needs to be registered or not
                                                                                // Number of entries in FIFO
                                                                                .clk(aclk_i), 
                                                                                .aresetn_i(aresetn_i), 
                                                                                .we(sar_ff_wr_en), 
                                                                                .wdata(sar_ff_wdata), 
                                                                                .re(sar_ff_rd_en), 
                                                                                .rdata(sar_ff_rdata_sig), 
                                                                                .full(sar_ff_full), 
                                                                                .pre_full(), 
                                                                                .empty(sar_ff_empty)) ; 
                                                                    end
                                                                assign sar_ff_rdata = (sar_ff_empty ? 'd0 : sar_ff_rdata_sig) ; 
                                                                assign sar_addr = sar_ff_rdata[0] ; 
                                                                logic [(UP_RD_CNT_WIDTH - 1):0] upsize_rd_cnt, 
                                                                    nxt_upsize_rd_cnt ; 
                                                                logic cur_rd_up_state, 
                                                                    nxt_rd_up_state ; 
                                                                logic lsb_addr, 
                                                                    nxt_lsb_addr ; 
                                                                logic [(EXT_MAS_AXI_DATA_WIDTH - 1):0] i_m_rdata_sig ; 
                                                                assign i_m_rdata_sig = {{(EXT_MAS_AXI_DATA_WIDTH - EXT_SLV_AXI_DATA_WIDTH_INT){1'b0}},
                                                                            i_m_rdata[0 +: EXT_SLV_AXI_DATA_WIDTH_INT]} ; 
                                                                //assign int_ext_mas_prt_rready[ext_slv_cnt] =  ~rdata_ff_full;
                                                                assign int_ext_mas_prt_rready[ext_slv_cnt] = ((i_ext_slv_rdresp_gnt_final == ext_slv_cnt) & (~rdata_ff_full)) ; 
                                                                assign int_ext_mas_prt_ruser[ext_slv_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                                assign int_ext_mas_prt_rid[ext_slv_cnt] = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ; 
                                                                assign int_ext_mas_prt_rlast[ext_slv_cnt] = 1'b1 ; 
                                                                always
                                                                    @(posedge aclk_i or 
                                                                        negedge aresetn_i)
                                                                    begin
                                                                        if ((~aresetn_i)) 
                                                                            begin
                                                                                //i_ext_slv_rdresp_gnt_final          <= 6'd0;
                                                                                int_ext_mas_prt_rvalid[ext_slv_cnt] <=  1'b0 ;
                                                                                int_ext_mas_prt_rdata[ext_slv_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH_INT{1'b0}} ;
                                                                                int_ext_mas_prt_rresp[ext_slv_cnt] <=  2'd0 ;
                                                                                upsize_rd_cnt <=  {UP_RD_CNT_WIDTH{1'b0}} ;
                                                                                cur_rd_up_state <=  RD_UP_IDLE ;
                                                                                lsb_addr <=  1'b0 ;
                                                                            end
                                                                        else
                                                                            begin
                                                                                // i_ext_slv_rdresp_gnt_final          <= i_ext_slv_rdresp_gnt;
                                                                                int_ext_mas_prt_rvalid[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] ;
                                                                                int_ext_mas_prt_rdata[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rdata[ext_slv_cnt] ;
                                                                                int_ext_mas_prt_rresp[ext_slv_cnt] <=  nxt_int_ext_mas_prt_rresp[ext_slv_cnt] ;
                                                                                upsize_rd_cnt <=  nxt_upsize_rd_cnt ;
                                                                                cur_rd_up_state <=  nxt_rd_up_state ;
                                                                                lsb_addr <=  nxt_lsb_addr ;
                                                                            end
                                                                    end
                                                                integer upsize_cnt ; 
                                                                always
                                                                    @(*)
                                                                    begin
                                                                        nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = int_ext_mas_prt_rvalid[ext_slv_cnt] ;
                                                                        nxt_int_ext_mas_prt_rdata[ext_slv_cnt] = int_ext_mas_prt_rdata[ext_slv_cnt] ;
                                                                        nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = int_ext_mas_prt_rresp[ext_slv_cnt] ;
                                                                        nxt_rd_up_state = cur_rd_up_state ;
                                                                        nxt_lsb_addr = lsb_addr ;
                                                                        nxt_upsize_rd_cnt = upsize_rd_cnt ;
                                                                        case (cur_rd_up_state)
                                                                        RD_UP_IDLE : 
                                                                            begin
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (int_ext_mas_prt_rready ? 1'b0 : int_ext_mas_prt_rvalid[ext_slv_cnt]) ;
                                                                                nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = 2'd0 ;
                                                                                if ((((i_ext_slv_rdresp_gnt == ext_slv_cnt) & (!rdata_ff_full)) & (!sar_ff_empty))) 
                                                                                begin
                                                                                nxt_rd_up_state = RD_UP_VALID ;
                                                                                nxt_lsb_addr = sar_addr ;//sar_addr= addr[2]
                                                                                nxt_upsize_rd_cnt = ((UPSIZE_FACTOR - sar_addr) - 1'd1) ;
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_rd_up_state = RD_UP_IDLE ;
                                                                                end
                                                                            end
                                                                        RD_UP_VALID : 
                                                                            begin
                                                                                if ((((i_m_rvalid & o_m_rready) & (~rdata_ff_full)) & (i_ext_slv_rdresp_gnt == ext_slv_cnt))) 
                                                                                begin
                                                                                nxt_upsize_rd_cnt = ((|upsize_rd_cnt) ? (upsize_rd_cnt - 1'd1) : upsize_rd_cnt) ;// since AXI lite master and hence not required to reload
                                                                                nxt_lsb_addr = ((lsb_addr == 1) ? 1'b0 : 1'b1) ;
                                                                                nxt_rd_up_state = ((|upsize_rd_cnt) ? cur_rd_up_state : RD_UP_IDLE) ;
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (!(|upsize_rd_cnt)) ;
                                                                                nxt_int_ext_mas_prt_rdata[ext_slv_cnt][(lsb_addr * EXT_SLV_AXI_DATA_WIDTH_INT) +: EXT_SLV_AXI_DATA_WIDTH_INT] = i_m_rdata[0 +: EXT_SLV_AXI_DATA_WIDTH_INT] ;
                                                                                nxt_int_ext_mas_prt_rresp[ext_slv_cnt] = ((|int_ext_mas_prt_rresp[ext_slv_cnt]) ? int_ext_mas_prt_rresp[ext_slv_cnt] : i_m_rresp) ;
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_int_ext_mas_prt_rvalid[ext_slv_cnt] = (int_ext_mas_prt_rready[ext_slv_cnt] ? 1'b0 : int_ext_mas_prt_rvalid[ext_slv_cnt]) ;
                                                                                end
                                                                            end//RD_UP_VALID
                                                                        endcase 
                                                                    end
                                                            end
                                                        else
                                                            begin : EQ_BLK
                                                                //assign int_ext_mas_prt_rready[ext_slv_cnt] =  ~rdata_ff_full;
                                                                assign int_ext_mas_prt_rready[ext_slv_cnt] = ((i_ext_slv_rdresp_gnt_final == ext_slv_cnt) & (~rdata_ff_full)) ; 
                                                                assign int_ext_mas_prt_ruser[ext_slv_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                                assign int_ext_mas_prt_rid[ext_slv_cnt] = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ; 
                                                                assign int_ext_mas_prt_rlast[ext_slv_cnt] = 1'b1 ; 
                                                                //            assign int_ext_mas_prt_split_rready[ext_slv_cnt] = ~rdata_ff_full;
                                                                always
                                                                    @(posedge aclk_i or 
                                                                        negedge aresetn_i)
                                                                    begin
                                                                        if ((!aresetn_i)) 
                                                                            begin
                                                                                //i_ext_slv_rdresp_gnt_final          <= 6'd0;
                                                                                int_ext_mas_prt_rvalid[ext_slv_cnt] <=  1'b0 ;
                                                                                int_ext_mas_prt_rdata[ext_slv_cnt] <=  {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ;
                                                                                int_ext_mas_prt_rresp[ext_slv_cnt] <=  2'd0 ;
                                                                            end
                                                                        else
                                                                            begin
                                                                                //i_ext_slv_rdresp_gnt_final          <= i_ext_slv_rdresp_gnt;
                                                                                int_ext_mas_prt_rvalid[ext_slv_cnt] <=  ((i_m_rvalid & o_m_rready) & (i_ext_slv_rdresp_gnt == ext_slv_cnt)) ;
                                                                                int_ext_mas_prt_rdata[ext_slv_cnt] <=  i_m_rdata[0 +: EXT_SLV_AXI_DATA_WIDTH_INT] ;
                                                                                int_ext_mas_prt_rresp[ext_slv_cnt] <=  i_m_rresp ;
                                                                            end
                                                                    end
                                                            end
                                                end
                                        end
                                    else
                                        begin : NO_EXT_SLV_CONNECT_BLK
                                            assign int_ext_mas_prt_rready[ext_slv_cnt] = 1'b0 ; 
                                            assign int_ext_mas_prt_rvalid[ext_slv_cnt] = 1'b0 ; 
                                            assign int_ext_mas_prt_rdata[ext_slv_cnt] = {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ; 
                                            assign int_ext_mas_prt_ruser[ext_slv_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                            assign int_ext_mas_prt_rid[ext_slv_cnt] = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ; 
                                            assign int_ext_mas_prt_rresp[ext_slv_cnt] = 2'd0 ; 
                                            assign int_ext_mas_prt_rlast[ext_slv_cnt] = 1'b0 ; 
                                        end
                                end
                        end
                    end
                //logic   int_ext_mas_prt_rvalid_wrff ;
                logic [(EXT_MAS_AXI_DATA_WIDTH - 1):0] int_ext_mas_prt_rdata_wrff ; 
                logic [1:0] int_ext_mas_prt_rresp_wrff ; 
                logic int_ext_mas_prt_rlast_wrff ; 
                logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] int_ext_mas_prt_rid_wrff ; 
                logic [(AXI_USER_WIDTH - 1):0] int_ext_mas_prt_ruser_wrff ; 
                always
                    @(*)
                    begin
                        //   int_ext_mas_prt_rvalid_wrff = 1'b0;
                        int_ext_mas_prt_rdata_wrff = {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ;
                        int_ext_mas_prt_rresp_wrff = 2'd0 ;
                        int_ext_mas_prt_rlast_wrff = 1'b0 ;
                        int_ext_mas_prt_rid_wrff = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                        int_ext_mas_prt_ruser_wrff = {AXI_USER_WIDTH{1'b0}} ;
                        rdata_ff_wr_en = 1'b0 ;
                        for (ext_slv_val = 0 ; (ext_slv_val < TOTAL_EXTSLV_CNT) ; ext_slv_val = (ext_slv_val + 1))
                            begin
                                if ((i_ext_slv_rdresp_gnt_final == ext_slv_val)) 
                                    begin
                                        //int_ext_mas_prt_rvalid_wrff = int_ext_mas_prt_rvalid[ext_slv_val];
                                        int_ext_mas_prt_rdata_wrff = int_ext_mas_prt_rdata[ext_slv_val] ;
                                        int_ext_mas_prt_rresp_wrff = int_ext_mas_prt_rresp[ext_slv_val] ;
                                        int_ext_mas_prt_ruser_wrff = int_ext_mas_prt_ruser[ext_slv_val] ;
                                        int_ext_mas_prt_rid_wrff = int_ext_mas_prt_rid[ext_slv_val] ;
                                        int_ext_mas_prt_rlast_wrff = int_ext_mas_prt_rlast[ext_slv_val] ;
                                        rdata_ff_wr_en = ((~rdata_ff_full) & int_ext_mas_prt_rvalid[ext_slv_val]) ;
                                    end
                            end
                    end
                //===================================================================================
                // READ DATA FIFO 
                //===================================================================================
                localparam RD_FF_PTR_WIDTH = clog2(EXT_MAS_RD_DATA_FIFO_DEPTH) ; 
                localparam RD_FF_DATA_WIDTH = ((EXT_MAS_AXI_PROTOCOL == 0) ? (((EXT_MAS_AXI_DATA_WIDTH + EXT_MAS_AXI_ID_WIDTH) + AXI_USER_WIDTH) + 3) : ((EXT_MAS_AXI_DATA_WIDTH + AXI_USER_WIDTH) + 2)) ; 
                logic rdata_ff_empty ; 
                logic [(RD_FF_DATA_WIDTH - 1):0] rdata_ff_wdata ; 
                logic [(RD_FF_DATA_WIDTH - 1):0] rdata_ff_rdata ; 
                logic rdata_ff_rd_en ; 
                assign rdata_ff_wdata = ((EXT_MAS_AXI_PROTOCOL == 0) ? {int_ext_mas_prt_rlast_wrff,
                            int_ext_mas_prt_rid_wrff,
                            int_ext_mas_prt_ruser_wrff,
                            int_ext_mas_prt_rresp_wrff,
                            int_ext_mas_prt_rdata_wrff} : {int_ext_mas_prt_ruser_wrff,
                            int_ext_mas_prt_rresp_wrff,
                            int_ext_mas_prt_rdata_wrff}) ; 
                assign rdata_ff_rd_en = (o_ext_mas_prt_rvalid ? (i_ext_mas_prt_rready & (~rdata_ff_empty)) : (~rdata_ff_empty)) ; 
                //assign rdata_ff_rd_en   = rdata_ff_empty ? 1'b0 : i_ext_mas_prt_rready; 
                if ((LATTICE_FIFO == 1)) 
                    begin : LSCC_FF_BLK
                    end
                else
                    begin : CUSTOM_FF_BLK
                        axi4_interconnect_ipgen_gen_fifo #(RD_FF_PTR_WIDTH,
                                RD_FF_DATA_WIDTH,
                                0,
                                EXT_MAS_RD_DATA_FIFO_DEPTH) u_ext_mas_rdata_ff (// Pointer Width
                                // Data Width { size}
                                // Whether Output needs to be registered or not
                                // Number of entries in FIFO
                                .clk(aclk_i), 
                                    .aresetn_i(aresetn_i), 
                                    .we(rdata_ff_wr_en), 
                                    .wdata(rdata_ff_wdata), 
                                    .re(rdata_ff_rd_en), 
                                    .rdata(rdata_ff_rdata), 
                                    .full(rdata_ff_full), 
                                    .pre_full(), 
                                    .empty(rdata_ff_empty)) ; 
                    end
                if ((EXT_MAS_AXI_PROTOCOL == 0)) 
                    begin : AXI4_EXT_MAS_RDATA_BLK
                        always
                            @(posedge aclk_i or 
                                negedge aresetn_i)
                            begin
                                if ((!aresetn_i)) 
                                    begin
                                        o_ext_mas_prt_rvalid <=  1'b0 ;
                                        o_ext_mas_prt_rdata <=  {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ;
                                        o_ext_mas_prt_rresp <=  2'd0 ;
                                        o_ext_mas_prt_ruser <=  {AXI_USER_WIDTH{1'b0}} ;
                                        o_ext_mas_prt_rid <=  {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                                        o_ext_mas_prt_rlast <=  1'b0 ;
                                    end
                                else
                                    begin
                                        o_ext_mas_prt_rvalid <=  (rdata_ff_rd_en ? 1'b1 : (i_ext_mas_prt_rready ? 1'b0 : o_ext_mas_prt_rvalid)) ;
                                        o_ext_mas_prt_rdata <=  (rdata_ff_rd_en ? rdata_ff_rdata[0 +: EXT_MAS_AXI_DATA_WIDTH] : o_ext_mas_prt_rdata) ;
                                        o_ext_mas_prt_rresp <=  (rdata_ff_rd_en ? rdata_ff_rdata[EXT_MAS_AXI_DATA_WIDTH +: 2] : o_ext_mas_prt_rresp) ;
                                        o_ext_mas_prt_ruser <=  (rdata_ff_rd_en ? rdata_ff_rdata[(2 + EXT_MAS_AXI_DATA_WIDTH) +: AXI_USER_WIDTH] : o_ext_mas_prt_ruser) ;
                                        o_ext_mas_prt_rid <=  (rdata_ff_rd_en ? rdata_ff_rdata[((2 + EXT_MAS_AXI_DATA_WIDTH) + AXI_USER_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] : o_ext_mas_prt_ruser) ;
                                        o_ext_mas_prt_rlast <=  (rdata_ff_rd_en ? rdata_ff_rdata[(RD_FF_DATA_WIDTH - 1)] : o_ext_mas_prt_rlast) ;
                                    end
                            end
                    end
                else
                    begin : AXI4Lite_EXT_MAS_RDATA_BLK
                        assign o_ext_mas_prt_rid = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ; 
                        assign o_ext_mas_prt_rlast = 1'b1 ; 
                        always
                            @(posedge aclk_i or 
                                negedge aresetn_i)
                            begin
                                if ((!aresetn_i)) 
                                    begin
                                        o_ext_mas_prt_rvalid <=  1'b0 ;
                                        o_ext_mas_prt_rdata <=  {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ;
                                        o_ext_mas_prt_rresp <=  2'd0 ;
                                        o_ext_mas_prt_ruser <=  {AXI_USER_WIDTH{1'b0}} ;
                                    end
                                else
                                    begin
                                        o_ext_mas_prt_rvalid <=  ((!rdata_ff_empty) ? 1'b1 : (i_ext_mas_prt_rready ? 1'b0 : o_ext_mas_prt_rvalid)) ;
                                        o_ext_mas_prt_rdata <=  ((!rdata_ff_empty) ? rdata_ff_rdata[0 +: EXT_MAS_AXI_DATA_WIDTH] : o_ext_mas_prt_rdata) ;
                                        o_ext_mas_prt_rresp <=  ((!rdata_ff_empty) ? rdata_ff_rdata[EXT_MAS_AXI_DATA_WIDTH +: 2] : o_ext_mas_prt_rresp) ;
                                        o_ext_mas_prt_ruser <=  ((!rdata_ff_empty) ? rdata_ff_rdata[(2 + EXT_MAS_AXI_DATA_WIDTH) +: AXI_USER_WIDTH] : o_ext_mas_prt_ruser) ;
                                    end
                            end
                    end
            end
        if ((EXT_MAS_ACCESS_TYPE == 2'd0)) 
            begin : WO_BLK
                assign o_ext_mas_prt_arready = 1'b0 ; 
                assign o_ext_mas_prt_rvalid = 1'b0 ; 
                assign o_ext_mas_prt_rdata = {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ; 
                assign o_ext_mas_prt_rid = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ; 
                assign o_ext_mas_prt_rlast = 1'b0 ; 
                assign o_ext_mas_prt_ruser = {AXI_USER_WIDTH{1'b0}} ; 
                assign o_ext_mas_prt_rresp = 2'd0 ; 
                assign ext_mas_slv_rd_sel = 6'd0 ; 
                assign o_rid_ext_slv_gnt = {(NUM_OF_ID_EXT_MAS_SUPPRT * 6){1'b0}} ; 
                assign o_m_arvalid = 1'b0 ; 
                assign o_m_araddr = {EXT_MAS_AXI_ADDR_WIDTH{1'b0}} ; 
                assign o_m_arsize = 3'd0 ; 
                assign o_m_arlen = 8'd0 ; 
                assign o_m_arburst = 2'b0 ; 
                assign o_m_arcache = 4'b0 ; 
                assign o_m_arid = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ; 
                assign o_m_arprot = 3'b0 ; 
                assign o_m_arlock = 1'b0 ; 
                assign o_m_arqos = 4'b0 ; 
                assign o_m_arregion = 4'b0 ; 
                assign o_m_aruser = {AXI_USER_WIDTH{1'b0}} ; 
                assign o_m_rready = 1'b0 ; 
            end
        if ((EXT_MAS_ACCESS_TYPE == 2'd1)) 
            begin : RO_BLK
                assign o_ext_mas_prt_awready = 1'b0 ; 
                assign o_ext_mas_prt_wready = 1'b0 ; 
                assign o_ext_mas_prt_bvalid = 1'b0 ; 
                assign o_ext_mas_prt_bresp = 2'd0 ; 
                assign o_ext_mas_prt_bid = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ; 
                assign o_ext_mas_prt_buser = {AXI_USER_WIDTH{1'b0}} ; 
                assign ext_mas_slv_wr_sel = 6'd0 ; 
                assign ext_mas_slv_dwr_sel = 6'd0 ; 
                assign o_bid_ext_slv_gnt = {NUM_OF_ID_EXT_MAS_SUPPRT{1'b0}} ; 
                assign o_m_awvalid = 1'b0 ; 
                assign o_m_awaddr = {EXT_MAS_AXI_ADDR_WIDTH{1'b0}} ; 
                assign o_m_awsize = 3'd0 ; 
                assign o_m_awlen = 8'd0 ; 
                assign o_m_awburst = 2'd0 ; 
                assign o_m_awcache = 4'd0 ; 
                assign o_m_awid = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ; 
                assign o_m_awprot = 3'd0 ; 
                assign o_m_awlock = 1'd0 ; 
                assign o_m_awqos = 4'd0 ; 
                assign o_m_awregion = 4'd0 ; 
                assign o_m_awuser = {AXI_USER_WIDTH{1'b0}} ; 
                assign o_m_wvalid = 1'b0 ; 
                assign o_m_wdata = {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ; 
                assign o_m_wstrb = {(EXT_MAS_AXI_DATA_WIDTH / 8){1'b0}} ; 
                assign o_m_wuser = {AXI_USER_WIDTH{1'b0}} ; 
                assign o_m_wlast = 1'b0 ; 
                assign o_m_bready = 1'b0 ; 
            end
    endgenerate

// mas_port
endmodule



module axi4_interconnect_ipgen_ext_mas_rdresp_arb (aclk_i, 
        aresetn_i, 
        mo_rvalid, 
        mo_rid, 
        mo_rresp, 
        mo_rlast, 
        mo_rdata, 
        mo_ruser, 
        mi_rready, 
        mo_slv_rdresp_gnt, 
        sj_mi_rvalid, 
        sj_mi_rid, 
        sj_mi_rresp, 
        sj_mi_rlast, 
        sj_mi_rdata, 
        sj_mi_ruser, 
        sj_mo_rready) ;
    parameter TOTAL_EXTSLV_CNT = 32 ; 
    parameter EXT_MAS_AXI_ID_WIDTH = 6 ; 
    parameter AXI_USER_WIDTH = 4 ; 
    parameter EXT_MAS_AXI_DATA_WIDTH = 1024 ; 
    parameter integer EXT_MAS_PRIORITY_SCHEME = 0 ; 
    parameter [((TOTAL_EXTSLV_CNT * 5) - 1):0] EXT_MAS_FIXED_GNT = {(TOTAL_EXTSLV_CNT * 5){1'b0}} ; 
    //parameter [((TOTAL_EXTSLV_CNT*5)+6)-1:0] EXT_MAS_FIXED_GNT = {6'd0,{(TOTAL_EXTSLV_CNT*5){1'b0}}};
    //*********************************INPUTS & OUTPUTS************************************
    input aclk_i ; 
    input aresetn_i ; 
    output logic mo_rvalid ; 
    output logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] mo_rid ; 
    output logic [1:0] mo_rresp ; 
    output logic mo_rlast ; 
    output logic [(EXT_MAS_AXI_DATA_WIDTH - 1):0] mo_rdata ; 
    output logic [(AXI_USER_WIDTH - 1):0] mo_ruser ; 
    input mi_rready ; 
    output logic [5:0] mo_slv_rdresp_gnt ; 
    input [TOTAL_EXTSLV_CNT:0] sj_mi_rvalid ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_AXI_ID_WIDTH) - 1):0] sj_mi_rid ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] sj_mi_rresp ; 
    input [TOTAL_EXTSLV_CNT:0] sj_mi_rlast ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_AXI_DATA_WIDTH) - 1):0] sj_mi_rdata ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] sj_mi_ruser ; 
    output logic [TOTAL_EXTSLV_CNT:0] sj_mo_rready ; 
    logic nxt_mo_rvalid ; 
    logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] nxt_mo_rid ; 
    logic [1:0] nxt_mo_rresp ; 
    logic nxt_mo_rlast ; 
    logic [(EXT_MAS_AXI_DATA_WIDTH - 1):0] nxt_mo_rdata ; 
    logic [(AXI_USER_WIDTH - 1):0] nxt_mo_ruser ; 
    logic [TOTAL_EXTSLV_CNT:0] mo_slv_rdresp_gnt_int ; 
    logic [5:0] mo_slv_rdresp_gnt_pre ; 
    logic [TOTAL_EXTSLV_CNT:0] sj_mi_rvalid_int ; 
    assign sj_mi_rvalid_int = (mo_rvalid ? (mo_rlast ? sj_mi_rvalid : {(TOTAL_EXTSLV_CNT + 1){1'b0}}) : sj_mi_rvalid) ; 
    always
        @(posedge aclk_i or 
            negedge aresetn_i)
        begin
            if ((!aresetn_i)) 
                begin
                    mo_rvalid <=  1'b0 ;
                    mo_rid <=  {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                    mo_rresp <=  2'd0 ;
                    mo_rlast <=  1'd0 ;
                    mo_rdata <=  {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ;
                    mo_ruser <=  {AXI_USER_WIDTH{1'b0}} ;
                    mo_slv_rdresp_gnt <=  (TOTAL_EXTSLV_CNT + 1) ;
                end
            else
                begin
                    mo_rvalid <=  nxt_mo_rvalid ;
                    mo_rid <=  nxt_mo_rid ;
                    mo_rresp <=  nxt_mo_rresp ;
                    mo_rlast <=  nxt_mo_rlast ;
                    mo_rdata <=  nxt_mo_rdata ;
                    mo_ruser <=  nxt_mo_ruser ;
                    mo_slv_rdresp_gnt <=  mo_slv_rdresp_gnt_pre ;
                end
        end
    genvar slv_cnt ; 
    generate
        for (slv_cnt = 0;(slv_cnt <= TOTAL_EXTSLV_CNT);slv_cnt = (slv_cnt + 1))
        begin : genblk1
            always
            //for
                @(posedge aclk_i or 
                    negedge aresetn_i)
                begin
                    if ((!aresetn_i)) 
                        begin
                            sj_mo_rready[slv_cnt] <=  1'b0 ;
                        end
                    else
                        begin
                            //sj_mo_rready[slv_cnt]      <= mi_rready & (mo_slv_rdresp_gnt==slv_cnt);
                            sj_mo_rready[slv_cnt] <=  (mi_rready & (mo_slv_rdresp_gnt_pre == slv_cnt)) ;
                        end
                end
        end
    endgenerate
    integer j ; 
    always
        @(*)
        begin
            nxt_mo_rvalid = (mi_rready ? 1'b0 : mo_rvalid) ;
            nxt_mo_rid = mo_rid ;
            nxt_mo_rresp = mo_rresp ;
            nxt_mo_ruser = mo_ruser ;
            nxt_mo_rlast = mo_rlast ;
            nxt_mo_rdata = mo_rdata ;
            for (j = 0 ; (j <= TOTAL_EXTSLV_CNT) ; j = (j + 1))
                begin
                    if ((mo_slv_rdresp_gnt_pre == j)) 
                        //if(mo_slv_rdresp_gnt==j)
                        begin
                            if ((sj_mi_rvalid[j] & sj_mo_rready[j])) 
                            //else
                            //begin
                            //   nxt_mo_rvalid  = mi_rready ? 1'b0 : mo_rvalid; 
                            //end
                                begin
                                    nxt_mo_rvalid = 1'b1 ;
                                    nxt_mo_rid = sj_mi_rid[(j * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] ;
                                    nxt_mo_rresp = sj_mi_rresp[(j * 2) +: 2] ;
                                    nxt_mo_rlast = sj_mi_rlast[j] ;
                                    nxt_mo_rdata = sj_mi_rdata[(j * EXT_MAS_AXI_DATA_WIDTH) +: EXT_MAS_AXI_DATA_WIDTH] ;
                                    nxt_mo_ruser = sj_mi_ruser[(j * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ;
                                end
                            else
                                ; 
                        end
                    else
                        ; 
                end//for
        end
    generate
        if ((EXT_MAS_PRIORITY_SCHEME == 0)) 
            begin : genblk2
                axi4_interconnect_ipgen_rr_arb #(.REQ_WIDTH((TOTAL_EXTSLV_CNT + 1))) u_rr_ext_mas_rdresp_arb (.aclk_i(aclk_i), 
                            .aresetn_i(aresetn_i), 
                            .input_req(sj_mi_rvalid_int), 
                            //.input_req      (sj_mi_rvalid),
                        .req_gnt(mo_slv_rdresp_gnt_int)) ; 
            end
        else
            begin : genblk2
                axi4_interconnect_ipgen_fixed_arb_ext_mas #(.REQ_WIDTH((TOTAL_EXTSLV_CNT + 1)),
                        .FIXED_GNT(EXT_MAS_FIXED_GNT)) u_fixed_ext_mas_rdresp_arb (.aclk_i(aclk_i), 
                            .aresetn_i(aresetn_i), 
                            .input_req_i(sj_mi_rvalid_int), 
                            .req_gnt_o(mo_slv_rdresp_gnt_int)) ; 
            end
    endgenerate
    integer ext_slv_cnt ; 
    always
        @(*)
        begin
            mo_slv_rdresp_gnt_pre = (TOTAL_EXTSLV_CNT + 1) ;
            //mo_slv_rdresp_gnt_pre = TOTAL_EXTSLV_CNT; 
            //mo_slv_rdresp_gnt = 6'd32; 
            for (ext_slv_cnt = 0 ; (ext_slv_cnt <= TOTAL_EXTSLV_CNT) ; ext_slv_cnt = (ext_slv_cnt + 1))
                begin
                    //mo_slv_rdresp_gnt = ext_slv_cnt[5:0];
                    if (mo_slv_rdresp_gnt_int[ext_slv_cnt]) 
                        mo_slv_rdresp_gnt_pre = ext_slv_cnt[5:0] ;
                    else
                        ; 
                end
        end
endmodule



module axi4_interconnect_ipgen_ext_mas_rdresp_ord_suprt_arb (aclk_i, 
        aresetn_i, 
        mo_rvalid, 
        mo_rid, 
        mo_rresp, 
        mo_rlast, 
        mo_rdata, 
        mo_ruser, 
        mi_rready, 
        mi_rid_slv_gnt, 
        mo_slv_rdresp_gnt, 
        sj_mi_rvalid, 
        sj_mi_rid, 
        sj_mi_rresp, 
        sj_mi_rlast, 
        sj_mi_rdata, 
        sj_mi_ruser, 
        sj_mo_rready) ;
    parameter TOTAL_EXTSLV_CNT = 32 ; 
    parameter EXT_MAS_AXI_ID_WIDTH = 6 ; 
    parameter AXI_USER_WIDTH = 4 ; 
    parameter EXT_MAS_AXI_DATA_WIDTH = 1024 ; 
    parameter integer NUM_OF_ID_EXT_MAS_SUPPRT = 64 ; 
    parameter integer MAX_NUM_OF_ID_EXT_MAS_SUPPRT = 64 ; 
    //*********************************INPUTS & OUTPUTS************************************
    input aclk_i ; 
    input aresetn_i ; 
    output logic mo_rvalid ; 
    output logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] mo_rid ; 
    output logic [1:0] mo_rresp ; 
    output logic mo_rlast ; 
    output logic [(EXT_MAS_AXI_DATA_WIDTH - 1):0] mo_rdata ; 
    output logic [(AXI_USER_WIDTH - 1):0] mo_ruser ; 
    input mi_rready ; 
    input [((MAX_NUM_OF_ID_EXT_MAS_SUPPRT * 6) - 1):0] mi_rid_slv_gnt ; 
    output logic [5:0] mo_slv_rdresp_gnt ; 
    input [TOTAL_EXTSLV_CNT:0] sj_mi_rvalid ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_AXI_ID_WIDTH) - 1):0] sj_mi_rid ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] sj_mi_rresp ; 
    input [TOTAL_EXTSLV_CNT:0] sj_mi_rlast ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_AXI_DATA_WIDTH) - 1):0] sj_mi_rdata ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] sj_mi_ruser ; 
    output logic [TOTAL_EXTSLV_CNT:0] sj_mo_rready ; 
    logic nxt_mo_rvalid ; 
    logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] nxt_mo_rid ; 
    logic [1:0] nxt_mo_rresp ; 
    logic nxt_mo_rlast ; 
    logic [(EXT_MAS_AXI_DATA_WIDTH - 1):0] nxt_mo_rdata ; 
    logic [(AXI_USER_WIDTH - 1):0] nxt_mo_ruser ; 
    logic [5:0] nxt_mo_slv_rdresp_gnt ; 
    logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] ready_reg, 
        nxt_ready_reg ; 
    logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] mi_rid_rvalid ; 
    logic [((NUM_OF_ID_EXT_MAS_SUPPRT * EXT_MAS_AXI_ID_WIDTH) - 1):0] mi_rid_rid ; 
    logic [((NUM_OF_ID_EXT_MAS_SUPPRT * 2) - 1):0] mi_rid_rresp ; 
    logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] mi_rid_rlast ; 
    logic [((NUM_OF_ID_EXT_MAS_SUPPRT * EXT_MAS_AXI_DATA_WIDTH) - 1):0] mi_rid_rdata ; 
    logic [((NUM_OF_ID_EXT_MAS_SUPPRT * AXI_USER_WIDTH) - 1):0] mi_rid_ruser ; 
    logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] rid_gnt ; 
    logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] rid_gnt_int ; 
    logic [5:0] mi_rid_slv_gnt_int [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] ; 
    logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] mi_rready_int ; 
    logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] sj_mo_rready_int [TOTAL_EXTSLV_CNT:0] ; 
    always
        @(posedge aclk_i or 
            negedge aresetn_i)
        begin
            if ((!aresetn_i)) 
                begin
                    ready_reg <=  {NUM_OF_ID_EXT_MAS_SUPPRT{1'b0}} ;
                    mo_rvalid <=  1'b0 ;
                    mo_rid <=  {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                    mo_rresp <=  2'd0 ;
                    mo_rlast <=  1'b0 ;
                    mo_rdata <=  {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ;
                    mo_ruser <=  {AXI_USER_WIDTH{1'b0}} ;
                    mo_slv_rdresp_gnt <=  (TOTAL_EXTSLV_CNT + 1) ;
                    //mo_slv_rdresp_gnt <=TOTAL_EXTSLV_CNT;
                    //mo_slv_rdresp_gnt <= 6'd32;
                end
            else
                begin
                    ready_reg <=  nxt_ready_reg ;
                    mo_rvalid <=  nxt_mo_rvalid ;
                    mo_rid <=  nxt_mo_rid ;
                    mo_rresp <=  nxt_mo_rresp ;
                    mo_rlast <=  nxt_mo_rlast ;
                    mo_rdata <=  nxt_mo_rdata ;
                    mo_ruser <=  nxt_mo_ruser ;
                    mo_slv_rdresp_gnt <=  nxt_mo_slv_rdresp_gnt ;
                end
        end
    genvar id_cnt, 
        slv_cnt ; 
    generate
        for (slv_cnt = 0;(slv_cnt <= TOTAL_EXTSLV_CNT);slv_cnt = (slv_cnt + 1))
        begin : genblk1
            always
                @(posedge aclk_i or 
                    negedge aresetn_i)
                begin
                    if ((!aresetn_i)) 
                        begin
                            sj_mo_rready[slv_cnt] <=  1'b0 ;
                        end
                    else
                        begin
                            sj_mo_rready[slv_cnt] <=  (|sj_mo_rready_int[slv_cnt]) ;
                        end
                end
        end
        for (id_cnt = 0;(id_cnt < NUM_OF_ID_EXT_MAS_SUPPRT);id_cnt = (id_cnt + 1))
        begin : genblk2
            assign mi_rid_slv_gnt_int[id_cnt] = mi_rid_slv_gnt[(id_cnt * 6) +: 6] ; 
            //assign mi_rready_int[id_cnt] =  mi_rready &  mo_rid==id_cnt;
            assign mi_rready_int[id_cnt] = ((mi_rready & (mo_rid == id_cnt)) & mo_rvalid) ; 
        end
        for (slv_cnt = 0;(slv_cnt <= TOTAL_EXTSLV_CNT);slv_cnt = (slv_cnt + 1))
        begin : genblk3
            for (id_cnt = 0;(id_cnt < NUM_OF_ID_EXT_MAS_SUPPRT);id_cnt = (id_cnt + 1))
            begin : genblk1
                always
                    @(*)
                    begin
                        sj_mo_rready_int[slv_cnt][id_cnt] = (mi_rready_int[id_cnt] & (mi_rid_slv_gnt[(id_cnt * 6) +: 6] == slv_cnt)) ;
                    end
            end
            //assign sj_mo_rready [slv_cnt] = |sj_mo_rready_int[slv_cnt];
        end
    endgenerate
    integer id, 
        slv ; 
    always
        @(*)
        begin
            nxt_ready_reg = ready_reg ;
            for (id = 0 ; (id < NUM_OF_ID_EXT_MAS_SUPPRT) ; id = (id + 1))
                begin
                    mi_rid_rvalid[id] = 1'b0 ;
                    mi_rid_rid[(id * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                    mi_rid_rresp[(id * 2) +: 2] = 2'd0 ;
                    mi_rid_rlast[id] = 1'b0 ;
                    mi_rid_rdata[(id * EXT_MAS_AXI_DATA_WIDTH) +: EXT_MAS_AXI_DATA_WIDTH] = {EXT_MAS_AXI_DATA_WIDTH{1'b0}} ;
                    mi_rid_ruser[(id * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = {AXI_USER_WIDTH{1'b0}} ;
                    for (slv = 0 ; (slv <= TOTAL_EXTSLV_CNT) ; slv = (slv + 1))
                        begin
                            if ((mi_rid_slv_gnt_int[id] == slv)) 
                                begin
                                    nxt_ready_reg[id] = (ready_reg[id] ? (!sj_mo_rready[slv]) : ((sj_mi_rvalid[slv] & (sj_mi_rid[(slv * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] == id)) & (!sj_mo_rready[slv]))) ;
                                    //mi_rid_rvalid[id]                                          = sj_mi_rvalid[slv] & (sj_mi_rid[slv*EXT_MAS_AXI_ID_WIDTH +:EXT_MAS_AXI_ID_WIDTH] == id); 
                                    //mi_rid_rvalid[id]                                            = sj_mo_rready[slv] ? sj_mi_rvalid[slv] & (sj_mi_rid[slv*EXT_MAS_AXI_ID_WIDTH +:EXT_MAS_AXI_ID_WIDTH] == id) & (!ready_reg[id]) & (!mo_rvalid): sj_mi_rvalid[slv] & (sj_mi_rid[slv*EXT_MAS_AXI_ID_WIDTH +:EXT_MAS_AXI_ID_WIDTH] == id) & (!mo_rvalid); 
                                    mi_rid_rvalid[id] = (sj_mo_rready[slv] ? ((sj_mi_rvalid[slv] & (sj_mi_rid[(slv * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] == id)) & (!ready_reg[id])) : ((sj_mi_rvalid[slv] & (sj_mi_rid[(slv * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] == id)) & (!mo_rvalid))) ;
                                    mi_rid_rid[(id * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = sj_mi_rid[(slv * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] ;
                                    mi_rid_rresp[(id * 2) +: 2] = sj_mi_rresp[(slv * 2) +: 2] ;
                                    mi_rid_rlast[id] = sj_mi_rlast[slv] ;
                                    mi_rid_rdata[(id * EXT_MAS_AXI_DATA_WIDTH) +: EXT_MAS_AXI_DATA_WIDTH] = sj_mi_rdata[(slv * EXT_MAS_AXI_DATA_WIDTH) +: EXT_MAS_AXI_DATA_WIDTH] ;
                                    mi_rid_ruser[(id * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = sj_mi_ruser[(slv * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ;
                                end
                            else
                                ; 
                        end//for - slv
                end//for - id
        end
    always
        @(*)
        begin
            nxt_mo_slv_rdresp_gnt = (mi_rready ? (TOTAL_EXTSLV_CNT + 1) : mo_slv_rdresp_gnt) ;
            //nxt_mo_slv_rdresp_gnt = TOTAL_EXTSLV_CNT;
            //nxt_mo_slv_rdresp_gnt = 6'd32;
            //nxt_mo_slv_rdresp_gnt = mo_slv_rdresp_gnt;
            nxt_mo_rvalid = (mi_rready ? 1'b0 : mo_rvalid) ;
            nxt_mo_rid = mo_rid ;
            nxt_mo_rresp = mo_rresp ;
            nxt_mo_rlast = mo_rlast ;
            nxt_mo_rdata = mo_rdata ;
            nxt_mo_ruser = mo_ruser ;
            for (id = 0 ; (id < NUM_OF_ID_EXT_MAS_SUPPRT) ; id = (id + 1))
                begin
                    if ((((rid_gnt == id) & mi_rid_rvalid[id]) & mi_rready)) 
                        begin
                            nxt_mo_slv_rdresp_gnt = mi_rid_slv_gnt[(id * 6) +: 6] ;
                            nxt_mo_rvalid = 1'b1 ;
                            //nxt_mo_rvalid  = mi_rid_rvalid[id] & mi_rready ? 1'b1 : mo_rvalid; 
                            nxt_mo_rid = mi_rid_rid[(id * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] ;
                            nxt_mo_rresp = mi_rid_rresp[(id * 2) +: 2] ;
                            nxt_mo_rlast = mi_rid_rlast[id] ;
                            nxt_mo_rdata = mi_rid_rdata[(id * EXT_MAS_AXI_DATA_WIDTH) +: EXT_MAS_AXI_DATA_WIDTH] ;
                            nxt_mo_ruser = mi_rid_ruser[(id * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ;
                        end
                    else
                        ; 
                end
        end
    axi4_interconnect_ipgen_rr_arb #(.REQ_WIDTH(NUM_OF_ID_EXT_MAS_SUPPRT)) u_rr_ext_slv_rdresp_arb (.aclk_i(aclk_i), 
                .aresetn_i(aresetn_i), 
                .input_req(mi_rid_rvalid), 
                .req_gnt(rid_gnt_int)) ; 
    integer j ; 
    always
        @(*)
        begin
            rid_gnt = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
            for (j = 0 ; (j < NUM_OF_ID_EXT_MAS_SUPPRT) ; j = (j + 1))
                begin
                    if (rid_gnt_int[j]) 
                        rid_gnt = j[(EXT_MAS_AXI_ID_WIDTH - 1):0] ;
                    else
                        ; 
                end
        end
endmodule



module axi4_interconnect_ipgen_ext_mas_wrresp_arb (aclk_i, 
        aresetn_i, 
        mo_bvalid, 
        mo_bid, 
        mo_bresp, 
        mo_buser, 
        mi_bready, 
        sj_mi_bvalid, 
        sj_mi_bid, 
        sj_mi_bresp, 
        sj_mi_buser, 
        sj_mo_bready) ;
    parameter integer TOTAL_EXTSLV_CNT = 32 ; 
    parameter EXT_MAS_AXI_ID_WIDTH = 6 ; 
    parameter AXI_USER_WIDTH = 4 ; 
    parameter integer EXT_MAS_PRIORITY_SCHEME = 0 ; 
    parameter [((TOTAL_EXTSLV_CNT * 5) - 1):0] EXT_MAS_FIXED_GNT = {(TOTAL_EXTSLV_CNT * 5){1'b0}} ; 
    //parameter [((TOTAL_EXTSLV_CNT*5)+6)-1:0] EXT_MAS_FIXED_GNT = {6'd0,{(TOTAL_EXTSLV_CNT*5){1'b0}}};
    localparam TOTAL_EXTSLV_CNT_PLUS_1 = (TOTAL_EXTSLV_CNT + 1) ; 
    //*********************************INPUTS & OUTPUTS************************************
    input aclk_i ; 
    input aresetn_i ; 
    output logic mo_bvalid ; 
    output logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] mo_bid ; 
    output logic [1:0] mo_bresp ; 
    output logic [(AXI_USER_WIDTH - 1):0] mo_buser ; 
    input mi_bready ; 
    input [TOTAL_EXTSLV_CNT:0] sj_mi_bvalid ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_AXI_ID_WIDTH) - 1):0] sj_mi_bid ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] sj_mi_bresp ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] sj_mi_buser ; 
    output logic [TOTAL_EXTSLV_CNT:0] sj_mo_bready ; 
    logic nxt_mo_bvalid ; 
    logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] nxt_mo_bid ; 
    logic [1:0] nxt_mo_bresp ; 
    logic [(AXI_USER_WIDTH - 1):0] nxt_mo_buser ; 
    logic [5:0] ext_slv_gnt ; 
    logic [TOTAL_EXTSLV_CNT:0] ext_slv_gnt_int ; 
    always
        @(posedge aclk_i or 
            negedge aresetn_i)
        begin
            if ((!aresetn_i)) 
                begin
                    mo_bvalid <=  1'b0 ;
                    mo_bid <=  {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                    mo_bresp <=  2'd0 ;
                    mo_buser <=  {AXI_USER_WIDTH{1'b0}} ;
                end
            else
                begin
                    mo_bvalid <=  nxt_mo_bvalid ;
                    mo_bid <=  nxt_mo_bid ;
                    mo_bresp <=  nxt_mo_bresp ;
                    mo_buser <=  nxt_mo_buser ;
                end
        end
    genvar slv_cnt ; 
    generate
        for (slv_cnt = 0;(slv_cnt <= TOTAL_EXTSLV_CNT);slv_cnt = (slv_cnt + 1))
        begin : genblk1
            always
            //for
                @(posedge aclk_i or 
                    negedge aresetn_i)
                begin
                    if ((!aresetn_i)) 
                        begin
                            sj_mo_bready[slv_cnt] <=  1'b0 ;
                        end
                    else
                        begin
                            sj_mo_bready[slv_cnt] <=  (mi_bready & (ext_slv_gnt == slv_cnt)) ;
                        end
                end
        end
    endgenerate
    integer j ; 
    always
        @(*)
        begin
            nxt_mo_bvalid = (mi_bready ? 1'b0 : mo_bvalid) ;
            nxt_mo_bid = mo_bid ;
            nxt_mo_bresp = mo_bresp ;
            nxt_mo_buser = mo_buser ;
            for (j = 0 ; (j <= TOTAL_EXTSLV_CNT) ; j = (j + 1))
                begin
                    if ((ext_slv_gnt == j)) 
                        begin
                            if ((sj_mi_bvalid[j] & sj_mo_bready[j])) 
                            //else
                            //begin
                            //   nxt_mo_bvalid  = mi_bready ? 1'b0 : mo_bvalid; 
                            //end
                                begin
                                    nxt_mo_bvalid = sj_mi_bvalid[j] ;
                                    nxt_mo_bid = sj_mi_bid[(j * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] ;
                                    nxt_mo_bresp = sj_mi_bresp[(j * 2) +: 2] ;
                                    nxt_mo_buser = sj_mi_buser[(j * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ;
                                end
                            else
                                ; 
                        end
                    else
                        ; 
                end//for
        end
    generate
        if ((EXT_MAS_PRIORITY_SCHEME == 0)) 
            begin : genblk2
                axi4_interconnect_ipgen_rr_arb #(.REQ_WIDTH((TOTAL_EXTSLV_CNT + 1))) u_rr_ext_mas_wrresp_arb (.aclk_i(aclk_i), 
                            .aresetn_i(aresetn_i), 
                            .input_req(sj_mi_bvalid), 
                            .req_gnt(ext_slv_gnt_int)) ; 
            end
        else
            begin : genblk2
                axi4_interconnect_ipgen_fixed_arb_ext_mas #(.REQ_WIDTH((TOTAL_EXTSLV_CNT + 1)),
                        .FIXED_GNT(EXT_MAS_FIXED_GNT)) u_fixed_ext_mas_wrresp_arb (.aclk_i(aclk_i), 
                            .aresetn_i(aresetn_i), 
                            .input_req_i(sj_mi_bvalid), 
                            .req_gnt_o(ext_slv_gnt_int)) ; 
            end
    endgenerate
    integer ext_slv_cnt ; 
    always
        @(*)
        begin
            ext_slv_gnt = (TOTAL_EXTSLV_CNT + 1) ;
            //ext_slv_gnt = TOTAL_EXTSLV_CNT; 
            //ext_slv_gnt = 6'd32; 
            for (ext_slv_cnt = 0 ; (ext_slv_cnt <= TOTAL_EXTSLV_CNT) ; ext_slv_cnt = (ext_slv_cnt + 1))
                begin
                    if (ext_slv_gnt_int[ext_slv_cnt]) 
                        ext_slv_gnt = ext_slv_cnt[5:0] ;
                    else
                        ; 
                end
        end
endmodule



module axi4_interconnect_ipgen_ext_mas_wrresp_ord_suprt_arb (aclk_i, 
        aresetn_i, 
        mo_bvalid, 
        mo_bid, 
        mo_bresp, 
        mo_buser, 
        mi_bready, 
        mi_bid_slv_gnt, 
        mo_slv_wrresp_gnt, 
        sj_mi_bvalid, 
        sj_mi_bid, 
        sj_mi_bresp, 
        sj_mi_buser, 
        sj_mo_bready) ;
    parameter TOTAL_EXTSLV_CNT = 32 ; 
    parameter EXT_MAS_AXI_ID_WIDTH = 6 ; 
    parameter AXI_USER_WIDTH = 4 ; 
    parameter integer NUM_OF_ID_EXT_MAS_SUPPRT = 64 ; 
    parameter integer MAX_NUM_OF_ID_EXT_MAS_SUPPRT = 64 ; 
    //*********************************INPUTS & OUTPUTS************************************
    input aclk_i ; 
    input aresetn_i ; 
    output logic mo_bvalid ; 
    output logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] mo_bid ; 
    output logic [1:0] mo_bresp ; 
    output logic [(AXI_USER_WIDTH - 1):0] mo_buser ; 
    input mi_bready ; 
    input [((MAX_NUM_OF_ID_EXT_MAS_SUPPRT * 6) - 1):0] mi_bid_slv_gnt ; 
    output logic [5:0] mo_slv_wrresp_gnt ; 
    input [TOTAL_EXTSLV_CNT:0] sj_mi_bvalid ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_AXI_ID_WIDTH) - 1):0] sj_mi_bid ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] sj_mi_bresp ; 
    input [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] sj_mi_buser ; 
    output logic [TOTAL_EXTSLV_CNT:0] sj_mo_bready ; 
    logic nxt_mo_bvalid ; 
    logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] nxt_mo_bid ; 
    logic [1:0] nxt_mo_bresp ; 
    logic [(AXI_USER_WIDTH - 1):0] nxt_mo_buser ; 
    logic [5:0] nxt_mo_slv_wrresp_gnt ; 
    logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] ready_reg, 
        nxt_ready_reg ; 
    logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] mi_bid_bvalid ; 
    logic [((NUM_OF_ID_EXT_MAS_SUPPRT * EXT_MAS_AXI_ID_WIDTH) - 1):0] mi_bid_bid ; 
    logic [((NUM_OF_ID_EXT_MAS_SUPPRT * 2) - 1):0] mi_bid_bresp ; 
    logic [((NUM_OF_ID_EXT_MAS_SUPPRT * AXI_USER_WIDTH) - 1):0] mi_bid_buser ; 
    logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] bid_gnt_int ; 
    logic [(EXT_MAS_AXI_ID_WIDTH - 1):0] bid_gnt ; 
    logic [5:0] mi_bid_slv_gnt_int [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] ; 
    logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] mi_bready_int ; 
    logic [(NUM_OF_ID_EXT_MAS_SUPPRT - 1):0] sj_mo_bready_int [TOTAL_EXTSLV_CNT:0] ; 
    always
        @(posedge aclk_i or 
            negedge aresetn_i)
        begin
            if ((!aresetn_i)) 
                begin
                    ready_reg <=  {NUM_OF_ID_EXT_MAS_SUPPRT{1'b0}} ;
                    mo_bvalid <=  1'b0 ;
                    mo_bid <=  {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                    mo_bresp <=  2'd0 ;
                    mo_buser <=  {AXI_USER_WIDTH{1'b0}} ;
                    mo_slv_wrresp_gnt <=  (TOTAL_EXTSLV_CNT + 1) ;
                    //mo_slv_wrresp_gnt <= TOTAL_EXTSLV_CNT;
                    //mo_slv_wrresp_gnt <= 6'd32;
                end
            else
                begin
                    ready_reg <=  nxt_ready_reg ;
                    mo_bvalid <=  nxt_mo_bvalid ;
                    mo_bid <=  nxt_mo_bid ;
                    mo_bresp <=  nxt_mo_bresp ;
                    mo_buser <=  nxt_mo_buser ;
                    mo_slv_wrresp_gnt <=  nxt_mo_slv_wrresp_gnt ;
                end
        end
    genvar id_cnt, 
        slv_cnt ; 
    generate
        for (slv_cnt = 0;(slv_cnt <= TOTAL_EXTSLV_CNT);slv_cnt = (slv_cnt + 1))
        begin : genblk1
            always
                @(posedge aclk_i or 
                    negedge aresetn_i)
                begin
                    if ((!aresetn_i)) 
                        begin
                            sj_mo_bready[slv_cnt] <=  {1'b0} ;
                        end
                    else
                        begin
                            sj_mo_bready[slv_cnt] <=  (|sj_mo_bready_int[slv_cnt]) ;
                        end
                end
        end
        for (id_cnt = 0;(id_cnt < NUM_OF_ID_EXT_MAS_SUPPRT);id_cnt = (id_cnt + 1))
        begin : NUM_OF_ID_BLK
            assign mi_bid_slv_gnt_int[id_cnt] = mi_bid_slv_gnt[(id_cnt * 6) +: 6] ; 
            //assign mi_bready_int[id_cnt] =  mi_bready &  mo_bid==id_cnt;
            assign mi_bready_int[id_cnt] = ((mi_bready & (mo_bid == id_cnt)) & mo_bvalid) ; 
        end
        for (slv_cnt = 0;(slv_cnt <= TOTAL_EXTSLV_CNT);slv_cnt = (slv_cnt + 1))
        begin : genblk3
            for (id_cnt = 0;(id_cnt < NUM_OF_ID_EXT_MAS_SUPPRT);id_cnt = (id_cnt + 1))
            begin : genblk1
                always
                    @(*)
                    begin
                        //sj_mo_bready_int[slv_cnt][id_cnt] = mi_bready & (mi_bid_slv_gnt[id_cnt*6 +:6] == slv_cnt);
                        sj_mo_bready_int[slv_cnt][id_cnt] = (mi_bready_int[id_cnt] & (mi_bid_slv_gnt[(id_cnt * 6) +: 6] == slv_cnt)) ;
                    end
            end
            //assign sj_mo_bready [slv_cnt] = |sj_mo_bready_int[slv_cnt];
        end
    endgenerate
    integer id, 
        slv ; 
    always
        @(*)
        begin
            nxt_ready_reg = ready_reg ;
            for (id = 0 ; (id < NUM_OF_ID_EXT_MAS_SUPPRT) ; id = (id + 1))
                begin
                    mi_bid_bvalid[id] = 1'b0 ;
                    mi_bid_bid[(id * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                    mi_bid_bresp[(id * 2) +: 2] = 2'd0 ;
                    mi_bid_buser[(id * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = {AXI_USER_WIDTH{1'b0}} ;
                    for (slv = 0 ; (slv <= TOTAL_EXTSLV_CNT) ; slv = (slv + 1))
                        begin
                            if ((mi_bid_slv_gnt_int[id] == slv)) 
                                begin
                                    nxt_ready_reg[id] = (ready_reg[id] ? (!sj_mo_bready[slv]) : ((sj_mi_bvalid[slv] & (sj_mi_bid[(slv * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] == id)) & (!sj_mo_bready[slv]))) ;
                                    mi_bid_bvalid[id] = (sj_mo_bready[slv] ? ((sj_mi_bvalid[slv] & (sj_mi_bid[(slv * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] == id)) & (!ready_reg[id])) : ((sj_mi_bvalid[slv] & (sj_mi_bid[(slv * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] == id)) & (!mo_bvalid))) ;
                                    //mi_bid_bvalid[id]                                             = sj_mo_bready[slv] ? sj_mi_bvalid[slv] & (sj_mi_bid[slv*EXT_MAS_AXI_ID_WIDTH +:EXT_MAS_AXI_ID_WIDTH] == id) & (!mo_bvalid) & (!ready_reg[id]) : sj_mi_bvalid[slv] & (sj_mi_bid[slv*EXT_MAS_AXI_ID_WIDTH +:EXT_MAS_AXI_ID_WIDTH] == id) & (!mo_bvalid); 
                                    //mi_bid_bvalid[id]                                             = sj_mi_bready_reg[id]lid[slv] & (sj_mi_bid[slv*EXT_MAS_AXI_ID_WIDTH +:EXT_MAS_AXI_ID_WIDTH] == id) & sj_mo_bready[slv]; 
                                    //mi_bid_bvalid[id]                                             = sj_mi_bvalid[slv] & (sj_mi_bid[slv*EXT_MAS_AXI_ID_WIDTH +:EXT_MAS_AXI_ID_WIDTH] == id);
                                    mi_bid_bid[(id * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = sj_mi_bid[(slv * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] ;
                                    mi_bid_bresp[(id * 2) +: 2] = sj_mi_bresp[(slv * 2) +: 2] ;
                                    mi_bid_buser[(id * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = sj_mi_buser[(slv * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ;
                                end
                            else
                                ; 
                        end//for - slv
                end//for - id
        end
    always
        @(*)
        begin
            nxt_mo_slv_wrresp_gnt = (mi_bready ? (TOTAL_EXTSLV_CNT + 1) : mo_slv_wrresp_gnt) ;
            //nxt_mo_slv_wrresp_gnt = TOTAL_EXTSLV_CNT;
            //nxt_mo_slv_wrresp_gnt = 6'd32;
            //nxt_mo_slv_wrresp_gnt = mo_slv_wrresp_gnt;
            nxt_mo_bvalid = (mi_bready ? 1'b0 : mo_bvalid) ;
            nxt_mo_bid = mo_bid ;
            nxt_mo_bresp = mo_bresp ;
            nxt_mo_buser = mo_buser ;
            for (id = 0 ; (id < NUM_OF_ID_EXT_MAS_SUPPRT) ; id = (id + 1))
                begin
                    if ((((bid_gnt == id) & mi_bid_bvalid[id]) & mi_bready)) 
                        //if(bid_gnt==id)
                        begin
                            nxt_mo_slv_wrresp_gnt = mi_bid_slv_gnt[(id * 6) +: 6] ;
                            nxt_mo_bvalid = 1'b1 ;
                            //nxt_mo_bvalid  = mi_bid_bvalid[id] & mi_bready ? 1'b1 : mo_bvalid ; 
                            nxt_mo_bid = mi_bid_bid[(id * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] ;
                            nxt_mo_bresp = mi_bid_bresp[(id * 2) +: 2] ;
                            nxt_mo_buser = mi_bid_buser[(id * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ;
                        end
                    else
                        ; 
                end
        end
    axi4_interconnect_ipgen_rr_arb #(.REQ_WIDTH(NUM_OF_ID_EXT_MAS_SUPPRT)) u_rr_ext_mas_wrresp_arb (.aclk_i(aclk_i), 
                .aresetn_i(aresetn_i), 
                .input_req(mi_bid_bvalid), 
                .req_gnt(bid_gnt_int)) ; 
    integer j ; 
    always
        @(*)
        begin
            bid_gnt = {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
            for (j = 0 ; (j < NUM_OF_ID_EXT_MAS_SUPPRT) ; j = (j + 1))
                begin
                    if (bid_gnt_int[j]) 
                        bid_gnt = j[(EXT_MAS_AXI_ID_WIDTH - 1):0] ;
                    else
                        ; 
                end
        end
endmodule



module axi4_interconnect_ipgen_ext_slv_ard_arb (aclk_i, 
        aresetn_i, 
        so_arvalid, 
        so_araddr, 
        so_arsize, 
        so_arlen, 
        so_arburst, 
        so_arcache, 
        so_arid, 
        so_arprot, 
        so_arlock, 
        so_arqos, 
        so_arregion, 
        so_aruser, 
        si_arready, 
        si_split_arready, 
        mi_sj_arvalid, 
        mi_sj_araddr, 
        mi_sj_arsize, 
        mi_sj_arlen, 
        mi_sj_arburst, 
        mi_sj_arcache, 
        mi_sj_arid, 
        mi_sj_arprot, 
        mi_sj_arlock, 
        mi_sj_arqos, 
        mi_sj_arregion, 
        mi_sj_aruser, 
        mo_sj_arready, 
        mo_sj_split_arready, 
        sj_ext_mas_ard_gnt) ;
    parameter TOTAL_EXTMAS_CNT = 32 ; 
    parameter EXT_SLV_MAX_ADDR_WIDTH = 64 ; 
    parameter EXT_SLV_AXI_ID_WIDTH = 11 ; 
    parameter AXI_USER_WIDTH = 11 ; 
    parameter integer EXT_SLV_PRIORITY_SCHEME = 0 ; 
    parameter EXT_MAS_AXI_ID_WIDTH = 6 ; 
    parameter [((TOTAL_EXTMAS_CNT * 5) - 1):0] EXT_SLV_FIXED_GNT = {(TOTAL_EXTMAS_CNT * 5){1'b0}} ; 
    localparam AXI4 = 0 ; 
    localparam AXI4_LITE = 1 ; 
    //*********************************INPUTS & OUTPUTS************************************
    input aclk_i ; 
    input aresetn_i ; 
    output logic so_arvalid ; 
    output logic [(EXT_SLV_MAX_ADDR_WIDTH - 1):0] so_araddr ; 
    output logic [(3 - 1):0] so_arsize ; 
    output logic [(8 - 1):0] so_arlen ; 
    output logic [(2 - 1):0] so_arburst ; 
    output logic [(4 - 1):0] so_arcache ; 
    output logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] so_arid ; 
    output logic [(3 - 1):0] so_arprot ; 
    output logic [(1 - 1):0] so_arlock ; 
    output logic [(4 - 1):0] so_arqos ; 
    output logic [(4 - 1):0] so_arregion ; 
    output logic [(AXI_USER_WIDTH - 1):0] so_aruser ; 
    input si_arready ; 
    input si_split_arready ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] mi_sj_arvalid ; 
    input [((TOTAL_EXTMAS_CNT * EXT_SLV_MAX_ADDR_WIDTH) - 1):0] mi_sj_araddr ; 
    input [((TOTAL_EXTMAS_CNT * 3) - 1):0] mi_sj_arsize ; 
    input [((TOTAL_EXTMAS_CNT * 8) - 1):0] mi_sj_arlen ; 
    input [((TOTAL_EXTMAS_CNT * 2) - 1):0] mi_sj_arburst ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] mi_sj_arcache ; 
    input [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] mi_sj_arid ; 
    input [((TOTAL_EXTMAS_CNT * 3) - 1):0] mi_sj_arprot ; 
    input [((TOTAL_EXTMAS_CNT * 1) - 1):0] mi_sj_arlock ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] mi_sj_arqos ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] mi_sj_arregion ; 
    input [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] mi_sj_aruser ; 
    output logic [(TOTAL_EXTMAS_CNT - 1):0] mo_sj_arready ; 
    output logic [(TOTAL_EXTMAS_CNT - 1):0] mo_sj_split_arready ; 
    output logic [5:0] sj_ext_mas_ard_gnt ; 
    logic [5:0] sj_ext_mas_ard_gnt_reg ; 
    logic [5:0] sj_ext_mas_ard_gnt_int ; 
    logic [5:0] ext_slv_rdresp_gnt_reg ; 
    logic nxt_so_arvalid ; 
    logic [(EXT_SLV_MAX_ADDR_WIDTH - 1):0] nxt_so_araddr ; 
    logic [(3 - 1):0] nxt_so_arsize ; 
    logic [(8 - 1):0] nxt_so_arlen ; 
    logic [(2 - 1):0] nxt_so_arburst ; 
    logic [(4 - 1):0] nxt_so_arcache ; 
    logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] nxt_so_arid ; 
    logic [(3 - 1):0] nxt_so_arprot ; 
    logic [(1 - 1):0] nxt_so_arlock ; 
    logic [(4 - 1):0] nxt_so_arqos ; 
    logic [(4 - 1):0] nxt_so_arregion ; 
    logic [(AXI_USER_WIDTH - 1):0] nxt_so_aruser ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] nxt_mo_sj_arready_int, 
        mo_sj_arready_int ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] nxt_mo_sj_split_arready_int, 
        mo_sj_split_arready_int ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] ext_mas_arr_gnt ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] mi_sj_arvalid_final ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] mi_sj_arvalid_reg ; 
    assign mi_sj_arvalid_final = (si_arready ? mi_sj_arvalid : mi_sj_arvalid_reg) ; 
    assign sj_ext_mas_ard_gnt = sj_ext_mas_ard_gnt_reg ; 
    genvar i ; 
    generate
        if ((EXT_SLV_PRIORITY_SCHEME == 0)) 
            begin : genblk1
                axi4_interconnect_ipgen_rr_arb #(.REQ_WIDTH(TOTAL_EXTMAS_CNT)) u_rr_ext_mas_ard_arb (.aclk_i(aclk_i), 
                            .aresetn_i(aresetn_i), 
                            .input_req(mi_sj_arvalid_final), 
                            //  .input_req    (mi_sj_arvalid) ,
                        .req_gnt(ext_mas_arr_gnt)) ; 
            end
        else
            begin : genblk1
                axi4_interconnect_ipgen_fixed_arb #(.REQ_WIDTH(TOTAL_EXTMAS_CNT),
                        .FIXED_GNT(EXT_SLV_FIXED_GNT)) u_fixed_ext_mas_ard_arb (.aclk_i(aclk_i), 
                            .aresetn_i(aresetn_i), 
                            .input_req_i(mi_sj_arvalid_final), 
                            .req_gnt_o(ext_mas_arr_gnt)) ; 
            end
        for (i = 0;(i < TOTAL_EXTMAS_CNT);i = (i + 1))
        begin : genblk2
            always
            //for loop
                @(*)
                begin
                    nxt_mo_sj_arready_int[i] = (si_arready & (sj_ext_mas_ard_gnt_int == i)) ;
                    nxt_mo_sj_split_arready_int[i] = (si_split_arready & (sj_ext_mas_ard_gnt_int == i)) ;
                    //nxt_mo_sj_arready_int[i]  = si_arready & (sj_ext_mas_ard_gnt==i);
                    //nxt_mo_sj_split_arready_int[i]  = si_split_arready & (sj_ext_mas_ard_gnt==i);
                    mo_sj_arready[i] = (mo_sj_arready_int[i] & si_arready) ;
                    mo_sj_split_arready[i] = (mo_sj_split_arready_int[i] & si_split_arready) ;
                end
        end
    endgenerate
    always
        @(posedge aclk_i or 
            negedge aresetn_i)
        begin
            if ((!aresetn_i)) 
                begin
                    so_arvalid <=  1'b0 ;
                    so_araddr <=  {EXT_SLV_MAX_ADDR_WIDTH{1'b0}} ;
                    so_arsize <=  3'd0 ;
                    so_arlen <=  8'd0 ;
                    so_arburst <=  2'b0 ;
                    so_arcache <=  4'b0 ;
                    so_arid <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                    so_arprot <=  3'd0 ;
                    so_arlock <=  1'd0 ;
                    so_arqos <=  4'd0 ;
                    so_aruser <=  {AXI_USER_WIDTH{1'b0}} ;
                    so_arregion <=  4'd0 ;
                    mo_sj_arready_int <=  {TOTAL_EXTMAS_CNT{1'b0}} ;
                    mo_sj_split_arready_int <=  {TOTAL_EXTMAS_CNT{1'b0}} ;
                    mi_sj_arvalid_reg <=  {TOTAL_EXTMAS_CNT{1'b0}} ;
                    sj_ext_mas_ard_gnt_reg <=  6'd0 ;
                end
            else
                begin
                    so_arvalid <=  nxt_so_arvalid ;
                    so_araddr <=  nxt_so_araddr ;
                    so_arsize <=  nxt_so_arsize ;
                    so_arlen <=  nxt_so_arlen ;
                    so_arburst <=  nxt_so_arburst ;
                    so_arcache <=  nxt_so_arcache ;
                    so_arid <=  nxt_so_arid ;
                    so_arprot <=  nxt_so_arprot ;
                    so_arlock <=  nxt_so_arlock ;
                    so_arqos <=  nxt_so_arqos ;
                    so_aruser <=  nxt_so_aruser ;
                    so_arregion <=  nxt_so_arregion ;
                    mo_sj_arready_int <=  nxt_mo_sj_arready_int ;
                    mo_sj_split_arready_int <=  nxt_mo_sj_split_arready_int ;
                    mi_sj_arvalid_reg <=  (si_arready ? mi_sj_arvalid : mi_sj_arvalid_reg) ;
                    sj_ext_mas_ard_gnt_reg <=  sj_ext_mas_ard_gnt_int ;
                    //sj_ext_mas_ard_gnt_reg <= sj_ext_mas_ard_gnt;
                end
        end
    integer ext_mas_cnt ; 
    always
        @(*)
        begin
            sj_ext_mas_ard_gnt_int = TOTAL_EXTMAS_CNT ;
            //sj_ext_mas_ard_gnt = TOTAL_EXTMAS_CNT; 
            //sj_ext_mas_ard_gnt = 6'd32; 
            for (ext_mas_cnt = 0 ; (ext_mas_cnt < TOTAL_EXTMAS_CNT) ; ext_mas_cnt = (ext_mas_cnt + 1))
                begin
                    //sj_ext_mas_ard_gnt = ext_mas_cnt[5:0];
                    if (ext_mas_arr_gnt[ext_mas_cnt]) 
                        sj_ext_mas_ard_gnt_int = ext_mas_cnt[5:0] ;
                    else
                        ; 
                end
        end
    always
        @(*)
        begin
            nxt_so_arvalid = so_arvalid ;
            nxt_so_araddr = so_araddr ;
            nxt_so_arsize = so_arsize ;
            nxt_so_arlen = so_arlen ;
            nxt_so_arburst = so_arburst ;
            nxt_so_arcache = so_arcache ;
            nxt_so_arid = so_arid ;
            nxt_so_arprot = so_arprot ;
            nxt_so_arlock = so_arlock ;
            nxt_so_arqos = so_arqos ;
            nxt_so_aruser = so_aruser ;
            nxt_so_arregion = so_arregion ;
            for (ext_mas_cnt = 0 ; (ext_mas_cnt < TOTAL_EXTMAS_CNT) ; ext_mas_cnt = (ext_mas_cnt + 1))
                begin
                    if (((sj_ext_mas_ard_gnt_int == ext_mas_cnt) || (sj_ext_mas_ard_gnt_reg == ext_mas_cnt))) 
                        //if ((sj_ext_mas_ard_gnt==ext_mas_cnt) || (sj_ext_mas_ard_gnt_reg==ext_mas_cnt))
                        begin
                            if ((mi_sj_arvalid[ext_mas_cnt] & mo_sj_arready[ext_mas_cnt])) 
                                begin
                                    nxt_so_arvalid = 1'b1 ;
                                    nxt_so_araddr = mi_sj_araddr[(ext_mas_cnt * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_MAX_ADDR_WIDTH] ;
                                    nxt_so_arsize = mi_sj_arsize[(ext_mas_cnt * 3) +: 3] ;
                                    nxt_so_arlen = mi_sj_arlen[(ext_mas_cnt * 8) +: 8] ;
                                    nxt_so_arburst = mi_sj_arburst[(ext_mas_cnt * 2) +: 2] ;
                                    nxt_so_arcache = mi_sj_arcache[(ext_mas_cnt * 4) +: 4] ;
                                    nxt_so_arid = {ext_mas_cnt[4:0],
                                            mi_sj_arid[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]} ;
                                    nxt_so_arprot = mi_sj_arprot[(ext_mas_cnt * 3) +: 3] ;
                                    nxt_so_arlock = mi_sj_arlock[(ext_mas_cnt * 1) +: 1] ;
                                    nxt_so_arqos = mi_sj_arqos[(ext_mas_cnt * 4) +: 4] ;
                                    nxt_so_aruser = mi_sj_aruser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ;
                                    nxt_so_arregion = mi_sj_arregion[(ext_mas_cnt * 4) +: 4] ;
                                end
                            else
                                begin
                                    nxt_so_arvalid = (si_arready ? 1'b0 : so_arvalid) ;
                                end
                        end
                    else
                        ; 
                end
        end

// slv_ard_arb
endmodule



module axi4_interconnect_ipgen_ext_slv_awr_arb (aclk_i, 
        aresetn_i, 
        so_awvalid, 
        so_awaddr, 
        so_awsize, 
        so_awlen, 
        so_awburst, 
        so_awcache, 
        so_awid, 
        so_awprot, 
        so_awlock, 
        so_awqos, 
        so_awregion, 
        so_awuser, 
        si_awready, 
        si_split_awready, 
        mi_sj_awvalid, 
        mi_sj_awaddr, 
        mi_sj_awsize, 
        mi_sj_awlen, 
        mi_sj_awburst, 
        mi_sj_awcache, 
        mi_sj_awid, 
        mi_sj_awprot, 
        mi_sj_awlock, 
        mi_sj_awqos, 
        mi_sj_awregion, 
        mi_sj_awuser, 
        mo_sj_awready, 
        mo_sj_split_awready, 
        sj_ext_mas_awr_gnt, 
        ext_mas_awr_gnt_ff_full) ;
    parameter TOTAL_EXTMAS_CNT = 32 ; 
    parameter EXT_SLV_MAX_ADDR_WIDTH = 64 ; 
    parameter EXT_SLV_AXI_ID_WIDTH = 11 ; 
    parameter AXI_USER_WIDTH = 11 ; 
    parameter EXT_SLV_PRIORITY_SCHEME = 0 ; 
    parameter EXT_MAS_AXI_ID_WIDTH = 6 ; 
    parameter [((TOTAL_EXTMAS_CNT * 5) - 1):0] EXT_SLV_FIXED_GNT = {(TOTAL_EXTMAS_CNT * 5){1'b0}} ; 
    localparam AXI4 = 0 ; 
    localparam AXI4_LITE = 1 ; 
    //*********************************INPUTS & OUTPUTS************************************
    input aclk_i ; 
    input aresetn_i ; 
    output logic so_awvalid ; 
    output logic [(EXT_SLV_MAX_ADDR_WIDTH - 1):0] so_awaddr ; 
    output logic [(3 - 1):0] so_awsize ; 
    output logic [(8 - 1):0] so_awlen ; 
    output logic [(2 - 1):0] so_awburst ; 
    output logic [(4 - 1):0] so_awcache ; 
    output logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] so_awid ; 
    output logic [(3 - 1):0] so_awprot ; 
    output logic [(1 - 1):0] so_awlock ; 
    output logic [(4 - 1):0] so_awqos ; 
    output logic [(4 - 1):0] so_awregion ; 
    output logic [(AXI_USER_WIDTH - 1):0] so_awuser ; 
    input si_awready ; 
    input si_split_awready ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] mi_sj_awvalid ; 
    input [((TOTAL_EXTMAS_CNT * EXT_SLV_MAX_ADDR_WIDTH) - 1):0] mi_sj_awaddr ; 
    input [((TOTAL_EXTMAS_CNT * 3) - 1):0] mi_sj_awsize ; 
    input [((TOTAL_EXTMAS_CNT * 8) - 1):0] mi_sj_awlen ; 
    input [((TOTAL_EXTMAS_CNT * 2) - 1):0] mi_sj_awburst ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] mi_sj_awcache ; 
    input [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] mi_sj_awid ; 
    input [((TOTAL_EXTMAS_CNT * 3) - 1):0] mi_sj_awprot ; 
    input [((TOTAL_EXTMAS_CNT * 1) - 1):0] mi_sj_awlock ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] mi_sj_awqos ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] mi_sj_awregion ; 
    input [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] mi_sj_awuser ; 
    output logic [(TOTAL_EXTMAS_CNT - 1):0] mo_sj_awready ; 
    output logic [(TOTAL_EXTMAS_CNT - 1):0] mo_sj_split_awready ; 
    output logic [5:0] sj_ext_mas_awr_gnt ; 
    input ext_mas_awr_gnt_ff_full ; 
    logic [5:0] sj_ext_mas_awr_gnt_reg ; 
    logic [5:0] sj_ext_mas_awr_gnt_int ; 
    logic nxt_so_awvalid ; 
    logic [(EXT_SLV_MAX_ADDR_WIDTH - 1):0] nxt_so_awaddr ; 
    logic [(3 - 1):0] nxt_so_awsize ; 
    logic [(8 - 1):0] nxt_so_awlen ; 
    logic [(2 - 1):0] nxt_so_awburst ; 
    logic [(4 - 1):0] nxt_so_awcache ; 
    logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] nxt_so_awid ; 
    logic [(3 - 1):0] nxt_so_awprot ; 
    logic [(1 - 1):0] nxt_so_awlock ; 
    logic [(4 - 1):0] nxt_so_awqos ; 
    logic [(4 - 1):0] nxt_so_awregion ; 
    logic [(AXI_USER_WIDTH - 1):0] nxt_so_awuser ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] nxt_mo_sj_awready_int, 
        mo_sj_awready_int ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] nxt_mo_sj_split_awready_int, 
        mo_sj_split_awready_int ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] ext_mas_awr_gnt ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] mi_sj_awvalid_int ; 
    assign mi_sj_awvalid_int = (ext_mas_awr_gnt_ff_full ? {TOTAL_EXTMAS_CNT{1'b0}} : mi_sj_awvalid) ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] mi_sj_awvalid_int_final ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] mi_sj_awvalid_int_reg ; 
    assign mi_sj_awvalid_int_final = (si_awready ? mi_sj_awvalid_int : mi_sj_awvalid_int_reg) ; 
    assign sj_ext_mas_awr_gnt = sj_ext_mas_awr_gnt_reg ; 
    genvar i ; 
    generate
        if ((EXT_SLV_PRIORITY_SCHEME == 0)) 
            begin : genblk1
                axi4_interconnect_ipgen_rr_arb #(.REQ_WIDTH(TOTAL_EXTMAS_CNT)) u_rr_ext_mas_awr_arb (.aclk_i(aclk_i), 
                            .aresetn_i(aresetn_i), 
                            .input_req(mi_sj_awvalid_int_final), 
                            //.input_req    (mi_sj_awvalid_int),
                        .req_gnt(ext_mas_awr_gnt)) ; 
            end
        else
            begin : genblk1
                axi4_interconnect_ipgen_fixed_arb #(.REQ_WIDTH(TOTAL_EXTMAS_CNT),
                        .FIXED_GNT(EXT_SLV_FIXED_GNT)) u_fixed_ext_mas_awr_arb (.aclk_i(aclk_i), 
                            .aresetn_i(aresetn_i), 
                            .input_req_i(mi_sj_awvalid_int_final), 
                            .req_gnt_o(ext_mas_awr_gnt)) ; 
            end
        for (i = 0;(i < TOTAL_EXTMAS_CNT);i = (i + 1))
        begin : genblk2
            always
            //for loop
                @(*)
                begin
                    nxt_mo_sj_awready_int[i] = ((si_awready & (sj_ext_mas_awr_gnt_int == i)) & (!ext_mas_awr_gnt_ff_full)) ;
                    nxt_mo_sj_split_awready_int[i] = ((si_split_awready & (sj_ext_mas_awr_gnt_int == i)) & (!ext_mas_awr_gnt_ff_full)) ;
                    // nxt_mo_sj_awready_int[i]  = si_awready & (sj_ext_mas_awr_gnt==i) & (!ext_mas_awr_gnt_ff_full);
                    // nxt_mo_sj_split_awready_int[i]  = si_split_awready & (sj_ext_mas_awr_gnt==i) & (!ext_mas_awr_gnt_ff_full);
                    mo_sj_awready[i] = (mo_sj_awready_int[i] && si_awready) ;
                    mo_sj_split_awready[i] = (mo_sj_split_awready_int[i] && si_split_awready) ;
                end
        end
    endgenerate
    always
        @(posedge aclk_i or 
            negedge aresetn_i)
        begin
            if ((!aresetn_i)) 
                begin
                    so_awvalid <=  1'b0 ;
                    so_awaddr <=  {EXT_SLV_MAX_ADDR_WIDTH{1'b0}} ;
                    so_awsize <=  3'd0 ;
                    so_awlen <=  8'd0 ;
                    so_awburst <=  2'b0 ;
                    so_awcache <=  4'b0 ;
                    so_awid <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                    so_awprot <=  3'd0 ;
                    so_awlock <=  1'd0 ;
                    so_awqos <=  4'd0 ;
                    so_awuser <=  {AXI_USER_WIDTH{1'b0}} ;
                    so_awregion <=  4'd0 ;
                    mo_sj_awready_int <=  {TOTAL_EXTMAS_CNT{1'b0}} ;
                    mo_sj_split_awready_int <=  {TOTAL_EXTMAS_CNT{1'b0}} ;
                    mi_sj_awvalid_int_reg <=  {TOTAL_EXTMAS_CNT{1'b0}} ;
                    sj_ext_mas_awr_gnt_reg <=  6'd0 ;
                end
            else
                begin
                    so_awvalid <=  nxt_so_awvalid ;
                    so_awaddr <=  nxt_so_awaddr ;
                    so_awsize <=  nxt_so_awsize ;
                    so_awlen <=  nxt_so_awlen ;
                    so_awburst <=  nxt_so_awburst ;
                    so_awcache <=  nxt_so_awcache ;
                    so_awid <=  nxt_so_awid ;
                    so_awprot <=  nxt_so_awprot ;
                    so_awlock <=  nxt_so_awlock ;
                    so_awqos <=  nxt_so_awqos ;
                    so_awuser <=  nxt_so_awuser ;
                    so_awregion <=  nxt_so_awregion ;
                    mo_sj_awready_int <=  nxt_mo_sj_awready_int ;
                    mo_sj_split_awready_int <=  nxt_mo_sj_split_awready_int ;
                    mi_sj_awvalid_int_reg <=  (si_awready ? mi_sj_awvalid_int : mi_sj_awvalid_int_reg) ;
                    sj_ext_mas_awr_gnt_reg <=  sj_ext_mas_awr_gnt_int ;
                    //sj_ext_mas_awr_gnt_reg <= sj_ext_mas_awr_gnt;
                end
        end
    integer ext_mas_cnt ; 
    always
        @(*)
        begin
            sj_ext_mas_awr_gnt_int = TOTAL_EXTMAS_CNT ;
            //sj_ext_mas_awr_gnt = TOTAL_EXTMAS_CNT; 
            //sj_ext_mas_awr_gnt = 6'd32; 
            for (ext_mas_cnt = 0 ; (ext_mas_cnt < TOTAL_EXTMAS_CNT) ; ext_mas_cnt = (ext_mas_cnt + 1))
                begin
                    if (ext_mas_awr_gnt[ext_mas_cnt]) 
                        sj_ext_mas_awr_gnt_int = ext_mas_cnt[5:0] ;
                    else
                        ; 
                end
        end
    always
        @(*)
        begin
            nxt_so_awvalid = so_awvalid ;
            nxt_so_awaddr = so_awaddr ;
            nxt_so_awsize = so_awsize ;
            nxt_so_awlen = so_awlen ;
            nxt_so_awburst = so_awburst ;
            nxt_so_awcache = so_awcache ;
            nxt_so_awid = so_awid ;
            nxt_so_awprot = so_awprot ;
            nxt_so_awlock = so_awlock ;
            nxt_so_awqos = so_awqos ;
            nxt_so_awuser = so_awuser ;
            nxt_so_awregion = so_awregion ;
            for (ext_mas_cnt = 0 ; (ext_mas_cnt < TOTAL_EXTMAS_CNT) ; ext_mas_cnt = (ext_mas_cnt + 1))
                begin
                    if (((sj_ext_mas_awr_gnt_int == ext_mas_cnt) || (sj_ext_mas_awr_gnt_reg == ext_mas_cnt))) 
                        //if ( (sj_ext_mas_awr_gnt==ext_mas_cnt) || (sj_ext_mas_awr_gnt_reg==ext_mas_cnt) )
                        begin
                            if ((mi_sj_awvalid[ext_mas_cnt] & mo_sj_awready[ext_mas_cnt])) 
                                begin
                                    nxt_so_awvalid = 1'b1 ;
                                    nxt_so_awaddr = mi_sj_awaddr[(ext_mas_cnt * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_MAX_ADDR_WIDTH] ;
                                    nxt_so_awsize = mi_sj_awsize[(ext_mas_cnt * 3) +: 3] ;
                                    nxt_so_awlen = mi_sj_awlen[(ext_mas_cnt * 8) +: 8] ;
                                    nxt_so_awburst = mi_sj_awburst[(ext_mas_cnt * 2) +: 2] ;
                                    nxt_so_awcache = mi_sj_awcache[(ext_mas_cnt * 4) +: 4] ;
                                    nxt_so_awid = {ext_mas_cnt[4:0],
                                            mi_sj_awid[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]} ;
                                    nxt_so_awprot = mi_sj_awprot[(ext_mas_cnt * 3) +: 3] ;
                                    nxt_so_awlock = mi_sj_awlock[(ext_mas_cnt * 1) +: 1] ;
                                    nxt_so_awqos = mi_sj_awqos[(ext_mas_cnt * 4) +: 4] ;
                                    nxt_so_awuser = mi_sj_awuser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ;
                                    nxt_so_awregion = mi_sj_awregion[(ext_mas_cnt * 4) +: 4] ;
                                end
                            else
                                begin
                                    nxt_so_awvalid = (si_awready ? 1'b0 : so_awvalid) ;
                                end
                        end
                    else
                        ; 
                end
        end

// slv_awr_arb
endmodule



/*************************************************************************************


*************************************************************************************/
module axi4_interconnect_ipgen_ext_slv_dwr_arb (aclk_i, 
        aresetn_i, 
        so_wvalid, 
        so_wdata, 
        so_wstrb, 
        so_wlast, 
        so_wuser, 
        si_wready, 
        sj_awvalid, 
        sj_awready, 
        sj_ext_mas_awr_gnt, 
        ext_mas_awr_gnt_ff_full, 
        mi_sj_wvalid, 
        mi_sj_wdata, 
        mi_sj_wstrb, 
        mi_sj_wlast, 
        mi_sj_wuser, 
        mo_sj_wready, 
        sj_ext_mas_dwr_gnt) ;
    parameter TOTAL_EXTMAS_CNT = 32 ; 
    parameter AXI_USER_WIDTH = 4 ; 
    parameter EXT_MAS_MAX_DATA_WIDTH = 1024 ; 
    parameter EXT_MAS_AWR_GNT_FF_DEPTH = 8 ; 
    parameter LATTICE_FIFO = 1'b0 ; 
    localparam EXT_MAS_AWR_GNT_FF_PTR_WIDTH = clog2(EXT_MAS_AWR_GNT_FF_DEPTH) ; 
    //*********************************INPUTS & OUTPUTS************************************
    input aclk_i ; 
    input aresetn_i ; 
    output logic so_wvalid ; 
    output logic [(EXT_MAS_MAX_DATA_WIDTH - 1):0] so_wdata ; 
    output logic [((EXT_MAS_MAX_DATA_WIDTH / 8) - 1):0] so_wstrb ; 
    output logic so_wlast ; 
    output logic [(AXI_USER_WIDTH - 1):0] so_wuser ; 
    input si_wready ; 
    input sj_awvalid ; 
    input sj_awready ; 
    input [5:0] sj_ext_mas_awr_gnt ; 
    output logic ext_mas_awr_gnt_ff_full ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] mi_sj_wvalid ; 
    input [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_DATA_WIDTH) - 1):0] mi_sj_wdata ; 
    input [((TOTAL_EXTMAS_CNT * (EXT_MAS_MAX_DATA_WIDTH / 8)) - 1):0] mi_sj_wstrb ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] mi_sj_wlast ; 
    input [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] mi_sj_wuser ; 
    output logic [(TOTAL_EXTMAS_CNT - 1):0] mo_sj_wready ; 
    output logic [5:0] sj_ext_mas_dwr_gnt ; 
    logic nxt_so_wvalid ; 
    logic [(EXT_MAS_MAX_DATA_WIDTH - 1):0] nxt_so_wdata ; 
    logic [((EXT_MAS_MAX_DATA_WIDTH / 8) - 1):0] nxt_so_wstrb ; 
    logic nxt_so_wlast ; 
    logic [(AXI_USER_WIDTH - 1):0] nxt_so_wuser ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] mo_sj_wready_int, 
        nxt_mo_sj_wready_int ; 
    logic ext_mas_awr_gnt_ff_empty ; 
    logic ext_mas_awr_gnt_ff_wr_en ; 
    logic ext_mas_awr_gnt_ff_rd_en ; 
    logic [5:0] ext_mas_awr_gnt_ff_wdata ; 
    logic [5:0] ext_mas_awr_gnt_ff_rdata ; 
    assign ext_mas_awr_gnt_ff_wr_en = ((sj_awvalid & sj_awready) & (~ext_mas_awr_gnt_ff_full)) ; 
    assign ext_mas_awr_gnt_ff_rd_en = (((so_wvalid & si_wready) & so_wlast) & (~ext_mas_awr_gnt_ff_empty)) ; 
    assign ext_mas_awr_gnt_ff_wdata = sj_ext_mas_awr_gnt ; 
    assign sj_ext_mas_dwr_gnt = (ext_mas_awr_gnt_ff_empty ? TOTAL_EXTMAS_CNT : ext_mas_awr_gnt_ff_rdata) ; 
    //assign sj_ext_mas_dwr_gnt =  ext_mas_awr_gnt_ff_empty ? 6'd32 : ext_mas_awr_gnt_ff_rdata ;
    // ------------------------------------------------------------------------------
    // Function Definition
    // ------------------------------------------------------------------------------
    function integer clog2( 
        input integer depth )  ; 
        begin
            //if (depth == 0)
            if (((depth == 0) || (depth == 1))) 
                clog2 = 1 ;
            else
                for (clog2 = 0 ; (depth > 1) ; clog2 = (clog2 + 1))
                    //for (clog2 = 0; depth > 1;  clog2 = clog2 + 1)
                    depth = (depth >> 1) ;
        end
    endfunction
    generate
        if ((LATTICE_FIFO == 1)) 
            begin : LSCC_FF_BLK
            end
        else
            begin : CUSTOM_FF_BLK
                axi4_interconnect_ipgen_gen_fifo #(EXT_MAS_AWR_GNT_FF_PTR_WIDTH,
                        6,
                        0,
                        EXT_MAS_AWR_GNT_FF_DEPTH) u_ext_mas_awr_gnt_fifo (// Pointer Width
                        // Data Width
                        // Whether Output needs to be registered or not
                        // Number of entries in FIFO
                        .clk(aclk_i), 
                            .aresetn_i(aresetn_i), 
                            .we(ext_mas_awr_gnt_ff_wr_en), 
                            .wdata(ext_mas_awr_gnt_ff_wdata), 
                            .re(ext_mas_awr_gnt_ff_rd_en), 
                            .rdata(ext_mas_awr_gnt_ff_rdata), 
                            .full(ext_mas_awr_gnt_ff_full), 
                            .pre_full(), 
                            .empty(ext_mas_awr_gnt_ff_empty)) ; 
            end
    endgenerate
    genvar i ; 
    generate
        for (i = 0;(i < TOTAL_EXTMAS_CNT);i = (i + 1))
        begin : genblk2
            always
                @(*)
                begin
                    nxt_mo_sj_wready_int[i] = (ext_mas_awr_gnt_ff_empty ? 1'b0 : ((sj_ext_mas_dwr_gnt == i) & si_wready)) ;
                    //nxt_mo_sj_wready[i]  = si_wready & (sj_ext_mas_dwr_gnt==i);
                    mo_sj_wready[i] = ((mo_sj_wready_int[i] & (sj_ext_mas_dwr_gnt == i)) & si_wready) ;
                end
        end
    endgenerate
    always
        @(posedge aclk_i or 
            negedge aresetn_i)
        begin
            if ((~aresetn_i)) 
                begin
                    so_wvalid <=  1'b0 ;
                    so_wdata <=  {EXT_MAS_MAX_DATA_WIDTH{1'b0}} ;
                    so_wstrb <=  {(EXT_MAS_MAX_DATA_WIDTH / 8){1'b0}} ;
                    so_wuser <=  {AXI_USER_WIDTH{1'b0}} ;
                    so_wlast <=  1'b0 ;
                    mo_sj_wready_int <=  {TOTAL_EXTMAS_CNT{1'b0}} ;
                end
            else
                begin
                    so_wvalid <=  nxt_so_wvalid ;
                    so_wdata <=  nxt_so_wdata ;
                    so_wstrb <=  nxt_so_wstrb ;
                    so_wuser <=  nxt_so_wuser ;
                    so_wlast <=  nxt_so_wlast ;
                    mo_sj_wready_int <=  nxt_mo_sj_wready_int ;
                end
        end
    integer j ; 
    always
        @(*)
        begin
            nxt_so_wvalid = so_wvalid ;
            nxt_so_wdata = so_wdata ;
            nxt_so_wstrb = so_wstrb ;
            nxt_so_wuser = so_wuser ;
            nxt_so_wlast = so_wlast ;
            for (j = 0 ; (j < TOTAL_EXTMAS_CNT) ; j = (j + 1))
                begin
                    if ((sj_ext_mas_dwr_gnt == j)) 
                        begin
                            if ((mi_sj_wvalid[j] & mo_sj_wready[j])) 
                            //      nxt_so_wvalid   = mi_sj_wvalid[j];
                            //      nxt_so_wdata    = mi_sj_wdata [j*EXT_MAS_MAX_DATA_WIDTH +:EXT_MAS_MAX_DATA_WIDTH];
                            //      nxt_so_wstrb    = mi_sj_wstrb [j*(EXT_MAS_MAX_DATA_WIDTH/8) +: EXT_MAS_MAX_DATA_WIDTH/8];
                            //      nxt_so_wuser    = mi_sj_wuser [j*AXI_USER_WIDTH +:AXI_USER_WIDTH];
                            //      nxt_so_wlast    = mi_sj_wlast [j];
                                begin
                                    nxt_so_wvalid = mi_sj_wvalid[j] ;
                                    nxt_so_wdata = mi_sj_wdata[(j * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_MAX_DATA_WIDTH] ;
                                    nxt_so_wstrb = mi_sj_wstrb[(j * (EXT_MAS_MAX_DATA_WIDTH / 8)) +: (EXT_MAS_MAX_DATA_WIDTH / 8)] ;
                                    nxt_so_wuser = mi_sj_wuser[(j * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ;
                                    nxt_so_wlast = mi_sj_wlast[j] ;
                                end
                            else
                                begin
                                    nxt_so_wvalid = (si_wready ? 1'b0 : so_wvalid) ;
                                    nxt_so_wdata = so_wdata ;
                                    nxt_so_wstrb = so_wstrb ;
                                    nxt_so_wuser = so_wuser ;
                                    nxt_so_wlast = (si_wready ? 1'b0 : so_wlast) ;
                                end
                        end
                    else
                        ; 
                end//for loop
        end

// slv_dwr_arb
endmodule



module axi4_interconnect_ipgen_ext_slv_port (aclk_i, 
        aresetn_i, 
        i_s_awvalid, 
        i_s_awaddr, 
        i_s_awsize, 
        i_s_awlen, 
        i_s_awburst, 
        i_s_awcache, 
        i_s_awid, 
        i_s_awprot, 
        i_s_awlock, 
        i_s_awqos, 
        i_s_awregion, 
        i_s_awuser, 
        o_s_awready, 
        o_s_split_awready, 
        i_s_wvalid, 
        i_s_wdata, 
        i_s_wstrb, 
        i_s_wlast, 
        i_s_wuser, 
        o_s_wready, 
        i_s_arvalid, 
        i_s_araddr, 
        i_s_arsize, 
        i_s_arlen, 
        i_s_arburst, 
        i_s_arcache, 
        i_s_arid, 
        i_s_arprot, 
        i_s_arlock, 
        i_s_arqos, 
        i_s_arregion, 
        i_s_aruser, 
        o_s_arready, 
        o_s_split_arready, 
        o_s_bvalid, 
        o_s_bresp, 
        o_s_bid, 
        o_s_buser, 
        i_s_bready, 
        o_s_rvalid, 
        o_s_rdata, 
        o_s_rid, 
        o_s_rlast, 
        o_s_ruser, 
        o_s_rresp, 
        i_s_rready, 
        i_s_ext_mas_awr_gnt, 
        i_s_ext_mas_ard_gnt, 
        i_s_ext_mas_dwr_gnt, 
        o_ext_slv_prt_awvalid, 
        o_ext_slv_prt_awaddr, 
        o_ext_slv_prt_awsize, 
        o_ext_slv_prt_awlen, 
        o_ext_slv_prt_awburst, 
        o_ext_slv_prt_awcache, 
        o_ext_slv_prt_awid, 
        o_ext_slv_prt_awprot, 
        o_ext_slv_prt_awlock, 
        o_ext_slv_prt_awqos, 
        o_ext_slv_prt_awregion, 
        o_ext_slv_prt_awuser, 
        i_ext_slv_prt_awready, 
        o_ext_slv_prt_wvalid, 
        o_ext_slv_prt_wdata, 
        o_ext_slv_prt_wstrb, 
        o_ext_slv_prt_wuser, 
        o_ext_slv_prt_wlast, 
        i_ext_slv_prt_wready, 
        o_ext_slv_prt_arvalid, 
        o_ext_slv_prt_araddr, 
        o_ext_slv_prt_arsize, 
        o_ext_slv_prt_arlen, 
        o_ext_slv_prt_arburst, 
        o_ext_slv_prt_arcache, 
        o_ext_slv_prt_arid, 
        o_ext_slv_prt_arprot, 
        o_ext_slv_prt_arlock, 
        o_ext_slv_prt_arqos, 
        o_ext_slv_prt_arregion, 
        o_ext_slv_prt_aruser, 
        i_ext_slv_prt_arready, 
        i_ext_slv_prt_bvalid, 
        i_ext_slv_prt_bresp, 
        i_ext_slv_prt_bid, 
        i_ext_slv_prt_buser, 
        o_ext_slv_prt_bready, 
        i_ext_slv_prt_rvalid, 
        i_ext_slv_prt_rdata, 
        i_ext_slv_prt_rid, 
        i_ext_slv_prt_rlast, 
        i_ext_slv_prt_ruser, 
        i_ext_slv_prt_rresp, 
        o_ext_slv_prt_rready) ;
    parameter EXT_SLV_AXI_ID_WIDTH = 11 ; 
    parameter EXT_SLV_AXI_DATA_WIDTH = 1024 ; 
    parameter EXT_SLV_AXI_ADDR_WIDTH = 64 ; 
    parameter EXT_SLV_AXI_PROTOCOL = 1 ; 
    parameter EXT_SLV_AXI_LEN_WIDTH = 8 ; 
    parameter AXI_USER_WIDTH = 4 ; 
    parameter EXT_SLV_AXI_WR_ISSUE = 8 ; 
    parameter EXT_SLV_AXI_RD_ISSUE = 8 ; 
    parameter EXT_SLV_ACCESS_TYPE = 2'd2 ; 
    parameter TOTAL_EXTMAS_CNT = 32 ; 
    parameter EXT_MAS_MAX_DATA_WIDTH = 32 ; 
    parameter [(TOTAL_EXTMAS_CNT - 1):0] EXT_MAS_AXI_PROTOCOL = {TOTAL_EXTMAS_CNT{1'b0}} ; 
    parameter [((TOTAL_EXTMAS_CNT * 11) - 1):0] EXT_MAS_AXI_DATA_WIDTH = {TOTAL_EXTMAS_CNT{11'd64}} ; 
    parameter EXT_MAS_AXI_ID_WIDTH = 4 ; 
    parameter [((TOTAL_EXTMAS_CNT * 2) - 1):0] EXT_MAS_ACCESS_TYPE = {TOTAL_EXTMAS_CNT{2'd2}} ; 
    parameter LATTICE_FIFO = 1'b0 ; 
    parameter EXT_SLV_AW_FF_DEPTH = 8 ; 
    parameter EXT_SLV_WR_DATA_FIFO_DEPTH = 8 ; 
    parameter EXT_SLV_BRESP_FIFO_DEPTH = 8 ; 
    parameter EXT_SLV_RD_DATA_FIFO_DEPTH = 8 ; 
    localparam [(TOTAL_EXTMAS_CNT - 1):0] EXT_SLV_CONNECTED_MASTER = {TOTAL_EXTMAS_CNT{1'b1}} ; 
    localparam DATA_SIZE = (EXT_SLV_AXI_DATA_WIDTH / 8) ; 
    localparam D_SIZE = ((DATA_SIZE == 4) ? 3'd2 : ((DATA_SIZE == 8) ? 3'd3 : ((DATA_SIZE == 16) ? 3'd4 : ((DATA_SIZE == 32) ? 3'd5 : 3'd6)))) ; 
    localparam AXI4 = 0 ; 
    localparam AXI4_LITE = 1 ; 
    parameter SAWLEN_FF_DATA_WIDTH = ((EXT_SLV_AXI_PROTOCOL == AXI4) ? 11 : 7) ; 
    parameter SLV_ID_FF_WIDTH = (EXT_SLV_AXI_ID_WIDTH + 1) ; // ID + Last
    input aclk_i ; 
    input aresetn_i ; 
    input i_s_awvalid ; 
    input [(EXT_SLV_AXI_ADDR_WIDTH - 1):0] i_s_awaddr ; 
    input [(3 - 1):0] i_s_awsize ; 
    input [(EXT_SLV_AXI_LEN_WIDTH - 1):0] i_s_awlen ; 
    input [(2 - 1):0] i_s_awburst ; 
    input [(4 - 1):0] i_s_awcache ; 
    input [(EXT_SLV_AXI_ID_WIDTH - 1):0] i_s_awid ; 
    input [(3 - 1):0] i_s_awprot ; 
    input [(1 - 1):0] i_s_awlock ; 
    input [(4 - 1):0] i_s_awqos ; 
    input [(4 - 1):0] i_s_awregion ; 
    input [(AXI_USER_WIDTH - 1):0] i_s_awuser ; 
    output logic o_s_awready ; 
    output logic o_s_split_awready ; 
    input i_s_wvalid ; 
    input [(EXT_MAS_MAX_DATA_WIDTH - 1):0] i_s_wdata ; 
    input [((EXT_MAS_MAX_DATA_WIDTH / 8) - 1):0] i_s_wstrb ; 
    input i_s_wlast ; 
    input [(AXI_USER_WIDTH - 1):0] i_s_wuser ; 
    output logic o_s_wready ; 
    input i_s_arvalid ; 
    input [(EXT_SLV_AXI_ADDR_WIDTH - 1):0] i_s_araddr ; 
    input [(3 - 1):0] i_s_arsize ; 
    input [(EXT_SLV_AXI_LEN_WIDTH - 1):0] i_s_arlen ; 
    input [(2 - 1):0] i_s_arburst ; 
    input [(4 - 1):0] i_s_arcache ; 
    input [(EXT_SLV_AXI_ID_WIDTH - 1):0] i_s_arid ; 
    input [(3 - 1):0] i_s_arprot ; 
    input [(1 - 1):0] i_s_arlock ; 
    input [(4 - 1):0] i_s_arqos ; 
    input [(4 - 1):0] i_s_arregion ; 
    input [(AXI_USER_WIDTH - 1):0] i_s_aruser ; 
    output logic o_s_arready ; 
    output logic o_s_split_arready ; 
    output logic o_s_bvalid ; 
    output logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] o_s_bid ; 
    output logic [(2 - 1):0] o_s_bresp ; 
    output logic [(AXI_USER_WIDTH - 1):0] o_s_buser ; 
    input i_s_bready ; 
    output logic o_s_rvalid ; 
    output logic [(EXT_SLV_AXI_DATA_WIDTH - 1):0] o_s_rdata ; 
    output logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] o_s_rid ; 
    output logic o_s_rlast ; 
    output logic [(AXI_USER_WIDTH - 1):0] o_s_ruser ; 
    output logic [(2 - 1):0] o_s_rresp ; 
    input i_s_rready ; 
    input [(6 - 1):0] i_s_ext_mas_awr_gnt ; 
    input [(6 - 1):0] i_s_ext_mas_ard_gnt ; 
    input [(6 - 1):0] i_s_ext_mas_dwr_gnt ; 
    output logic o_ext_slv_prt_awvalid ; 
    output logic [(EXT_SLV_AXI_ADDR_WIDTH - 1):0] o_ext_slv_prt_awaddr ; 
    output logic [(3 - 1):0] o_ext_slv_prt_awsize ; 
    output logic [(EXT_SLV_AXI_LEN_WIDTH - 1):0] o_ext_slv_prt_awlen ; 
    output logic [(2 - 1):0] o_ext_slv_prt_awburst ; 
    output logic [(4 - 1):0] o_ext_slv_prt_awcache ; 
    output logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] o_ext_slv_prt_awid ; 
    output logic [(3 - 1):0] o_ext_slv_prt_awprot ; 
    output logic [(1 - 1):0] o_ext_slv_prt_awlock ; 
    output logic [(4 - 1):0] o_ext_slv_prt_awqos ; 
    output logic [(4 - 1):0] o_ext_slv_prt_awregion ; 
    output logic [(AXI_USER_WIDTH - 1):0] o_ext_slv_prt_awuser ; 
    input i_ext_slv_prt_awready ; 
    output logic o_ext_slv_prt_wvalid ; 
    output logic [(EXT_SLV_AXI_DATA_WIDTH - 1):0] o_ext_slv_prt_wdata ; 
    output logic [((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] o_ext_slv_prt_wstrb ; 
    output logic o_ext_slv_prt_wlast ; 
    output logic [(AXI_USER_WIDTH - 1):0] o_ext_slv_prt_wuser ; 
    input i_ext_slv_prt_wready ; 
    output logic o_ext_slv_prt_arvalid ; 
    output logic [(EXT_SLV_AXI_ADDR_WIDTH - 1):0] o_ext_slv_prt_araddr ; 
    output logic [(3 - 1):0] o_ext_slv_prt_arsize ; 
    output logic [(EXT_SLV_AXI_LEN_WIDTH - 1):0] o_ext_slv_prt_arlen ; 
    output logic [(2 - 1):0] o_ext_slv_prt_arburst ; 
    output logic [(4 - 1):0] o_ext_slv_prt_arcache ; 
    output logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] o_ext_slv_prt_arid ; 
    output logic [(3 - 1):0] o_ext_slv_prt_arprot ; 
    output logic [(1 - 1):0] o_ext_slv_prt_arlock ; 
    output logic [(4 - 1):0] o_ext_slv_prt_arqos ; 
    output logic [(4 - 1):0] o_ext_slv_prt_arregion ; 
    output logic [(AXI_USER_WIDTH - 1):0] o_ext_slv_prt_aruser ; 
    input i_ext_slv_prt_arready ; 
    input i_ext_slv_prt_bvalid ; 
    input [1:0] i_ext_slv_prt_bresp ; 
    input [(EXT_SLV_AXI_ID_WIDTH - 1):0] i_ext_slv_prt_bid ; 
    input [(AXI_USER_WIDTH - 1):0] i_ext_slv_prt_buser ; 
    output logic o_ext_slv_prt_bready ; 
    input i_ext_slv_prt_rvalid ; 
    input [(EXT_SLV_AXI_DATA_WIDTH - 1):0] i_ext_slv_prt_rdata ; 
    input [(EXT_SLV_AXI_ID_WIDTH - 1):0] i_ext_slv_prt_rid ; 
    input i_ext_slv_prt_rlast ; 
    input [(AXI_USER_WIDTH - 1):0] i_ext_slv_prt_ruser ; 
    input [(2 - 1):0] i_ext_slv_prt_rresp ; 
    output logic o_ext_slv_prt_rready ; 
    //===================================================================================
    // Function
    //===================================================================================
    function integer clog2( 
        input integer depth )  ; 
        begin
            //if (depth ==0)
            if (((depth == 0) || (depth == 1))) 
                clog2 = 1 ;
            else
                for (clog2 = 0 ; (depth > 1) ; clog2 = (clog2 + 1))
                    //for (clog2 = 0; depth > 0;  clog2 = clog2 + 1)
                    depth = (depth >> 1) ;
        end
    endfunction
    genvar ext_mas_cnt ; 
    generate
        if (((EXT_SLV_ACCESS_TYPE == 2'd0) || (EXT_SLV_ACCESS_TYPE == 2'd2))) 
            begin : WO_WR_ACCESS_BLK
                //write Internal signals
                logic [(6 - 1):0] ext_mas_awr_gnt_reg [TOTAL_EXTMAS_CNT], 
                    nxt_ext_mas_awr_gnt_reg [TOTAL_EXTMAS_CNT] ; 
                logic [(TOTAL_EXTMAS_CNT - 1):0] m_awvalid, 
                    nxt_m_awvalid ; 
                logic [(EXT_SLV_AXI_ADDR_WIDTH - 1):0] m_awaddr [TOTAL_EXTMAS_CNT], 
                    nxt_m_awaddr [TOTAL_EXTMAS_CNT] ; 
                logic [2:0] m_awsize [TOTAL_EXTMAS_CNT], 
                    nxt_m_awsize [TOTAL_EXTMAS_CNT] ; 
                logic [(EXT_SLV_AXI_LEN_WIDTH - 1):0] m_awlen [TOTAL_EXTMAS_CNT], 
                    nxt_m_awlen [TOTAL_EXTMAS_CNT] ; 
                logic [1:0] m_awburst [TOTAL_EXTMAS_CNT], 
                    nxt_m_awburst [TOTAL_EXTMAS_CNT] ; 
                logic [3:0] m_awcache [TOTAL_EXTMAS_CNT], 
                    nxt_m_awcache [TOTAL_EXTMAS_CNT] ; 
                logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] m_awid [TOTAL_EXTMAS_CNT], 
                    nxt_m_awid [TOTAL_EXTMAS_CNT] ; 
                logic [2:0] m_awprot [TOTAL_EXTMAS_CNT], 
                    nxt_m_awprot [TOTAL_EXTMAS_CNT] ; 
                logic [0:0] m_awlock [TOTAL_EXTMAS_CNT], 
                    nxt_m_awlock [TOTAL_EXTMAS_CNT] ; 
                logic [3:0] m_awqos [TOTAL_EXTMAS_CNT], 
                    nxt_m_awqos [TOTAL_EXTMAS_CNT] ; 
                logic [3:0] m_awregion [TOTAL_EXTMAS_CNT], 
                    nxt_m_awregion [TOTAL_EXTMAS_CNT] ; 
                logic [(AXI_USER_WIDTH - 1):0] m_awuser [TOTAL_EXTMAS_CNT], 
                    nxt_m_awuser [TOTAL_EXTMAS_CNT] ; 
                logic [(TOTAL_EXTMAS_CNT - 1):0] m_awready ; 
                logic [(TOTAL_EXTMAS_CNT - 1):0] m_split_awready ; 
                logic nxt_o_s_awready ; 
                logic nxt_o_s_split_awready ; 
                logic nxt_o_s_wready ; 
                logic o_ext_slv_prt_awvalid_ff ; 
                logic [(EXT_SLV_AXI_ADDR_WIDTH - 1):0] o_ext_slv_prt_awaddr_ff ; 
                logic [2:0] o_ext_slv_prt_awsize_ff ; 
                logic [(EXT_SLV_AXI_LEN_WIDTH - 1):0] o_ext_slv_prt_awlen_ff ; 
                logic [1:0] o_ext_slv_prt_awburst_ff ; 
                logic [3:0] o_ext_slv_prt_awcache_ff ; 
                logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] o_ext_slv_prt_awid_ff ; 
                logic [2:0] o_ext_slv_prt_awprot_ff ; 
                logic [0:0] o_ext_slv_prt_awlock_ff ; 
                logic [3:0] o_ext_slv_prt_awqos_ff ; 
                logic [3:0] o_ext_slv_prt_awregion_ff ; 
                logic [(AXI_USER_WIDTH - 1):0] o_ext_slv_prt_awuser_ff ; 
                //EXTERNAL SLAVE WRITE ISSUE
                localparam AW_ISSUE_WIDTH = ((EXT_SLV_AXI_WR_ISSUE == 1) ? 1 : (((EXT_SLV_AXI_WR_ISSUE == 2) || (EXT_SLV_AXI_WR_ISSUE == 3)) ? 2 : (((EXT_SLV_AXI_WR_ISSUE >= 4) && (EXT_SLV_AXI_WR_ISSUE <= 7)) ? 3 : (((EXT_SLV_AXI_WR_ISSUE >= 8) && (EXT_SLV_AXI_WR_ISSUE <= 15)) ? 4 : 5)))) ; 
                localparam AW_AWID = (((EXT_SLV_AXI_WR_ISSUE == 1) || (EXT_SLV_AXI_WR_ISSUE == 2)) ? 1 : (((EXT_SLV_AXI_WR_ISSUE == 3) || (EXT_SLV_AXI_WR_ISSUE == 4)) ? 2 : (((EXT_SLV_AXI_WR_ISSUE >= 5) && (EXT_SLV_AXI_WR_ISSUE <= 8)) ? 3 : 4))) ; 
                //localparam EXT_SLV_AXI_WR_ISSUE_DEPTH = EXT_SLV_AXI_WR_ISSUE==1  || EXT_SLV_AXI_WR_ISSUE==2  ? 2 : 
                //                                        EXT_SLV_AXI_WR_ISSUE==3  || EXT_SLV_AXI_WR_ISSUE==4  ? 4 : 
                //                                        EXT_SLV_AXI_WR_ISSUE>=5  && EXT_SLV_AXI_WR_ISSUE<=8  ? 8 : 16; 
                localparam AW_DWID = ((EXT_SLV_AXI_PROTOCOL == 1'b0) ? (((EXT_SLV_AXI_ADDR_WIDTH + EXT_SLV_AXI_ID_WIDTH) + AXI_USER_WIDTH) + 30) : (EXT_SLV_AXI_ADDR_WIDTH + 4)) ; 
                logic ext_slv_wr_issue_ff_wr_en ; 
                logic ext_slv_wr_issue_ff_rd_en ; 
                logic [(AW_DWID - 1):0] ext_slv_wr_issue_ff_data_in ; 
                logic [(AW_DWID - 1):0] ext_slv_wr_issue_ff_rdata ; 
                logic ext_slv_wr_issue_ff_full ; 
                logic ext_slv_wr_issue_ff_empty ; 
                //WRITE DATA FIFO
                logic mi_wvalid_wrff ; 
                logic [(EXT_SLV_AXI_DATA_WIDTH - 1):0] mi_wdata_wrff ; 
                logic [((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] mi_wstrb_wrff ; 
                logic [(AXI_USER_WIDTH - 1):0] mi_wuser_wrff ; 
                logic mi_wlast_wrff ; 
                //WRITE DATA FIFO
                localparam W_DWID = ((EXT_SLV_AXI_PROTOCOL == 0) ? (((AXI_USER_WIDTH + (EXT_SLV_AXI_DATA_WIDTH / 8)) + EXT_SLV_AXI_DATA_WIDTH) + 2) : (((AXI_USER_WIDTH + (EXT_SLV_AXI_DATA_WIDTH / 8)) + EXT_SLV_AXI_DATA_WIDTH) + 1)) ; 
                localparam W_AWID = clog2(EXT_SLV_WR_DATA_FIFO_DEPTH) ; 
                logic wdata_ff_wr_en ; 
                logic wdata_ff_rd_en ; 
                logic [(W_DWID - 1):0] wdata_ff_wdata ; 
                logic [(W_DWID - 1):0] wdata_ff_rdata ; 
                //logic                  wdata_ff_almost_full;
                logic wdata_ff_full ; 
                logic wdata_ff_empty ; 
                logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] ext_slv_awid_ff_rdata ; 
                logic ext_slv_awid_ff_full ; 
                logic ext_slv_wresp_ff_full ; 
                logic ext_slv_wresp_ff_empty ; 
                logic [(TOTAL_EXTMAS_CNT - 1):0] aw_b_complete ; 
                // Number of Write Issue  Check
                logic [(AW_ISSUE_WIDTH - 1):0] wr_issue_cnt ; 
                logic wr_issue_full ; 
                assign wr_issue_full = (wr_issue_cnt == EXT_SLV_AXI_WR_ISSUE) ; 
                always
                    @(posedge aclk_i or 
                        negedge aresetn_i)
                    begin
                        if ((!aresetn_i)) 
                            begin
                                wr_issue_cnt <=  {AW_ISSUE_WIDTH{1'b0}} ;
                            end
                        else
                            begin
                                if ((((o_ext_slv_prt_awvalid_ff & (~ext_slv_wr_issue_ff_full)) & (~wr_issue_full)) & (i_ext_slv_prt_bvalid & o_ext_slv_prt_bready))) 
                                    //if ( (o_ext_slv_prt_awvalid_ff & ~ext_slv_wr_issue_ff_full & ~wr_issue_full) & (i_ext_slv_prt_bvalid & o_ext_slv_prt_bready & ~ext_slv_wresp_ff_full ) ) 
                                    wr_issue_cnt <=  wr_issue_cnt ;
                                else
                                    if (((o_ext_slv_prt_awvalid_ff & (~ext_slv_wr_issue_ff_full)) & (~wr_issue_full))) 
                                        wr_issue_cnt <=  (wr_issue_cnt + 1'd1) ;
                                    else
                                        if (((i_ext_slv_prt_bvalid & o_ext_slv_prt_bready) & (|wr_issue_cnt))) 
                                            //else if ( i_ext_slv_prt_bvalid & o_ext_slv_prt_bready & ~ext_slv_wresp_ff_full & |wr_issue_cnt )
                                            wr_issue_cnt <=  (wr_issue_cnt - 1'd1) ;
                                        else
                                            wr_issue_cnt <=  wr_issue_cnt ;
                            end
                    end
                //===================================================================================
                // ADDRESS WRITE CHANNEL START 
                //===================================================================================
                if ((EXT_SLV_AXI_PROTOCOL == 0)) 
                    begin : AXI4_EXTSLV_AW_BLK
                        for (ext_mas_cnt = 0;(ext_mas_cnt < TOTAL_EXTMAS_CNT);ext_mas_cnt = (ext_mas_cnt + 1))
                        begin : EXT_MAS_BLK
                            localparam EXT_MAS_AXI_DATA_WIDTH_INT = EXT_MAS_AXI_DATA_WIDTH[(ext_mas_cnt * 11) +: 11] ; 
                            // for - ext_mas_cnt
                            if ((EXT_SLV_CONNECTED_MASTER[ext_mas_cnt] == 1)) 
                                begin : EXTSLV_CNCT_EXTMAS_BLK
                                    if ((EXT_MAS_AXI_PROTOCOL[ext_mas_cnt] == 0)) 
                                        begin : AXI4_EXTMAS_BLK
                                            if (((EXT_MAS_AXI_DATA_WIDTH_INT < EXT_SLV_AXI_DATA_WIDTH) || (EXT_MAS_AXI_DATA_WIDTH_INT == EXT_SLV_AXI_DATA_WIDTH))) 
                                                begin : EQ_UP_BLK
                                                    assign m_awready[ext_mas_cnt] = ((~wr_issue_full) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_awready[ext_mas_cnt]       = ~ext_slv_wr_issue_ff_full  & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt);
                                                    //assign m_awready[ext_mas_cnt]       = ~ext_slv_wr_issue_ff_full  & ( i_s_ext_mas_awr_gnt == ext_mas_cnt);
                                                    assign m_split_awready[ext_mas_cnt] = ((~wr_issue_full) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_split_awready[ext_mas_cnt] = (~wr_issue_full);
                                                    //assign m_split_awready[ext_mas_cnt] = ~ext_slv_wr_issue_ff_full;
                                                    assign aw_b_complete[ext_mas_cnt] = 1'b0 ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((~aresetn_i)) 
                                                                begin
                                                                    m_awvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_awaddr[ext_mas_cnt] <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                                                    m_awsize[ext_mas_cnt] <=  3'd0 ;
                                                                    m_awlen[ext_mas_cnt] <=  {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ;
                                                                    m_awburst[ext_mas_cnt] <=  2'd0 ;
                                                                    m_awcache[ext_mas_cnt] <=  4'd0 ;
                                                                    m_awid[ext_mas_cnt] <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                                                    m_awprot[ext_mas_cnt] <=  3'd0 ;
                                                                    m_awlock[ext_mas_cnt] <=  1'd0 ;
                                                                    m_awqos[ext_mas_cnt] <=  4'd0 ;
                                                                    m_awregion[ext_mas_cnt] <=  4'd0 ;
                                                                    m_awuser[ext_mas_cnt] <=  {AXI_USER_WIDTH{1'b0}} ;
                                                                    ext_mas_awr_gnt_reg[ext_mas_cnt] <=  TOTAL_EXTMAS_CNT ;
                                                                    //ext_mas_awr_gnt_reg[ext_mas_cnt]       <= 6'd32;
                                                                end
                                                            else
                                                                begin
                                                                    m_awvalid[ext_mas_cnt] <=  nxt_m_awvalid[ext_mas_cnt] ;
                                                                    m_awaddr[ext_mas_cnt] <=  nxt_m_awaddr[ext_mas_cnt] ;
                                                                    m_awsize[ext_mas_cnt] <=  nxt_m_awsize[ext_mas_cnt] ;
                                                                    m_awlen[ext_mas_cnt] <=  nxt_m_awlen[ext_mas_cnt] ;
                                                                    m_awburst[ext_mas_cnt] <=  nxt_m_awburst[ext_mas_cnt] ;
                                                                    m_awcache[ext_mas_cnt] <=  nxt_m_awcache[ext_mas_cnt] ;
                                                                    m_awid[ext_mas_cnt] <=  nxt_m_awid[ext_mas_cnt] ;
                                                                    m_awprot[ext_mas_cnt] <=  nxt_m_awprot[ext_mas_cnt] ;
                                                                    m_awlock[ext_mas_cnt] <=  nxt_m_awlock[ext_mas_cnt] ;
                                                                    m_awqos[ext_mas_cnt] <=  nxt_m_awqos[ext_mas_cnt] ;
                                                                    m_awregion[ext_mas_cnt] <=  nxt_m_awregion[ext_mas_cnt] ;
                                                                    m_awuser[ext_mas_cnt] <=  nxt_m_awuser[ext_mas_cnt] ;
                                                                    ext_mas_awr_gnt_reg[ext_mas_cnt] <=  nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                                end
                                                        end
                                                    always
                                                        @(*)
                                                        begin
                                                            nxt_m_awvalid[ext_mas_cnt] = m_awvalid[ext_mas_cnt] ;
                                                            nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                            nxt_m_awsize[ext_mas_cnt] = m_awsize[ext_mas_cnt] ;
                                                            nxt_m_awlen[ext_mas_cnt] = m_awlen[ext_mas_cnt] ;
                                                            nxt_m_awburst[ext_mas_cnt] = m_awburst[ext_mas_cnt] ;
                                                            nxt_m_awcache[ext_mas_cnt] = m_awcache[ext_mas_cnt] ;
                                                            nxt_m_awid[ext_mas_cnt] = m_awid[ext_mas_cnt] ;
                                                            nxt_m_awprot[ext_mas_cnt] = m_awprot[ext_mas_cnt] ;
                                                            nxt_m_awlock[ext_mas_cnt] = m_awlock[ext_mas_cnt] ;
                                                            nxt_m_awqos[ext_mas_cnt] = m_awqos[ext_mas_cnt] ;
                                                            nxt_m_awregion[ext_mas_cnt] = m_awregion[ext_mas_cnt] ;
                                                            nxt_m_awuser[ext_mas_cnt] = m_awuser[ext_mas_cnt] ;
                                                            nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                            if ((((i_s_awvalid & o_s_awready) & (i_s_ext_mas_awr_gnt == ext_mas_cnt)) & (!m_awvalid))) 
                                                                //if ( i_s_awvalid & o_s_awready & (~wr_issue_full) & ( i_s_ext_mas_awr_gnt == ext_mas_cnt)  & (!(m_awvalid)))
                                                                //if ( i_s_awvalid & o_s_awready & (~wr_issue_full) & ( i_s_ext_mas_awr_gnt == ext_mas_cnt)  )
                                                                begin
                                                                    nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = i_s_ext_mas_awr_gnt ;
                                                                    nxt_m_awvalid[ext_mas_cnt] = i_s_awvalid ;
                                                                    nxt_m_awaddr[ext_mas_cnt] = i_s_awaddr ;
                                                                    nxt_m_awsize[ext_mas_cnt] = i_s_awsize ;
                                                                    nxt_m_awlen[ext_mas_cnt] = i_s_awlen ;
                                                                    nxt_m_awburst[ext_mas_cnt] = i_s_awburst ;
                                                                    nxt_m_awcache[ext_mas_cnt] = i_s_awcache ;
                                                                    nxt_m_awid[ext_mas_cnt] = i_s_awid ;
                                                                    nxt_m_awprot[ext_mas_cnt] = i_s_awprot ;
                                                                    nxt_m_awlock[ext_mas_cnt] = i_s_awlock ;
                                                                    nxt_m_awqos[ext_mas_cnt] = i_s_awqos ;
                                                                    nxt_m_awregion[ext_mas_cnt] = i_s_awregion ;
                                                                    nxt_m_awuser[ext_mas_cnt] = i_s_awuser ;
                                                                end
                                                            else
                                                                begin
                                                                    nxt_m_awvalid[ext_mas_cnt] = (m_awready[ext_mas_cnt] ? 1'b0 : m_awvalid[ext_mas_cnt]) ;
                                                                    nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = (m_awready[ext_mas_cnt] ? TOTAL_EXTMAS_CNT : ext_mas_awr_gnt_reg[ext_mas_cnt]) ;
                                                                    //nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = m_awready[ext_mas_cnt] ? 6'd32 :ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                                    nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                                    nxt_m_awsize[ext_mas_cnt] = m_awsize[ext_mas_cnt] ;
                                                                    nxt_m_awlen[ext_mas_cnt] = m_awlen[ext_mas_cnt] ;
                                                                    nxt_m_awburst[ext_mas_cnt] = m_awburst[ext_mas_cnt] ;
                                                                    nxt_m_awcache[ext_mas_cnt] = m_awcache[ext_mas_cnt] ;
                                                                    nxt_m_awid[ext_mas_cnt] = m_awid[ext_mas_cnt] ;
                                                                    nxt_m_awprot[ext_mas_cnt] = m_awprot[ext_mas_cnt] ;
                                                                    nxt_m_awlock[ext_mas_cnt] = m_awlock[ext_mas_cnt] ;
                                                                    nxt_m_awqos[ext_mas_cnt] = m_awqos[ext_mas_cnt] ;
                                                                    nxt_m_awregion[ext_mas_cnt] = m_awregion[ext_mas_cnt] ;
                                                                    nxt_m_awuser[ext_mas_cnt] = m_awuser[ext_mas_cnt] ;
                                                                end
                                                        end
                                                end
                                            else
                                                begin : DOWN_BLK
                                                    localparam DOWNSIZE_FACTOR = (EXT_MAS_AXI_DATA_WIDTH_INT / EXT_SLV_AXI_DATA_WIDTH) ; 
                                                    localparam EXT_SLV_BIT_SELECT = ((EXT_SLV_AXI_DATA_WIDTH == 8) ? 0 : ((EXT_SLV_AXI_DATA_WIDTH == 16) ? 1 : ((EXT_SLV_AXI_DATA_WIDTH == 32) ? 2 : ((EXT_SLV_AXI_DATA_WIDTH == 64) ? 3 : ((EXT_SLV_AXI_DATA_WIDTH == 128) ? 4 : ((EXT_SLV_AXI_DATA_WIDTH == 256) ? 5 : 6)))))) ; //(512 is maximum slave bus width during downsize)
                                                    //localparam EXT_MAS_BYTE_CNT = EXT_MAS_AXI_DATA_WIDTH_INT/8;
                                                    //localparam EXT_MAS_BIT_SELECT = clog2 (EXT_MAS_BYTE_CNT); 
                                                    localparam EXT_SLV_BYTE_CNT = (EXT_SLV_AXI_DATA_WIDTH / 8) ; 
                                                    localparam EXT_MAS_AWSIZE_1_IN_BYTES = 2 ; 
                                                    localparam EXT_MAS_AWSIZE_2_IN_BYTES = 4 ; 
                                                    localparam EXT_MAS_AWSIZE_3_IN_BYTES = 8 ; 
                                                    localparam EXT_MAS_AWSIZE_4_IN_BYTES = 16 ; 
                                                    localparam EXT_MAS_AWSIZE_5_IN_BYTES = 32 ; 
                                                    localparam EXT_MAS_AWSIZE_6_IN_BYTES = 64 ; 
                                                    localparam EXT_MAS_AWSIZE_7_IN_BYTES = 128 ; 
                                                    logic ext_slv_wlast_split_ff_wr_en ; 
                                                    logic ext_slv_wlast_split_ff_rd_en ; 
                                                    logic ext_slv_wlast_split_ff_wdata ; 
                                                    logic ext_slv_wlast_split_ff_rdata ; 
                                                    logic ext_slv_wlast_split_ff_full ; 
                                                    logic ext_slv_wlast_split_ff_empty ; 
                                                    logic [7:0] aw_wr_cnt, 
                                                        nxt_aw_wr_cnt ; 
                                                    logic [(EXT_SLV_AXI_LEN_WIDTH - 1):0] m_awlen_reg, 
                                                        nxt_m_awlen_reg ; 
                                                    logic [6:0] ext_mas_req_size_bytes ; 
                                                    logic nxt_req_size_le_ext_slv, 
                                                        req_size_le_ext_slv ; 
                                                    logic [(EXT_SLV_AXI_LEN_WIDTH - 1):0] m_fixed_start_awlen_reg, 
                                                        nxt_m_fixed_start_awlen_reg ; 
                                                    logic [2:0] fixed_burst_ind_cnt, 
                                                        nxt_fixed_burst_ind_cnt ; 
                                                    logic [2:0] fixed_burst_ind_cnt_reg, 
                                                        nxt_fixed_burst_ind_cnt_reg ; 
                                                    assign ext_slv_wlast_split_ff_wdata = m_awready[ext_mas_cnt] ; // since only for last split awready is given
                                                    //assign ext_slv_wlast_split_ff_wdata  =  o_s_awready; // since only for last split awready is given
                                                    assign ext_slv_wlast_split_ff_wr_en = (((o_ext_slv_prt_awvalid_ff & (!ext_slv_wlast_split_ff_full)) & (!ext_slv_wr_issue_ff_full)) & (o_ext_slv_prt_awid_ff[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                    //       assign ext_slv_wlast_split_ff_rd_en  = (~ext_slv_wlast_split_ff_empty & i_ext_slv_prt_bvalid & i_ext_slv_prt_bid[EXT_SLV_AXI_ID_WIDTH-1:EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt & (!ext_slv_wresp_ff_full));
                                                    assign ext_slv_wlast_split_ff_rd_en = ((((~ext_slv_wlast_split_ff_empty) & i_ext_slv_prt_bvalid) & (i_ext_slv_prt_bid[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) & o_ext_slv_prt_bready) ; 
                                                    assign ext_mas_req_size_bytes = (1'd1 << m_awsize[ext_mas_cnt]) ; 
                                                    if ((LATTICE_FIFO == 1)) 
                                                        begin : LSCC_FF_BLK
                                                        end
                                                    else
                                                        begin : CUSTOM_FF_BLK
                                                            axi4_interconnect_ipgen_gen_fifo #(AW_AWID,
                                                                    1,
                                                                    0,
                                                                    EXT_SLV_AXI_WR_ISSUE) u_ext_slv_wlast_split_fifo (// Pointer Width
                                                                    // Data Width { size}
                                                                    // Whether Output needs to be registered or not
                                                                    // Number of entries in FIFO
                                                                    //EXT_SLV_AXI_WR_ISSUE_DEPTH// Number of entries in FIFO
                                                                    .clk(aclk_i), 
                                                                        .aresetn_i(aresetn_i), 
                                                                        .we(ext_slv_wlast_split_ff_wr_en), 
                                                                        .wdata(ext_slv_wlast_split_ff_wdata), 
                                                                        .re(ext_slv_wlast_split_ff_rd_en), 
                                                                        .rdata(ext_slv_wlast_split_ff_rdata), 
                                                                        .full(ext_slv_wlast_split_ff_full), 
                                                                        .pre_full(), 
                                                                        .empty(ext_slv_wlast_split_ff_empty)) ; 
                                                        end
                                                    assign m_awready[ext_mas_cnt] = ((((|aw_wr_cnt) || (|nxt_aw_wr_cnt)) || (|fixed_burst_ind_cnt)) ? 1'b0 : (((~wr_issue_full) & (!ext_slv_wlast_split_ff_full)) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt))) ; 
                                                    assign m_split_awready[ext_mas_cnt] = (((~wr_issue_full) & (!ext_slv_wlast_split_ff_full)) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_split_awready[ext_mas_cnt] = ~wr_issue_full & (!ext_slv_wlast_split_ff_full);
                                                    //assign m_awready[ext_mas_cnt]       = (|aw_wr_cnt) || (|nxt_aw_wr_cnt) ? 1'b0 : ~ext_slv_wr_issue_ff_full & (!ext_slv_wlast_split_ff_full) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt) ;
                                                    //assign m_split_awready[ext_mas_cnt] = ~ext_slv_wr_issue_ff_full & (!ext_slv_wlast_split_ff_full);
                                                    //assign m_awready[ext_mas_cnt]       = (|aw_wr_cnt) || (|nxt_aw_wr_cnt) ? 1'b0 : ~ext_slv_wr_issue_ff_full & (!ext_slv_wlast_split_ff_full) & (  == ext_mas_cnt) ;
                                                    //assign m_split_awready[ext_mas_cnt] = ~ext_slv_wr_issue_ff_full & (!ext_slv_wlast_split_ff_full)  & ( i_s_ext_mas_awr_gnt == ext_mas_cnt);
                                                    assign aw_b_complete[ext_mas_cnt] = (((!ext_slv_wlast_split_ff_rdata) & i_ext_slv_prt_bvalid) & (i_ext_slv_prt_bid[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                    //assign  m_awsize  [ext_mas_cnt]   = (EXT_SLV_AXI_DATA_WIDTH/8) == 1 ? 3'd0 : clog2(EXT_SLV_AXI_DATA_WIDTH/8);
                                                    //assign  m_awburst [ext_mas_cnt]   = i_s_awburst;
                                                    assign m_awcache[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awlock[ext_mas_cnt] = 1'd0 ; 
                                                    assign m_awqos[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awregion[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((~aresetn_i)) 
                                                                begin
                                                                    m_awvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_awaddr[ext_mas_cnt] <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                                                    m_awid[ext_mas_cnt] <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                                                    m_awlen[ext_mas_cnt] <=  {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ;
                                                                    m_awburst[ext_mas_cnt] <=  2'd0 ;
                                                                    m_awprot[ext_mas_cnt] <=  3'd0 ;
                                                                    aw_wr_cnt <=  8'd0 ;
                                                                    ext_mas_awr_gnt_reg[ext_mas_cnt] <=  TOTAL_EXTMAS_CNT ;
                                                                    //ext_mas_awr_gnt_reg[ext_mas_cnt]       <= 6'd32;
                                                                    m_awlen_reg <=  {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ;
                                                                    m_awsize[ext_mas_cnt] <=  3'd0 ;
                                                                    req_size_le_ext_slv <=  1'b0 ;
                                                                    m_fixed_start_awlen_reg <=  {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ;
                                                                    fixed_burst_ind_cnt <=  3'd0 ;
                                                                    fixed_burst_ind_cnt_reg <=  3'd0 ;
                                                                end
                                                            else
                                                                begin
                                                                    m_awvalid[ext_mas_cnt] <=  nxt_m_awvalid[ext_mas_cnt] ;
                                                                    m_awaddr[ext_mas_cnt] <=  nxt_m_awaddr[ext_mas_cnt] ;
                                                                    m_awid[ext_mas_cnt] <=  nxt_m_awid[ext_mas_cnt] ;
                                                                    m_awlen[ext_mas_cnt] <=  nxt_m_awlen[ext_mas_cnt] ;
                                                                    m_awburst[ext_mas_cnt] <=  nxt_m_awburst[ext_mas_cnt] ;
                                                                    m_awprot[ext_mas_cnt] <=  nxt_m_awprot[ext_mas_cnt] ;
                                                                    aw_wr_cnt <=  nxt_aw_wr_cnt ;
                                                                    ext_mas_awr_gnt_reg[ext_mas_cnt] <=  nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                                    m_awlen_reg <=  nxt_m_awlen_reg ;
                                                                    m_awsize[ext_mas_cnt] <=  nxt_m_awsize[ext_mas_cnt] ;
                                                                    req_size_le_ext_slv <=  nxt_req_size_le_ext_slv ;
                                                                    m_fixed_start_awlen_reg <=  nxt_m_fixed_start_awlen_reg ;
                                                                    fixed_burst_ind_cnt <=  nxt_fixed_burst_ind_cnt ;
                                                                    fixed_burst_ind_cnt_reg <=  nxt_fixed_burst_ind_cnt_reg ;
                                                                end
                                                        end
                                                    always
                                                        @(*)
                                                        begin
                                                            nxt_m_awvalid[ext_mas_cnt] = m_awvalid[ext_mas_cnt] ;
                                                            nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                            nxt_m_awid[ext_mas_cnt] = m_awid[ext_mas_cnt] ;
                                                            nxt_m_awlen[ext_mas_cnt] = m_awlen[ext_mas_cnt] ;
                                                            nxt_m_awprot[ext_mas_cnt] = m_awprot[ext_mas_cnt] ;
                                                            nxt_m_awburst[ext_mas_cnt] = m_awburst[ext_mas_cnt] ;
                                                            nxt_aw_wr_cnt = aw_wr_cnt ;
                                                            nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                            nxt_m_awlen_reg = m_awlen_reg ;
                                                            nxt_m_awsize[ext_mas_cnt] = m_awsize[ext_mas_cnt] ;
                                                            nxt_req_size_le_ext_slv = req_size_le_ext_slv ;
                                                            nxt_m_fixed_start_awlen_reg = m_fixed_start_awlen_reg ;
                                                            nxt_fixed_burst_ind_cnt = fixed_burst_ind_cnt ;
                                                            nxt_fixed_burst_ind_cnt_reg = fixed_burst_ind_cnt_reg ;
                                                            if (((|aw_wr_cnt) || ((aw_wr_cnt == 8'd0) && (|fixed_burst_ind_cnt)))) 
                                                                //if(| aw_wr_cnt)
                                                                begin
                                                                    if ((m_awvalid[ext_mas_cnt] & m_split_awready[ext_mas_cnt])) 
                                                                        //if( m_awvalid [ext_mas_cnt] &  m_split_awready[ext_mas_cnt] & (~wr_issue_full) )
                                                                        begin
                                                                            nxt_aw_wr_cnt = ((|fixed_burst_ind_cnt) ? aw_wr_cnt : (aw_wr_cnt - 1'd1)) ;
                                                                            nxt_fixed_burst_ind_cnt = ((|fixed_burst_ind_cnt) ? (fixed_burst_ind_cnt - 1'd1) : fixed_burst_ind_cnt_reg) ;
                                                                            //nxt_m_awlen[ext_mas_cnt] = |m_awlen_reg ? m_awlen_reg : m_awlen[ext_mas_cnt];
                                                                            if ((m_awburst[ext_mas_cnt] == 2'd0)) 
                                                                                // fixed
                                                                                begin
                                                                                nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                                                nxt_m_awlen[ext_mas_cnt] = ((|fixed_burst_ind_cnt_reg) ? ((m_awlen_reg > 4'hF) ? 4'hF : m_awlen_reg) : m_awlen[ext_mas_cnt]) ;
                                                                                nxt_m_awlen_reg = ((fixed_burst_ind_cnt == 1'd1) ? m_fixed_start_awlen_reg : ((m_awlen_reg > 4'hF) ? (m_awlen_reg - 5'd16) : m_awlen_reg)) ;
                                                                                end
                                                                            else
                                                                                // INCR
                                                                                begin
                                                                                nxt_m_awlen[ext_mas_cnt] = ((|m_awlen_reg) ? m_awlen_reg : m_awlen[ext_mas_cnt]) ;
                                                                                if (((m_awsize[ext_mas_cnt] <= EXT_SLV_BIT_SELECT) && req_size_le_ext_slv)) 
                                                                                begin
                                                                                case (m_awsize[ext_mas_cnt])
                                                                                3'd0 : 
                                                                                nxt_m_awaddr[ext_mas_cnt] = ({m_awaddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):0]} + ext_mas_req_size_bytes) ;
                                                                                3'd1 : 
                                                                                nxt_m_awaddr[ext_mas_cnt] = ({m_awaddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):1],
                                                                                1'b0} + ext_mas_req_size_bytes) ;
                                                                                3'd2 : 
                                                                                nxt_m_awaddr[ext_mas_cnt] = ({m_awaddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):2],
                                                                                2'd0} + ext_mas_req_size_bytes) ;
                                                                                3'd3 : 
                                                                                nxt_m_awaddr[ext_mas_cnt] = ({m_awaddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):3],
                                                                                3'd0} + ext_mas_req_size_bytes) ;
                                                                                3'd4 : 
                                                                                nxt_m_awaddr[ext_mas_cnt] = ({m_awaddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):4],
                                                                                4'd0} + ext_mas_req_size_bytes) ;
                                                                                3'd5 : 
                                                                                nxt_m_awaddr[ext_mas_cnt] = ({m_awaddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):5],
                                                                                5'd0} + ext_mas_req_size_bytes) ;
                                                                                3'd6 : 
                                                                                nxt_m_awaddr[ext_mas_cnt] = ({m_awaddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):6],
                                                                                6'd0} + ext_mas_req_size_bytes) ;
                                                                                default : 
                                                                                nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                                                endcase 
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_m_awaddr[ext_mas_cnt] = ({m_awaddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):EXT_SLV_BIT_SELECT],
                                                                                {EXT_SLV_BIT_SELECT{1'b0}}} + ((m_awlen[ext_mas_cnt] + 1) * EXT_SLV_BYTE_CNT)) ;
                                                                                end
                                                                                end
                                                                        end
                                                                    else
                                                                        begin
                                                                            nxt_aw_wr_cnt = aw_wr_cnt ;
                                                                            nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                                        end
                                                                end
                                                            else
                                                                if ((((i_s_awvalid & o_s_awready) & (i_s_ext_mas_awr_gnt == ext_mas_cnt)) & (!m_awvalid))) 
                                                                    //else if ( i_s_awvalid & o_s_awready & (~wr_issue_full) & ( i_s_ext_mas_awr_gnt == ext_mas_cnt)  & (!(m_awvalid)))
                                                                    begin
                                                                        nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = i_s_ext_mas_awr_gnt ;
                                                                        nxt_m_awvalid[ext_mas_cnt] = i_s_awvalid ;
                                                                        nxt_m_awid[ext_mas_cnt] = i_s_awid ;
                                                                        nxt_m_awprot[ext_mas_cnt] = i_s_awprot ;
                                                                        nxt_m_awburst[ext_mas_cnt] = i_s_awburst ;
                                                                        if ((i_s_awsize <= EXT_SLV_BIT_SELECT)) 
                                                                        //nxt_m_awlen[ext_mas_cnt]    = DOWNSIZE_FACTOR - i_s_awaddr[EXT_SLV_BIT_SELECT +: clog2(DOWNSIZE_FACTOR)] - 1'd1;
                                                                            begin
                                                                                nxt_aw_wr_cnt = i_s_awlen ;
                                                                                nxt_fixed_burst_ind_cnt = 3'd0 ;
                                                                                nxt_m_awaddr[ext_mas_cnt] = ((i_s_awburst == 2'd0) ? i_s_awaddr : i_s_awaddr) ;
                                                                                nxt_m_awlen[ext_mas_cnt] = 1'b0 ;
                                                                                nxt_m_awlen_reg = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ;
                                                                                nxt_m_awsize[ext_mas_cnt] = i_s_awsize ;
                                                                                nxt_req_size_le_ext_slv = 1'b1 ;
                                                                            end
                                                                        else
                                                                            begin
                                                                                nxt_aw_wr_cnt = i_s_awlen ;
                                                                                nxt_m_awsize[ext_mas_cnt] = (((EXT_SLV_AXI_DATA_WIDTH / 8) == 1) ? 3'd0 : clog2((EXT_SLV_AXI_DATA_WIDTH / 8))) ;
                                                                                nxt_m_awaddr[ext_mas_cnt] = ((i_s_awburst == 2'd0) ? {i_s_awaddr[(EXT_SLV_AXI_ADDR_WIDTH - 1):EXT_SLV_BIT_SELECT],
                                                                                {EXT_SLV_BIT_SELECT{1'b0}}} : i_s_awaddr) ;
                                                                                nxt_req_size_le_ext_slv = 1'b0 ;
                                                                                //not possible
                                                                                case (i_s_awsize)
                                                                                3'd1 : 
                                                                                begin
                                                                                //nxt_aw_wr_cnt            =  i_s_awburst==2'd0 ? ((EXT_MAS_AWSIZE_1_IN_BYTES/EXT_SLV_BYTE_CNT) - (i_s_awaddr[0] >> EXT_SLV_BIT_SELECT ) -1'd1 ) >> 3'd4 : i_s_awlen;
                                                                                nxt_m_awlen[ext_mas_cnt] = ((i_s_awburst == 2'd0) ? (((((EXT_MAS_AWSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[0] >> EXT_SLV_BIT_SELECT)) - 1'd1) > 4'hF) ? 4'hF : (((EXT_MAS_AWSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) : (((EXT_MAS_AWSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_awlen_reg = ((i_s_awburst == 2'd0) ? ((((EXT_MAS_AWSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[0] >> EXT_SLV_BIT_SELECT)) - 1'd1) - 5'd16) : ((EXT_MAS_AWSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1)) ;
                                                                                nxt_m_fixed_start_awlen_reg = (((EXT_MAS_AWSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[0] >> EXT_SLV_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_fixed_burst_ind_cnt = ((i_s_awburst == 2'd0) ? ((((EXT_MAS_AWSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) : 3'd0) ;
                                                                                nxt_fixed_burst_ind_cnt_reg = ((((EXT_MAS_AWSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) ;
                                                                                end
                                                                                3'd2 : 
                                                                                begin
                                                                                //nxt_m_awlen[ext_mas_cnt]= ((EXT_MAS_AWSIZE_2_IN_BYTES/EXT_SLV_BYTE_CNT) - (i_s_awaddr[1:0] >> EXT_SLV_BIT_SELECT ) - 1'd1);
                                                                                //nxt_m_awlen_reg = ((EXT_MAS_AWSIZE_2_IN_BYTES/EXT_SLV_BYTE_CNT) - 1'd1);
                                                                                //nxt_aw_wr_cnt            =  i_s_awburst==2'd0 ? ((EXT_MAS_AWSIZE_2_IN_BYTES/EXT_SLV_BYTE_CNT) - (i_s_awaddr[1:0] >> EXT_SLV_BIT_SELECT ) -1'd1 ) >> 3'd4 : i_s_awlen;
                                                                                nxt_m_awlen[ext_mas_cnt] = ((i_s_awburst == 2'd0) ? (((((EXT_MAS_AWSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[1:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) > 4'hF) ? 4'hF : (((EXT_MAS_AWSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[1:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) : (((EXT_MAS_AWSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[1:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_awlen_reg = ((i_s_awburst == 2'd0) ? ((((EXT_MAS_AWSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[1:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) - 5'd16) : ((EXT_MAS_AWSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1)) ;
                                                                                nxt_m_fixed_start_awlen_reg = (((EXT_MAS_AWSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[1:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_fixed_burst_ind_cnt = ((i_s_awburst == 2'd0) ? ((((EXT_MAS_AWSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[1:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) : 3'd0) ;
                                                                                nxt_fixed_burst_ind_cnt_reg = ((((EXT_MAS_AWSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[1:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) ;
                                                                                end
                                                                                3'd3 : 
                                                                                begin
                                                                                //nxt_m_awlen[ext_mas_cnt]= ((EXT_MAS_AWSIZE_3_IN_BYTES/EXT_SLV_BYTE_CNT) - (i_s_awaddr[2:0] >> EXT_SLV_BIT_SELECT ) - 1'd1);
                                                                                //nxt_m_awlen_reg = ((EXT_MAS_AWSIZE_3_IN_BYTES/EXT_SLV_BYTE_CNT) - 1'd1);
                                                                                //nxt_aw_wr_cnt            =  i_s_awburst==2'd0 ? ((EXT_MAS_AWSIZE_3_IN_BYTES/EXT_SLV_BYTE_CNT) - (i_s_awaddr[2:0] >> EXT_SLV_BIT_SELECT ) -1'd1 ) >> 3'd4 : i_s_awlen;
                                                                                nxt_m_awlen[ext_mas_cnt] = ((i_s_awburst == 2'd0) ? (((((EXT_MAS_AWSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[2:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) > 4'hF) ? 4'hF : (((EXT_MAS_AWSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[2:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) : (((EXT_MAS_AWSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[2:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_awlen_reg = ((i_s_awburst == 2'd0) ? ((((EXT_MAS_AWSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[2:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) - 5'd16) : ((EXT_MAS_AWSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1)) ;
                                                                                nxt_m_fixed_start_awlen_reg = (((EXT_MAS_AWSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[2:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_fixed_burst_ind_cnt = ((i_s_awburst == 2'd0) ? ((((EXT_MAS_AWSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[2:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) : 3'd0) ;
                                                                                nxt_fixed_burst_ind_cnt_reg = ((((EXT_MAS_AWSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[2:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) ;
                                                                                end
                                                                                3'd4 : 
                                                                                begin
                                                                                // nxt_aw_wr_cnt            =  i_s_awburst==2'd0 ? ((EXT_MAS_AWSIZE_4_IN_BYTES/EXT_SLV_BYTE_CNT) - (i_s_awaddr[3:0] >> EXT_SLV_BIT_SELECT ) -1'd1 ) >> 3'd4 : i_s_awlen;
                                                                                nxt_m_awlen[ext_mas_cnt] = ((i_s_awburst == 2'd0) ? (((((EXT_MAS_AWSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[3:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) > 4'hF) ? 4'hF : (((EXT_MAS_AWSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[3:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) : (((EXT_MAS_AWSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[3:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_awlen_reg = ((i_s_awburst == 2'd0) ? ((((EXT_MAS_AWSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[3:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) - 5'd16) : ((EXT_MAS_AWSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1)) ;
                                                                                nxt_m_fixed_start_awlen_reg = (((EXT_MAS_AWSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[3:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_fixed_burst_ind_cnt = ((i_s_awburst == 2'd0) ? ((((EXT_MAS_AWSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[3:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) : 3'd0) ;
                                                                                nxt_fixed_burst_ind_cnt_reg = ((((EXT_MAS_AWSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[3:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) ;
                                                                                end
                                                                                3'd5 : 
                                                                                begin
                                                                                // nxt_aw_wr_cnt            =  i_s_awburst==2'd0 ? ((EXT_MAS_AWSIZE_5_IN_BYTES/EXT_SLV_BYTE_CNT) - (i_s_awaddr[4:0] >> EXT_SLV_BIT_SELECT ) -1'd1 ) >> 3'd4 : i_s_awlen;
                                                                                nxt_m_awlen[ext_mas_cnt] = ((i_s_awburst == 2'd0) ? (((((EXT_MAS_AWSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[4:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) > 4'hF) ? 4'hF : (((EXT_MAS_AWSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[4:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) : (((EXT_MAS_AWSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[4:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_awlen_reg = ((i_s_awburst == 2'd0) ? ((((EXT_MAS_AWSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[4:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) - 5'd16) : ((EXT_MAS_AWSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1)) ;
                                                                                nxt_m_fixed_start_awlen_reg = (((EXT_MAS_AWSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[4:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_fixed_burst_ind_cnt = ((i_s_awburst == 2'd0) ? ((((EXT_MAS_AWSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[4:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) : 3'd0) ;
                                                                                nxt_fixed_burst_ind_cnt_reg = ((((EXT_MAS_AWSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[4:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) ;
                                                                                end
                                                                                3'd6 : 
                                                                                begin
                                                                                // nxt_aw_wr_cnt            =  i_s_awburst==2'd0 ? ((EXT_MAS_AWSIZE_6_IN_BYTES/EXT_SLV_BYTE_CNT) - (i_s_awaddr[5:0] >> EXT_SLV_BIT_SELECT ) -1'd1 ) >> 3'd4 : i_s_awlen;
                                                                                nxt_m_awlen[ext_mas_cnt] = ((i_s_awburst == 2'd0) ? (((((EXT_MAS_AWSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[5:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) > 4'hF) ? 4'hF : (((EXT_MAS_AWSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[5:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) : (((EXT_MAS_AWSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[5:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_awlen_reg = ((i_s_awburst == 2'd0) ? ((((EXT_MAS_AWSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[5:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) - 5'd16) : ((EXT_MAS_AWSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1)) ;
                                                                                nxt_m_fixed_start_awlen_reg = (((EXT_MAS_AWSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[5:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_fixed_burst_ind_cnt = ((i_s_awburst == 2'd0) ? ((((EXT_MAS_AWSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[5:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) : 3'd0) ;
                                                                                nxt_fixed_burst_ind_cnt_reg = ((((EXT_MAS_AWSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[5:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) ;
                                                                                end
                                                                                3'd7 : 
                                                                                begin
                                                                                // nxt_aw_wr_cnt            =  i_s_awburst==2'd0 ? ((EXT_MAS_AWSIZE_7_IN_BYTES/EXT_SLV_BYTE_CNT) - (i_s_awaddr[6:0] >> EXT_SLV_BIT_SELECT ) -1'd1 ) >> 3'd4 : i_s_awlen;
                                                                                nxt_m_awlen[ext_mas_cnt] = ((i_s_awburst == 2'd0) ? (((((EXT_MAS_AWSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[6:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) > 4'hF) ? 4'hF : (((EXT_MAS_AWSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[6:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) : (((EXT_MAS_AWSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[6:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_awlen_reg = ((i_s_awburst == 2'd0) ? ((((EXT_MAS_AWSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[6:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) - 5'd16) : ((EXT_MAS_AWSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1)) ;
                                                                                nxt_m_fixed_start_awlen_reg = (((EXT_MAS_AWSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[6:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_fixed_burst_ind_cnt = ((i_s_awburst == 2'd0) ? ((((EXT_MAS_AWSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[6:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) : 3'd0) ;
                                                                                nxt_fixed_burst_ind_cnt_reg = ((((EXT_MAS_AWSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[6:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) ;
                                                                                end
                                                                                default : 
                                                                                nxt_m_awlen[ext_mas_cnt] = m_awlen[ext_mas_cnt] ;
                                                                                endcase 
                                                                            end
                                                                    end
                                                                else
                                                                    begin
                                                                        nxt_m_awvalid[ext_mas_cnt] = (m_awready[ext_mas_cnt] ? 1'b0 : m_awvalid[ext_mas_cnt]) ;
                                                                        nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = (m_awready[ext_mas_cnt] ? TOTAL_EXTMAS_CNT : ext_mas_awr_gnt_reg[ext_mas_cnt]) ;
                                                                        //nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = m_awready[ext_mas_cnt] ? 6'd32 :ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                                        nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                                        nxt_m_awid[ext_mas_cnt] = m_awid[ext_mas_cnt] ;
                                                                        nxt_m_awlen[ext_mas_cnt] = m_awlen[ext_mas_cnt] ;
                                                                        nxt_m_awprot[ext_mas_cnt] = m_awprot[ext_mas_cnt] ;
                                                                    end
                                                        end
                                                end
                                        end
                                    else
                                        begin : AXI4LITE_EXTMAS_BLK
                                            if (((EXT_MAS_AXI_DATA_WIDTH_INT < EXT_SLV_AXI_DATA_WIDTH) || (EXT_MAS_AXI_DATA_WIDTH_INT == EXT_SLV_AXI_DATA_WIDTH))) 
                                                begin : EQ_UP_BLK
                                                    assign m_awready[ext_mas_cnt] = ((~wr_issue_full) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_awready[ext_mas_cnt]       = ~ext_slv_wr_issue_ff_full  & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt);
                                                    //assign m_split_awready[ext_mas_cnt] = 1'b0;
                                                    assign m_split_awready[ext_mas_cnt] = ((~wr_issue_full) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_split_awready[ext_mas_cnt] = ~wr_issue_full;
                                                    //assign m_split_awready[ext_mas_cnt] = ~ext_slv_wr_issue_ff_full;
                                                    assign aw_b_complete[ext_mas_cnt] = 1'b0 ; 
                                                    //assign  m_awsize  [ext_mas_cnt]   = clog2(EXT_MAS_AXI_DATA_WIDTH_INT/8);
                                                    assign m_awsize[ext_mas_cnt] = (((EXT_MAS_AXI_DATA_WIDTH_INT / 8) == 1) ? 3'd0 : clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8))) ; 
                                                    assign m_awburst[ext_mas_cnt] = 2'd1 ; // INCR type 
                                                    assign m_awlen[ext_mas_cnt] = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ; 
                                                    assign m_awcache[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awlock[ext_mas_cnt] = 1'd0 ; 
                                                    assign m_awqos[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awregion[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((~aresetn_i)) 
                                                                begin
                                                                    m_awvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_awaddr[ext_mas_cnt] <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                                                    m_awid[ext_mas_cnt] <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                                                    m_awprot[ext_mas_cnt] <=  3'd0 ;
                                                                    ext_mas_awr_gnt_reg[ext_mas_cnt] <=  TOTAL_EXTMAS_CNT ;
                                                                    //ext_mas_awr_gnt_reg[ext_mas_cnt]       <= 6'd32;
                                                                end
                                                            else
                                                                begin
                                                                    m_awvalid[ext_mas_cnt] <=  nxt_m_awvalid[ext_mas_cnt] ;
                                                                    m_awaddr[ext_mas_cnt] <=  nxt_m_awaddr[ext_mas_cnt] ;
                                                                    m_awid[ext_mas_cnt] <=  nxt_m_awid[ext_mas_cnt] ;
                                                                    m_awprot[ext_mas_cnt] <=  nxt_m_awprot[ext_mas_cnt] ;
                                                                    ext_mas_awr_gnt_reg[ext_mas_cnt] <=  nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                                end
                                                        end
                                                    always
                                                        @(*)
                                                        begin
                                                            nxt_m_awvalid[ext_mas_cnt] = m_awvalid[ext_mas_cnt] ;
                                                            nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                            nxt_m_awid[ext_mas_cnt] = m_awid[ext_mas_cnt] ;
                                                            nxt_m_awprot[ext_mas_cnt] = m_awprot[ext_mas_cnt] ;
                                                            nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                            if ((((i_s_awvalid & o_s_awready) & (i_s_ext_mas_awr_gnt == ext_mas_cnt)) & (!m_awvalid))) 
                                                                //if ( i_s_awvalid & o_s_awready & (~wr_issue_full) & ( i_s_ext_mas_awr_gnt == ext_mas_cnt)  & (!(m_awvalid)))
                                                                //if ( i_s_awvalid & o_s_awready & (~wr_issue_full) & ( i_s_ext_mas_awr_gnt == ext_mas_cnt)  )
                                                                begin
                                                                    nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = i_s_ext_mas_awr_gnt ;
                                                                    nxt_m_awvalid[ext_mas_cnt] = i_s_awvalid ;
                                                                    nxt_m_awaddr[ext_mas_cnt] = i_s_awaddr ;
                                                                    nxt_m_awid[ext_mas_cnt] = i_s_awid ;
                                                                    nxt_m_awprot[ext_mas_cnt] = i_s_awprot ;
                                                                end
                                                            else
                                                                begin
                                                                    nxt_m_awvalid[ext_mas_cnt] = (m_awready[ext_mas_cnt] ? 1'b0 : m_awvalid[ext_mas_cnt]) ;
                                                                    nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = (m_awready[ext_mas_cnt] ? TOTAL_EXTMAS_CNT : ext_mas_awr_gnt_reg[ext_mas_cnt]) ;
                                                                    //nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = m_awready[ext_mas_cnt] ? 6'd32 :ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                                    nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                                    nxt_m_awid[ext_mas_cnt] = m_awid[ext_mas_cnt] ;
                                                                    nxt_m_awprot[ext_mas_cnt] = m_awprot[ext_mas_cnt] ;
                                                                end
                                                        end
                                                end
                                            else
                                                begin : DOWN_BLK
                                                    localparam DOWNSIZE_FACTOR = (EXT_MAS_AXI_DATA_WIDTH_INT / EXT_SLV_AXI_DATA_WIDTH) ; 
                                                    localparam BIT_SELECT = ((EXT_SLV_AXI_DATA_WIDTH == 8) ? 0 : ((EXT_SLV_AXI_DATA_WIDTH == 16) ? 1 : 2)) ; // AXI4LITE->AXI4 i.e 32 -> 16,8 and 64->32,16,8
                                                    assign m_awready[ext_mas_cnt] = ((~wr_issue_full) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    assign m_split_awready[ext_mas_cnt] = ((~wr_issue_full) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_split_awready[ext_mas_cnt] = ~wr_issue_full;
                                                    //assign m_awready[ext_mas_cnt]       = ~ext_slv_wr_issue_ff_full & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt) ;
                                                    //assign m_split_awready[ext_mas_cnt] = ~ext_slv_wr_issue_ff_full;
                                                    //assign m_awready[ext_mas_cnt]       = ~ext_slv_wr_issue_ff_full;
                                                    //assign m_split_awready[ext_mas_cnt] = ~ext_slv_wr_issue_ff_full;
                                                    assign aw_b_complete[ext_mas_cnt] = 1'b0 ; 
                                                    assign m_awsize[ext_mas_cnt] = (((EXT_SLV_AXI_DATA_WIDTH / 8) == 1) ? 3'd0 : clog2((EXT_SLV_AXI_DATA_WIDTH / 8))) ; 
                                                    assign m_awburst[ext_mas_cnt] = 2'd1 ; // INCR type 
                                                    assign m_awcache[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awlock[ext_mas_cnt] = 1'd0 ; 
                                                    assign m_awqos[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awregion[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((~aresetn_i)) 
                                                                begin
                                                                    m_awvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_awaddr[ext_mas_cnt] <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                                                    m_awid[ext_mas_cnt] <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                                                    m_awlen[ext_mas_cnt] <=  {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ;
                                                                    m_awprot[ext_mas_cnt] <=  3'd0 ;
                                                                    ext_mas_awr_gnt_reg[ext_mas_cnt] <=  TOTAL_EXTMAS_CNT ;
                                                                    //ext_mas_awr_gnt_reg[ext_mas_cnt]       <= 6'd32;
                                                                end
                                                            else
                                                                begin
                                                                    m_awvalid[ext_mas_cnt] <=  nxt_m_awvalid[ext_mas_cnt] ;
                                                                    m_awaddr[ext_mas_cnt] <=  nxt_m_awaddr[ext_mas_cnt] ;
                                                                    m_awid[ext_mas_cnt] <=  nxt_m_awid[ext_mas_cnt] ;
                                                                    m_awlen[ext_mas_cnt] <=  nxt_m_awlen[ext_mas_cnt] ;
                                                                    m_awprot[ext_mas_cnt] <=  nxt_m_awprot[ext_mas_cnt] ;
                                                                    ext_mas_awr_gnt_reg[ext_mas_cnt] <=  nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                                end
                                                        end
                                                    always
                                                        @(*)
                                                        begin
                                                            nxt_m_awvalid[ext_mas_cnt] = m_awvalid[ext_mas_cnt] ;
                                                            nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                            nxt_m_awid[ext_mas_cnt] = m_awid[ext_mas_cnt] ;
                                                            nxt_m_awlen[ext_mas_cnt] = m_awlen[ext_mas_cnt] ;
                                                            nxt_m_awprot[ext_mas_cnt] = m_awprot[ext_mas_cnt] ;
                                                            nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                            if ((((i_s_awvalid & o_s_awready) & (i_s_ext_mas_awr_gnt == ext_mas_cnt)) & (!m_awvalid))) 
                                                                //if ( i_s_awvalid & o_s_awready & (~wr_issue_full) & ( i_s_ext_mas_awr_gnt == ext_mas_cnt)  & (!(m_awvalid)))
                                                                //if ( i_s_awvalid & o_s_awready & (~wr_issue_full) & ( i_s_ext_mas_awr_gnt == ext_mas_cnt)  )
                                                                begin
                                                                    nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = i_s_ext_mas_awr_gnt ;
                                                                    nxt_m_awvalid[ext_mas_cnt] = i_s_awvalid ;
                                                                    nxt_m_awaddr[ext_mas_cnt] = i_s_awaddr ;
                                                                    nxt_m_awid[ext_mas_cnt] = i_s_awid ;
                                                                    nxt_m_awlen[ext_mas_cnt] = ((DOWNSIZE_FACTOR - i_s_awaddr[BIT_SELECT +: clog2(DOWNSIZE_FACTOR)]) - 1'd1) ;
                                                                    nxt_m_awprot[ext_mas_cnt] = i_s_awprot ;
                                                                end
                                                            else
                                                                begin
                                                                    nxt_m_awvalid[ext_mas_cnt] = (m_awready[ext_mas_cnt] ? 1'b0 : m_awvalid[ext_mas_cnt]) ;
                                                                    nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = (m_awready[ext_mas_cnt] ? TOTAL_EXTMAS_CNT : ext_mas_awr_gnt_reg[ext_mas_cnt]) ;
                                                                    //nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = m_awready[ext_mas_cnt] ? 6'd32 :ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                                    nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                                    nxt_m_awid[ext_mas_cnt] = m_awid[ext_mas_cnt] ;
                                                                    nxt_m_awlen[ext_mas_cnt] = m_awlen[ext_mas_cnt] ;
                                                                    nxt_m_awprot[ext_mas_cnt] = m_awprot[ext_mas_cnt] ;
                                                                end
                                                        end
                                                end
                                        end
                                end
                            else
                                begin : NO_EXT_MAS_CONNECT_BLK
                                    assign m_awvalid[ext_mas_cnt] = 1'b0 ; 
                                    assign m_awaddr[ext_mas_cnt] = {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ; 
                                    assign m_awid[ext_mas_cnt] = {EXT_SLV_AXI_ID_WIDTH{1'b0}} ; 
                                    assign m_awsize[ext_mas_cnt] = 3'd0 ; 
                                    assign m_awlen[ext_mas_cnt] = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ; 
                                    assign m_awburst[ext_mas_cnt] = 2'd0 ; 
                                    assign m_awcache[ext_mas_cnt] = 4'd0 ; 
                                    assign m_awprot[ext_mas_cnt] = 3'd0 ; 
                                    assign m_awlock[ext_mas_cnt] = 1'd0 ; 
                                    assign m_awqos[ext_mas_cnt] = 4'd0 ; 
                                    assign m_awregion[ext_mas_cnt] = 4'd0 ; 
                                    assign m_awuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                    assign m_awready[ext_mas_cnt] = 1'b0 ; 
                                    assign m_split_awready[ext_mas_cnt] = 1'b0 ; 
                                    assign aw_b_complete[ext_mas_cnt] = 1'b0 ; 
                                end
                        end
                    end
                else
                    begin : AXI4LITE_EXTSLV_AW_BLK
                        for (ext_mas_cnt = 0;(ext_mas_cnt < TOTAL_EXTMAS_CNT);ext_mas_cnt = (ext_mas_cnt + 1))
                        begin : EXT_MAS_BLK
                            localparam EXT_MAS_AXI_DATA_WIDTH_INT = EXT_MAS_AXI_DATA_WIDTH[(ext_mas_cnt * 11) +: 11] ; 
                            // for  - ext_mas_cnt end
                            if ((EXT_SLV_CONNECTED_MASTER[ext_mas_cnt] == 1)) 
                                begin : EXTSLV_CNCT_EXTMAS_BLK
                                    if ((EXT_MAS_AXI_PROTOCOL[ext_mas_cnt] == 0)) 
                                        begin : AXI4_EXTMAS_BLK
                                            if (((EXT_MAS_AXI_DATA_WIDTH_INT == EXT_SLV_AXI_DATA_WIDTH) || (EXT_MAS_AXI_DATA_WIDTH_INT < EXT_SLV_AXI_DATA_WIDTH))) 
                                                begin : EQ_UP_BLK
                                                    //localparam EXT_MAS_BYTE_CNT = EXT_MAS_AXI_DATA_WIDTH_INT/8;
                                                    localparam EXT_MAS_BIT_SELECT = ((EXT_MAS_AXI_DATA_WIDTH_INT == 8) ? 0 : ((EXT_MAS_AXI_DATA_WIDTH_INT == 16) ? 1 : ((EXT_MAS_AXI_DATA_WIDTH_INT == 32) ? 2 : ((EXT_MAS_AXI_DATA_WIDTH_INT == 64) ? 3 : ((EXT_MAS_AXI_DATA_WIDTH_INT == 128) ? 4 : ((EXT_MAS_AXI_DATA_WIDTH_INT == 256) ? 5 : ((EXT_MAS_AXI_DATA_WIDTH_INT == 512) ? 6 : 7))))))) ; 
                                                    logic ext_slv_wlast_split_ff_wr_en ; 
                                                    logic ext_slv_wlast_split_ff_rd_en ; 
                                                    logic ext_slv_wlast_split_ff_wdata ; 
                                                    logic ext_slv_wlast_split_ff_rdata ; 
                                                    logic ext_slv_wlast_split_ff_full ; 
                                                    logic ext_slv_wlast_split_ff_empty ; 
                                                    logic [7:0] aw_wr_cnt, 
                                                        nxt_aw_wr_cnt ; 
                                                    logic [1:0] btype, 
                                                        nxt_btype ; 
                                                    assign ext_slv_wlast_split_ff_wdata = m_awready[ext_mas_cnt] ; // since only for last split awready is given
                                                    //assign ext_slv_wlast_split_ff_wdata  = o_s_awready; // since only for last split awready is given
                                                    assign ext_slv_wlast_split_ff_wr_en = (((o_ext_slv_prt_awvalid_ff & (!ext_slv_wlast_split_ff_full)) & (!ext_slv_wr_issue_ff_full)) & (o_ext_slv_prt_awid_ff[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                    //   assign ext_slv_wlast_split_ff_rd_en  = (~ext_slv_wlast_split_ff_empty & i_ext_slv_prt_bvalid & (ext_slv_awid_ff_rdata[EXT_SLV_AXI_ID_WIDTH-1:EXT_MAS_AXI_ID_WIDTH]==ext_mas_cnt) & (!ext_slv_wresp_ff_full));
                                                    assign ext_slv_wlast_split_ff_rd_en = ((((~ext_slv_wlast_split_ff_empty) & i_ext_slv_prt_bvalid) & (ext_slv_awid_ff_rdata[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) & o_ext_slv_prt_bready) ; 
                                                    if ((LATTICE_FIFO == 1)) 
                                                        begin : LSCC_FF_BLK
                                                        end
                                                    else
                                                        begin : CUSTOM_FF_BLK
                                                            axi4_interconnect_ipgen_gen_fifo #(AW_AWID,
                                                                    1,
                                                                    0,
                                                                    EXT_SLV_AXI_WR_ISSUE) u_ext_slv_wlast_split_fifo (// Pointer Width
                                                                    // Data Width { size}
                                                                    // Whether Output needs to be registered or not
                                                                    // Number of entries in FIFO
                                                                    //EXT_SLV_AXI_WR_ISSUE_DEPTH// Number of entries in FIFO
                                                                    .clk(aclk_i), 
                                                                        .aresetn_i(aresetn_i), 
                                                                        .we(ext_slv_wlast_split_ff_wr_en), 
                                                                        .wdata(ext_slv_wlast_split_ff_wdata), 
                                                                        .re(ext_slv_wlast_split_ff_rd_en), 
                                                                        .rdata(ext_slv_wlast_split_ff_rdata), 
                                                                        .full(ext_slv_wlast_split_ff_full), 
                                                                        .pre_full(), 
                                                                        .empty(ext_slv_wlast_split_ff_empty)) ; 
                                                        end
                                                    assign m_awready[ext_mas_cnt] = (((|aw_wr_cnt) || (|nxt_aw_wr_cnt)) ? 1'b0 : ((((~wr_issue_full) & (!ext_slv_wlast_split_ff_full)) & (!ext_slv_awid_ff_full)) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt))) ; 
                                                    assign m_split_awready[ext_mas_cnt] = ((((~wr_issue_full) & (!ext_slv_wlast_split_ff_full)) & (!ext_slv_awid_ff_full)) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_split_awready[ext_mas_cnt] = ~wr_issue_full & (!ext_slv_wlast_split_ff_full) & (!ext_slv_awid_ff_full) ;
                                                    assign aw_b_complete[ext_mas_cnt] = (((!ext_slv_wlast_split_ff_rdata) & i_ext_slv_prt_bvalid) & (ext_slv_awid_ff_rdata[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                    //assign m_awready[ext_mas_cnt]       = (|aw_wr_cnt) || (|nxt_aw_wr_cnt) ? 1'b0 : ~ext_slv_wr_issue_ff_full;
                                                    //assign m_split_awready[ext_mas_cnt] = ~ext_slv_wr_issue_ff_full;
                                                    //assign  m_awsize  [ext_mas_cnt]   = 3'd0;// dont care
                                                    assign m_awlen[ext_mas_cnt] = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ; 
                                                    assign m_awburst[ext_mas_cnt] = 2'd0 ; // dont care
                                                    assign m_awcache[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awlock[ext_mas_cnt] = 1'd0 ; 
                                                    assign m_awqos[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awregion[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((~aresetn_i)) 
                                                                begin
                                                                    m_awvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_awaddr[ext_mas_cnt] <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                                                    m_awid[ext_mas_cnt] <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                                                    m_awprot[ext_mas_cnt] <=  3'd0 ;
                                                                    m_awsize[ext_mas_cnt] <=  3'd0 ;
                                                                    aw_wr_cnt <=  8'd0 ;
                                                                    ext_mas_awr_gnt_reg[ext_mas_cnt] <=  TOTAL_EXTMAS_CNT ;
                                                                    //ext_mas_awr_gnt_reg[ext_mas_cnt]       <= 6'd32;
                                                                    btype <=  2'd0 ;
                                                                end
                                                            else
                                                                begin
                                                                    m_awvalid[ext_mas_cnt] <=  nxt_m_awvalid[ext_mas_cnt] ;
                                                                    m_awaddr[ext_mas_cnt] <=  nxt_m_awaddr[ext_mas_cnt] ;
                                                                    m_awid[ext_mas_cnt] <=  nxt_m_awid[ext_mas_cnt] ;
                                                                    m_awprot[ext_mas_cnt] <=  nxt_m_awprot[ext_mas_cnt] ;
                                                                    m_awsize[ext_mas_cnt] <=  nxt_m_awsize[ext_mas_cnt] ;
                                                                    aw_wr_cnt <=  nxt_aw_wr_cnt ;
                                                                    ext_mas_awr_gnt_reg[ext_mas_cnt] <=  nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                                    btype <=  nxt_btype ;
                                                                end
                                                        end
                                                    always
                                                        @(*)
                                                        begin
                                                            nxt_m_awvalid[ext_mas_cnt] = m_awvalid[ext_mas_cnt] ;
                                                            nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                            nxt_m_awprot[ext_mas_cnt] = m_awprot[ext_mas_cnt] ;
                                                            nxt_m_awid[ext_mas_cnt] = m_awid[ext_mas_cnt] ;
                                                            nxt_m_awsize[ext_mas_cnt] = m_awsize[ext_mas_cnt] ;
                                                            nxt_aw_wr_cnt = aw_wr_cnt ;
                                                            nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                            nxt_btype = btype ;
                                                            if ((|aw_wr_cnt)) 
                                                                begin
                                                                    if ((m_awvalid[ext_mas_cnt] & m_split_awready[ext_mas_cnt])) 
                                                                        //if( m_awvalid [ext_mas_cnt] &  m_split_awready[ext_mas_cnt] & (~wr_issue_full))
                                                                        //if(i_s_awvalid & o_s_split_awready & (~wr_issue_full) & ( i_s_ext_mas_awr_gnt == ext_mas_cnt))
                                                                        begin
                                                                            nxt_aw_wr_cnt = (aw_wr_cnt - 1'd1) ;
                                                                            nxt_m_awaddr[ext_mas_cnt] = ((btype == 2'd0) ? m_awaddr[ext_mas_cnt] : ((m_awsize[ext_mas_cnt] == 3'd0) ? (m_awaddr[ext_mas_cnt] + 3'd1) : ((m_awsize[ext_mas_cnt] == 3'd1) ? ({m_awaddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):1],
                                                                                1'b0} + 3'd2) : ((m_awsize[ext_mas_cnt] == 3'd2) ? ({m_awaddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):2],
                                                                                2'd0} + 3'd4) : ({m_awaddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):3],
                                                                                3'd0} + 3'd8))))) ;
                                                                            //nxt_m_awaddr  [ext_mas_cnt]   = btype == 2'd0 ? m_awaddr[ext_mas_cnt]  : {m_awaddr[ext_mas_cnt][EXT_SLV_AXI_ADDR_WIDTH-1:EXT_MAS_BIT_SELECT],{EXT_MAS_BIT_SELECT{1'b0}} } + EXT_MAS_BYTE_CNT;
                                                                            //nxt_m_awaddr  [ext_mas_cnt]   = {i_s_awaddr[EXT_SLV_AXI_ADDR_WIDTH-1:EXT_MAS_BIT_SELECT],{EXT_MAS_BIT_SELECT{1'b0}} } + EXT_MAS_BYTE_CNT;
                                                                        end
                                                                    else
                                                                        begin
                                                                            nxt_aw_wr_cnt = aw_wr_cnt ;
                                                                            nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                                        end
                                                                end
                                                            else
                                                                if ((((i_s_awvalid & o_s_awready) & (i_s_ext_mas_awr_gnt == ext_mas_cnt)) & (!m_awvalid))) 
                                                                    //else if ( i_s_awvalid & o_s_awready & (~wr_issue_full) & ( i_s_ext_mas_awr_gnt == ext_mas_cnt)  & (!(m_awvalid)))
                                                                    //else if ( i_s_awvalid & o_s_awready & (~wr_issue_full) & ( i_s_ext_mas_awr_gnt == ext_mas_cnt)  )
                                                                    begin
                                                                        nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = i_s_ext_mas_awr_gnt ;
                                                                        nxt_aw_wr_cnt = i_s_awlen ;
                                                                        nxt_m_awvalid[ext_mas_cnt] = i_s_awvalid ;
                                                                        nxt_m_awaddr[ext_mas_cnt] = i_s_awaddr ;
                                                                        nxt_m_awid[ext_mas_cnt] = i_s_awid ;
                                                                        nxt_m_awprot[ext_mas_cnt] = i_s_awprot ;
                                                                        nxt_m_awsize[ext_mas_cnt] = i_s_awsize ;
                                                                        nxt_btype = i_s_awburst ;
                                                                    end
                                                                else
                                                                    begin
                                                                        nxt_aw_wr_cnt = aw_wr_cnt ;
                                                                        nxt_m_awvalid[ext_mas_cnt] = (m_awready[ext_mas_cnt] ? 1'b0 : m_awvalid[ext_mas_cnt]) ;
                                                                        nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = (m_awready[ext_mas_cnt] ? TOTAL_EXTMAS_CNT : ext_mas_awr_gnt_reg[ext_mas_cnt]) ;
                                                                        //nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = m_awready[ext_mas_cnt] ? 6'd32 :ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                                        nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                                        nxt_m_awid[ext_mas_cnt] = m_awid[ext_mas_cnt] ;
                                                                        nxt_m_awprot[ext_mas_cnt] = m_awprot[ext_mas_cnt] ;
                                                                    end
                                                        end
                                                end
                                            else
                                                begin : DOWN_BLK
                                                    localparam DOWNSIZE_FACTOR = (EXT_MAS_AXI_DATA_WIDTH_INT / EXT_SLV_AXI_DATA_WIDTH) ; 
                                                    localparam ADDR_BIT_SELECT = ((EXT_SLV_AXI_DATA_WIDTH == 32) ? 2 : 3) ; //AXI4 master -> AXI4lite slave
                                                    localparam EXT_SLV_BYTE_CNT = (EXT_SLV_AXI_DATA_WIDTH / 8) ; 
                                                    localparam WR_CNT_WIDTH = ((DOWNSIZE_FACTOR == 2) ? 9 : ((DOWNSIZE_FACTOR == 4) ? 10 : ((DOWNSIZE_FACTOR == 8) ? 11 : ((DOWNSIZE_FACTOR == 16) ? 12 : 13)))) ; 
                                                    localparam EXT_MAS_AWSIZE_3_IN_BYTES = 8 ; 
                                                    localparam EXT_MAS_AWSIZE_4_IN_BYTES = 16 ; 
                                                    localparam EXT_MAS_AWSIZE_5_IN_BYTES = 32 ; 
                                                    localparam EXT_MAS_AWSIZE_6_IN_BYTES = 64 ; 
                                                    localparam EXT_MAS_AWSIZE_7_IN_BYTES = 128 ; 
                                                    logic [(WR_CNT_WIDTH - 1):0] aw_wr_cnt, 
                                                        nxt_aw_wr_cnt ; 
                                                    logic [(WR_CNT_WIDTH - 1):0] aw_wr_cnt_reg, 
                                                        nxt_aw_wr_cnt_reg ; 
                                                    logic ext_slv_wlast_split_ff_wr_en ; 
                                                    logic ext_slv_wlast_split_ff_rd_en ; 
                                                    logic ext_slv_wlast_split_ff_wdata ; 
                                                    logic ext_slv_wlast_split_ff_rdata ; 
                                                    logic ext_slv_wlast_split_ff_full ; 
                                                    logic ext_slv_wlast_split_ff_empty ; 
                                                    logic [6:0] ext_mas_req_size_bytes ; 
                                                    logic nxt_req_size_le_ext_slv, 
                                                        req_size_le_ext_slv ; 
                                                    logic nxt_init_flag, 
                                                        init_flag ; 
                                                    logic [7:0] nxt_aw_fixed_len_cnt, 
                                                        aw_fixed_len_cnt ; 
                                                    assign ext_slv_wlast_split_ff_wdata = m_awready[ext_mas_cnt] ; // since only for last split awready is given
                                                    assign ext_slv_wlast_split_ff_wr_en = (((o_ext_slv_prt_awvalid_ff & (!ext_slv_wlast_split_ff_full)) & (!ext_slv_wr_issue_ff_full)) & (o_ext_slv_prt_awid_ff[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                    //   assign ext_slv_wlast_split_ff_rd_en  = (~ext_slv_wlast_split_ff_empty & i_ext_slv_prt_bvalid & (ext_slv_awid_ff_rdata[EXT_SLV_AXI_ID_WIDTH-1:EXT_MAS_AXI_ID_WIDTH]==ext_mas_cnt) & (!ext_slv_wresp_ff_full));
                                                    assign ext_slv_wlast_split_ff_rd_en = ((((~ext_slv_wlast_split_ff_empty) & i_ext_slv_prt_bvalid) & (ext_slv_awid_ff_rdata[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) & o_ext_slv_prt_bready) ; 
                                                    if ((LATTICE_FIFO == 1)) 
                                                        begin : LSCC_FF_BLK
                                                        end
                                                    else
                                                        begin : CUSTOM_FF_BLK
                                                            axi4_interconnect_ipgen_gen_fifo #(AW_AWID,
                                                                    1,
                                                                    0,
                                                                    EXT_SLV_AXI_WR_ISSUE) u_ext_slv_wlast_split_fifo (// Pointer Width
                                                                    // Data Width { size}
                                                                    // Whether Output needs to be registered or not
                                                                    // Number of entries in FIFO
                                                                    //EXT_SLV_AXI_WR_ISSUE_DEPTH// Number of entries in FIFO
                                                                    .clk(aclk_i), 
                                                                        .aresetn_i(aresetn_i), 
                                                                        .we(ext_slv_wlast_split_ff_wr_en), 
                                                                        .wdata(ext_slv_wlast_split_ff_wdata), 
                                                                        .re(ext_slv_wlast_split_ff_rd_en), 
                                                                        .rdata(ext_slv_wlast_split_ff_rdata), 
                                                                        .full(ext_slv_wlast_split_ff_full), 
                                                                        .pre_full(), 
                                                                        .empty(ext_slv_wlast_split_ff_empty)) ; 
                                                        end
                                                    assign m_awready[ext_mas_cnt] = ((((|aw_fixed_len_cnt) || (|aw_wr_cnt)) || (|nxt_aw_wr_cnt)) ? 1'b0 : ((((~wr_issue_full) & (!ext_slv_wlast_split_ff_full)) & (!ext_slv_awid_ff_full)) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt))) ; 
                                                    //assign m_awready[ext_mas_cnt]       = (|aw_wr_cnt) || (|nxt_aw_wr_cnt) ? 1'b0 : ~ext_slv_wr_issue_ff_full & (!ext_slv_wlast_split_ff_full) & (!ext_slv_awid_ff_full) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt) ;
                                                    //assign m_awready[ext_mas_cnt]       = (|aw_wr_cnt) || (|nxt_aw_wr_cnt) ? 1'b0 : ~ext_slv_wr_issue_ff_full & (!ext_slv_wlast_split_ff_full);
                                                    assign m_split_awready[ext_mas_cnt] = ((((~wr_issue_full) & (!ext_slv_wlast_split_ff_full)) & (!ext_slv_awid_ff_full)) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_split_awready[ext_mas_cnt] = ~wr_issue_full & (!ext_slv_wlast_split_ff_full) & (!ext_slv_awid_ff_full) ;
                                                    //assign m_split_awready[ext_mas_cnt] = ~ext_slv_wr_issue_ff_full & (!ext_slv_wlast_split_ff_full) & (!ext_slv_awid_ff_full) ;
                                                    assign aw_b_complete[ext_mas_cnt] = (((!ext_slv_wlast_split_ff_rdata) & i_ext_slv_prt_bvalid) & (ext_slv_awid_ff_rdata[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                    //assign m_awready[ext_mas_cnt]       = (|nxt_aw_wr_cnt) || (|aw_wr_cnt) ? 1'b0 : ~ext_slv_wr_issue_ff_full;
                                                    //assign m_split_awready[ext_mas_cnt] = ~ext_slv_wr_issue_ff_full;
                                                    //assign  m_awsize  [ext_mas_cnt]   = 3'd0;// dont care
                                                    assign m_awlen[ext_mas_cnt] = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ; 
                                                    //assign  m_awburst [ext_mas_cnt]   = 2'd0; // dont care
                                                    assign m_awcache[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awlock[ext_mas_cnt] = 1'd0 ; 
                                                    assign m_awqos[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awregion[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((~aresetn_i)) 
                                                                begin
                                                                    m_awvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_awaddr[ext_mas_cnt] <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                                                    m_awid[ext_mas_cnt] <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                                                    m_awprot[ext_mas_cnt] <=  3'd0 ;
                                                                    m_awburst[ext_mas_cnt] <=  2'd0 ;
                                                                    aw_wr_cnt <=  {WR_CNT_WIDTH{1'b0}} ;
                                                                    aw_wr_cnt_reg <=  {WR_CNT_WIDTH{1'b0}} ;
                                                                    ext_mas_awr_gnt_reg[ext_mas_cnt] <=  TOTAL_EXTMAS_CNT ;
                                                                    //ext_mas_awr_gnt_reg[ext_mas_cnt]       <= 6'd32;
                                                                    m_awsize[ext_mas_cnt] <=  3'd0 ;
                                                                    req_size_le_ext_slv <=  1'b0 ;
                                                                    init_flag <=  1'b0 ;
                                                                    aw_fixed_len_cnt <=  8'd0 ;
                                                                end
                                                            else
                                                                begin
                                                                    m_awvalid[ext_mas_cnt] <=  nxt_m_awvalid[ext_mas_cnt] ;
                                                                    m_awaddr[ext_mas_cnt] <=  nxt_m_awaddr[ext_mas_cnt] ;
                                                                    m_awid[ext_mas_cnt] <=  nxt_m_awid[ext_mas_cnt] ;
                                                                    m_awprot[ext_mas_cnt] <=  nxt_m_awprot[ext_mas_cnt] ;
                                                                    m_awburst[ext_mas_cnt] <=  nxt_m_awburst[ext_mas_cnt] ;
                                                                    aw_wr_cnt <=  nxt_aw_wr_cnt ;
                                                                    aw_wr_cnt_reg <=  nxt_aw_wr_cnt_reg ;
                                                                    ext_mas_awr_gnt_reg[ext_mas_cnt] <=  nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                                    m_awsize[ext_mas_cnt] <=  nxt_m_awsize[ext_mas_cnt] ;
                                                                    req_size_le_ext_slv <=  nxt_req_size_le_ext_slv ;
                                                                    init_flag <=  nxt_init_flag ;
                                                                    aw_fixed_len_cnt <=  nxt_aw_fixed_len_cnt ;
                                                                end
                                                        end
                                                    always
                                                        @(*)
                                                        begin
                                                            nxt_m_awvalid[ext_mas_cnt] = m_awvalid[ext_mas_cnt] ;
                                                            nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                            nxt_m_awprot[ext_mas_cnt] = m_awprot[ext_mas_cnt] ;
                                                            nxt_m_awburst[ext_mas_cnt] = m_awburst[ext_mas_cnt] ;
                                                            nxt_m_awid[ext_mas_cnt] = m_awid[ext_mas_cnt] ;
                                                            nxt_aw_wr_cnt = aw_wr_cnt ;
                                                            nxt_aw_wr_cnt_reg = aw_wr_cnt_reg ;
                                                            nxt_init_flag = init_flag ;
                                                            nxt_aw_fixed_len_cnt = aw_fixed_len_cnt ;
                                                            nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                            nxt_m_awsize[ext_mas_cnt] = m_awsize[ext_mas_cnt] ;
                                                            nxt_req_size_le_ext_slv = req_size_le_ext_slv ;
                                                            if (((|aw_wr_cnt) || (|aw_fixed_len_cnt))) 
                                                                begin
                                                                    if ((m_awvalid[ext_mas_cnt] & m_split_awready[ext_mas_cnt])) 
                                                                        //if( m_awvalid [ext_mas_cnt] &  m_split_awready[ext_mas_cnt] & (~wr_issue_full))
                                                                        begin
                                                                            if ((m_awburst[ext_mas_cnt] == 2'd0)) 
                                                                                // fixed
                                                                                begin
                                                                                nxt_init_flag = 1'b1 ;
                                                                                nxt_aw_wr_cnt_reg = (init_flag ? aw_wr_cnt_reg : aw_wr_cnt) ;
                                                                                nxt_aw_wr_cnt = ((|aw_wr_cnt) ? (aw_wr_cnt - 1'd1) : (init_flag ? aw_wr_cnt_reg : aw_wr_cnt)) ;
                                                                                nxt_aw_fixed_len_cnt = ((|aw_wr_cnt) ? aw_fixed_len_cnt : (aw_fixed_len_cnt - 1'd1)) ;
                                                                                nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                                                end
                                                                            else
                                                                                // INCR
                                                                                begin
                                                                                nxt_aw_wr_cnt = (aw_wr_cnt - 1'd1) ;
                                                                                if (((m_awsize[ext_mas_cnt] <= ADDR_BIT_SELECT) && req_size_le_ext_slv)) 
                                                                                begin
                                                                                case (m_awsize[ext_mas_cnt])
                                                                                3'd0 : 
                                                                                nxt_m_awaddr[ext_mas_cnt] = ({m_awaddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):0]} + ext_mas_req_size_bytes) ;
                                                                                3'd1 : 
                                                                                nxt_m_awaddr[ext_mas_cnt] = ({m_awaddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):1],
                                                                                1'b0} + ext_mas_req_size_bytes) ;
                                                                                3'd2 : 
                                                                                nxt_m_awaddr[ext_mas_cnt] = ({m_awaddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):2],
                                                                                2'd0} + ext_mas_req_size_bytes) ;
                                                                                3'd3 : 
                                                                                nxt_m_awaddr[ext_mas_cnt] = ({m_awaddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):3],
                                                                                3'd0} + ext_mas_req_size_bytes) ;
                                                                                default : 
                                                                                nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                                                endcase 
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_m_awaddr[ext_mas_cnt] = ({m_awaddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):ADDR_BIT_SELECT],
                                                                                {ADDR_BIT_SELECT{1'b0}}} + EXT_SLV_BYTE_CNT) ;
                                                                                end
                                                                                end
                                                                        end
                                                                    else
                                                                        begin
                                                                            nxt_aw_wr_cnt = aw_wr_cnt ;
                                                                            nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                                        end
                                                                end
                                                            else
                                                                if ((((i_s_awvalid & o_s_awready) & (i_s_ext_mas_awr_gnt == ext_mas_cnt)) & (!m_awvalid))) 
                                                                    //else if ( i_s_awvalid & o_s_awready & (~wr_issue_full) & ( i_s_ext_mas_awr_gnt == ext_mas_cnt)  & (!(m_awvalid)))
                                                                    begin
                                                                        nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = i_s_ext_mas_awr_gnt ;
                                                                        nxt_m_awvalid[ext_mas_cnt] = i_s_awvalid ;
                                                                        nxt_m_awid[ext_mas_cnt] = i_s_awid ;
                                                                        nxt_m_awprot[ext_mas_cnt] = i_s_awprot ;
                                                                        nxt_m_awburst[ext_mas_cnt] = i_s_awburst ;
                                                                        if ((i_s_awsize <= ADDR_BIT_SELECT)) 
                                                                            // Narrow transfe with request size is less than or equal to slave bus width
                                                                            begin
                                                                                nxt_aw_wr_cnt = i_s_awlen ;
                                                                                nxt_m_awaddr[ext_mas_cnt] = ((i_s_awburst == 2'd0) ? i_s_awaddr : i_s_awaddr) ;
                                                                                nxt_m_awsize[ext_mas_cnt] = i_s_awsize ;
                                                                                nxt_req_size_le_ext_slv = 1'b1 ;
                                                                            end
                                                                        else
                                                                            // Narrow transfer with request size is greater than slave bus width or Full size
                                                                            begin
                                                                                nxt_m_awsize[ext_mas_cnt] = (((EXT_SLV_AXI_DATA_WIDTH / 8) == 1) ? 3'd0 : clog2((EXT_SLV_AXI_DATA_WIDTH / 8))) ;
                                                                                nxt_m_awaddr[ext_mas_cnt] = ((i_s_awburst == 2'd0) ? {i_s_awaddr[(EXT_SLV_AXI_ADDR_WIDTH - 1):ADDR_BIT_SELECT],
                                                                                {ADDR_BIT_SELECT{1'b0}}} : i_s_awaddr) ;
                                                                                nxt_req_size_le_ext_slv = 1'b0 ;
                                                                                nxt_aw_fixed_len_cnt = ((i_s_awburst == 2'd0) ? i_s_awlen : 8'd0) ;
                                                                                nxt_init_flag = 1'b0 ;
                                                                                //not possible
                                                                                case (i_s_awsize)
                                                                                3'd3 : 
                                                                                nxt_aw_wr_cnt = ((i_s_awburst == 2'd0) ? (((EXT_MAS_AWSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[2:0] >> ADDR_BIT_SELECT)) - 1'b1) : ((((i_s_awlen + 1'd1) << clog2((EXT_MAS_AWSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT))) - (i_s_awaddr[2:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                3'd4 : 
                                                                                nxt_aw_wr_cnt = ((i_s_awburst == 2'd0) ? (((EXT_MAS_AWSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[3:0] >> ADDR_BIT_SELECT)) - 1'b1) : ((((i_s_awlen + 1'd1) << clog2((EXT_MAS_AWSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT))) - (i_s_awaddr[3:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                3'd5 : 
                                                                                nxt_aw_wr_cnt = ((i_s_awburst == 2'd0) ? (((EXT_MAS_AWSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[4:0] >> ADDR_BIT_SELECT)) - 1'b1) : ((((i_s_awlen + 1'd1) << clog2((EXT_MAS_AWSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT))) - (i_s_awaddr[4:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                3'd6 : 
                                                                                nxt_aw_wr_cnt = ((i_s_awburst == 2'd0) ? (((EXT_MAS_AWSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[5:0] >> ADDR_BIT_SELECT)) - 1'b1) : ((((i_s_awlen + 1'd1) << clog2((EXT_MAS_AWSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT))) - (i_s_awaddr[5:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                3'd7 : 
                                                                                nxt_aw_wr_cnt = ((i_s_awburst == 2'd0) ? (((EXT_MAS_AWSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_awaddr[6:0] >> ADDR_BIT_SELECT)) - 1'b1) : ((((i_s_awlen + 1'd1) << clog2((EXT_MAS_AWSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT))) - (i_s_awaddr[6:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                default : 
                                                                                nxt_aw_wr_cnt = aw_wr_cnt ;
                                                                                endcase 
                                                                                //nxt_aw_wr_cnt       = ((i_s_awlen + 1'd1) << ( (1<<i_s_awsize)/EXT_SLV_BYTE_CNT))- i_s_awaddr[i_s_awsize-1 : ADDR_BIT_SELECT] -1'd1;
                                                                                //nxt_aw_wr_cnt       = ((i_s_awlen + 1'd1) << DOWNSIZE_FACTOR_BY2 )- i_s_awaddr[i_s_awsize-1 : ADDR_BIT_SELECT] -1'd1;
                                                                            end
                                                                    end
                                                                else
                                                                    begin
                                                                        nxt_aw_wr_cnt = aw_wr_cnt ;
                                                                        nxt_m_awvalid[ext_mas_cnt] = (m_awready[ext_mas_cnt] ? 1'b0 : m_awvalid[ext_mas_cnt]) ;
                                                                        nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = (m_awready[ext_mas_cnt] ? TOTAL_EXTMAS_CNT : ext_mas_awr_gnt_reg[ext_mas_cnt]) ;
                                                                        //nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = m_awready[ext_mas_cnt] ? 6'd32 :ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                                        nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                                        nxt_m_awid[ext_mas_cnt] = m_awid[ext_mas_cnt] ;
                                                                        nxt_m_awprot[ext_mas_cnt] = m_awprot[ext_mas_cnt] ;
                                                                    end
                                                        end
                                                end
                                        end
                                    else
                                        begin : AXI4LITE_EXTMAS_BLK
                                            if (((EXT_MAS_AXI_DATA_WIDTH_INT < EXT_SLV_AXI_DATA_WIDTH) || (EXT_MAS_AXI_DATA_WIDTH_INT == EXT_SLV_AXI_DATA_WIDTH))) 
                                                begin : EQ_UP_BLK
                                                    assign m_awready[ext_mas_cnt] = (((~wr_issue_full) & (!ext_slv_awid_ff_full)) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_awready[ext_mas_cnt]       = ~ext_slv_wr_issue_ff_full  & (!ext_slv_awid_ff_full) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt);
                                                    //assign m_split_awready[ext_mas_cnt] = 1'b0;
                                                    //assign m_split_awready[ext_mas_cnt] = ~ext_slv_wr_issue_ff_full;
                                                    assign m_split_awready[ext_mas_cnt] = (((~wr_issue_full) & (!ext_slv_awid_ff_full)) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_split_awready[ext_mas_cnt] = ~wr_issue_full & (!ext_slv_awid_ff_full) ;
                                                    //assign m_split_awready[ext_mas_cnt] = ~ext_slv_wr_issue_ff_full & (!ext_slv_awid_ff_full) ;
                                                    assign aw_b_complete[ext_mas_cnt] = 1'b0 ; 
                                                    assign m_awsize[ext_mas_cnt] = 3'd0 ; 
                                                    assign m_awlen[ext_mas_cnt] = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ; 
                                                    assign m_awburst[ext_mas_cnt] = 2'd0 ; 
                                                    assign m_awcache[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awlock[ext_mas_cnt] = 1'd0 ; 
                                                    assign m_awqos[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awregion[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((~aresetn_i)) 
                                                                begin
                                                                    m_awvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_awaddr[ext_mas_cnt] <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                                                    m_awid[ext_mas_cnt] <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                                                    m_awprot[ext_mas_cnt] <=  3'd0 ;
                                                                    ext_mas_awr_gnt_reg[ext_mas_cnt] <=  TOTAL_EXTMAS_CNT ;
                                                                    //ext_mas_awr_gnt_reg[ext_mas_cnt]       <= 6'd32;
                                                                end
                                                            else
                                                                begin
                                                                    m_awvalid[ext_mas_cnt] <=  nxt_m_awvalid[ext_mas_cnt] ;
                                                                    m_awaddr[ext_mas_cnt] <=  nxt_m_awaddr[ext_mas_cnt] ;
                                                                    m_awid[ext_mas_cnt] <=  nxt_m_awid[ext_mas_cnt] ;
                                                                    m_awprot[ext_mas_cnt] <=  nxt_m_awprot[ext_mas_cnt] ;
                                                                    ext_mas_awr_gnt_reg[ext_mas_cnt] <=  nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                                end
                                                        end
                                                    always
                                                        @(*)
                                                        begin
                                                            nxt_m_awvalid[ext_mas_cnt] = m_awvalid[ext_mas_cnt] ;
                                                            nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                            nxt_m_awprot[ext_mas_cnt] = m_awprot[ext_mas_cnt] ;
                                                            nxt_m_awid[ext_mas_cnt] = m_awid[ext_mas_cnt] ;
                                                            nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                            if ((((i_s_awvalid & o_s_awready) & (i_s_ext_mas_awr_gnt == ext_mas_cnt)) & (!m_awvalid))) 
                                                                //if ( i_s_awvalid & o_s_awready & (~wr_issue_full) & ( i_s_ext_mas_awr_gnt == ext_mas_cnt)  & (!(m_awvalid)))
                                                                //if ( i_s_awvalid & o_s_awready & (~wr_issue_full) & ( i_s_ext_mas_awr_gnt == ext_mas_cnt)  )
                                                                begin
                                                                    nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = i_s_ext_mas_awr_gnt ;
                                                                    nxt_m_awvalid[ext_mas_cnt] = i_s_awvalid ;
                                                                    nxt_m_awaddr[ext_mas_cnt] = i_s_awaddr ;
                                                                    nxt_m_awid[ext_mas_cnt] = i_s_awid ;
                                                                    nxt_m_awprot[ext_mas_cnt] = i_s_awprot ;
                                                                end
                                                            else
                                                                begin
                                                                    nxt_m_awvalid[ext_mas_cnt] = (m_awready[ext_mas_cnt] ? 1'b0 : m_awvalid[ext_mas_cnt]) ;
                                                                    nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = (m_awready[ext_mas_cnt] ? TOTAL_EXTMAS_CNT : ext_mas_awr_gnt_reg[ext_mas_cnt]) ;
                                                                    //nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = m_awready[ext_mas_cnt] ? 6'd32 :ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                                    nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                                    nxt_m_awid[ext_mas_cnt] = m_awid[ext_mas_cnt] ;
                                                                    nxt_m_awprot[ext_mas_cnt] = m_awprot[ext_mas_cnt] ;
                                                                end
                                                        end
                                                end
                                            else
                                                begin : DOWN_BLK
                                                    logic aw_wr_cnt, 
                                                        nxt_aw_wr_cnt ; 
                                                    logic ext_slv_wlast_split_ff_wr_en ; 
                                                    logic ext_slv_wlast_split_ff_rd_en ; 
                                                    logic ext_slv_wlast_split_ff_wdata ; 
                                                    logic ext_slv_wlast_split_ff_rdata ; 
                                                    logic ext_slv_wlast_split_ff_full ; 
                                                    logic ext_slv_wlast_split_ff_empty ; 
                                                    assign ext_slv_wlast_split_ff_wdata = m_awready[ext_mas_cnt] ; // since only for last split awready is given
                                                    //assign ext_slv_wlast_split_ff_wdata  = o_s_awready; // since only for last split awready is given
                                                    assign ext_slv_wlast_split_ff_wr_en = (((o_ext_slv_prt_awvalid_ff & (!ext_slv_wlast_split_ff_full)) & (!ext_slv_wr_issue_ff_full)) & (o_ext_slv_prt_awid_ff[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                    //   assign ext_slv_wlast_split_ff_rd_en  = (~ext_slv_wlast_split_ff_empty & i_ext_slv_prt_bvalid & (ext_slv_awid_ff_rdata[EXT_SLV_AXI_ID_WIDTH-1:EXT_MAS_AXI_ID_WIDTH]==ext_mas_cnt) & (!ext_slv_wresp_ff_full));
                                                    assign ext_slv_wlast_split_ff_rd_en = ((((~ext_slv_wlast_split_ff_empty) & i_ext_slv_prt_bvalid) & (ext_slv_awid_ff_rdata[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) & o_ext_slv_prt_bready) ; 
                                                    if ((LATTICE_FIFO == 1)) 
                                                        begin : LSCC_FF_BLK
                                                        end
                                                    else
                                                        begin : CUSTOM_FF_BLK
                                                            axi4_interconnect_ipgen_gen_fifo #(AW_AWID,
                                                                    1,
                                                                    0,
                                                                    EXT_SLV_AXI_WR_ISSUE) u_ext_slv_wlast_split_fifo (// Pointer Width
                                                                    // Data Width { size}
                                                                    // Whether Output needs to be registered or not
                                                                    // Number of entries in FIFO
                                                                    //EXT_SLV_AXI_WR_ISSUE_DEPTH// Number of entries in FIFO
                                                                    .clk(aclk_i), 
                                                                        .aresetn_i(aresetn_i), 
                                                                        .we(ext_slv_wlast_split_ff_wr_en), 
                                                                        .wdata(ext_slv_wlast_split_ff_wdata), 
                                                                        .re(ext_slv_wlast_split_ff_rd_en), 
                                                                        .rdata(ext_slv_wlast_split_ff_rdata), 
                                                                        .full(ext_slv_wlast_split_ff_full), 
                                                                        .pre_full(), 
                                                                        .empty(ext_slv_wlast_split_ff_empty)) ; 
                                                        end
                                                    assign m_awready[ext_mas_cnt] = (((|aw_wr_cnt) || (|nxt_aw_wr_cnt)) ? 1'b0 : ((((~wr_issue_full) & (!ext_slv_wlast_split_ff_full)) & (!ext_slv_awid_ff_full)) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt))) ; 
                                                    //assign m_awready[ext_mas_cnt]       = (|aw_wr_cnt) || (|nxt_aw_wr_cnt) ? 1'b0 : ~ext_slv_wr_issue_ff_full & (!ext_slv_wlast_split_ff_full) & (!ext_slv_awid_ff_full) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt) ;
                                                    //assign m_awready[ext_mas_cnt]       = (|aw_wr_cnt) || (|nxt_aw_wr_cnt) ? 1'b0 : ~ext_slv_wr_issue_ff_full & (!ext_slv_wlast_split_ff_full);
                                                    //assign m_split_awready[ext_mas_cnt] = ~ext_slv_wr_issue_ff_full & (!ext_slv_wlast_split_ff_full);
                                                    assign m_split_awready[ext_mas_cnt] = ((((~wr_issue_full) & (!ext_slv_wlast_split_ff_full)) & (!ext_slv_awid_ff_full)) & (ext_mas_awr_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_split_awready[ext_mas_cnt] = ~wr_issue_full & (!ext_slv_wlast_split_ff_full) & (!ext_slv_awid_ff_full) ;
                                                    //assign m_split_awready[ext_mas_cnt] = ~ext_slv_wr_issue_ff_full & (!ext_slv_wlast_split_ff_full) & (!ext_slv_awid_ff_full) ;
                                                    assign aw_b_complete[ext_mas_cnt] = (((!ext_slv_wlast_split_ff_rdata) & i_ext_slv_prt_bvalid) & (ext_slv_awid_ff_rdata[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                    assign m_awsize[ext_mas_cnt] = 3'd0 ; 
                                                    assign m_awlen[ext_mas_cnt] = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ; 
                                                    assign m_awburst[ext_mas_cnt] = 2'd0 ; 
                                                    assign m_awcache[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awlock[ext_mas_cnt] = 1'd0 ; 
                                                    assign m_awqos[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awregion[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_awuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((~aresetn_i)) 
                                                                begin
                                                                    m_awvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_awprot[ext_mas_cnt] <=  3'd0 ;
                                                                    m_awaddr[ext_mas_cnt] <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                                                    m_awid[ext_mas_cnt] <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                                                    aw_wr_cnt <=  1'd0 ;
                                                                    ext_mas_awr_gnt_reg[ext_mas_cnt] <=  TOTAL_EXTMAS_CNT ;
                                                                    //ext_mas_awr_gnt_reg[ext_mas_cnt]       <= 6'd32;
                                                                end
                                                            else
                                                                begin
                                                                    m_awvalid[ext_mas_cnt] <=  nxt_m_awvalid[ext_mas_cnt] ;
                                                                    m_awaddr[ext_mas_cnt] <=  nxt_m_awaddr[ext_mas_cnt] ;
                                                                    m_awid[ext_mas_cnt] <=  nxt_m_awid[ext_mas_cnt] ;
                                                                    m_awprot[ext_mas_cnt] <=  nxt_m_awprot[ext_mas_cnt] ;
                                                                    aw_wr_cnt <=  nxt_aw_wr_cnt ;
                                                                    ext_mas_awr_gnt_reg[ext_mas_cnt] <=  nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                                end
                                                        end
                                                    always
                                                        @(*)
                                                        begin
                                                            nxt_m_awvalid[ext_mas_cnt] = m_awvalid[ext_mas_cnt] ;
                                                            nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                            nxt_m_awid[ext_mas_cnt] = m_awid[ext_mas_cnt] ;
                                                            nxt_m_awprot[ext_mas_cnt] = m_awprot[ext_mas_cnt] ;
                                                            nxt_aw_wr_cnt = aw_wr_cnt ;
                                                            nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                            if (aw_wr_cnt) 
                                                                begin
                                                                    if ((m_awvalid[ext_mas_cnt] & m_split_awready[ext_mas_cnt])) 
                                                                        //if( m_awvalid [ext_mas_cnt] & m_split_awready[ext_mas_cnt] & (~wr_issue_full))
                                                                        //if(i_s_awvalid & o_s_split_awready & (~wr_issue_full) & ( i_s_ext_mas_awr_gnt == ext_mas_cnt))
                                                                        begin
                                                                            nxt_m_awvalid[ext_mas_cnt] = 1'b1 ;
                                                                            nxt_m_awaddr[ext_mas_cnt] = ({i_s_awaddr[(EXT_SLV_AXI_ADDR_WIDTH - 1):2],
                                                                                2'd0} + 3'd4) ;
                                                                            nxt_aw_wr_cnt = 1'b0 ;
                                                                        end
                                                                    else
                                                                        begin
                                                                            nxt_m_awvalid[ext_mas_cnt] = m_awvalid[ext_mas_cnt] ;
                                                                            nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                                            nxt_aw_wr_cnt = aw_wr_cnt ;
                                                                        end
                                                                end
                                                            else
                                                                if ((((i_s_awvalid & o_s_awready) & (i_s_ext_mas_awr_gnt == ext_mas_cnt)) & (!m_awvalid))) 
                                                                    //else if ( i_s_awvalid & o_s_awready & (~wr_issue_full) & ( i_s_ext_mas_awr_gnt == ext_mas_cnt)  & (!(m_awvalid)))
                                                                    //else if ( i_s_awvalid & o_s_awready & (~wr_issue_full) & ( i_s_ext_mas_awr_gnt == ext_mas_cnt)  )
                                                                    begin
                                                                        nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = i_s_ext_mas_awr_gnt ;
                                                                        nxt_m_awvalid[ext_mas_cnt] = i_s_awvalid ;
                                                                        nxt_m_awaddr[ext_mas_cnt] = i_s_awaddr ;
                                                                        nxt_m_awid[ext_mas_cnt] = i_s_awid ;
                                                                        nxt_m_awprot[ext_mas_cnt] = i_s_awprot ;
                                                                        nxt_aw_wr_cnt = (i_s_awaddr[2] ? 1'b0 : 1'b1) ;// 64 ->32 applicable
                                                                    end
                                                                else
                                                                    begin
                                                                        nxt_m_awvalid[ext_mas_cnt] = (m_awready[ext_mas_cnt] ? 1'b0 : m_awvalid[ext_mas_cnt]) ;
                                                                        nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = (m_awready[ext_mas_cnt] ? TOTAL_EXTMAS_CNT : ext_mas_awr_gnt_reg[ext_mas_cnt]) ;
                                                                        //nxt_ext_mas_awr_gnt_reg[ext_mas_cnt] = m_awready[ext_mas_cnt] ? 6'd32 :ext_mas_awr_gnt_reg[ext_mas_cnt] ;
                                                                        nxt_m_awaddr[ext_mas_cnt] = m_awaddr[ext_mas_cnt] ;
                                                                        nxt_m_awid[ext_mas_cnt] = m_awid[ext_mas_cnt] ;
                                                                        nxt_m_awprot[ext_mas_cnt] = m_awprot[ext_mas_cnt] ;
                                                                        nxt_aw_wr_cnt = aw_wr_cnt ;
                                                                    end
                                                        end
                                                end
                                        end
                                end
                            else
                                begin : NO_EXT_MAS_CONNECT_BLK
                                    assign m_awvalid[ext_mas_cnt] = 1'b0 ; 
                                    assign m_awaddr[ext_mas_cnt] = {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ; 
                                    assign m_awsize[ext_mas_cnt] = 3'd0 ; 
                                    assign m_awlen[ext_mas_cnt] = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ; 
                                    assign m_awburst[ext_mas_cnt] = 2'd0 ; 
                                    assign m_awcache[ext_mas_cnt] = 4'd0 ; 
                                    assign m_awid[ext_mas_cnt] = {EXT_SLV_AXI_ID_WIDTH{1'b0}} ; 
                                    assign m_awprot[ext_mas_cnt] = 3'd0 ; 
                                    assign m_awlock[ext_mas_cnt] = 1'd0 ; 
                                    assign m_awqos[ext_mas_cnt] = 4'd0 ; 
                                    assign m_awregion[ext_mas_cnt] = 4'd0 ; 
                                    assign m_awuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                    assign m_awready[ext_mas_cnt] = 1'b0 ; 
                                    assign m_split_awready[ext_mas_cnt] = 1'b0 ; 
                                    assign aw_b_complete[ext_mas_cnt] = 1'b0 ; 
                                end
                        end
                    end
                always
                    @(posedge aclk_i or 
                        negedge aresetn_i)
                    begin
                        if ((~aresetn_i)) 
                            begin
                                o_s_awready <=  1'b1 ;
                                o_s_split_awready <=  1'b1 ;
                                o_s_wready <=  1'b0 ;
                            end
                        else
                            begin
                                o_s_awready <=  nxt_o_s_awready ;
                                o_s_split_awready <=  nxt_o_s_split_awready ;
                                o_s_wready <=  nxt_o_s_wready ;
                            end
                    end
                integer ext_mas_val ; 
                always
                    @(*)
                    begin
                        nxt_o_s_awready = o_s_awready ;
                        nxt_o_s_split_awready = o_s_split_awready ;
                        o_ext_slv_prt_awvalid_ff = 1'b0 ;
                        o_ext_slv_prt_awaddr_ff = {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                        o_ext_slv_prt_awsize_ff = 3'd0 ;
                        o_ext_slv_prt_awlen_ff = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ;
                        o_ext_slv_prt_awburst_ff = 2'd0 ;
                        o_ext_slv_prt_awcache_ff = 4'd0 ;
                        o_ext_slv_prt_awid_ff = {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                        o_ext_slv_prt_awprot_ff = 3'd0 ;
                        o_ext_slv_prt_awlock_ff = 1'd0 ;
                        o_ext_slv_prt_awqos_ff = 4'd0 ;
                        o_ext_slv_prt_awregion_ff = 4'd0 ;
                        o_ext_slv_prt_awuser_ff = {AXI_USER_WIDTH{1'b0}} ;
                        for (ext_mas_val = 0 ; (ext_mas_val < TOTAL_EXTMAS_CNT) ; ext_mas_val = (ext_mas_val + 1))
                            begin
                                if (m_awvalid[ext_mas_val]) 
                                    //if(ext_mas_awr_gnt_reg[ext_mas_val]==ext_mas_val)
                                    begin
                                        o_ext_slv_prt_awvalid_ff = (m_awvalid[ext_mas_val] & m_split_awready[ext_mas_val]) ;
                                        o_ext_slv_prt_awaddr_ff = m_awaddr[ext_mas_val] ;
                                        o_ext_slv_prt_awsize_ff = m_awsize[ext_mas_val] ;
                                        o_ext_slv_prt_awlen_ff = m_awlen[ext_mas_val] ;
                                        o_ext_slv_prt_awburst_ff = m_awburst[ext_mas_val] ;
                                        o_ext_slv_prt_awcache_ff = m_awcache[ext_mas_val] ;
                                        o_ext_slv_prt_awid_ff = m_awid[ext_mas_val] ;
                                        o_ext_slv_prt_awprot_ff = m_awprot[ext_mas_val] ;
                                        o_ext_slv_prt_awlock_ff = m_awlock[ext_mas_val] ;
                                        o_ext_slv_prt_awqos_ff = m_awqos[ext_mas_val] ;
                                        o_ext_slv_prt_awregion_ff = m_awregion[ext_mas_val] ;
                                        o_ext_slv_prt_awuser_ff = m_awuser[ext_mas_val] ;
                                    end
                                else
                                    ; 
                                if (((ext_mas_awr_gnt_reg[ext_mas_val] == ext_mas_val) || ((i_s_ext_mas_awr_gnt == ext_mas_val) && i_s_awvalid))) 
                                    //if(s_ext_mas_awr_gnt_reg[ext_mas_val]==ext_mas_val)
                                    //if(i_s_ext_mas_awr_gnt==ext_mas_val)
                                    begin
                                        nxt_o_s_awready = m_awready[ext_mas_val] ;
                                        nxt_o_s_split_awready = m_split_awready[ext_mas_val] ;
                                    end
                                else
                                    ; 
                            end
                    end
                //===================================================================================
                // EXT_SLV_AW_WR_ISSUE_FIFO
                //===================================================================================
                assign ext_slv_wr_issue_ff_data_in = ((EXT_SLV_AXI_PROTOCOL == 1'b0) ? {o_ext_slv_prt_awuser_ff,
                            o_ext_slv_prt_awregion_ff,
                            o_ext_slv_prt_awqos_ff,
                            o_ext_slv_prt_awlock_ff,
                            o_ext_slv_prt_awprot_ff,
                            o_ext_slv_prt_awid_ff,
                            o_ext_slv_prt_awcache_ff,
                            o_ext_slv_prt_awburst_ff,
                            o_ext_slv_prt_awlen_ff,
                            o_ext_slv_prt_awsize_ff,
                            o_ext_slv_prt_awaddr_ff,
                            o_ext_slv_prt_awvalid_ff} : {o_ext_slv_prt_awprot_ff,
                            o_ext_slv_prt_awaddr_ff,
                            o_ext_slv_prt_awvalid_ff}) ; 
                assign ext_slv_wr_issue_ff_wr_en = (((~ext_slv_wr_issue_ff_full) & o_ext_slv_prt_awvalid_ff) & (~wr_issue_full)) ; 
                assign ext_slv_wr_issue_ff_rd_en = ((~ext_slv_wr_issue_ff_empty) & ((o_ext_slv_prt_awvalid & i_ext_slv_prt_awready) || (!o_ext_slv_prt_awvalid))) ; 
                //assign ext_slv_wr_issue_ff_rd_en   = (~ext_slv_wr_issue_ff_empty & i_ext_slv_prt_awready );
                if ((LATTICE_FIFO == 1)) 
                    begin : LSCC_FF_BLK
                    end
                else
                    begin : CUSTOM_FF_BLK
                        axi4_interconnect_ipgen_gen_fifo #(AW_AWID,
                                AW_DWID,
                                0,
                                EXT_SLV_AXI_WR_ISSUE) u_ext_slv_aw_wr_issue_fifo (// Pointer Width
                                // Data Width { size}
                                // Whether Output needs to be registered or not
                                // Number of entries in FIFO
                                //EXT_SLV_AXI_WR_ISSUE_DEPTH// Number of entries in FIFO
                                .clk(aclk_i), 
                                    .aresetn_i(aresetn_i), 
                                    .we(ext_slv_wr_issue_ff_wr_en), 
                                    .wdata(ext_slv_wr_issue_ff_data_in), 
                                    .re(ext_slv_wr_issue_ff_rd_en), 
                                    .rdata(ext_slv_wr_issue_ff_rdata), 
                                    .full(ext_slv_wr_issue_ff_full), 
                                    .pre_full(), 
                                    .empty(ext_slv_wr_issue_ff_empty)) ; 
                    end
                if ((EXT_SLV_AXI_PROTOCOL == 1)) 
                    begin : AXI4LITE_SLV_AWBLK
                        //assign o_ext_slv_prt_awvalid     = ( ext_slv_wr_issue_ff_empty ) ? 'd0 : ext_slv_wr_issue_ff_rdata[0];
                        //assign o_ext_slv_prt_awaddr      = ( ext_slv_wr_issue_ff_empty ) ? 'd0 : ext_slv_wr_issue_ff_rdata[EXT_SLV_AXI_ADDR_WIDTH:1];
                        //assign o_ext_slv_prt_awprot      = ( ext_slv_wr_issue_ff_empty ) ? 'd0 : ext_slv_wr_issue_ff_rdata[EXT_SLV_AXI_ADDR_WIDTH+1 +:3] ;
                        always
                            @(posedge aclk_i or 
                                negedge aresetn_i)
                            begin
                                if ((~aresetn_i)) 
                                    begin
                                        o_ext_slv_prt_awvalid <=  1'b0 ;
                                        o_ext_slv_prt_awaddr <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                        o_ext_slv_prt_awprot <=  3'd0 ;
                                    end
                                else
                                    begin
                                        o_ext_slv_prt_awvalid <=  ((ext_slv_wr_issue_ff_empty || (o_ext_slv_prt_awvalid & (!i_ext_slv_prt_awready))) ? (i_ext_slv_prt_awready ? 1'd0 : o_ext_slv_prt_awvalid) : ext_slv_wr_issue_ff_rdata[0]) ;
                                        o_ext_slv_prt_awaddr <=  ((ext_slv_wr_issue_ff_empty || (o_ext_slv_prt_awvalid & (!i_ext_slv_prt_awready))) ? o_ext_slv_prt_awaddr : ext_slv_wr_issue_ff_rdata[EXT_SLV_AXI_ADDR_WIDTH:1]) ;
                                        o_ext_slv_prt_awprot <=  ((ext_slv_wr_issue_ff_empty || (o_ext_slv_prt_awvalid & (!i_ext_slv_prt_awready))) ? o_ext_slv_prt_awprot : ext_slv_wr_issue_ff_rdata[(EXT_SLV_AXI_ADDR_WIDTH + 1) +: 3]) ;
                                    end
                            end
                        assign o_ext_slv_prt_awsize = 3'd0 ; 
                        assign o_ext_slv_prt_awlen = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ; 
                        assign o_ext_slv_prt_awburst = 2'd0 ; 
                        assign o_ext_slv_prt_awcache = 4'd0 ; 
                        assign o_ext_slv_prt_awid = {EXT_SLV_AXI_ID_WIDTH{1'b0}} ; 
                        assign o_ext_slv_prt_awlock = 1'd0 ; 
                        assign o_ext_slv_prt_awqos = 4'd0 ; 
                        assign o_ext_slv_prt_awregion = 4'd0 ; 
                        assign o_ext_slv_prt_awuser = {AXI_USER_WIDTH{1'b0}} ; 
                    end
                else
                    begin : AXI4_SLV_AWBLK
                        always
                            @(posedge aclk_i or 
                                negedge aresetn_i)
                            begin
                                if ((~aresetn_i)) 
                                    begin
                                        o_ext_slv_prt_awvalid <=  1'b0 ;
                                        o_ext_slv_prt_awaddr <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                        o_ext_slv_prt_awsize <=  3'd0 ;
                                        o_ext_slv_prt_awlen <=  {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ;
                                        o_ext_slv_prt_awburst <=  2'd0 ;
                                        o_ext_slv_prt_awcache <=  4'd0 ;
                                        o_ext_slv_prt_awid <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                        o_ext_slv_prt_awprot <=  3'd0 ;
                                        o_ext_slv_prt_awlock <=  1'd0 ;
                                        o_ext_slv_prt_awqos <=  4'd0 ;
                                        o_ext_slv_prt_awregion <=  4'd0 ;
                                        o_ext_slv_prt_awuser <=  {AXI_USER_WIDTH{1'd0}} ;
                                    end
                                else
                                    begin
                                        o_ext_slv_prt_awvalid <=  ((ext_slv_wr_issue_ff_empty || (o_ext_slv_prt_awvalid & (!i_ext_slv_prt_awready))) ? (i_ext_slv_prt_awready ? 1'd0 : o_ext_slv_prt_awvalid) : ext_slv_wr_issue_ff_rdata[0]) ;
                                        o_ext_slv_prt_awaddr <=  ((ext_slv_wr_issue_ff_empty || (o_ext_slv_prt_awvalid & (!i_ext_slv_prt_awready))) ? o_ext_slv_prt_awaddr : ext_slv_wr_issue_ff_rdata[EXT_SLV_AXI_ADDR_WIDTH:1]) ;
                                        o_ext_slv_prt_awsize <=  ((ext_slv_wr_issue_ff_empty || (o_ext_slv_prt_awvalid & (!i_ext_slv_prt_awready))) ? o_ext_slv_prt_awsize : ext_slv_wr_issue_ff_rdata[(EXT_SLV_AXI_ADDR_WIDTH + 1) +: 3]) ;
                                        o_ext_slv_prt_awlen <=  ((ext_slv_wr_issue_ff_empty || (o_ext_slv_prt_awvalid & (!i_ext_slv_prt_awready))) ? o_ext_slv_prt_awlen : ext_slv_wr_issue_ff_rdata[(EXT_SLV_AXI_ADDR_WIDTH + 4) +: EXT_SLV_AXI_LEN_WIDTH]) ;
                                        o_ext_slv_prt_awburst <=  ((ext_slv_wr_issue_ff_empty || (o_ext_slv_prt_awvalid & (!i_ext_slv_prt_awready))) ? o_ext_slv_prt_awburst : ext_slv_wr_issue_ff_rdata[((EXT_SLV_AXI_ADDR_WIDTH + 4) + EXT_SLV_AXI_LEN_WIDTH) +: 2]) ;
                                        o_ext_slv_prt_awcache <=  ((ext_slv_wr_issue_ff_empty || (o_ext_slv_prt_awvalid & (!i_ext_slv_prt_awready))) ? o_ext_slv_prt_awcache : ext_slv_wr_issue_ff_rdata[((EXT_SLV_AXI_ADDR_WIDTH + 6) + EXT_SLV_AXI_LEN_WIDTH) +: 4]) ;
                                        o_ext_slv_prt_awid <=  ((ext_slv_wr_issue_ff_empty || (o_ext_slv_prt_awvalid & (!i_ext_slv_prt_awready))) ? o_ext_slv_prt_awid : ext_slv_wr_issue_ff_rdata[((EXT_SLV_AXI_ADDR_WIDTH + 10) + EXT_SLV_AXI_LEN_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]) ;
                                        o_ext_slv_prt_awprot <=  ((ext_slv_wr_issue_ff_empty || (o_ext_slv_prt_awvalid & (!i_ext_slv_prt_awready))) ? o_ext_slv_prt_awprot : ext_slv_wr_issue_ff_rdata[(((EXT_SLV_AXI_ADDR_WIDTH + 10) + EXT_SLV_AXI_LEN_WIDTH) + EXT_SLV_AXI_ID_WIDTH) +: 3]) ;
                                        o_ext_slv_prt_awlock <=  ((ext_slv_wr_issue_ff_empty || (o_ext_slv_prt_awvalid & (!i_ext_slv_prt_awready))) ? o_ext_slv_prt_awlock : ext_slv_wr_issue_ff_rdata[(((EXT_SLV_AXI_ADDR_WIDTH + 13) + EXT_SLV_AXI_LEN_WIDTH) + EXT_SLV_AXI_ID_WIDTH) +: 1]) ;
                                        o_ext_slv_prt_awqos <=  ((ext_slv_wr_issue_ff_empty || (o_ext_slv_prt_awvalid & (!i_ext_slv_prt_awready))) ? o_ext_slv_prt_awqos : ext_slv_wr_issue_ff_rdata[(((EXT_SLV_AXI_ADDR_WIDTH + 14) + EXT_SLV_AXI_LEN_WIDTH) + EXT_SLV_AXI_ID_WIDTH) +: 4]) ;
                                        o_ext_slv_prt_awregion <=  ((ext_slv_wr_issue_ff_empty || (o_ext_slv_prt_awvalid & (!i_ext_slv_prt_awready))) ? o_ext_slv_prt_awregion : ext_slv_wr_issue_ff_rdata[(((EXT_SLV_AXI_ADDR_WIDTH + 18) + EXT_SLV_AXI_LEN_WIDTH) + EXT_SLV_AXI_ID_WIDTH) +: 4]) ;
                                        o_ext_slv_prt_awuser <=  ((ext_slv_wr_issue_ff_empty || (o_ext_slv_prt_awvalid & (!i_ext_slv_prt_awready))) ? o_ext_slv_prt_awuser : ext_slv_wr_issue_ff_rdata[(((EXT_SLV_AXI_ADDR_WIDTH + 22) + EXT_SLV_AXI_LEN_WIDTH) + EXT_SLV_AXI_ID_WIDTH) +: AXI_USER_WIDTH]) ;
                                    end
                            end
                    end
                //===================================================================================
                //WRITE DATA CHANNEL START
                //===================================================================================
                logic [(TOTAL_EXTMAS_CNT - 1):0] m_wvalid ; 
                logic [(EXT_SLV_AXI_DATA_WIDTH - 1):0] m_wdata [TOTAL_EXTMAS_CNT] ; 
                logic [((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] m_wstrb [TOTAL_EXTMAS_CNT] ; 
                logic [(AXI_USER_WIDTH - 1):0] m_wuser [TOTAL_EXTMAS_CNT] ; 
                logic [(TOTAL_EXTMAS_CNT - 1):0] m_wlast ; 
                logic [(TOTAL_EXTMAS_CNT - 1):0] m_wready ; 
                logic [(6 - 1):0] i_s_ext_mas_dwr_gnt_final [TOTAL_EXTMAS_CNT] ; 
                logic [(TOTAL_EXTMAS_CNT - 1):0] nxt_wr_last_pending_xfer, 
                    wr_last_pending_xfer ; 
                always
                    @(*)
                    begin
                        nxt_o_s_wready = o_s_wready ;
                        for (ext_mas_val = 0 ; (ext_mas_val < TOTAL_EXTMAS_CNT) ; ext_mas_val = (ext_mas_val + 1))
                            begin
                                //if(i_s_ext_mas_dwr_gnt==ext_mas_val)
                                if (((i_s_ext_mas_dwr_gnt_final[ext_mas_val] == ext_mas_val) & ((!(|wr_last_pending_xfer)) || wr_last_pending_xfer[ext_mas_val]))) 
                                    begin
                                        //nxt_o_s_wready  = m_wready[ext_mas_val];
                                        nxt_o_s_wready = (m_wready[ext_mas_val] & (!wr_last_pending_xfer[ext_mas_val])) ;
                                    end
                            end
                    end
                //===================================================================================
                //===================================================================================
                //WRITE DATA CHANNEL START 
                //===================================================================================
                //===================================================================================
                if ((EXT_SLV_AXI_PROTOCOL == 0)) 
                    begin : AXI4_EXTSLV_WDATA_BLK
                        for (ext_mas_cnt = 0;(ext_mas_cnt < TOTAL_EXTMAS_CNT);ext_mas_cnt = (ext_mas_cnt + 1))
                        begin : EXT_MAS_LOOP_BLK
                            localparam EXT_MAS_AXI_DATA_WIDTH_INT = EXT_MAS_AXI_DATA_WIDTH[(ext_mas_cnt * 11) +: 11] ; 
                            // for  - ext_mas_cnt end
                            if ((EXT_SLV_CONNECTED_MASTER[ext_mas_cnt] == 1)) 
                                begin : EXT_SLV_CONNECTED_BLK
                                    if ((EXT_MAS_AXI_PROTOCOL[ext_mas_cnt] == 0)) 
                                        begin : AXI4_EXTMAS_BLK
                                            if ((EXT_MAS_AXI_DATA_WIDTH_INT < EXT_SLV_AXI_DATA_WIDTH)) 
                                                begin : UP_BLK
                                                    localparam UP_SIZE = (EXT_SLV_AXI_DATA_WIDTH / EXT_MAS_AXI_DATA_WIDTH_INT) ; 
                                                    localparam AW_FF_DWIDTH = 13 ; 
                                                    localparam AW_FF_PTR_WIDTH = clog2(EXT_SLV_AW_FF_DEPTH) ; 
                                                    //=====================================================
                                                    //WR ADDRESS FIFO
                                                    //=====================================================
                                                    logic saw_ff_full ; 
                                                    logic saw_ff_empty ; 
                                                    logic saw_ff_wr_en ; 
                                                    logic saw_ff_rd_en ; 
                                                    logic [(AW_FF_DWIDTH - 1):0] saw_ff_wdata ; 
                                                    logic [(AW_FF_DWIDTH - 1):0] saw_ff_rdata_sig ; 
                                                    logic [(AW_FF_DWIDTH - 1):0] saw_ff_rdata ; 
                                                    logic [2:0] saw_size ; 
                                                    logic [1:0] saw_burst ; 
                                                    assign saw_ff_wdata = {i_s_awburst,
                                                                i_s_awsize[2:0],
                                                                i_s_awaddr[7:0]} ; // 8 bits to represent 128 bytes of address for maximum bus width 1024 bits
                                                    assign saw_ff_wr_en = (((i_s_awvalid & o_s_awready) & (~saw_ff_full)) & (i_s_awid[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                    assign saw_ff_rd_en = ((((i_s_wlast & i_s_wvalid) & o_s_wready) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) & (~saw_ff_empty)) ; 
                                                    //assign saw_ff_rd_en  = i_s_wlast & i_s_wvalid & m_wready[ext_mas_cnt] & (i_s_ext_mas_dwr_gnt == ext_mas_cnt) & ~saw_ff_empty ;
                                                    if ((LATTICE_FIFO == 1)) 
                                                        begin : LSCC_FF_BLK
                                                        end
                                                    else
                                                        begin : CUSTOM_FF_BLK
                                                            axi4_interconnect_ipgen_gen_fifo #(AW_FF_PTR_WIDTH,
                                                                    AW_FF_DWIDTH,
                                                                    0,
                                                                    EXT_SLV_AW_FF_DEPTH) u_sawaddr_awsize_fifo (// Pointer Width
                                                                    // Data Width {awaddr[7:0]} 
                                                                    // Whether Output needs to be registered or not
                                                                    // Number of entries in FIFO
                                                                    .clk(aclk_i), 
                                                                        .aresetn_i(aresetn_i), 
                                                                        .we(saw_ff_wr_en), 
                                                                        .wdata(saw_ff_wdata), 
                                                                        .re(saw_ff_rd_en), 
                                                                        .rdata(saw_ff_rdata_sig), 
                                                                        .full(saw_ff_full), 
                                                                        .pre_full(), 
                                                                        .empty(saw_ff_empty)) ; 
                                                        end
                                                    assign saw_ff_rdata = (saw_ff_empty ? 'd0 : saw_ff_rdata_sig) ; 
                                                    assign saw_size = saw_ff_rdata[8 +: 3] ; 
                                                    assign saw_burst = saw_ff_rdata[(AW_FF_DWIDTH - 1) -: 2] ; 
                                                    localparam WR_UP_IDLE = 2'd0 ; 
                                                    localparam WR_VALID = 2'd1 ; 
                                                    localparam WR_NARROW_VALID = 2'd2 ; 
                                                    localparam ADDR_WIDTH = clog2((EXT_SLV_AXI_DATA_WIDTH / 8)) ; // TO support maximum width
                                                    localparam MSB_ADDR = (clog2((EXT_SLV_AXI_DATA_WIDTH / 8)) - 1) ; 
                                                    localparam MSB_NARROW_ADDR = clog2((EXT_SLV_AXI_DATA_WIDTH / 8)) ; 
                                                    localparam EXT_MAS_BUS_SIZE = ((EXT_MAS_AXI_DATA_WIDTH_INT == 8) ? 0 : clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8))) ; 
                                                    localparam ADDR_BIT_WIDTH = ((UP_SIZE == 2) ? 1 : ((UP_SIZE == 4) ? 2 : ((UP_SIZE == 8) ? 3 : ((UP_SIZE == 16) ? 4 : ((UP_SIZE == 32) ? 5 : ((UP_SIZE == 64) ? 6 : 7)))))) ; 
                                                    logic [1:0] cur_wr_up_state, 
                                                        nxt_wr_up_state ; 
                                                    logic [(ADDR_WIDTH - 1):0] lsb_addr, 
                                                        nxt_lsb_addr ; 
                                                    logic [(ADDR_BIT_WIDTH - 1):0] upsize_addr, 
                                                        nxt_upsize_addr ; 
                                                    logic [(EXT_SLV_AXI_DATA_WIDTH - 1):0] i_s_wdata_sig ; 
                                                    logic [((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] i_s_wstrb_sig ; 
                                                    logic [(TOTAL_EXTMAS_CNT - 1):0] nxt_m_wvalid ; 
                                                    logic [(EXT_SLV_AXI_DATA_WIDTH - 1):0] nxt_m_wdata [TOTAL_EXTMAS_CNT] ; 
                                                    logic [((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] nxt_m_wstrb [TOTAL_EXTMAS_CNT] ; 
                                                    logic [(AXI_USER_WIDTH - 1):0] nxt_m_wuser [TOTAL_EXTMAS_CNT] ; 
                                                    logic [(TOTAL_EXTMAS_CNT - 1):0] nxt_m_wlast ; 
                                                    logic [9:0] ext_mas_req_size_bits ; 
                                                    logic [6:0] ext_mas_req_size_bytes ; 
                                                    logic [7:0] narrow_up_cnt, 
                                                        nxt_narrow_up_cnt ; 
                                                    logic [7:0] check ; 
                                                    assign check = ((lsb_addr * ext_mas_req_size_bits) / 8) ; 
                                                    assign ext_mas_req_size_bits = (4'b1000 << saw_size) ; 
                                                    assign ext_mas_req_size_bytes = (1'd1 << saw_size) ; 
                                                    //assign m_wready[ext_mas_cnt] =  ~wdata_ff_full & (~saw_ff_empty);  
                                                    assign m_wready[ext_mas_cnt] = (wr_last_pending_xfer[ext_mas_cnt] ? (~wdata_ff_full) : ((~wdata_ff_full) & (~saw_ff_empty))) ; 
                                                    assign i_s_wdata_sig = {{(EXT_SLV_AXI_DATA_WIDTH - EXT_MAS_AXI_DATA_WIDTH_INT){1'b0}},
                                                                i_s_wdata[0 +: EXT_MAS_AXI_DATA_WIDTH_INT]} ; 
                                                    assign i_s_wstrb_sig = {{((EXT_SLV_AXI_DATA_WIDTH / 8) - (EXT_MAS_AXI_DATA_WIDTH_INT / 8)){1'b0}},
                                                                i_s_wstrb[0 +: (EXT_MAS_AXI_DATA_WIDTH_INT / 8)]} ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((!aresetn_i)) 
                                                                begin
                                                                    cur_wr_up_state <=  WR_UP_IDLE ;
                                                                    lsb_addr <=  {ADDR_WIDTH{1'b0}} ;
                                                                    upsize_addr <=  {ADDR_BIT_WIDTH{1'b0}} ;
                                                                    m_wvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_wdata[ext_mas_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ;
                                                                    m_wstrb[ext_mas_cnt] <=  {(EXT_SLV_AXI_DATA_WIDTH / 8){1'b0}} ;
                                                                    m_wuser[ext_mas_cnt] <=  {AXI_USER_WIDTH{1'b0}} ;
                                                                    m_wlast[ext_mas_cnt] <=  1'b0 ;
                                                                    i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  6'd0 ;
                                                                    narrow_up_cnt <=  8'd0 ;
                                                                    wr_last_pending_xfer[ext_mas_cnt] <=  1'b0 ;
                                                                end
                                                            else
                                                                begin
                                                                    cur_wr_up_state <=  nxt_wr_up_state ;
                                                                    lsb_addr <=  nxt_lsb_addr ;
                                                                    upsize_addr <=  nxt_upsize_addr ;
                                                                    m_wvalid[ext_mas_cnt] <=  nxt_m_wvalid[ext_mas_cnt] ;
                                                                    m_wdata[ext_mas_cnt] <=  nxt_m_wdata[ext_mas_cnt] ;
                                                                    m_wstrb[ext_mas_cnt] <=  nxt_m_wstrb[ext_mas_cnt] ;
                                                                    m_wuser[ext_mas_cnt] <=  nxt_m_wuser[ext_mas_cnt] ;
                                                                    m_wlast[ext_mas_cnt] <=  nxt_m_wlast[ext_mas_cnt] ;
                                                                    i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  i_s_ext_mas_dwr_gnt ;
                                                                    narrow_up_cnt <=  nxt_narrow_up_cnt ;
                                                                    wr_last_pending_xfer[ext_mas_cnt] <=  nxt_wr_last_pending_xfer[ext_mas_cnt] ;
                                                                end
                                                        end
                                                    integer upsize_cnt ; 
                                                    always
                                                        @(*)
                                                        begin
                                                            nxt_m_wvalid[ext_mas_cnt] = m_wvalid[ext_mas_cnt] ;
                                                            nxt_m_wdata[ext_mas_cnt] = m_wdata[ext_mas_cnt] ;
                                                            nxt_m_wstrb[ext_mas_cnt] = m_wstrb[ext_mas_cnt] ;
                                                            nxt_m_wuser[ext_mas_cnt] = m_wuser[ext_mas_cnt] ;
                                                            nxt_m_wlast[ext_mas_cnt] = m_wlast[ext_mas_cnt] ;
                                                            nxt_lsb_addr = lsb_addr ;
                                                            nxt_upsize_addr = upsize_addr ;
                                                            nxt_wr_up_state = cur_wr_up_state ;
                                                            nxt_narrow_up_cnt = narrow_up_cnt ;
                                                            nxt_wr_last_pending_xfer[ext_mas_cnt] = (wr_last_pending_xfer[ext_mas_cnt] ? (!m_wready[ext_mas_cnt]) : (((((i_s_wvalid & i_s_wlast) & o_s_wready) & (~wdata_ff_full)) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) ? 1'b1 : wr_last_pending_xfer[ext_mas_cnt])) ;
                                                            case (cur_wr_up_state)
                                                            WR_UP_IDLE : 
                                                                begin
                                                                    nxt_m_wvalid[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wvalid[ext_mas_cnt]) ;
                                                                    nxt_m_wlast[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wlast[ext_mas_cnt]) ;
                                                                    //if( (i_s_ext_mas_dwr_gnt == ext_mas_cnt) & ~wdata_ff_full )
                                                                    if ((((i_s_ext_mas_dwr_gnt == ext_mas_cnt) & (~wdata_ff_full)) & (~saw_ff_empty))) 
                                                                        begin
                                                                            nxt_wr_up_state = ((saw_size < EXT_MAS_BUS_SIZE) ? WR_NARROW_VALID : WR_VALID) ;
                                                                            nxt_narrow_up_cnt = (EXT_SLV_AXI_DATA_WIDTH / ext_mas_req_size_bits) ;
                                                                            nxt_upsize_addr = ((saw_size < EXT_MAS_BUS_SIZE) ? saw_ff_rdata[clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8)) +: clog2(UP_SIZE)] : upsize_addr) ;
                                                                            nxt_lsb_addr = ((saw_size < EXT_MAS_BUS_SIZE) ? ((saw_size == 3'd0) ? saw_ff_rdata[0 +: MSB_NARROW_ADDR] : ((saw_size == 3'd1) ? saw_ff_rdata[1 +: MSB_NARROW_ADDR] : ((saw_size == 3'd2) ? saw_ff_rdata[2 +: MSB_NARROW_ADDR] : ((saw_size == 3'd3) ? saw_ff_rdata[3 +: MSB_NARROW_ADDR] : ((saw_size == 3'd4) ? saw_ff_rdata[4 +: MSB_NARROW_ADDR] : saw_ff_rdata[5 +: MSB_NARROW_ADDR]))))) : saw_ff_rdata[MSB_ADDR -: ADDR_BIT_WIDTH]) ;
                                                                        end
                                                                    else
                                                                        begin
                                                                            nxt_wr_up_state = WR_UP_IDLE ;
                                                                        end
                                                                end
                                                            WR_VALID : 
                                                                begin
                                                                    if (((i_s_wvalid & o_s_wready) & (~wdata_ff_full))) 
                                                                        begin
                                                                            nxt_lsb_addr = ((saw_burst == 2'd0) ? lsb_addr : (((lsb_addr == (UP_SIZE - 1)) || i_s_wlast) ? {ADDR_WIDTH{1'b0}} : (lsb_addr + 1'd1))) ;
                                                                            nxt_wr_up_state = (i_s_wlast ? WR_UP_IDLE : cur_wr_up_state) ;
                                                                            nxt_m_wvalid[ext_mas_cnt] = 1'b1 ;
                                                                            nxt_m_wdata[ext_mas_cnt] = (i_s_wdata_sig << (lsb_addr * EXT_MAS_AXI_DATA_WIDTH_INT)) ;
                                                                            nxt_m_wstrb[ext_mas_cnt] = (i_s_wstrb_sig << ((lsb_addr * EXT_MAS_AXI_DATA_WIDTH_INT) / 8)) ;
                                                                            nxt_m_wuser[ext_mas_cnt] = i_s_wuser ;
                                                                            nxt_m_wlast[ext_mas_cnt] = i_s_wlast ;
                                                                        end
                                                                    else
                                                                        begin
                                                                            nxt_m_wvalid[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wvalid[ext_mas_cnt]) ;
                                                                            nxt_m_wlast[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wlast[ext_mas_cnt]) ;
                                                                        end
                                                                end
                                                            WR_NARROW_VALID : 
                                                                begin
                                                                    if (((i_s_wvalid & o_s_wready) & (~wdata_ff_full))) 
                                                                        begin
                                                                            nxt_lsb_addr = ((saw_burst == 2'd0) ? lsb_addr : (((lsb_addr == (narrow_up_cnt - 1'd1)) || i_s_wlast) ? {ADDR_WIDTH{1'b0}} : (lsb_addr + ext_mas_req_size_bytes))) ;
                                                                            nxt_wr_up_state = (i_s_wlast ? WR_UP_IDLE : cur_wr_up_state) ;
                                                                            nxt_m_wvalid[ext_mas_cnt] = 1'b1 ;
                                                                            nxt_m_wuser[ext_mas_cnt] = i_s_wuser ;
                                                                            nxt_m_wlast[ext_mas_cnt] = i_s_wlast ;
                                                                            nxt_m_wdata[ext_mas_cnt] = (i_s_wdata_sig << (upsize_addr * EXT_MAS_AXI_DATA_WIDTH_INT)) ;
                                                                            nxt_m_wstrb[ext_mas_cnt] = (i_s_wstrb_sig << ((upsize_addr * EXT_MAS_AXI_DATA_WIDTH_INT) / 8)) ;
                                                                            nxt_upsize_addr = ((saw_burst == 2'd0) ? upsize_addr : (i_s_wlast ? {ADDR_BIT_WIDTH{1'b0}} : (((saw_size == 3'd0) & (&lsb_addr[0 +: clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8))])) ? (upsize_addr + 1'd1) : (((saw_size == 3'd1) & (&lsb_addr[1 +: clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8))])) ? (upsize_addr + 1'd1) : (((saw_size == 3'd2) & (&lsb_addr[2 +: clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8))])) ? (upsize_addr + 1'd1) : (((saw_size == 3'd3) & (&lsb_addr[3 +: clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8))])) ? (upsize_addr + 1'd1) : (((saw_size == 3'd4) & (&lsb_addr[4 +: clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8))])) ? (upsize_addr + 1'd1) : (((saw_size == 3'd5) & (&lsb_addr[5 +: clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8))])) ? (upsize_addr + 1'd1) : upsize_addr)))))))) ;
                                                                            //case(EXT_MAS_AXI_DATA_WIDTH_INT)
                                                                            //'d16:
                                                                            //begin
                                                                            //   nxt_upsize_addr           = lsb_addr[0] ? lsb_addr + 1'd1 : upsize_addr;
                                                                            //end
                                                                            //'d32:
                                                                            //begin
                                                                            //   nxt_upsize_addr           = saw_size ==3'd0 ? (&lsb_addr[1:0] ? lsb_addr + 1'd1 : upsize_addr) : 
                                                                            //                               lsb_addr[1] ? lsb_addr+2'd2 : upsize_addr;
                                                                            //end
                                                                            //'d64:
                                                                            //begin
                                                                            //   nxt_upsize_addr           = saw_size ==3'd0 ? (&lsb_addr[2:0] ? lsb_addr + 1'd1 : upsize_addr) : 
                                                                            //                               saw_size ==3'd1 ? (&lsb_addr[2:1] ? lsb_addr+2'd2 : upsize_addr) : 
                                                                            //                               lsb_addr[2] ? lsb_addr+3'd4 : upsize_addr;
                                                                            //end
                                                                            //'d128:
                                                                            //begin
                                                                            //   nxt_upsize_addr           = saw_size ==3'd0 ? (&lsb_addr[3:0] ? lsb_addr + 1'd1 : upsize_addr) : 
                                                                            //                               saw_size ==3'd1 ? (&lsb_addr[3:1] ? lsb_addr+2'd2 : upsize_addr) : 
                                                                            //                               saw_size ==3'd2 ? (&lsb_addr[3:2] ? lsb_addr+3'd4 : upsize_addr) : 
                                                                            //                               lsb_addr[3] ? lsb_addr+4'd8 : upsize_addr;
                                                                            //end
                                                                            //'d256:
                                                                            //begin
                                                                            //   nxt_upsize_addr           = saw_size ==3'd0 ? (&lsb_addr[4:0] ? lsb_addr + 1'd1 : upsize_addr) : 
                                                                            //                               saw_size ==3'd1 ? (&lsb_addr[4:1] ? lsb_addr+2'd2 : upsize_addr) : 
                                                                            //                               saw_size ==3'd2 ? (&lsb_addr[4:2] ? lsb_addr+3'd4 : upsize_addr) : 
                                                                            //                               saw_size ==3'd3 ? (&lsb_addr[4:3] ? lsb_addr+4'd8 : upsize_addr) : 
                                                                            //                               lsb_addr[4] ? lsb_addr+5'd16 : upsize_addr;
                                                                            //end
                                                                            //'d512:
                                                                            //begin
                                                                            //   nxt_upsize_addr           = saw_size ==3'd0 ? (&lsb_addr[5:0] ? lsb_addr + 1'd1 : upsize_addr) : 
                                                                            //                               saw_size ==3'd1 ? (&lsb_addr[5:1] ? lsb_addr+2'd2 : upsize_addr) : 
                                                                            //                               saw_size ==3'd2 ? (&lsb_addr[5:2] ? lsb_addr+3'd4 : upsize_addr) : 
                                                                            //                               saw_size ==3'd3 ? (&lsb_addr[5:3] ? lsb_addr+4'd8 : upsize_addr) : 
                                                                            //                               saw_size ==3'd4 ? (&lsb_addr[5:4] ? lsb_addr+5'd16 : upsize_addr) : 
                                                                            //                               lsb_addr[5] ? lsb_addr+6'd32 : upsize_addr;
                                                                            //end
                                                                            //endcase
                                                                        end
                                                                    else
                                                                        begin
                                                                            nxt_m_wvalid[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wvalid[ext_mas_cnt]) ;
                                                                            nxt_m_wlast[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wlast[ext_mas_cnt]) ;
                                                                        end
                                                                end
                                                            default : 
                                                                begin
                                                                    nxt_wr_up_state = WR_UP_IDLE ;
                                                                end
                                                            endcase 
                                                        end
                                                end
                                            else
                                                if ((EXT_MAS_AXI_DATA_WIDTH_INT == EXT_SLV_AXI_DATA_WIDTH)) 
                                                    begin : EQ_BLK
                                                        assign m_wready[ext_mas_cnt] = (~wdata_ff_full) ; 
                                                        always
                                                            @(posedge aclk_i or 
                                                                negedge aresetn_i)
                                                            begin
                                                                if ((!aresetn_i)) 
                                                                    begin
                                                                        m_wvalid[ext_mas_cnt] <=  1'b0 ;
                                                                        m_wdata[ext_mas_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ;
                                                                        m_wstrb[ext_mas_cnt] <=  {(EXT_SLV_AXI_DATA_WIDTH / 8){1'b0}} ;
                                                                        m_wuser[ext_mas_cnt] <=  {AXI_USER_WIDTH{1'b0}} ;
                                                                        m_wlast[ext_mas_cnt] <=  1'b0 ;
                                                                        i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  6'd0 ;
                                                                        wr_last_pending_xfer[ext_mas_cnt] <=  1'b0 ;
                                                                    end
                                                                else
                                                                    begin
                                                                        m_wvalid[ext_mas_cnt] <=  ((i_s_wvalid & o_s_wready) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) ;
                                                                        m_wdata[ext_mas_cnt] <=  i_s_wdata[(EXT_SLV_AXI_DATA_WIDTH - 1):0] ;
                                                                        m_wstrb[ext_mas_cnt] <=  i_s_wstrb[((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] ;
                                                                        m_wuser[ext_mas_cnt] <=  i_s_wuser ;
                                                                        m_wlast[ext_mas_cnt] <=  i_s_wlast ;
                                                                        i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  i_s_ext_mas_dwr_gnt ;
                                                                        wr_last_pending_xfer[ext_mas_cnt] <=  1'b0 ;
                                                                    end
                                                            end
                                                    end
                                                else
                                                    begin : DOWN_BLK
                                                        integer i ; 
                                                        localparam DOWNSIZE_FACTOR = (EXT_MAS_AXI_DATA_WIDTH_INT / EXT_SLV_AXI_DATA_WIDTH) ; 
                                                        localparam EXT_SLV_BYTE_CNT = (EXT_SLV_AXI_DATA_WIDTH / 8) ; 
                                                        localparam ADDR_BIT_SELECT = ((EXT_SLV_AXI_DATA_WIDTH == 8) ? 0 : ((EXT_SLV_AXI_DATA_WIDTH == 16) ? 1 : ((EXT_SLV_AXI_DATA_WIDTH == 32) ? 2 : ((EXT_SLV_AXI_DATA_WIDTH == 64) ? 3 : ((EXT_SLV_AXI_DATA_WIDTH == 128) ? 4 : ((EXT_SLV_AXI_DATA_WIDTH == 256) ? 5 : 6)))))) ; // possibe combinations AXI4->AXI4
                                                        localparam EXT_MAS_ADDR_BIT_WIDTH = clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8)) ; 
                                                        localparam WR_CNT_WIDTH = ((DOWNSIZE_FACTOR == 2) ? 9 : ((DOWNSIZE_FACTOR == 4) ? 10 : ((DOWNSIZE_FACTOR == 8) ? 11 : ((DOWNSIZE_FACTOR == 16) ? 12 : ((DOWNSIZE_FACTOR == 32) ? 13 : ((DOWNSIZE_FACTOR == 64) ? 14 : 15)))))) ; 
                                                        localparam EXT_MAS_AWSIZE_1_IN_BYTES = 2 ; 
                                                        localparam EXT_MAS_AWSIZE_2_IN_BYTES = 4 ; 
                                                        localparam EXT_MAS_AWSIZE_3_IN_BYTES = 8 ; 
                                                        localparam EXT_MAS_AWSIZE_4_IN_BYTES = 16 ; 
                                                        localparam EXT_MAS_AWSIZE_5_IN_BYTES = 32 ; 
                                                        localparam EXT_MAS_AWSIZE_6_IN_BYTES = 64 ; 
                                                        localparam EXT_MAS_AWSIZE_7_IN_BYTES = 128 ; 
                                                        localparam AW_FF_DWIDTH = 13 ; 
                                                        localparam AW_FF_PTR_WIDTH = clog2(EXT_SLV_AW_FF_DEPTH) ; 
                                                        //=====================================================
                                                        //WR ADDRESS FIFO
                                                        //=====================================================
                                                        logic saw_ff_full ; 
                                                        logic saw_ff_empty ; 
                                                        logic saw_ff_wr_en ; 
                                                        logic saw_ff_rd_en ; 
                                                        logic [(AW_FF_DWIDTH - 1):0] saw_ff_wdata ; 
                                                        logic [(AW_FF_DWIDTH - 1):0] saw_ff_rdata_sig ; 
                                                        logic [(AW_FF_DWIDTH - 1):0] saw_ff_rdata ; 
                                                        logic [2:0] saw_size ; 
                                                        logic [7:0] saw_addr ; 
                                                        logic [1:0] saw_burst ; 
                                                        assign saw_ff_wdata = {i_s_awburst,
                                                                    i_s_awsize[2:0],
                                                                    i_s_awaddr[7:0]} ; // 8 bits to represent 128 bytes of address for maximum bus width 1024 bits
                                                        assign saw_ff_wr_en = (((i_s_awvalid & o_s_awready) & (~saw_ff_full)) & (i_s_awid[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                        assign saw_ff_rd_en = ((((i_s_wlast & i_s_wvalid) & o_s_wready) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) & (~saw_ff_empty)) ; 
                                                        //assign saw_ff_rd_en  = i_s_wlast & i_s_wvalid & m_wready[ext_mas_cnt] & (i_s_ext_mas_dwr_gnt == ext_mas_cnt) & ~saw_ff_empty ;
                                                        if ((LATTICE_FIFO == 1)) 
                                                            begin : LSCC_FF_BLK
                                                            end
                                                        else
                                                            begin : CUSTOM_FF_BLK
                                                                axi4_interconnect_ipgen_gen_fifo #(AW_FF_PTR_WIDTH,
                                                                        AW_FF_DWIDTH,
                                                                        0,
                                                                        EXT_SLV_AW_FF_DEPTH) u_sawaddr_awsize_fifo (// Pointer Width
                                                                        // Data Width {awaddr[7:0]} 
                                                                        // Whether Output needs to be registered or not
                                                                        // Number of entries in FIFO
                                                                        .clk(aclk_i), 
                                                                            .aresetn_i(aresetn_i), 
                                                                            .we(saw_ff_wr_en), 
                                                                            .wdata(saw_ff_wdata), 
                                                                            .re(saw_ff_rd_en), 
                                                                            .rdata(saw_ff_rdata_sig), 
                                                                            .full(saw_ff_full), 
                                                                            .pre_full(), 
                                                                            .empty(saw_ff_empty)) ; 
                                                            end
                                                        assign saw_ff_rdata = (saw_ff_empty ? 'd0 : saw_ff_rdata_sig) ; 
                                                        assign saw_burst = saw_ff_rdata[(AW_FF_DWIDTH - 1) -: 2] ; 
                                                        assign saw_size = saw_ff_rdata[8 +: 3] ; 
                                                        assign saw_addr = saw_ff_rdata[7:0] ; 
                                                        logic [(WR_CNT_WIDTH - 1):0] wr_cnt, 
                                                            nxt_wr_cnt ; 
                                                        logic [(EXT_MAS_AXI_DATA_WIDTH_INT - 1):0] wr_data_reg, 
                                                            nxt_wr_data_reg ; 
                                                        logic [((EXT_MAS_AXI_DATA_WIDTH_INT / 8) - 1):0] wr_strb_reg, 
                                                            nxt_wr_strb_reg ; 
                                                        logic m_split_wready ; 
                                                        logic first_beat_flag, 
                                                            nxt_first_beat_flag ; 
                                                        logic pending_xfer, 
                                                            nxt_pending_xfer ; 
                                                        logic [(EXT_MAS_ADDR_BIT_WIDTH - 1):0] lsb_addr, 
                                                            nxt_lsb_addr ; // fixed to 8 bits , since maximum downsizing factor is 8
                                                        //logic [clog2(DOWNSIZE_FACTOR)-1:0] lsb_addr, nxt_lsb_addr; // fixed to 8 bits , since maximum downsizing factor is 8
                                                        logic [clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8)):0] request_bytes ; 
                                                        logic [1:0] btype, 
                                                            nxt_btype ; 
                                                        logic [(TOTAL_EXTMAS_CNT - 1):0] nxt_m_wvalid ; 
                                                        logic [(EXT_SLV_AXI_DATA_WIDTH - 1):0] nxt_m_wdata [TOTAL_EXTMAS_CNT] ; 
                                                        logic [((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] nxt_m_wstrb [TOTAL_EXTMAS_CNT] ; 
                                                        logic [(AXI_USER_WIDTH - 1):0] nxt_m_wuser [TOTAL_EXTMAS_CNT] ; 
                                                        logic [(TOTAL_EXTMAS_CNT - 1):0] nxt_m_wlast ; 
                                                        logic [3:0] fixed_len_cnt, 
                                                            nxt_fixed_len_cnt ; 
                                                        assign m_wready[ext_mas_cnt] = (((|nxt_wr_cnt) || (|wr_cnt)) ? 1'b0 : (wr_last_pending_xfer[ext_mas_cnt] ? (~wdata_ff_full) : ((~wdata_ff_full) & (~saw_ff_empty)))) ; 
                                                        assign m_split_wready = (wr_last_pending_xfer[ext_mas_cnt] ? (~wdata_ff_full) : ((~wdata_ff_full) & (~saw_ff_empty))) ; 
                                                        assign m_wuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                        assign request_bytes = (1'b1 << saw_size) ; 
                                                        always
                                                            @(posedge aclk_i or 
                                                                negedge aresetn_i)
                                                            begin
                                                                if ((~aresetn_i)) 
                                                                    begin
                                                                        m_wvalid[ext_mas_cnt] <=  1'b0 ;
                                                                        m_wlast[ext_mas_cnt] <=  1'b0 ;
                                                                        m_wdata[ext_mas_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ;
                                                                        m_wstrb[ext_mas_cnt] <=  {(EXT_SLV_AXI_DATA_WIDTH / 8){1'b0}} ;
                                                                        wr_data_reg <=  {EXT_MAS_AXI_DATA_WIDTH_INT{1'b0}} ;
                                                                        wr_strb_reg <=  {(EXT_MAS_AXI_DATA_WIDTH_INT / 8){1'b0}} ;
                                                                        wr_cnt <=  {WR_CNT_WIDTH{1'b0}} ;
                                                                        i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  6'd0 ;
                                                                        first_beat_flag <=  1'b0 ;
                                                                        pending_xfer <=  1'b0 ;
                                                                        lsb_addr <=  {EXT_MAS_ADDR_BIT_WIDTH{1'b0}} ;
                                                                        fixed_len_cnt <=  4'd0 ;
                                                                        btype <=  2'd0 ;
                                                                        wr_last_pending_xfer[ext_mas_cnt] <=  1'b0 ;
                                                                    end
                                                                else
                                                                    begin
                                                                        m_wlast[ext_mas_cnt] <=  nxt_m_wlast[ext_mas_cnt] ;
                                                                        m_wvalid[ext_mas_cnt] <=  nxt_m_wvalid[ext_mas_cnt] ;
                                                                        m_wdata[ext_mas_cnt] <=  nxt_m_wdata[ext_mas_cnt] ;
                                                                        m_wstrb[ext_mas_cnt] <=  nxt_m_wstrb[ext_mas_cnt] ;
                                                                        wr_data_reg <=  nxt_wr_data_reg ;
                                                                        wr_strb_reg <=  nxt_wr_strb_reg ;
                                                                        wr_cnt <=  nxt_wr_cnt ;
                                                                        i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  (((|(i_s_ext_mas_dwr_gnt ^ i_s_ext_mas_dwr_gnt_final[ext_mas_cnt])) && ((|wr_cnt) || ((wr_cnt == 'd0) & wdata_ff_full))) ? i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] : i_s_ext_mas_dwr_gnt) ;// to fix issue faced in  16->8 downsize; 1master and 1slave
                                                                        //i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <= |(i_s_ext_mas_dwr_gnt^i_s_ext_mas_dwr_gnt_final[ext_mas_cnt]) && (|wr_cnt) ? i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] : i_s_ext_mas_dwr_gnt; // to fix issue faced in  16->8 downsize; 1master and 1slave
                                                                        first_beat_flag <=  nxt_first_beat_flag ;
                                                                        pending_xfer <=  nxt_pending_xfer ;
                                                                        lsb_addr <=  nxt_lsb_addr ;
                                                                        fixed_len_cnt <=  nxt_fixed_len_cnt ;
                                                                        btype <=  nxt_btype ;
                                                                        wr_last_pending_xfer[ext_mas_cnt] <=  nxt_wr_last_pending_xfer[ext_mas_cnt] ;
                                                                    end
                                                            end
                                                        integer j ; 
                                                        always
                                                            @(*)
                                                            begin
                                                                nxt_m_wvalid[ext_mas_cnt] = m_wvalid[ext_mas_cnt] ;
                                                                nxt_m_wdata[ext_mas_cnt] = m_wdata[ext_mas_cnt] ;
                                                                nxt_m_wstrb[ext_mas_cnt] = m_wstrb[ext_mas_cnt] ;
                                                                nxt_m_wlast[ext_mas_cnt] = m_wlast[ext_mas_cnt] ;
                                                                nxt_wr_cnt = wr_cnt ;
                                                                nxt_wr_data_reg = wr_data_reg ;
                                                                nxt_wr_strb_reg = wr_strb_reg ;
                                                                nxt_first_beat_flag = first_beat_flag ;
                                                                nxt_lsb_addr = lsb_addr ;
                                                                nxt_pending_xfer = pending_xfer ;
                                                                nxt_fixed_len_cnt = fixed_len_cnt ;
                                                                nxt_btype = btype ;
                                                                nxt_wr_last_pending_xfer[ext_mas_cnt] = ((wr_last_pending_xfer[ext_mas_cnt] & (!(|wr_cnt))) ? (!m_wready[ext_mas_cnt]) : (((((i_s_wvalid & i_s_wlast) & o_s_wready) & (~wdata_ff_full)) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) ? 1'b1 : wr_last_pending_xfer[ext_mas_cnt])) ;
                                                                if ((|wr_cnt)) 
                                                                    begin
                                                                        if ((m_wvalid[ext_mas_cnt] & m_split_wready)) 
                                                                            //if( m_wvalid [ext_mas_cnt] &  m_split_wready[ext_mas_cnt] & (~wdata_ff_full))
                                                                            begin
                                                                                nxt_wr_cnt = (wr_cnt - 'd1) ;
                                                                                nxt_fixed_len_cnt = ((btype == 2'd0) ? (fixed_len_cnt + 1'd1) : fixed_len_cnt) ;
                                                                                nxt_wr_data_reg = (wr_data_reg >> EXT_SLV_AXI_DATA_WIDTH) ;
                                                                                nxt_wr_strb_reg = (wr_strb_reg >> (EXT_SLV_AXI_DATA_WIDTH / 8)) ;
                                                                                nxt_m_wvalid[ext_mas_cnt] = 1'b1 ;
                                                                                nxt_m_wlast[ext_mas_cnt] = ((wr_cnt == 'd1) || (&fixed_len_cnt)) ;
                                                                                nxt_m_wdata[ext_mas_cnt] = wr_data_reg[0 +: EXT_SLV_AXI_DATA_WIDTH] ;
                                                                                nxt_m_wstrb[ext_mas_cnt] = wr_strb_reg[0 +: (EXT_SLV_AXI_DATA_WIDTH / 8)] ;
                                                                                //if(saw_burst==2'd0) //fixed
                                                                                //begin
                                                                                //   case(saw_size)
                                                                                //   3'd0:
                                                                                //   begin
                                                                                //   nxt_m_wdata[ext_mas_cnt][0 +:8] =  wr_data_reg[0 +: EXT_SLV_AXI_DATA_WIDTH];
                                                                                //   nxt_m_wstrb[ext_mas_cnt][0 +:8] =  wr_strb_reg[0 +: EXT_SLV_AXI_DATA_WIDTH/8];
                                                                                //   end
                                                                                //   endcase
                                                                                //end
                                                                                //else
                                                                                //begin
                                                                                //   nxt_m_wdata[ext_mas_cnt]  = wr_data_reg[0 +: EXT_SLV_AXI_DATA_WIDTH];
                                                                                //   nxt_m_wstrb[ext_mas_cnt]  = wr_strb_reg[0 +: EXT_SLV_AXI_DATA_WIDTH/8];
                                                                                //end
                                                                            end
                                                                        else
                                                                            begin
                                                                                nxt_wr_cnt = wr_cnt ;
                                                                            end
                                                                    end
                                                                else
                                                                    if (((((i_s_wvalid & o_s_wready) & (~wdata_ff_full)) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) & (~saw_ff_empty))) 
                                                                        begin
                                                                            if (first_beat_flag) 
                                                                                begin
                                                                                nxt_first_beat_flag = (i_s_wlast ? 1'b0 : first_beat_flag) ;
                                                                                nxt_m_wlast[ext_mas_cnt] = 1'b0 ;
                                                                                nxt_m_wvalid[ext_mas_cnt] = 1'b1 ;
                                                                                nxt_wr_data_reg = (i_s_wdata >> EXT_SLV_AXI_DATA_WIDTH) ;
                                                                                nxt_wr_strb_reg = (i_s_wstrb >> (EXT_SLV_AXI_DATA_WIDTH / 8)) ;
                                                                                nxt_m_wdata[ext_mas_cnt] = i_s_wdata[0 +: EXT_SLV_AXI_DATA_WIDTH] ;//fixed
                                                                                nxt_m_wstrb[ext_mas_cnt] = i_s_wstrb[0 +: (EXT_SLV_AXI_DATA_WIDTH / 8)] ;
                                                                                //not possible
                                                                                case (saw_size)
                                                                                3'd1 : 
                                                                                begin
                                                                                nxt_wr_cnt = ((EXT_MAS_AWSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) ;
                                                                                end
                                                                                3'd2 : 
                                                                                begin
                                                                                nxt_wr_cnt = ((EXT_MAS_AWSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) ;
                                                                                end
                                                                                3'd3 : 
                                                                                begin
                                                                                nxt_wr_cnt = ((EXT_MAS_AWSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) ;
                                                                                end
                                                                                3'd4 : 
                                                                                begin
                                                                                nxt_wr_cnt = ((EXT_MAS_AWSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) ;
                                                                                end
                                                                                3'd5 : 
                                                                                begin
                                                                                nxt_wr_cnt = ((EXT_MAS_AWSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) ;
                                                                                end
                                                                                3'd6 : 
                                                                                begin
                                                                                nxt_wr_cnt = ((EXT_MAS_AWSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) ;
                                                                                end
                                                                                3'd7 : 
                                                                                begin
                                                                                nxt_wr_cnt = ((EXT_MAS_AWSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) ;
                                                                                end
                                                                                default : 
                                                                                nxt_wr_cnt = wr_cnt ;
                                                                                endcase 
                                                                                end
                                                                            else
                                                                                begin
                                                                                nxt_m_wvalid[ext_mas_cnt] = 1'b1 ;
                                                                                if ((saw_size <= ADDR_BIT_SELECT)) 
                                                                                // Narrow transfe with request size is less than or equal to slave bus width
                                                                                begin
                                                                                nxt_wr_cnt = {WR_CNT_WIDTH{1'b0}} ;
                                                                                nxt_m_wvalid[ext_mas_cnt] = 1'b1 ;
                                                                                nxt_m_wlast[ext_mas_cnt] = 1'b1 ;
                                                                                nxt_pending_xfer = (i_s_wlast ? 1'b0 : 1'b1) ;
                                                                                if (pending_xfer) 
                                                                                begin
                                                                                nxt_m_wdata[ext_mas_cnt] = (i_s_wdata >> (lsb_addr[(EXT_MAS_ADDR_BIT_WIDTH - 1) -: clog2(DOWNSIZE_FACTOR)] * EXT_SLV_AXI_DATA_WIDTH)) ;
                                                                                nxt_m_wstrb[ext_mas_cnt] = (i_s_wstrb >> ((lsb_addr[(EXT_MAS_ADDR_BIT_WIDTH - 1) -: clog2(DOWNSIZE_FACTOR)] * EXT_SLV_AXI_DATA_WIDTH) / 8)) ;
                                                                                nxt_lsb_addr = ((saw_burst == 2'd0) ? lsb_addr : (lsb_addr + request_bytes)) ;
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_m_wdata[ext_mas_cnt] = (i_s_wdata >> (saw_addr[(EXT_MAS_ADDR_BIT_WIDTH - 1) -: clog2(DOWNSIZE_FACTOR)] * EXT_SLV_AXI_DATA_WIDTH)) ;
                                                                                nxt_m_wstrb[ext_mas_cnt] = (i_s_wstrb >> ((saw_addr[(EXT_MAS_ADDR_BIT_WIDTH - 1) -: clog2(DOWNSIZE_FACTOR)] * EXT_SLV_AXI_DATA_WIDTH) / 8)) ;
                                                                                case (saw_size)
                                                                                3'd0 : 
                                                                                nxt_lsb_addr = ((saw_burst == 2'd0) ? saw_addr[7:0] : (saw_addr[7:0] + request_bytes)) ;
                                                                                3'd1 : 
                                                                                nxt_lsb_addr = ((saw_burst == 2'd0) ? {saw_addr[7:1],
                                                                                1'b0} : ({saw_addr[7:1],
                                                                                1'b0} + request_bytes)) ;
                                                                                3'd2 : 
                                                                                nxt_lsb_addr = ((saw_burst == 2'd0) ? {saw_addr[7:2],
                                                                                2'd0} : ({saw_addr[7:2],
                                                                                2'd0} + request_bytes)) ;
                                                                                3'd3 : 
                                                                                nxt_lsb_addr = ((saw_burst == 2'd0) ? {saw_addr[7:3],
                                                                                3'd0} : ({saw_addr[7:3],
                                                                                3'd0} + request_bytes)) ;
                                                                                3'd4 : 
                                                                                nxt_lsb_addr = ((saw_burst == 2'd0) ? {saw_addr[7:4],
                                                                                4'd0} : ({saw_addr[7:4],
                                                                                4'd0} + request_bytes)) ;
                                                                                3'd5 : 
                                                                                nxt_lsb_addr = ((saw_burst == 2'd0) ? {saw_addr[7:5],
                                                                                5'd0} : ({saw_addr[7:5],
                                                                                5'd0} + request_bytes)) ;
                                                                                3'd6 : 
                                                                                nxt_lsb_addr = ((saw_burst == 2'd0) ? {saw_addr[7:6],
                                                                                6'd0} : ({saw_addr[7:6],
                                                                                6'd0} + request_bytes)) ;
                                                                                endcase 
                                                                                end
                                                                                end
                                                                                else
                                                                                // Full size or  Narrow transfer with request size greater than slave bus width
                                                                                begin
                                                                                //nxt_first_beat_flag = i_s_wlast ? 1'b0 : 1'b1;
                                                                                nxt_first_beat_flag = ((i_s_wlast || (saw_burst == 2'd0)) ? 1'b0 : 1'b1) ;
                                                                                nxt_fixed_len_cnt = 4'd1 ;
                                                                                nxt_btype = saw_burst ;
                                                                                for (i = 0 ; (i < DOWNSIZE_FACTOR) ; i = (i + 1))
                                                                                begin
                                                                                if ((saw_addr[ADDR_BIT_SELECT +: clog2(DOWNSIZE_FACTOR)] == i)) 
                                                                                begin
                                                                                nxt_wr_data_reg = (i_s_wdata[(EXT_MAS_AXI_DATA_WIDTH_INT - 1):0] >> ((i + 1) * EXT_SLV_AXI_DATA_WIDTH)) ;
                                                                                nxt_wr_strb_reg = (i_s_wstrb[((EXT_MAS_AXI_DATA_WIDTH_INT / 8) - 1):0] >> ((i + 1) * (EXT_SLV_AXI_DATA_WIDTH / 8))) ;
                                                                                nxt_m_wdata[ext_mas_cnt] = i_s_wdata[(i * EXT_SLV_AXI_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH] ;
                                                                                nxt_m_wstrb[ext_mas_cnt] = i_s_wstrb[(i * (EXT_SLV_AXI_DATA_WIDTH / 8)) +: (EXT_SLV_AXI_DATA_WIDTH / 8)] ;
                                                                                end
                                                                                end
                                                                                //not possible
                                                                                case (saw_size)
                                                                                3'd1 : 
                                                                                begin
                                                                                nxt_wr_cnt = (first_beat_flag ? ((EXT_MAS_AWSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) : (((EXT_MAS_AWSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_wlast[ext_mas_cnt] = (first_beat_flag ? 1'b0 : (!(|(((EXT_MAS_AWSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[0] >> ADDR_BIT_SELECT)) - 1'd1)))) ;
                                                                                end
                                                                                3'd2 : 
                                                                                begin
                                                                                nxt_wr_cnt = (first_beat_flag ? ((EXT_MAS_AWSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) : (((EXT_MAS_AWSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[1:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_wlast[ext_mas_cnt] = (first_beat_flag ? 1'b0 : (!(|(((EXT_MAS_AWSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[1:0] >> ADDR_BIT_SELECT)) - 1'd1)))) ;
                                                                                end
                                                                                3'd3 : 
                                                                                begin
                                                                                nxt_wr_cnt = (first_beat_flag ? ((EXT_MAS_AWSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) : (((EXT_MAS_AWSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[2:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_wlast[ext_mas_cnt] = (first_beat_flag ? 1'b0 : (!(|(((EXT_MAS_AWSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[2:0] >> ADDR_BIT_SELECT)) - 1'd1)))) ;
                                                                                end
                                                                                3'd4 : 
                                                                                begin
                                                                                nxt_wr_cnt = (first_beat_flag ? ((EXT_MAS_AWSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) : (((EXT_MAS_AWSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[3:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_wlast[ext_mas_cnt] = (first_beat_flag ? 1'b0 : (!(|(((EXT_MAS_AWSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[3:0] >> ADDR_BIT_SELECT)) - 1'd1)))) ;
                                                                                end
                                                                                3'd5 : 
                                                                                begin
                                                                                nxt_wr_cnt = (first_beat_flag ? ((EXT_MAS_AWSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) : (((EXT_MAS_AWSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[4:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_wlast[ext_mas_cnt] = (first_beat_flag ? 1'b0 : (!(|(((EXT_MAS_AWSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[4:0] >> ADDR_BIT_SELECT)) - 1'd1)))) ;
                                                                                end
                                                                                3'd6 : 
                                                                                begin
                                                                                nxt_wr_cnt = (first_beat_flag ? ((EXT_MAS_AWSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) : (((EXT_MAS_AWSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[5:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_wlast[ext_mas_cnt] = (first_beat_flag ? 1'b0 : (!(|(((EXT_MAS_AWSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[5:0] >> ADDR_BIT_SELECT)) - 1'd1)))) ;
                                                                                end
                                                                                3'd7 : 
                                                                                begin
                                                                                nxt_wr_cnt = (first_beat_flag ? ((EXT_MAS_AWSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) : (((EXT_MAS_AWSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[6:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_wlast[ext_mas_cnt] = (first_beat_flag ? 1'b0 : (!(|(((EXT_MAS_AWSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[6:0] >> ADDR_BIT_SELECT)) - 1'd1)))) ;
                                                                                end
                                                                                default : 
                                                                                nxt_wr_cnt = wr_cnt ;
                                                                                endcase 
                                                                                end
                                                                                end
                                                                        end
                                                                    else
                                                                        begin
                                                                            nxt_wr_cnt = wr_cnt ;
                                                                            nxt_m_wvalid[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wvalid[ext_mas_cnt]) ;
                                                                            nxt_m_wlast[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wlast[ext_mas_cnt]) ;
                                                                        end
                                                            end
                                                    end
                                        end
                                    else
                                        begin : AXI4LITE_EXTMAS_BLK
                                            if ((EXT_MAS_AXI_DATA_WIDTH_INT < EXT_SLV_AXI_DATA_WIDTH)) 
                                                begin : UP_BLK
                                                    localparam UP_SIZE = (EXT_SLV_AXI_DATA_WIDTH / EXT_MAS_AXI_DATA_WIDTH_INT) ; 
                                                    localparam AW_FF_DWIDTH = 8 ; 
                                                    localparam AW_FF_PTR_WIDTH = clog2(EXT_SLV_AW_FF_DEPTH) ; 
                                                    //logic [6:0] ext_mas_axi4_data_unit;
                                                    //assign ext_mas_axi4_data_unit = EXT_MAS_AXI_DATA_WIDTH_INT;
                                                    //=====================================================
                                                    //WR ADDRESS FIFO
                                                    //=====================================================
                                                    logic saw_ff_full ; 
                                                    logic saw_ff_empty ; 
                                                    logic saw_ff_wr_en ; 
                                                    logic saw_ff_rd_en ; 
                                                    logic [(AW_FF_DWIDTH - 1):0] saw_ff_wdata ; 
                                                    logic [(AW_FF_DWIDTH - 1):0] saw_ff_rdata_sig ; 
                                                    logic [(AW_FF_DWIDTH - 1):0] saw_ff_rdata ; 
                                                    assign saw_ff_wdata = i_s_awaddr[7:0] ; // 8 bits to represent 128 bytes of address for maximum bus width 1024 bits
                                                    assign saw_ff_wr_en = (((i_s_awvalid & o_s_awready) & (~saw_ff_full)) & (i_s_awid[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                    assign saw_ff_rd_en = ((((i_s_wlast & i_s_wvalid) & o_s_wready) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) & (~saw_ff_empty)) ; 
                                                    //assign saw_ff_rd_en  = i_s_wlast & i_s_wvalid & m_wready[ext_mas_cnt] & (i_s_ext_mas_dwr_gnt == ext_mas_cnt) & ~saw_ff_empty ;
                                                    if ((LATTICE_FIFO == 1)) 
                                                        begin : LSCC_FF_BLK
                                                        end
                                                    else
                                                        begin : CUSTOM_FF_BLK
                                                            axi4_interconnect_ipgen_gen_fifo #(AW_FF_PTR_WIDTH,
                                                                    AW_FF_DWIDTH,
                                                                    0,
                                                                    EXT_SLV_AW_FF_DEPTH) u_sawaddr_fifo (// Pointer Width
                                                                    // Data Width {awaddr[7:0]} 
                                                                    // Whether Output needs to be registered or not
                                                                    // Number of entries in FIFO
                                                                    .clk(aclk_i), 
                                                                        .aresetn_i(aresetn_i), 
                                                                        .we(saw_ff_wr_en), 
                                                                        .wdata(saw_ff_wdata), 
                                                                        .re(saw_ff_rd_en), 
                                                                        .rdata(saw_ff_rdata_sig), 
                                                                        .full(saw_ff_full), 
                                                                        .pre_full(), 
                                                                        .empty(saw_ff_empty)) ; 
                                                        end
                                                    assign saw_ff_rdata = (saw_ff_empty ? 'd0 : saw_ff_rdata_sig) ; 
                                                    localparam WR_UP_IDLE = 1'b0 ; 
                                                    localparam WR_VALID = 1'b1 ; 
                                                    localparam ADDR_WIDTH = clog2(UP_SIZE) ; 
                                                    logic cur_wr_up_state, 
                                                        nxt_wr_up_state ; 
                                                    logic [(ADDR_WIDTH - 1):0] lsb_addr, 
                                                        nxt_lsb_addr ; 
                                                    logic [(EXT_SLV_AXI_DATA_WIDTH - 1):0] i_s_wdata_sig ; 
                                                    logic [((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] i_s_wstrb_sig ; 
                                                    logic [(TOTAL_EXTMAS_CNT - 1):0] nxt_m_wvalid ; 
                                                    logic [(EXT_SLV_AXI_DATA_WIDTH - 1):0] nxt_m_wdata [TOTAL_EXTMAS_CNT] ; 
                                                    logic [((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] nxt_m_wstrb [TOTAL_EXTMAS_CNT] ; 
                                                    localparam MSB_ADDR = (clog2((EXT_SLV_AXI_DATA_WIDTH / 8)) - 1) ; 
                                                    localparam ADDR_BIT_WIDTH = ((UP_SIZE == 2) ? 1 : ((UP_SIZE == 4) ? 2 : ((UP_SIZE == 8) ? 3 : ((UP_SIZE == 16) ? 4 : 5)))) ; 
                                                    //localparam LSB_ADDR = UP_SIZE==2 ? MSB_ADDR : MSB_ADDR-1  ; //AXI4lite-> AXI4 slave; 32->64,128,256,512,1024 ; 64->128,256,512,1024; 
                                                    //assign m_wready[ext_mas_cnt] =  ~wdata_ff_full & (~saw_ff_empty);  
                                                    assign m_wready[ext_mas_cnt] = (wr_last_pending_xfer[ext_mas_cnt] ? (~wdata_ff_full) : ((~wdata_ff_full) & (~saw_ff_empty))) ; 
                                                    assign m_wlast[ext_mas_cnt] = 1'b1 ; 
                                                    assign m_wuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                    assign i_s_wdata_sig = {{(EXT_SLV_AXI_DATA_WIDTH - EXT_MAS_AXI_DATA_WIDTH_INT){1'b0}},
                                                                i_s_wdata[0 +: EXT_MAS_AXI_DATA_WIDTH_INT]} ; 
                                                    assign i_s_wstrb_sig = {{((EXT_SLV_AXI_DATA_WIDTH / 8) - (EXT_MAS_AXI_DATA_WIDTH_INT / 8)){1'b0}},
                                                                i_s_wstrb[0 +: (EXT_MAS_AXI_DATA_WIDTH_INT / 8)]} ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((!aresetn_i)) 
                                                                begin
                                                                    cur_wr_up_state <=  WR_UP_IDLE ;
                                                                    lsb_addr <=  {ADDR_WIDTH{1'b0}} ;
                                                                    m_wvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_wdata[ext_mas_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ;
                                                                    m_wstrb[ext_mas_cnt] <=  {(EXT_SLV_AXI_DATA_WIDTH / 8){1'b0}} ;
                                                                    i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  6'd0 ;
                                                                    wr_last_pending_xfer[ext_mas_cnt] <=  1'b0 ;
                                                                end
                                                            else
                                                                begin
                                                                    cur_wr_up_state <=  nxt_wr_up_state ;
                                                                    lsb_addr <=  nxt_lsb_addr ;
                                                                    m_wvalid[ext_mas_cnt] <=  nxt_m_wvalid[ext_mas_cnt] ;
                                                                    m_wdata[ext_mas_cnt] <=  nxt_m_wdata[ext_mas_cnt] ;
                                                                    m_wstrb[ext_mas_cnt] <=  nxt_m_wstrb[ext_mas_cnt] ;
                                                                    i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  i_s_ext_mas_dwr_gnt ;
                                                                    wr_last_pending_xfer[ext_mas_cnt] <=  nxt_wr_last_pending_xfer[ext_mas_cnt] ;
                                                                end
                                                        end
                                                    integer upsize_cnt ; 
                                                    always
                                                        @(*)
                                                        begin
                                                            nxt_m_wvalid[ext_mas_cnt] = m_wvalid[ext_mas_cnt] ;
                                                            nxt_m_wdata[ext_mas_cnt] = m_wdata[ext_mas_cnt] ;
                                                            nxt_m_wstrb[ext_mas_cnt] = m_wstrb[ext_mas_cnt] ;
                                                            nxt_lsb_addr = lsb_addr ;
                                                            nxt_wr_up_state = cur_wr_up_state ;
                                                            nxt_wr_last_pending_xfer[ext_mas_cnt] = (wr_last_pending_xfer[ext_mas_cnt] ? (!m_wready[ext_mas_cnt]) : (((((i_s_wvalid & i_s_wlast) & o_s_wready) & (~wdata_ff_full)) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) ? 1'b1 : wr_last_pending_xfer[ext_mas_cnt])) ;
                                                            case (cur_wr_up_state)
                                                            WR_UP_IDLE : 
                                                                begin
                                                                    nxt_m_wvalid[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wvalid[ext_mas_cnt]) ;
                                                                    if ((((i_s_ext_mas_dwr_gnt == ext_mas_cnt) & (~wdata_ff_full)) & (~saw_ff_empty))) 
                                                                        begin
                                                                            nxt_wr_up_state = WR_VALID ;
                                                                            nxt_lsb_addr = saw_ff_rdata[MSB_ADDR -: ADDR_BIT_WIDTH] ;
                                                                            //nxt_lsb_addr    = saw_ff_rdata[MSB_ADDR:LSB_ADDR];
                                                                        end
                                                                    else
                                                                        begin
                                                                            nxt_wr_up_state = WR_UP_IDLE ;
                                                                        end
                                                                end
                                                            WR_VALID : 
                                                                begin
                                                                    //for(upsize_cnt=0 ;  upsize_cnt<UP_SIZE ; upsize_cnt = upsize_cnt +1 )
                                                                    //begin
                                                                    //if ( i_s_wvalid & o_s_wready & (lsb_addr==upsize_cnt) & (~wdata_ff_full))
                                                                    if (((i_s_wvalid & o_s_wready) & (~wdata_ff_full))) 
                                                                    //end
                                                                        begin
                                                                            nxt_lsb_addr = {ADDR_WIDTH{1'b0}} ;
                                                                            //nxt_lsb_addr              = lsb_addr==UP_SIZE-1 ? {ADDR_WIDTH{1'b0}} : (lsb_addr + 1'd1 );
                                                                            nxt_wr_up_state = WR_UP_IDLE ;
                                                                            nxt_m_wvalid[ext_mas_cnt] = 1'b1 ;
                                                                            nxt_m_wdata[ext_mas_cnt] = (i_s_wdata_sig << (lsb_addr * EXT_MAS_AXI_DATA_WIDTH_INT)) ;
                                                                            nxt_m_wstrb[ext_mas_cnt] = (i_s_wstrb_sig << ((lsb_addr * EXT_MAS_AXI_DATA_WIDTH_INT) / 8)) ;
                                                                        end
                                                                    else
                                                                        begin
                                                                            nxt_m_wvalid[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wvalid[ext_mas_cnt]) ;
                                                                        end
                                                                end
                                                            default : 
                                                                begin
                                                                    nxt_wr_up_state = WR_UP_IDLE ;
                                                                end
                                                            endcase 
                                                        end
                                                end
                                            else
                                                if ((EXT_MAS_AXI_DATA_WIDTH_INT == EXT_SLV_AXI_DATA_WIDTH)) 
                                                    begin : EQ_BLK
                                                        assign m_wready[ext_mas_cnt] = (~wdata_ff_full) ; 
                                                        assign m_wlast[ext_mas_cnt] = 1'b1 ; 
                                                        assign m_wuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                        always
                                                            @(posedge aclk_i or 
                                                                negedge aresetn_i)
                                                            begin
                                                                if ((!aresetn_i)) 
                                                                    begin
                                                                        m_wvalid[ext_mas_cnt] <=  1'b0 ;
                                                                        m_wdata[ext_mas_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ;
                                                                        m_wstrb[ext_mas_cnt] <=  {(EXT_SLV_AXI_DATA_WIDTH / 8){1'b0}} ;
                                                                        i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  1'b0 ;
                                                                        wr_last_pending_xfer[ext_mas_cnt] <=  1'b0 ;
                                                                    end
                                                                else
                                                                    begin
                                                                        m_wvalid[ext_mas_cnt] <=  ((i_s_wvalid & o_s_wready) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) ;
                                                                        m_wdata[ext_mas_cnt] <=  i_s_wdata[(EXT_SLV_AXI_DATA_WIDTH - 1):0] ;
                                                                        m_wstrb[ext_mas_cnt] <=  i_s_wstrb[((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] ;
                                                                        i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  i_s_ext_mas_dwr_gnt ;
                                                                        wr_last_pending_xfer[ext_mas_cnt] <=  1'b0 ;
                                                                    end
                                                            end
                                                    end
                                                else
                                                    begin : DOWN_BLK
                                                        localparam DOWNSIZE_FACTOR = (EXT_MAS_AXI_DATA_WIDTH_INT / EXT_SLV_AXI_DATA_WIDTH) ; 
                                                        localparam BIT_SELECT = ((EXT_SLV_AXI_DATA_WIDTH == 8) ? 0 : ((EXT_SLV_AXI_DATA_WIDTH == 16) ? 1 : 2)) ; // possibe values when AXI4LITE->AXI4 during downsize
                                                        localparam AW_FF_DWIDTH = 8 ; 
                                                        localparam AW_FF_PTR_WIDTH = clog2(EXT_SLV_AW_FF_DEPTH) ; 
                                                        //=====================================================
                                                        //WR ADDRESS FIFO
                                                        //=====================================================
                                                        logic saw_ff_full ; 
                                                        logic saw_ff_empty ; 
                                                        logic saw_ff_wr_en ; 
                                                        logic saw_ff_rd_en ; 
                                                        logic [(AW_FF_DWIDTH - 1):0] saw_ff_wdata ; 
                                                        logic [(AW_FF_DWIDTH - 1):0] saw_ff_rdata_sig ; 
                                                        logic [(AW_FF_DWIDTH - 1):0] saw_ff_rdata ; 
                                                        assign saw_ff_wdata = {i_s_awaddr[2:0]} ; // since maximum 64 bit is AXI4 lite master 
                                                        assign saw_ff_wr_en = (((i_s_awvalid & o_s_awready) & (~saw_ff_full)) & (i_s_awid[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                        assign saw_ff_rd_en = ((((i_s_wlast & i_s_wvalid) & o_s_wready) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) & (~saw_ff_empty)) ; 
                                                        //assign saw_ff_rd_en  = i_s_wlast & i_s_wvalid & m_wready[ext_mas_cnt] & (i_s_ext_mas_dwr_gnt == ext_mas_cnt) & ~saw_ff_empty ;
                                                        if ((LATTICE_FIFO == 1)) 
                                                            begin : LSCC_FF_BLK
                                                            end
                                                        else
                                                            begin : CUSTOM_FF_BLK
                                                                axi4_interconnect_ipgen_gen_fifo #(AW_FF_PTR_WIDTH,
                                                                        AW_FF_DWIDTH,
                                                                        0,
                                                                        EXT_SLV_AW_FF_DEPTH) u_sawaddr_fifo (// Pointer Width
                                                                        // Data Width {awaddr[7:0]} 
                                                                        // Whether Output needs to be registered or not
                                                                        // Number of entries in FIFO
                                                                        .clk(aclk_i), 
                                                                            .aresetn_i(aresetn_i), 
                                                                            .we(saw_ff_wr_en), 
                                                                            .wdata(saw_ff_wdata), 
                                                                            .re(saw_ff_rd_en), 
                                                                            .rdata(saw_ff_rdata_sig), 
                                                                            .full(saw_ff_full), 
                                                                            .pre_full(), 
                                                                            .empty(saw_ff_empty)) ; 
                                                            end
                                                        assign saw_ff_rdata = (saw_ff_empty ? 'd0 : saw_ff_rdata_sig) ; 
                                                        localparam WR_CNT_WIDTH = clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8)) ; 
                                                        logic [(WR_CNT_WIDTH - 1):0] wr_cnt, 
                                                            nxt_wr_cnt ; 
                                                        logic [(EXT_MAS_AXI_DATA_WIDTH_INT - 1):0] wr_data_reg, 
                                                            nxt_wr_data_reg ; 
                                                        logic [((EXT_MAS_AXI_DATA_WIDTH_INT / 8) - 1):0] wr_strb_reg, 
                                                            nxt_wr_strb_reg ; 
                                                        logic m_split_wready ; 
                                                        logic [(TOTAL_EXTMAS_CNT - 1):0] nxt_m_wvalid ; 
                                                        logic [(EXT_SLV_AXI_DATA_WIDTH - 1):0] nxt_m_wdata [TOTAL_EXTMAS_CNT] ; 
                                                        logic [((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] nxt_m_wstrb [TOTAL_EXTMAS_CNT] ; 
                                                        logic [(TOTAL_EXTMAS_CNT - 1):0] nxt_m_wlast ; 
                                                        //assign m_wready[ext_mas_cnt] =  |wr_cnt ? 1'b0 : ~wdata_ff_full ;  
                                                        assign m_wuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                        assign m_wready[ext_mas_cnt] = (((|nxt_wr_cnt) || (|wr_cnt)) ? 1'b0 : (wr_last_pending_xfer[ext_mas_cnt] ? (~wdata_ff_full) : ((~wdata_ff_full) & (~saw_ff_empty)))) ; 
                                                        assign m_split_wready = (wr_last_pending_xfer[ext_mas_cnt] ? (~wdata_ff_full) : ((~wdata_ff_full) & (~saw_ff_empty))) ; 
                                                        always
                                                            @(posedge aclk_i or 
                                                                negedge aresetn_i)
                                                            begin
                                                                if ((!aresetn_i)) 
                                                                    begin
                                                                        m_wvalid[ext_mas_cnt] <=  1'b0 ;
                                                                        m_wdata[ext_mas_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ;
                                                                        m_wstrb[ext_mas_cnt] <=  {(EXT_SLV_AXI_DATA_WIDTH / 8){1'b0}} ;
                                                                        m_wlast[ext_mas_cnt] <=  1'b0 ;
                                                                        wr_data_reg <=  {EXT_MAS_AXI_DATA_WIDTH_INT{1'b0}} ;
                                                                        wr_strb_reg <=  {(EXT_MAS_AXI_DATA_WIDTH_INT / 8){1'b0}} ;
                                                                        wr_cnt <=  {WR_CNT_WIDTH{1'b0}} ;
                                                                        i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  1'b0 ;
                                                                        wr_last_pending_xfer[ext_mas_cnt] <=  1'b0 ;
                                                                    end
                                                                else
                                                                    begin
                                                                        m_wvalid[ext_mas_cnt] <=  nxt_m_wvalid[ext_mas_cnt] ;
                                                                        m_wdata[ext_mas_cnt] <=  nxt_m_wdata[ext_mas_cnt] ;
                                                                        m_wstrb[ext_mas_cnt] <=  nxt_m_wstrb[ext_mas_cnt] ;
                                                                        m_wlast[ext_mas_cnt] <=  nxt_m_wlast[ext_mas_cnt] ;
                                                                        wr_data_reg <=  nxt_wr_data_reg ;
                                                                        wr_strb_reg <=  nxt_wr_strb_reg ;
                                                                        wr_cnt <=  nxt_wr_cnt ;
                                                                        i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  (((|(i_s_ext_mas_dwr_gnt ^ i_s_ext_mas_dwr_gnt_final[ext_mas_cnt])) && ((|wr_cnt) || ((wr_cnt == 'd0) & wdata_ff_full))) ? i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] : i_s_ext_mas_dwr_gnt) ;// to fix issue faced in  16->8 downsize; 1master and 1slave
                                                                        //i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <= (|(i_s_ext_mas_dwr_gnt^i_s_ext_mas_dwr_gnt_final[ext_mas_cnt])) && (|wr_cnt) ? i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] : i_s_ext_mas_dwr_gnt; // to fix issue faced in  16->8 downsize; 1master and 1slave
                                                                        wr_last_pending_xfer[ext_mas_cnt] <=  nxt_wr_last_pending_xfer[ext_mas_cnt] ;
                                                                    end
                                                            end
                                                        integer i ; 
                                                        always
                                                            @(*)
                                                            begin
                                                                nxt_m_wvalid[ext_mas_cnt] = m_wvalid[ext_mas_cnt] ;
                                                                nxt_m_wdata[ext_mas_cnt] = m_wdata[ext_mas_cnt] ;
                                                                nxt_m_wstrb[ext_mas_cnt] = m_wstrb[ext_mas_cnt] ;
                                                                nxt_m_wlast[ext_mas_cnt] = m_wlast[ext_mas_cnt] ;
                                                                nxt_wr_data_reg = wr_data_reg ;
                                                                nxt_wr_strb_reg = wr_strb_reg ;
                                                                nxt_wr_cnt = wr_cnt ;
                                                                nxt_wr_last_pending_xfer[ext_mas_cnt] = ((wr_last_pending_xfer[ext_mas_cnt] & (!(|wr_cnt))) ? (!m_wready[ext_mas_cnt]) : (((((i_s_wvalid & i_s_wlast) & o_s_wready) & (~wdata_ff_full)) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) ? 1'b1 : wr_last_pending_xfer[ext_mas_cnt])) ;
                                                                if ((|wr_cnt)) 
                                                                    begin
                                                                        if ((m_wvalid[ext_mas_cnt] & m_split_wready)) 
                                                                            //if(m_wvalid[ext_mas_cnt] &  m_split_wready[ext_mas_cnt] & (~wdata_ff_full))
                                                                            begin
                                                                                nxt_wr_cnt = (wr_cnt - 'd1) ;
                                                                                nxt_wr_data_reg = (wr_data_reg >> EXT_SLV_AXI_DATA_WIDTH) ;
                                                                                nxt_wr_strb_reg = (wr_strb_reg >> (EXT_SLV_AXI_DATA_WIDTH / 8)) ;
                                                                                nxt_m_wvalid[ext_mas_cnt] = 1'b1 ;
                                                                                nxt_m_wdata[ext_mas_cnt] = wr_data_reg[0 +: EXT_SLV_AXI_DATA_WIDTH] ;
                                                                                nxt_m_wstrb[ext_mas_cnt] = wr_strb_reg[0 +: (EXT_SLV_AXI_DATA_WIDTH / 8)] ;
                                                                                nxt_m_wlast[ext_mas_cnt] = (wr_cnt == 'd1) ;
                                                                            end
                                                                        else
                                                                            begin
                                                                                nxt_wr_cnt = wr_cnt ;
                                                                            end
                                                                    end
                                                                else
                                                                    if (((((i_s_wvalid & o_s_wready) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) & (~wdata_ff_full)) & (~saw_ff_empty))) 
                                                                        begin
                                                                            nxt_wr_cnt = ((DOWNSIZE_FACTOR - saw_ff_rdata[BIT_SELECT +: clog2(DOWNSIZE_FACTOR)]) - 1'd1) ;
                                                                            nxt_m_wvalid[ext_mas_cnt] = 1'b1 ;
                                                                            nxt_m_wlast[ext_mas_cnt] = ((DOWNSIZE_FACTOR - saw_ff_rdata[BIT_SELECT +: clog2(DOWNSIZE_FACTOR)]) == 'd1) ;
                                                                            for (i = 0 ; (i < DOWNSIZE_FACTOR) ; i = (i + 1))
                                                                                begin
                                                                                if ((saw_ff_rdata[BIT_SELECT +: clog2(DOWNSIZE_FACTOR)] == i)) 
                                                                                begin
                                                                                nxt_wr_data_reg = (i_s_wdata[(EXT_MAS_AXI_DATA_WIDTH_INT - 1):0] >> ((i + 1) * EXT_SLV_AXI_DATA_WIDTH)) ;
                                                                                nxt_wr_strb_reg = (i_s_wstrb[((EXT_MAS_AXI_DATA_WIDTH_INT / 8) - 1):0] >> ((i + 1) * (EXT_SLV_AXI_DATA_WIDTH / 8))) ;
                                                                                nxt_m_wdata[ext_mas_cnt] = i_s_wdata[(i * EXT_SLV_AXI_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH] ;
                                                                                nxt_m_wstrb[ext_mas_cnt] = i_s_wstrb[(i * (EXT_SLV_AXI_DATA_WIDTH / 8)) +: (EXT_SLV_AXI_DATA_WIDTH / 8)] ;
                                                                                end
                                                                                else
                                                                                ; 
                                                                                end
                                                                        end
                                                                    else
                                                                        begin
                                                                            nxt_m_wvalid[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wvalid[ext_mas_cnt]) ;
                                                                            nxt_m_wlast[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wlast[ext_mas_cnt]) ;
                                                                            //nxt_m_wvalid[ext_mas_cnt] = 1'b0; 
                                                                            //nxt_m_wlast[ext_mas_cnt]  = 1'b0;
                                                                        end
                                                            end
                                                    end
                                        end
                                end
                            else
                                begin : NO_EXT_MAS_CONNECT_BLK
                                    assign m_wvalid[ext_mas_cnt] = 1'b0 ; 
                                    assign m_wdata[ext_mas_cnt] = {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ; 
                                    assign m_wstrb[ext_mas_cnt] = {(EXT_SLV_AXI_DATA_WIDTH / 8){1'b0}} ; 
                                    assign m_wuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                    assign m_wlast[ext_mas_cnt] = 1'b0 ; 
                                    assign m_wready[ext_mas_cnt] = 1'b0 ; 
                                end
                        end
                    end
                else
                    begin : AXI4LITE_EXTSLV_WDATA_BLK
                        for (ext_mas_cnt = 0;(ext_mas_cnt < TOTAL_EXTMAS_CNT);ext_mas_cnt = (ext_mas_cnt + 1))
                        begin : genblk1
                            localparam EXT_MAS_AXI_DATA_WIDTH_INT = EXT_MAS_AXI_DATA_WIDTH[(ext_mas_cnt * 11) +: 11] ; 
                            //for  - ext_mas_cnt end
                            if ((EXT_SLV_CONNECTED_MASTER[ext_mas_cnt] == 1)) 
                                begin : genblk1
                                    if ((EXT_MAS_AXI_PROTOCOL[ext_mas_cnt] == 0)) 
                                        begin : AXI4_EXTMAS_BLK
                                            if ((EXT_MAS_AXI_DATA_WIDTH_INT == EXT_SLV_AXI_DATA_WIDTH)) 
                                                begin : EQ_BLK
                                                    assign m_wready[ext_mas_cnt] = (~wdata_ff_full) ; 
                                                    assign m_wlast[ext_mas_cnt] = 1'b1 ; 
                                                    assign m_wuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((!aresetn_i)) 
                                                                begin
                                                                    m_wvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_wdata[ext_mas_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ;
                                                                    m_wstrb[ext_mas_cnt] <=  {(EXT_SLV_AXI_DATA_WIDTH / 8){1'b0}} ;
                                                                    i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  6'd0 ;
                                                                    wr_last_pending_xfer[ext_mas_cnt] <=  1'b0 ;
                                                                end
                                                            else
                                                                begin
                                                                    m_wvalid[ext_mas_cnt] <=  ((((i_s_ext_mas_dwr_gnt == ext_mas_cnt) & i_s_wvalid) & o_s_wready) & (~wdata_ff_full)) ;
                                                                    m_wdata[ext_mas_cnt] <=  i_s_wdata[(EXT_SLV_AXI_DATA_WIDTH - 1):0] ;
                                                                    m_wstrb[ext_mas_cnt] <=  i_s_wstrb[((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] ;
                                                                    i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  i_s_ext_mas_dwr_gnt ;
                                                                    wr_last_pending_xfer[ext_mas_cnt] <=  1'b0 ;
                                                                end
                                                        end
                                                end
                                            else
                                                if ((EXT_MAS_AXI_DATA_WIDTH_INT < EXT_SLV_AXI_DATA_WIDTH)) 
                                                    begin : UP_BLK
                                                        //8,16 -> 32, 8,16,32 ->64
                                                        localparam UP_SIZE = (EXT_SLV_AXI_DATA_WIDTH / EXT_MAS_AXI_DATA_WIDTH_INT) ; 
                                                        localparam AW_FF_DWIDTH = 13 ; 
                                                        localparam AW_FF_PTR_WIDTH = clog2(EXT_SLV_AW_FF_DEPTH) ; 
                                                        //=====================================================
                                                        //WR ADDRESS FIFO
                                                        //=====================================================
                                                        logic saw_ff_full ; 
                                                        logic saw_ff_empty ; 
                                                        logic saw_ff_wr_en ; 
                                                        logic saw_ff_rd_en ; 
                                                        logic [(AW_FF_DWIDTH - 1):0] saw_ff_wdata ; 
                                                        logic [(AW_FF_DWIDTH - 1):0] saw_ff_rdata_sig ; 
                                                        logic [(AW_FF_DWIDTH - 1):0] saw_ff_rdata ; 
                                                        logic [2:0] saw_size ; 
                                                        logic [1:0] saw_burst ; 
                                                        assign saw_ff_wdata = {i_s_awburst,
                                                                    i_s_awsize[2:0],
                                                                    i_s_awaddr[7:0]} ; // 8 bits to represent 128 bytes of address for maximum bus width 1024 bits
                                                        assign saw_ff_wr_en = (((i_s_awvalid & o_s_awready) & (~saw_ff_full)) & (i_s_awid[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                        assign saw_ff_rd_en = ((((i_s_wlast & i_s_wvalid) & o_s_wready) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) & (~saw_ff_empty)) ; 
                                                        //assign saw_ff_rd_en  = i_s_wlast & i_s_wvalid & m_wready[ext_mas_cnt] & (i_s_ext_mas_dwr_gnt == ext_mas_cnt) & ~saw_ff_empty ;
                                                        if ((LATTICE_FIFO == 1)) 
                                                            begin : LSCC_FF_BLK
                                                            end
                                                        else
                                                            begin : CUSTOM_FF_BLK
                                                                axi4_interconnect_ipgen_gen_fifo #(AW_FF_PTR_WIDTH,
                                                                        AW_FF_DWIDTH,
                                                                        0,
                                                                        EXT_SLV_AW_FF_DEPTH) u_sawaddr_fifo (// Pointer Width
                                                                        // Data Width {awaddr[7:0]} 
                                                                        // Whether Output needs to be registered or not
                                                                        // Number of entries in FIFO
                                                                        .clk(aclk_i), 
                                                                            .aresetn_i(aresetn_i), 
                                                                            .we(saw_ff_wr_en), 
                                                                            .wdata(saw_ff_wdata), 
                                                                            .re(saw_ff_rd_en), 
                                                                            .rdata(saw_ff_rdata_sig), 
                                                                            .full(saw_ff_full), 
                                                                            .pre_full(), 
                                                                            .empty(saw_ff_empty)) ; 
                                                            end
                                                        assign saw_ff_rdata = (saw_ff_empty ? 'd0 : saw_ff_rdata_sig) ; 
                                                        assign saw_size = saw_ff_rdata[8 +: 3] ; 
                                                        assign saw_burst = saw_ff_rdata[(AW_FF_DWIDTH - 1) -: 2] ; 
                                                        localparam WR_UP_IDLE = 2'd0 ; 
                                                        localparam WR_VALID = 2'd1 ; 
                                                        localparam WR_NARROW_VALID = 2'd2 ; 
                                                        localparam ADDR_WIDTH = clog2((EXT_SLV_AXI_DATA_WIDTH / 8)) ; // TO support maximum width
                                                        //localparam ADDR_WIDTH   = clog2(UP_SIZE);
                                                        localparam MSB_ADDR = (clog2((EXT_SLV_AXI_DATA_WIDTH / 8)) - 1) ; 
                                                        localparam MSB_NARROW_ADDR = clog2((EXT_SLV_AXI_DATA_WIDTH / 8)) ; 
                                                        localparam ADDR_BIT_WIDTH = ((UP_SIZE == 2) ? 1 : ((UP_SIZE == 4) ? 2 : 3)) ; // AXI4->AXI4 lite slave; 8,16 -> 32 and 8,16,32 ->64
                                                        localparam EXT_MAS_BUS_SIZE = ((EXT_MAS_AXI_DATA_WIDTH_INT == 8) ? 0 : clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8))) ; 
                                                        logic [1:0] cur_wr_up_state, 
                                                            nxt_wr_up_state ; 
                                                        logic [(ADDR_WIDTH - 1):0] lsb_addr, 
                                                            nxt_lsb_addr ; 
                                                        logic [(ADDR_BIT_WIDTH - 1):0] upsize_addr, 
                                                            nxt_upsize_addr ; 
                                                        //logic [ADDR_WIDTH-1:0] upsize_addr, nxt_upsize_addr;
                                                        logic [(EXT_SLV_AXI_DATA_WIDTH - 1):0] i_s_wdata_sig ; 
                                                        logic [((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] i_s_wstrb_sig ; 
                                                        logic [(TOTAL_EXTMAS_CNT - 1):0] nxt_m_wvalid ; 
                                                        logic [(EXT_SLV_AXI_DATA_WIDTH - 1):0] nxt_m_wdata [TOTAL_EXTMAS_CNT] ; 
                                                        logic [((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] nxt_m_wstrb [TOTAL_EXTMAS_CNT] ; 
                                                        logic [5:0] ext_mas_req_size_bits ; 
                                                        logic [2:0] ext_mas_req_size_bytes ; 
                                                        logic [7:0] narrow_up_cnt, 
                                                            nxt_narrow_up_cnt ; 
                                                        assign ext_mas_req_size_bits = (4'b1000 << saw_size) ; 
                                                        assign ext_mas_req_size_bytes = (1'd1 << saw_size) ; 
                                                        //assign m_wready[ext_mas_cnt] = ~wdata_ff_full & (~saw_ff_empty);  
                                                        assign m_wready[ext_mas_cnt] = (wr_last_pending_xfer[ext_mas_cnt] ? (~wdata_ff_full) : ((~wdata_ff_full) & (~saw_ff_empty))) ; 
                                                        assign m_wlast[ext_mas_cnt] = 1'b1 ; 
                                                        assign m_wuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                        assign i_s_wdata_sig = {{(EXT_SLV_AXI_DATA_WIDTH - EXT_MAS_AXI_DATA_WIDTH_INT){1'b0}},
                                                                    i_s_wdata[0 +: EXT_MAS_AXI_DATA_WIDTH_INT]} ; 
                                                        assign i_s_wstrb_sig = {{((EXT_SLV_AXI_DATA_WIDTH / 8) - (EXT_MAS_AXI_DATA_WIDTH_INT / 8)){1'b0}},
                                                                    i_s_wstrb[0 +: (EXT_MAS_AXI_DATA_WIDTH_INT / 8)]} ; 
                                                        always
                                                            @(posedge aclk_i or 
                                                                negedge aresetn_i)
                                                            begin
                                                                if ((!aresetn_i)) 
                                                                    begin
                                                                        cur_wr_up_state <=  WR_UP_IDLE ;
                                                                        lsb_addr <=  {ADDR_WIDTH{1'b0}} ;
                                                                        upsize_addr <=  {ADDR_BIT_WIDTH{1'b0}} ;
                                                                        m_wvalid[ext_mas_cnt] <=  1'b0 ;
                                                                        m_wdata[ext_mas_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ;
                                                                        m_wstrb[ext_mas_cnt] <=  {(EXT_SLV_AXI_DATA_WIDTH / 8){1'b0}} ;
                                                                        i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  6'd0 ;
                                                                        narrow_up_cnt <=  8'd0 ;
                                                                        wr_last_pending_xfer[ext_mas_cnt] <=  1'b0 ;
                                                                    end
                                                                else
                                                                    begin
                                                                        cur_wr_up_state <=  nxt_wr_up_state ;
                                                                        lsb_addr <=  nxt_lsb_addr ;
                                                                        upsize_addr <=  nxt_upsize_addr ;
                                                                        m_wvalid[ext_mas_cnt] <=  nxt_m_wvalid[ext_mas_cnt] ;
                                                                        m_wdata[ext_mas_cnt] <=  nxt_m_wdata[ext_mas_cnt] ;
                                                                        m_wstrb[ext_mas_cnt] <=  nxt_m_wstrb[ext_mas_cnt] ;
                                                                        i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  i_s_ext_mas_dwr_gnt ;
                                                                        narrow_up_cnt <=  nxt_narrow_up_cnt ;
                                                                        wr_last_pending_xfer[ext_mas_cnt] <=  nxt_wr_last_pending_xfer[ext_mas_cnt] ;
                                                                    end
                                                            end
                                                        integer upsize_cnt ; 
                                                        always
                                                            @(*)
                                                            begin
                                                                nxt_m_wvalid[ext_mas_cnt] = m_wvalid[ext_mas_cnt] ;
                                                                nxt_m_wdata[ext_mas_cnt] = m_wdata[ext_mas_cnt] ;
                                                                nxt_m_wstrb[ext_mas_cnt] = m_wstrb[ext_mas_cnt] ;
                                                                nxt_lsb_addr = lsb_addr ;
                                                                nxt_upsize_addr = upsize_addr ;
                                                                nxt_wr_up_state = cur_wr_up_state ;
                                                                nxt_narrow_up_cnt = narrow_up_cnt ;
                                                                nxt_wr_last_pending_xfer[ext_mas_cnt] = (wr_last_pending_xfer[ext_mas_cnt] ? (!m_wready[ext_mas_cnt]) : (((((i_s_wvalid & i_s_wlast) & o_s_wready) & (~wdata_ff_full)) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) ? 1'b1 : wr_last_pending_xfer[ext_mas_cnt])) ;
                                                                case (cur_wr_up_state)
                                                                WR_UP_IDLE : 
                                                                    begin
                                                                        nxt_m_wvalid[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wvalid[ext_mas_cnt]) ;
                                                                        if ((((i_s_ext_mas_dwr_gnt == ext_mas_cnt) & (~wdata_ff_full)) & (~saw_ff_empty))) 
                                                                            begin
                                                                                nxt_wr_up_state = ((saw_size < EXT_MAS_BUS_SIZE) ? WR_NARROW_VALID : WR_VALID) ;
                                                                                nxt_narrow_up_cnt = (EXT_SLV_AXI_DATA_WIDTH / ext_mas_req_size_bits) ;
                                                                                nxt_upsize_addr = ((saw_size < EXT_MAS_BUS_SIZE) ? saw_ff_rdata[clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8)) +: clog2(UP_SIZE)] : upsize_addr) ;
                                                                                nxt_lsb_addr = ((saw_size < EXT_MAS_BUS_SIZE) ? ((saw_size == 3'd0) ? saw_ff_rdata[0 +: MSB_NARROW_ADDR] : saw_ff_rdata[1 +: MSB_NARROW_ADDR]) : saw_ff_rdata[MSB_ADDR -: ADDR_BIT_WIDTH]) ;
                                                                            end
                                                                        else
                                                                            begin
                                                                                nxt_wr_up_state = WR_UP_IDLE ;
                                                                            end
                                                                    end
                                                                WR_VALID : 
                                                                    begin
                                                                        if (((i_s_wvalid & o_s_wready) & (~wdata_ff_full))) 
                                                                            begin
                                                                                nxt_lsb_addr = ((saw_burst == 2'd0) ? lsb_addr : (((lsb_addr == (UP_SIZE - 1)) || i_s_wlast) ? {ADDR_WIDTH{1'b0}} : (lsb_addr + 1'd1))) ;
                                                                                nxt_wr_up_state = (i_s_wlast ? WR_UP_IDLE : cur_wr_up_state) ;
                                                                                nxt_m_wvalid[ext_mas_cnt] = 1'b1 ;
                                                                                nxt_m_wdata[ext_mas_cnt] = (i_s_wdata_sig << (lsb_addr * EXT_MAS_AXI_DATA_WIDTH_INT)) ;
                                                                                nxt_m_wstrb[ext_mas_cnt] = (i_s_wstrb_sig << ((lsb_addr * EXT_MAS_AXI_DATA_WIDTH_INT) / 8)) ;
                                                                            end
                                                                        else
                                                                            begin
                                                                                nxt_m_wvalid[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wvalid[ext_mas_cnt]) ;
                                                                            end
                                                                    end
                                                                WR_NARROW_VALID : 
                                                                    begin
                                                                        if (((i_s_wvalid & o_s_wready) & (~wdata_ff_full))) 
                                                                            begin
                                                                                nxt_lsb_addr = ((saw_burst == 2'd0) ? lsb_addr : (((lsb_addr == (narrow_up_cnt - 1'd1)) || i_s_wlast) ? {ADDR_WIDTH{1'b0}} : (lsb_addr + ext_mas_req_size_bytes))) ;
                                                                                nxt_wr_up_state = (i_s_wlast ? WR_UP_IDLE : cur_wr_up_state) ;
                                                                                nxt_m_wvalid[ext_mas_cnt] = 1'b1 ;
                                                                                nxt_m_wdata[ext_mas_cnt] = (i_s_wdata_sig << (upsize_addr * EXT_MAS_AXI_DATA_WIDTH_INT)) ;
                                                                                nxt_m_wstrb[ext_mas_cnt] = (i_s_wstrb_sig << ((upsize_addr * EXT_MAS_AXI_DATA_WIDTH_INT) / 8)) ;
                                                                                nxt_upsize_addr = ((saw_burst == 2'd0) ? upsize_addr : (i_s_wlast ? {ADDR_BIT_WIDTH{1'b0}} : (((saw_size == 3'd0) & (&lsb_addr[0 +: clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8))])) ? (upsize_addr + 1'd1) : (((saw_size == 3'd1) & (&lsb_addr[1 +: clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8))])) ? (upsize_addr + 1'd1) : (((saw_size == 3'd2) & (&lsb_addr[2 +: clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8))])) ? (upsize_addr + 1'd1) : upsize_addr))))) ;
                                                                            end
                                                                        else
                                                                            begin
                                                                                nxt_m_wvalid[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wvalid[ext_mas_cnt]) ;
                                                                            end
                                                                    end
                                                                default : 
                                                                    begin
                                                                        nxt_wr_up_state = WR_UP_IDLE ;
                                                                    end
                                                                endcase 
                                                            end
                                                    end
                                                else
                                                    begin : DOWN_BLK
                                                        localparam DOWNSIZE_FACTOR = (EXT_MAS_AXI_DATA_WIDTH_INT / EXT_SLV_AXI_DATA_WIDTH) ; 
                                                        localparam EXT_SLV_BYTE_CNT = (EXT_SLV_AXI_DATA_WIDTH / 8) ; 
                                                        localparam ADDR_BIT_SELECT = ((EXT_SLV_AXI_DATA_WIDTH == 32) ? 2 : 3) ; // possibe combinations AXI4->AXI4lite slave (downsize)
                                                        localparam EXT_MAS_ADDR_BIT_WIDTH = clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8)) ; 
                                                        localparam WR_CNT_WIDTH = ((DOWNSIZE_FACTOR == 2) ? 9 : ((DOWNSIZE_FACTOR == 4) ? 10 : ((DOWNSIZE_FACTOR == 8) ? 11 : ((DOWNSIZE_FACTOR == 16) ? 12 : 13)))) ; 
                                                        localparam EXT_MAS_AWSIZE_1_IN_BYTES = 2 ; 
                                                        localparam EXT_MAS_AWSIZE_2_IN_BYTES = 4 ; 
                                                        localparam EXT_MAS_AWSIZE_3_IN_BYTES = 8 ; 
                                                        localparam EXT_MAS_AWSIZE_4_IN_BYTES = 16 ; 
                                                        localparam EXT_MAS_AWSIZE_5_IN_BYTES = 32 ; 
                                                        localparam EXT_MAS_AWSIZE_6_IN_BYTES = 64 ; 
                                                        localparam EXT_MAS_AWSIZE_7_IN_BYTES = 128 ; 
                                                        localparam AW_FF_DWIDTH = 13 ; 
                                                        localparam AW_FF_PTR_WIDTH = clog2(EXT_SLV_AW_FF_DEPTH) ; 
                                                        //=====================================================
                                                        //WR ADDRESS FIFO
                                                        //=====================================================
                                                        logic saw_ff_full ; 
                                                        logic saw_ff_empty ; 
                                                        logic saw_ff_wr_en ; 
                                                        logic saw_ff_rd_en ; 
                                                        logic [(AW_FF_DWIDTH - 1):0] saw_ff_wdata ; 
                                                        logic [(AW_FF_DWIDTH - 1):0] saw_ff_rdata_sig ; 
                                                        logic [(AW_FF_DWIDTH - 1):0] saw_ff_rdata ; 
                                                        logic [2:0] saw_size ; 
                                                        logic [7:0] saw_addr ; 
                                                        logic [1:0] saw_burst ; 
                                                        assign saw_ff_wdata = {i_s_awburst,
                                                                    i_s_awsize[2:0],
                                                                    i_s_awaddr[7:0]} ; // 8 bits to represent 128 bytes of address for maximum bus width 1024 bits
                                                        assign saw_ff_wr_en = (((i_s_awvalid & o_s_awready) & (~saw_ff_full)) & (i_s_awid[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                        assign saw_ff_rd_en = ((((i_s_wlast & i_s_wvalid) & o_s_wready) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) & (~saw_ff_empty)) ; 
                                                        //assign saw_ff_rd_en  = i_s_wlast & i_s_wvalid & m_wready[ext_mas_cnt] & (i_s_ext_mas_dwr_gnt == ext_mas_cnt) & ~saw_ff_empty ;
                                                        if ((LATTICE_FIFO == 1)) 
                                                            begin : LSCC_FF_BLK
                                                            end
                                                        else
                                                            begin : CUSTOM_FF_BLK
                                                                axi4_interconnect_ipgen_gen_fifo #(AW_FF_PTR_WIDTH,
                                                                        AW_FF_DWIDTH,
                                                                        0,
                                                                        EXT_SLV_AW_FF_DEPTH) u_sawaddr_awsize_fifo (// Pointer Width
                                                                        // Data Width {awaddr[7:0]} 
                                                                        // Whether Output needs to be registered or not
                                                                        // Number of entries in FIFO
                                                                        .clk(aclk_i), 
                                                                            .aresetn_i(aresetn_i), 
                                                                            .we(saw_ff_wr_en), 
                                                                            .wdata(saw_ff_wdata), 
                                                                            .re(saw_ff_rd_en), 
                                                                            .rdata(saw_ff_rdata_sig), 
                                                                            .full(saw_ff_full), 
                                                                            .pre_full(), 
                                                                            .empty(saw_ff_empty)) ; 
                                                            end
                                                        assign saw_ff_rdata = (saw_ff_empty ? 'd0 : saw_ff_rdata_sig) ; 
                                                        assign saw_burst = saw_ff_rdata[(AW_FF_DWIDTH - 1) -: 2] ; 
                                                        assign saw_size = saw_ff_rdata[8 +: 3] ; 
                                                        assign saw_addr = saw_ff_rdata[7:0] ; 
                                                        logic [(WR_CNT_WIDTH - 1):0] wr_cnt, 
                                                            nxt_wr_cnt ; 
                                                        logic [(EXT_MAS_AXI_DATA_WIDTH_INT - 1):0] wr_data_reg, 
                                                            nxt_wr_data_reg ; 
                                                        logic [((EXT_MAS_AXI_DATA_WIDTH_INT / 8) - 1):0] wr_strb_reg, 
                                                            nxt_wr_strb_reg ; 
                                                        logic m_split_wready ; 
                                                        logic first_beat_flag, 
                                                            nxt_first_beat_flag ; 
                                                        logic pending_xfer, 
                                                            nxt_pending_xfer ; 
                                                        logic [(EXT_MAS_ADDR_BIT_WIDTH - 1):0] lsb_addr, 
                                                            nxt_lsb_addr ; // fixed to 8 bits , since maximum downsizing factor is 8
                                                        logic [clog2((EXT_MAS_AXI_DATA_WIDTH_INT / 8)):0] request_bytes ; 
                                                        logic [(TOTAL_EXTMAS_CNT - 1):0] nxt_m_wvalid ; 
                                                        logic [(EXT_SLV_AXI_DATA_WIDTH - 1):0] nxt_m_wdata [TOTAL_EXTMAS_CNT] ; 
                                                        logic [((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] nxt_m_wstrb [TOTAL_EXTMAS_CNT] ; 
                                                        //assign m_wready[ext_mas_cnt] = |wr_cnt ? 1'b0 : ~wdata_ff_full;
                                                        //assign m_wready[ext_mas_cnt] = (|nxt_wr_cnt) || (|wr_cnt) ? 1'b0 : ~wdata_ff_full & (~saw_ff_empty);
                                                        //assign m_split_wready = ~wdata_ff_full & (~saw_ff_empty);
                                                        assign m_wready[ext_mas_cnt] = (((|nxt_wr_cnt) || (|wr_cnt)) ? 1'b0 : (wr_last_pending_xfer[ext_mas_cnt] ? (~wdata_ff_full) : ((~wdata_ff_full) & (~saw_ff_empty)))) ; 
                                                        //assign m_wready[ext_mas_cnt] = |wr_cnt ? 1'b0 : (~wdata_ff_full) ;
                                                        assign m_split_wready = (wr_last_pending_xfer[ext_mas_cnt] ? (~wdata_ff_full) : ((~wdata_ff_full) & (~saw_ff_empty))) ; 
                                                        assign m_wlast[ext_mas_cnt] = 1'b1 ; 
                                                        assign m_wuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                        always
                                                            @(posedge aclk_i or 
                                                                negedge aresetn_i)
                                                            begin
                                                                if ((~aresetn_i)) 
                                                                    begin
                                                                        m_wvalid[ext_mas_cnt] <=  1'b0 ;
                                                                        m_wdata[ext_mas_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ;
                                                                        m_wstrb[ext_mas_cnt] <=  {(EXT_SLV_AXI_DATA_WIDTH / 8){1'b0}} ;
                                                                        wr_data_reg <=  {EXT_MAS_AXI_DATA_WIDTH_INT{1'b0}} ;
                                                                        wr_strb_reg <=  {(EXT_MAS_AXI_DATA_WIDTH_INT / 8){1'b0}} ;
                                                                        wr_cnt <=  {WR_CNT_WIDTH{1'b0}} ;
                                                                        i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  1'b0 ;
                                                                        first_beat_flag <=  1'b0 ;
                                                                        pending_xfer <=  1'b0 ;
                                                                        lsb_addr <=  {EXT_MAS_ADDR_BIT_WIDTH{1'b0}} ;
                                                                        wr_last_pending_xfer[ext_mas_cnt] <=  1'b0 ;
                                                                    end
                                                                else
                                                                    begin
                                                                        m_wvalid[ext_mas_cnt] <=  nxt_m_wvalid[ext_mas_cnt] ;
                                                                        m_wdata[ext_mas_cnt] <=  nxt_m_wdata[ext_mas_cnt] ;
                                                                        m_wstrb[ext_mas_cnt] <=  nxt_m_wstrb[ext_mas_cnt] ;
                                                                        wr_data_reg <=  nxt_wr_data_reg ;
                                                                        wr_strb_reg <=  nxt_wr_strb_reg ;
                                                                        wr_cnt <=  nxt_wr_cnt ;
                                                                        i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  (((|(i_s_ext_mas_dwr_gnt ^ i_s_ext_mas_dwr_gnt_final[ext_mas_cnt])) && ((|wr_cnt) || ((wr_cnt == 'd0) & wdata_ff_full))) ? i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] : i_s_ext_mas_dwr_gnt) ;// to fix issue faced in  16->8 downsize; 1master and 1slave
                                                                        //i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <= |(i_s_ext_mas_dwr_gnt^i_s_ext_mas_dwr_gnt_final[ext_mas_cnt]) && (|wr_cnt) ? i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] : i_s_ext_mas_dwr_gnt; // to fix issue faced in  16->8 downsize; 1master and 1slave
                                                                        first_beat_flag <=  nxt_first_beat_flag ;
                                                                        pending_xfer <=  nxt_pending_xfer ;
                                                                        lsb_addr <=  nxt_lsb_addr ;
                                                                        wr_last_pending_xfer[ext_mas_cnt] <=  nxt_wr_last_pending_xfer[ext_mas_cnt] ;
                                                                    end
                                                            end
                                                        integer i ; 
                                                        always
                                                            @(*)
                                                            begin
                                                                nxt_m_wvalid[ext_mas_cnt] = m_wvalid[ext_mas_cnt] ;
                                                                nxt_m_wdata[ext_mas_cnt] = m_wdata[ext_mas_cnt] ;
                                                                nxt_m_wstrb[ext_mas_cnt] = m_wstrb[ext_mas_cnt] ;
                                                                nxt_wr_cnt = wr_cnt ;
                                                                nxt_wr_data_reg = wr_data_reg ;
                                                                nxt_wr_strb_reg = wr_strb_reg ;
                                                                nxt_first_beat_flag = first_beat_flag ;
                                                                nxt_lsb_addr = lsb_addr ;
                                                                nxt_pending_xfer = pending_xfer ;
                                                                nxt_wr_last_pending_xfer[ext_mas_cnt] = ((wr_last_pending_xfer[ext_mas_cnt] & (!(|wr_cnt))) ? (!m_wready[ext_mas_cnt]) : (((((i_s_wvalid & i_s_wlast) & o_s_wready) & (~wdata_ff_full)) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) ? 1'b1 : wr_last_pending_xfer[ext_mas_cnt])) ;
                                                                if ((|wr_cnt)) 
                                                                    begin
                                                                        if ((m_wvalid[ext_mas_cnt] & m_split_wready)) 
                                                                            //if( m_wvalid [ext_mas_cnt] &  m_split_wready[ext_mas_cnt] & (~wdata_ff_full))
                                                                            begin
                                                                                nxt_wr_cnt = (wr_cnt - 'd1) ;
                                                                                nxt_wr_data_reg = (wr_data_reg >> EXT_SLV_AXI_DATA_WIDTH) ;
                                                                                nxt_wr_strb_reg = (wr_strb_reg >> (EXT_SLV_AXI_DATA_WIDTH / 8)) ;
                                                                                nxt_m_wvalid[ext_mas_cnt] = 1'b1 ;
                                                                                nxt_m_wdata[ext_mas_cnt] = wr_data_reg[0 +: EXT_SLV_AXI_DATA_WIDTH] ;
                                                                                nxt_m_wstrb[ext_mas_cnt] = wr_strb_reg[0 +: (EXT_SLV_AXI_DATA_WIDTH / 8)] ;
                                                                            end
                                                                        else
                                                                            begin
                                                                                nxt_wr_cnt = wr_cnt ;
                                                                            end
                                                                    end
                                                                else
                                                                    //else if ( i_s_wvalid & o_s_wready & (~wdata_ff_full) & ( i_s_ext_mas_dwr_gnt == ext_mas_cnt)  )
                                                                    if (((((i_s_wvalid & o_s_wready) & (~wdata_ff_full)) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) & (~saw_ff_empty))) 
                                                                        begin
                                                                            if (first_beat_flag) 
                                                                                begin
                                                                                nxt_first_beat_flag = (i_s_wlast ? 1'b0 : first_beat_flag) ;
                                                                                nxt_m_wvalid[ext_mas_cnt] = 1'b1 ;
                                                                                nxt_wr_data_reg = (i_s_wdata >> EXT_SLV_AXI_DATA_WIDTH) ;
                                                                                nxt_wr_strb_reg = (i_s_wstrb >> (EXT_SLV_AXI_DATA_WIDTH / 8)) ;
                                                                                nxt_m_wdata[ext_mas_cnt] = i_s_wdata[0 +: EXT_SLV_AXI_DATA_WIDTH] ;
                                                                                nxt_m_wstrb[ext_mas_cnt] = i_s_wstrb[0 +: (EXT_SLV_AXI_DATA_WIDTH / 8)] ;
                                                                                //not possible
                                                                                case (saw_size)
                                                                                3'd3 : 
                                                                                begin
                                                                                nxt_wr_cnt = ((EXT_MAS_AWSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) ;
                                                                                end
                                                                                3'd4 : 
                                                                                begin
                                                                                nxt_wr_cnt = ((EXT_MAS_AWSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) ;
                                                                                end
                                                                                3'd5 : 
                                                                                begin
                                                                                nxt_wr_cnt = ((EXT_MAS_AWSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) ;
                                                                                end
                                                                                3'd6 : 
                                                                                begin
                                                                                nxt_wr_cnt = ((EXT_MAS_AWSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) ;
                                                                                end
                                                                                3'd7 : 
                                                                                begin
                                                                                nxt_wr_cnt = ((EXT_MAS_AWSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) ;
                                                                                end
                                                                                default : 
                                                                                nxt_wr_cnt = wr_cnt ;
                                                                                endcase 
                                                                                end
                                                                            else
                                                                                begin
                                                                                nxt_m_wvalid[ext_mas_cnt] = 1'b1 ;
                                                                                if ((saw_size <= ADDR_BIT_SELECT)) 
                                                                                // Narrow transfe with request size is less than or equal to slave bus width
                                                                                begin
                                                                                nxt_wr_cnt = {WR_CNT_WIDTH{1'b0}} ;
                                                                                nxt_pending_xfer = (i_s_wlast ? 1'b0 : 1'b1) ;
                                                                                if (pending_xfer) 
                                                                                begin
                                                                                nxt_m_wdata[ext_mas_cnt] = (i_s_wdata >> (lsb_addr[(EXT_MAS_ADDR_BIT_WIDTH - 1) -: clog2(DOWNSIZE_FACTOR)] * EXT_SLV_AXI_DATA_WIDTH)) ;
                                                                                nxt_m_wstrb[ext_mas_cnt] = (i_s_wstrb >> ((lsb_addr[(EXT_MAS_ADDR_BIT_WIDTH - 1) -: clog2(DOWNSIZE_FACTOR)] * EXT_SLV_AXI_DATA_WIDTH) / 8)) ;
                                                                                nxt_lsb_addr = ((saw_burst == 2'd0) ? lsb_addr : (lsb_addr + request_bytes)) ;
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_m_wdata[ext_mas_cnt] = (i_s_wdata >> (saw_addr[(EXT_MAS_ADDR_BIT_WIDTH - 1) -: clog2(DOWNSIZE_FACTOR)] * EXT_SLV_AXI_DATA_WIDTH)) ;
                                                                                nxt_m_wstrb[ext_mas_cnt] = (i_s_wstrb >> ((saw_addr[(EXT_MAS_ADDR_BIT_WIDTH - 1) -: clog2(DOWNSIZE_FACTOR)] * EXT_SLV_AXI_DATA_WIDTH) / 8)) ;
                                                                                case (saw_size)
                                                                                3'd0 : 
                                                                                nxt_lsb_addr = ((saw_burst == 2'd0) ? saw_addr[7:0] : (saw_addr[7:0] + request_bytes)) ;
                                                                                3'd1 : 
                                                                                nxt_lsb_addr = ((saw_burst == 2'd0) ? {saw_addr[7:1],
                                                                                1'b0} : ({saw_addr[7:1],
                                                                                1'b0} + request_bytes)) ;
                                                                                3'd2 : 
                                                                                nxt_lsb_addr = ((saw_burst == 2'd0) ? {saw_addr[7:2],
                                                                                2'd0} : ({saw_addr[7:2],
                                                                                2'd0} + request_bytes)) ;
                                                                                3'd3 : 
                                                                                nxt_lsb_addr = ((saw_burst == 2'd0) ? {saw_addr[7:3],
                                                                                3'd0} : ({saw_addr[7:3],
                                                                                3'd0} + request_bytes)) ;
                                                                                endcase 
                                                                                end
                                                                                end
                                                                                else
                                                                                // Full size or  Narrow transfer with request size greater than slave bus width
                                                                                begin
                                                                                nxt_first_beat_flag = ((i_s_wlast || (saw_burst == 2'd0)) ? 1'b0 : 1'b1) ;
                                                                                for (i = 0 ; (i < DOWNSIZE_FACTOR) ; i = (i + 1))
                                                                                begin
                                                                                if ((saw_addr[ADDR_BIT_SELECT +: clog2(DOWNSIZE_FACTOR)] == i)) 
                                                                                begin
                                                                                nxt_wr_data_reg = (i_s_wdata[(EXT_MAS_AXI_DATA_WIDTH_INT - 1):0] >> ((i + 1) * EXT_SLV_AXI_DATA_WIDTH)) ;
                                                                                nxt_wr_strb_reg = (i_s_wstrb[((EXT_MAS_AXI_DATA_WIDTH_INT / 8) - 1):0] >> ((i + 1) * (EXT_SLV_AXI_DATA_WIDTH / 8))) ;
                                                                                nxt_m_wdata[ext_mas_cnt] = i_s_wdata[(i * EXT_SLV_AXI_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH] ;
                                                                                nxt_m_wstrb[ext_mas_cnt] = i_s_wstrb[(i * (EXT_SLV_AXI_DATA_WIDTH / 8)) +: (EXT_SLV_AXI_DATA_WIDTH / 8)] ;
                                                                                end
                                                                                end
                                                                                //not possible
                                                                                case (saw_size)
                                                                                3'd3 : 
                                                                                begin
                                                                                nxt_wr_cnt = (first_beat_flag ? ((EXT_MAS_AWSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) : (((EXT_MAS_AWSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[2:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                end
                                                                                3'd4 : 
                                                                                begin
                                                                                nxt_wr_cnt = (first_beat_flag ? ((EXT_MAS_AWSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) : (((EXT_MAS_AWSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[3:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                end
                                                                                3'd5 : 
                                                                                begin
                                                                                nxt_wr_cnt = (first_beat_flag ? ((EXT_MAS_AWSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) : (((EXT_MAS_AWSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[4:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                end
                                                                                3'd6 : 
                                                                                begin
                                                                                nxt_wr_cnt = (first_beat_flag ? ((EXT_MAS_AWSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) : (((EXT_MAS_AWSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[5:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                end
                                                                                3'd7 : 
                                                                                begin
                                                                                nxt_wr_cnt = (first_beat_flag ? ((EXT_MAS_AWSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1) : (((EXT_MAS_AWSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (saw_addr[6:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                end
                                                                                default : 
                                                                                nxt_wr_cnt = wr_cnt ;
                                                                                endcase 
                                                                                end
                                                                                end
                                                                        end
                                                                    else
                                                                        begin
                                                                            nxt_wr_cnt = wr_cnt ;
                                                                            nxt_m_wvalid[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wvalid[ext_mas_cnt]) ;
                                                                        end
                                                            end
                                                    end
                                        end
                                    else
                                        begin : AXI4LITE_EXTMAS_BLK
                                            if ((EXT_MAS_AXI_DATA_WIDTH_INT == EXT_SLV_AXI_DATA_WIDTH)) 
                                                begin : EQ_BLK
                                                    assign m_wready[ext_mas_cnt] = (~wdata_ff_full) ; 
                                                    assign m_wlast[ext_mas_cnt] = 1'b1 ; 
                                                    assign m_wuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((!aresetn_i)) 
                                                                begin
                                                                    m_wvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_wdata[ext_mas_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ;
                                                                    m_wstrb[ext_mas_cnt] <=  {(EXT_SLV_AXI_DATA_WIDTH / 8){1'b0}} ;
                                                                    i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  6'd0 ;
                                                                    wr_last_pending_xfer[ext_mas_cnt] <=  1'b0 ;
                                                                end
                                                            else
                                                                begin
                                                                    m_wvalid[ext_mas_cnt] <=  ((((i_s_ext_mas_dwr_gnt == ext_mas_cnt) & i_s_wvalid) & o_s_wready) & (~wdata_ff_full)) ;
                                                                    m_wdata[ext_mas_cnt] <=  i_s_wdata[(EXT_SLV_AXI_DATA_WIDTH - 1):0] ;
                                                                    m_wstrb[ext_mas_cnt] <=  i_s_wstrb[((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] ;
                                                                    i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  i_s_ext_mas_dwr_gnt ;
                                                                    wr_last_pending_xfer[ext_mas_cnt] <=  1'b0 ;
                                                                end
                                                        end
                                                end
                                            else
                                                if ((EXT_MAS_AXI_DATA_WIDTH_INT < EXT_SLV_AXI_DATA_WIDTH)) 
                                                    begin : UP_BLK
                                                        localparam UP_SIZE = (EXT_SLV_AXI_DATA_WIDTH / EXT_MAS_AXI_DATA_WIDTH_INT) ; 
                                                        localparam AW_FF_DWIDTH = 8 ; 
                                                        localparam AW_FF_PTR_WIDTH = clog2(EXT_SLV_AW_FF_DEPTH) ; 
                                                        //logic [10:0] ext_mas_axi4_data_unit;
                                                        //assign ext_mas_axi4_data_unit = saw_size == 3'd0 ? 8 : 
                                                        //                                saw_size == 3'd1 ? 16 : 
                                                        //                                saw_size == 3'd2 ? 32 : 
                                                        //                                saw_size == 3'd3 ? 64 : 
                                                        //                                saw_size == 3'd4 ? 128 : 
                                                        //                                saw_size == 3'd5 ? 256 : 512;
                                                        //=====================================================
                                                        //WR ADDRESS FIFO
                                                        //=====================================================
                                                        logic saw_ff_full ; 
                                                        logic saw_ff_empty ; 
                                                        logic saw_ff_wr_en ; 
                                                        logic saw_ff_rd_en ; 
                                                        logic [(AW_FF_DWIDTH - 1):0] saw_ff_wdata ; 
                                                        logic [(AW_FF_DWIDTH - 1):0] saw_ff_rdata_sig ; 
                                                        logic [(AW_FF_DWIDTH - 1):0] saw_ff_rdata ; 
                                                        assign saw_ff_wdata = {i_s_awaddr[7:0]} ; // 8 bits to represent 128 bytes of address for maximum bus width 1024 bits
                                                        assign saw_ff_wr_en = (((i_s_awvalid & o_s_awready) & (~saw_ff_full)) & (i_s_awid[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                        assign saw_ff_rd_en = ((((i_s_wlast & i_s_wvalid) & o_s_wready) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) & (~saw_ff_empty)) ; 
                                                        //assign saw_ff_rd_en  = i_s_wlast & i_s_wvalid & m_wready[ext_mas_cnt] & (i_s_ext_mas_dwr_gnt == ext_mas_cnt) & ~saw_ff_empty ;
                                                        if ((LATTICE_FIFO == 1)) 
                                                            begin : LSCC_FF_BLK
                                                            end
                                                        else
                                                            begin : CUSTOM_FF_BLK
                                                                axi4_interconnect_ipgen_gen_fifo #(AW_FF_PTR_WIDTH,
                                                                        AW_FF_DWIDTH,
                                                                        0,
                                                                        EXT_SLV_AW_FF_DEPTH) u_sawaddr_fifo (// Pointer Width
                                                                        // Data Width {awaddr[7:0]} 
                                                                        // Whether Output needs to be registered or not
                                                                        // Number of entries in FIFO
                                                                        .clk(aclk_i), 
                                                                            .aresetn_i(aresetn_i), 
                                                                            .we(saw_ff_wr_en), 
                                                                            .wdata(saw_ff_wdata), 
                                                                            .re(saw_ff_rd_en), 
                                                                            .rdata(saw_ff_rdata_sig), 
                                                                            .full(saw_ff_full), 
                                                                            .pre_full(), 
                                                                            .empty(saw_ff_empty)) ; 
                                                            end
                                                        assign saw_ff_rdata = (saw_ff_empty ? 'd0 : saw_ff_rdata_sig) ; 
                                                        localparam WR_UP_IDLE = 1'b0 ; 
                                                        localparam WR_VALID = 1'b1 ; 
                                                        localparam ADDR_WIDTH = clog2(UP_SIZE) ; 
                                                        logic cur_wr_up_state, 
                                                            nxt_wr_up_state ; 
                                                        logic [(ADDR_WIDTH - 1):0] lsb_addr, 
                                                            nxt_lsb_addr ; 
                                                        logic [(EXT_SLV_AXI_DATA_WIDTH - 1):0] i_s_wdata_sig ; 
                                                        logic [((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] i_s_wstrb_sig ; 
                                                        logic [(TOTAL_EXTMAS_CNT - 1):0] nxt_m_wvalid ; 
                                                        logic [(EXT_SLV_AXI_DATA_WIDTH - 1):0] nxt_m_wdata [TOTAL_EXTMAS_CNT] ; 
                                                        logic [((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] nxt_m_wstrb [TOTAL_EXTMAS_CNT] ; 
                                                        localparam MSB_ADDR = 2 ; 
                                                        //assign m_wready[ext_mas_cnt] = ~wdata_ff_full & (~saw_ff_empty);  
                                                        assign m_wready[ext_mas_cnt] = (wr_last_pending_xfer[ext_mas_cnt] ? (~wdata_ff_full) : ((~wdata_ff_full) & (~saw_ff_empty))) ; 
                                                        assign m_wlast[ext_mas_cnt] = 1'b1 ; 
                                                        assign m_wuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                        assign i_s_wdata_sig = {{(EXT_SLV_AXI_DATA_WIDTH - EXT_MAS_AXI_DATA_WIDTH_INT){1'b0}},
                                                                    i_s_wdata[0 +: EXT_MAS_AXI_DATA_WIDTH_INT]} ; 
                                                        assign i_s_wstrb_sig = {{((EXT_SLV_AXI_DATA_WIDTH / 8) - (EXT_MAS_AXI_DATA_WIDTH_INT / 8)){1'b0}},
                                                                    i_s_wstrb[0 +: (EXT_MAS_AXI_DATA_WIDTH_INT / 8)]} ; 
                                                        always
                                                            @(posedge aclk_i or 
                                                                negedge aresetn_i)
                                                            begin
                                                                if ((!aresetn_i)) 
                                                                    begin
                                                                        cur_wr_up_state <=  WR_UP_IDLE ;
                                                                        lsb_addr <=  {ADDR_WIDTH{1'b0}} ;
                                                                        m_wvalid[ext_mas_cnt] <=  1'b0 ;
                                                                        m_wdata[ext_mas_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ;
                                                                        m_wstrb[ext_mas_cnt] <=  {(EXT_SLV_AXI_DATA_WIDTH / 8){1'b0}} ;
                                                                        i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  6'd0 ;
                                                                        wr_last_pending_xfer[ext_mas_cnt] <=  1'b0 ;
                                                                    end
                                                                else
                                                                    begin
                                                                        cur_wr_up_state <=  nxt_wr_up_state ;
                                                                        lsb_addr <=  nxt_lsb_addr ;
                                                                        m_wvalid[ext_mas_cnt] <=  nxt_m_wvalid[ext_mas_cnt] ;
                                                                        m_wdata[ext_mas_cnt] <=  nxt_m_wdata[ext_mas_cnt] ;
                                                                        m_wstrb[ext_mas_cnt] <=  nxt_m_wstrb[ext_mas_cnt] ;
                                                                        i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  i_s_ext_mas_dwr_gnt ;
                                                                        wr_last_pending_xfer[ext_mas_cnt] <=  nxt_wr_last_pending_xfer[ext_mas_cnt] ;
                                                                    end
                                                            end
                                                        integer upsize_cnt ; 
                                                        always
                                                            @(*)
                                                            begin
                                                                nxt_m_wvalid[ext_mas_cnt] = m_wvalid[ext_mas_cnt] ;
                                                                nxt_m_wdata[ext_mas_cnt] = m_wdata[ext_mas_cnt] ;
                                                                nxt_m_wstrb[ext_mas_cnt] = m_wstrb[ext_mas_cnt] ;
                                                                nxt_lsb_addr = lsb_addr ;
                                                                nxt_wr_up_state = cur_wr_up_state ;
                                                                nxt_wr_last_pending_xfer[ext_mas_cnt] = (wr_last_pending_xfer[ext_mas_cnt] ? (!m_wready[ext_mas_cnt]) : (((((i_s_wvalid & i_s_wlast) & o_s_wready) & (~wdata_ff_full)) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) ? 1'b1 : wr_last_pending_xfer[ext_mas_cnt])) ;
                                                                case (cur_wr_up_state)
                                                                WR_UP_IDLE : 
                                                                    begin
                                                                        nxt_m_wvalid[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wvalid[ext_mas_cnt]) ;
                                                                        if ((((i_s_ext_mas_dwr_gnt == ext_mas_cnt) & (~wdata_ff_full)) & (~saw_ff_empty))) 
                                                                            begin
                                                                                nxt_wr_up_state = WR_VALID ;
                                                                                nxt_lsb_addr = saw_ff_rdata[MSB_ADDR] ;
                                                                            end
                                                                        else
                                                                            begin
                                                                                nxt_wr_up_state = WR_UP_IDLE ;
                                                                            end
                                                                    end
                                                                WR_VALID : 
                                                                    begin
                                                                        if (((i_s_wvalid & o_s_wready) & (~wdata_ff_full))) 
                                                                            begin
                                                                                nxt_lsb_addr = {ADDR_WIDTH{1'b0}} ;
                                                                                //nxt_lsb_addr              = lsb_addr==UP_SIZE-1 ? {ADDR_WIDTH{1'b0}} : (lsb_addr + 1'd1 );
                                                                                nxt_wr_up_state = WR_UP_IDLE ;
                                                                                nxt_m_wvalid[ext_mas_cnt] = 1'b1 ;
                                                                                nxt_m_wdata[ext_mas_cnt] = (i_s_wdata_sig << (lsb_addr * EXT_MAS_AXI_DATA_WIDTH_INT)) ;
                                                                                nxt_m_wstrb[ext_mas_cnt] = (i_s_wstrb_sig << ((lsb_addr * EXT_MAS_AXI_DATA_WIDTH_INT) / 8)) ;
                                                                            end
                                                                        else
                                                                            begin
                                                                                nxt_m_wvalid[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wvalid[ext_mas_cnt]) ;
                                                                            end
                                                                    end
                                                                default : 
                                                                    begin
                                                                        nxt_wr_up_state = WR_UP_IDLE ;
                                                                    end
                                                                endcase 
                                                            end
                                                    end
                                                else
                                                    begin : DOWN_BLK
                                                        localparam ADDR_BIT_SELECT = 2 ; // possibe combinations AXI4lite->AXI4lite (downsize) : 64->32
                                                        localparam DOWNSIZE_FACTOR = 2 ; 
                                                        localparam WR_CNT_WIDTH = 9 ; 
                                                        localparam EXT_SLV_BYTE_CNT = 4 ; 
                                                        localparam SLAVE_SIZE = 2 ; 
                                                        localparam FULL_EXT_MAS_SIZE = 3'd3 ; 
                                                        localparam AW_FF_DWIDTH = 11 ; 
                                                        localparam AW_FF_PTR_WIDTH = clog2(EXT_SLV_AW_FF_DEPTH) ; 
                                                        //=====================================================
                                                        //WR ADDRESS FIFO
                                                        //=====================================================
                                                        logic saw_ff_full ; 
                                                        logic saw_ff_empty ; 
                                                        logic saw_ff_wr_en ; 
                                                        logic saw_ff_rd_en ; 
                                                        logic [(AW_FF_DWIDTH - 1):0] saw_ff_wdata ; 
                                                        logic [(AW_FF_DWIDTH - 1):0] saw_ff_rdata_sig ; 
                                                        logic [(AW_FF_DWIDTH - 1):0] saw_ff_rdata ; 
                                                        logic [7:0] saw_addr ; 
                                                        assign saw_ff_wdata = {i_s_awaddr[7:0]} ; // 8 bits to represent 128 bytes of address for maximum bus width 1024 bits
                                                        assign saw_ff_wr_en = (((i_s_awvalid & o_s_awready) & (~saw_ff_full)) & (i_s_awid[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                        assign saw_ff_rd_en = ((((i_s_wlast & i_s_wvalid) & o_s_wready) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) & (~saw_ff_empty)) ; 
                                                        //assign saw_ff_rd_en  = i_s_wlast & i_s_wvalid & m_wready[ext_mas_cnt] & (i_s_ext_mas_dwr_gnt == ext_mas_cnt) & ~saw_ff_empty ;
                                                        if ((LATTICE_FIFO == 1)) 
                                                            begin : LSCC_FF_BLK
                                                            end
                                                        else
                                                            begin : CUSTOM_FF_BLK
                                                                axi4_interconnect_ipgen_gen_fifo #(AW_FF_PTR_WIDTH,
                                                                        AW_FF_DWIDTH,
                                                                        0,
                                                                        EXT_SLV_AW_FF_DEPTH) u_sawaddr_fifo (// Pointer Width
                                                                        // Data Width {awaddr[7:0]} 
                                                                        // Whether Output needs to be registered or not
                                                                        // Number of entries in FIFO
                                                                        .clk(aclk_i), 
                                                                            .aresetn_i(aresetn_i), 
                                                                            .we(saw_ff_wr_en), 
                                                                            .wdata(saw_ff_wdata), 
                                                                            .re(saw_ff_rd_en), 
                                                                            .rdata(saw_ff_rdata_sig), 
                                                                            .full(saw_ff_full), 
                                                                            .pre_full(), 
                                                                            .empty(saw_ff_empty)) ; 
                                                            end
                                                        assign saw_ff_rdata = (saw_ff_empty ? 'd0 : saw_ff_rdata_sig) ; 
                                                        assign saw_addr = saw_ff_rdata[7:0] ; 
                                                        logic [(WR_CNT_WIDTH - 1):0] wr_cnt, 
                                                            nxt_wr_cnt ; 
                                                        logic [(EXT_MAS_AXI_DATA_WIDTH_INT - 1):0] wr_data_reg, 
                                                            nxt_wr_data_reg ; 
                                                        logic [((EXT_MAS_AXI_DATA_WIDTH_INT / 8) - 1):0] wr_strb_reg, 
                                                            nxt_wr_strb_reg ; 
                                                        logic [(TOTAL_EXTMAS_CNT - 1):0] nxt_m_wvalid ; 
                                                        logic [(EXT_SLV_AXI_DATA_WIDTH - 1):0] nxt_m_wdata [TOTAL_EXTMAS_CNT] ; 
                                                        logic [((EXT_SLV_AXI_DATA_WIDTH / 8) - 1):0] nxt_m_wstrb [TOTAL_EXTMAS_CNT] ; 
                                                        logic m_split_wready ; 
                                                        //assign m_wready[ext_mas_cnt] = |wr_cnt ? 1'b0 : ~wdata_ff_full;
                                                        //assign m_wready[ext_mas_cnt] = (|nxt_wr_cnt) || (|wr_cnt) ? 1'b0 : ~wdata_ff_full& (~saw_ff_empty);
                                                        //assign m_split_wready = ~wdata_ff_full& (~saw_ff_empty);
                                                        assign m_wready[ext_mas_cnt] = (((|nxt_wr_cnt) || (|wr_cnt)) ? 1'b0 : (wr_last_pending_xfer[ext_mas_cnt] ? (~wdata_ff_full) : ((~wdata_ff_full) & (~saw_ff_empty)))) ; 
                                                        assign m_split_wready = (wr_last_pending_xfer[ext_mas_cnt] ? (~wdata_ff_full) : ((~wdata_ff_full) & (~saw_ff_empty))) ; 
                                                        assign m_wlast[ext_mas_cnt] = 1'b1 ; 
                                                        assign m_wuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                        always
                                                            @(posedge aclk_i or 
                                                                negedge aresetn_i)
                                                            begin
                                                                if ((~aresetn_i)) 
                                                                    begin
                                                                        m_wvalid[ext_mas_cnt] <=  1'b0 ;
                                                                        m_wdata[ext_mas_cnt] <=  {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ;
                                                                        m_wstrb[ext_mas_cnt] <=  {(EXT_SLV_AXI_DATA_WIDTH / 8){1'b0}} ;
                                                                        wr_data_reg <=  {EXT_MAS_AXI_DATA_WIDTH_INT{1'b0}} ;
                                                                        wr_strb_reg <=  {(EXT_MAS_AXI_DATA_WIDTH_INT / 8){1'b0}} ;
                                                                        wr_cnt <=  {WR_CNT_WIDTH{1'b0}} ;
                                                                        i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  1'b0 ;
                                                                        wr_last_pending_xfer[ext_mas_cnt] <=  1'b0 ;
                                                                    end
                                                                else
                                                                    begin
                                                                        m_wvalid[ext_mas_cnt] <=  nxt_m_wvalid[ext_mas_cnt] ;
                                                                        m_wdata[ext_mas_cnt] <=  nxt_m_wdata[ext_mas_cnt] ;
                                                                        m_wstrb[ext_mas_cnt] <=  nxt_m_wstrb[ext_mas_cnt] ;
                                                                        wr_data_reg <=  nxt_wr_data_reg ;
                                                                        wr_strb_reg <=  nxt_wr_strb_reg ;
                                                                        wr_cnt <=  nxt_wr_cnt ;
                                                                        i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <=  (((|(i_s_ext_mas_dwr_gnt ^ i_s_ext_mas_dwr_gnt_final[ext_mas_cnt])) && ((|wr_cnt) || ((wr_cnt == 'd0) & wdata_ff_full))) ? i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] : i_s_ext_mas_dwr_gnt) ;// to fix issue faced in  16->8 downsize; 1master and 1slave
                                                                        // i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] <= |(i_s_ext_mas_dwr_gnt^i_s_ext_mas_dwr_gnt_final[ext_mas_cnt]) && (|wr_cnt) ? i_s_ext_mas_dwr_gnt_final[ext_mas_cnt] : i_s_ext_mas_dwr_gnt; // to fix issue faced in  16->8 downsize; 1master and 1slave
                                                                        wr_last_pending_xfer[ext_mas_cnt] <=  nxt_wr_last_pending_xfer[ext_mas_cnt] ;
                                                                    end
                                                            end
                                                        integer i ; 
                                                        always
                                                            @(*)
                                                            begin
                                                                nxt_m_wvalid[ext_mas_cnt] = m_wvalid[ext_mas_cnt] ;
                                                                nxt_m_wdata[ext_mas_cnt] = m_wdata[ext_mas_cnt] ;
                                                                nxt_m_wstrb[ext_mas_cnt] = m_wstrb[ext_mas_cnt] ;
                                                                nxt_wr_cnt = wr_cnt ;
                                                                nxt_wr_data_reg = wr_data_reg ;
                                                                nxt_wr_strb_reg = wr_strb_reg ;
                                                                nxt_wr_last_pending_xfer[ext_mas_cnt] = ((wr_last_pending_xfer[ext_mas_cnt] & (!(|wr_cnt))) ? (!m_wready[ext_mas_cnt]) : (((((i_s_wvalid & i_s_wlast) & o_s_wready) & (~wdata_ff_full)) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) ? 1'b1 : wr_last_pending_xfer[ext_mas_cnt])) ;
                                                                if ((|wr_cnt)) 
                                                                    begin
                                                                        if ((m_wvalid[ext_mas_cnt] & m_split_wready)) 
                                                                            //if( m_wvalid [ext_mas_cnt] &  m_split_wready[ext_mas_cnt]& (~wdata_ff_full) )
                                                                            begin
                                                                                nxt_wr_cnt = (wr_cnt - 'd1) ;
                                                                                nxt_wr_data_reg = (wr_data_reg >> EXT_SLV_AXI_DATA_WIDTH) ;
                                                                                nxt_wr_strb_reg = (wr_strb_reg >> (EXT_SLV_AXI_DATA_WIDTH / 8)) ;
                                                                                nxt_m_wvalid[ext_mas_cnt] = 1'b1 ;
                                                                                nxt_m_wdata[ext_mas_cnt] = wr_data_reg[0 +: EXT_SLV_AXI_DATA_WIDTH] ;
                                                                                nxt_m_wstrb[ext_mas_cnt] = wr_strb_reg[0 +: (EXT_SLV_AXI_DATA_WIDTH / 8)] ;
                                                                            end
                                                                        else
                                                                            begin
                                                                                nxt_wr_cnt = wr_cnt ;
                                                                            end
                                                                    end
                                                                else
                                                                    if (((((i_s_wvalid & o_s_wready) & (~wdata_ff_full)) & (i_s_ext_mas_dwr_gnt == ext_mas_cnt)) & (~saw_ff_empty))) 
                                                                        //else if ( i_s_wvalid & o_s_wready & (~wdata_ff_full) & ( i_s_ext_mas_dwr_gnt == ext_mas_cnt)  )
                                                                        begin
                                                                            nxt_wr_cnt = ((DOWNSIZE_FACTOR - saw_addr[ADDR_BIT_SELECT]) - 1'd1) ;
                                                                            nxt_m_wvalid[ext_mas_cnt] = 1'b1 ;
                                                                            for (i = 0 ; (i < DOWNSIZE_FACTOR) ; i = (i + 1))
                                                                                begin
                                                                                if ((saw_addr[ADDR_BIT_SELECT +: clog2(DOWNSIZE_FACTOR)] == i)) 
                                                                                begin
                                                                                nxt_wr_data_reg = (i_s_wdata[(EXT_MAS_AXI_DATA_WIDTH_INT - 1):0] >> ((i + 1) * EXT_SLV_AXI_DATA_WIDTH)) ;
                                                                                nxt_wr_strb_reg = (i_s_wstrb[((EXT_MAS_AXI_DATA_WIDTH_INT / 8) - 1):0] >> ((i + 1) * (EXT_SLV_AXI_DATA_WIDTH / 8))) ;
                                                                                nxt_m_wdata[ext_mas_cnt] = i_s_wdata[(i * EXT_SLV_AXI_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH] ;
                                                                                nxt_m_wstrb[ext_mas_cnt] = i_s_wstrb[(i * (EXT_SLV_AXI_DATA_WIDTH / 8)) +: (EXT_SLV_AXI_DATA_WIDTH / 8)] ;
                                                                                end
                                                                                end
                                                                        end
                                                                    else
                                                                        begin
                                                                            nxt_wr_cnt = wr_cnt ;
                                                                            nxt_m_wvalid[ext_mas_cnt] = (m_wready[ext_mas_cnt] ? 1'b0 : m_wvalid[ext_mas_cnt]) ;
                                                                        end
                                                            end
                                                    end
                                        end
                                end
                            else
                                begin : NO_EXT_MAS_CONNECT_BLK
                                    assign m_wvalid[ext_mas_cnt] = 1'b0 ; 
                                    assign m_wdata[ext_mas_cnt] = {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ; 
                                    assign m_wstrb[ext_mas_cnt] = {(EXT_SLV_AXI_DATA_WIDTH / 8){1'b0}} ; 
                                    assign m_wuser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                    assign m_wlast[ext_mas_cnt] = 1'b0 ; 
                                    assign m_wready[ext_mas_cnt] = 1'b0 ; 
                                end
                        end
                    end
                always
                    @(*)
                    begin
                        mi_wvalid_wrff = 1'b0 ;
                        mi_wdata_wrff = {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ;
                        mi_wstrb_wrff = {(EXT_SLV_AXI_DATA_WIDTH / 8){1'b0}} ;
                        mi_wuser_wrff = {AXI_USER_WIDTH{1'b0}} ;
                        mi_wlast_wrff = 1'b0 ;
                        wdata_ff_wr_en = 1'b0 ;
                        for (ext_mas_val = 0 ; (ext_mas_val < TOTAL_EXTMAS_CNT) ; ext_mas_val = (ext_mas_val + 1))
                            begin
                                //if(i_s_ext_mas_dwr_gnt_final[ext_mas_val]==ext_mas_val)
                                if (((i_s_ext_mas_dwr_gnt_final[ext_mas_val] == ext_mas_val) & ((!(|wr_last_pending_xfer)) || wr_last_pending_xfer[ext_mas_val]))) 
                                    begin
                                        mi_wvalid_wrff = m_wvalid[ext_mas_val] ;
                                        mi_wdata_wrff = m_wdata[ext_mas_val] ;
                                        mi_wstrb_wrff = m_wstrb[ext_mas_val] ;
                                        mi_wuser_wrff = m_wuser[ext_mas_val] ;
                                        mi_wlast_wrff = m_wlast[ext_mas_val] ;
                                        wdata_ff_wr_en = ((~wdata_ff_full) & m_wvalid[ext_mas_val]) ;
                                        //wdata_ff_wr_en =  ( ~wdata_ff_full_2d & mi_wvalid_wrff );equalsize
                                        //wdata_ff_wr_en =  (m2_wdata_repeat_flag_d | m2_wr_en_flag) ? 1'b0: ( ~wdata_ff_full_2d & mi_wvalid_wrff );//downsize
                                    end
                            end
                    end
                //===================================================================================
                // WRITE DATA FIFO 
                //===================================================================================
                if ((EXT_SLV_AXI_PROTOCOL == 0)) 
                    begin : genblk5
                        assign wdata_ff_wdata = {mi_wlast_wrff,
                                    mi_wuser_wrff,
                                    mi_wstrb_wrff,
                                    mi_wdata_wrff,
                                    mi_wvalid_wrff} ; 
                    end
                else
                    begin : genblk5
                        assign wdata_ff_wdata = {mi_wuser_wrff,
                                    mi_wstrb_wrff,
                                    mi_wdata_wrff,
                                    mi_wvalid_wrff} ; 
                    end
                assign wdata_ff_rd_en = (wdata_ff_empty ? 1'b0 : ((o_ext_slv_prt_wvalid & i_ext_slv_prt_wready) || (!o_ext_slv_prt_wvalid))) ; 
                //assign wdata_ff_rd_en   = wdata_ff_empty ? 1'b0 : i_ext_slv_prt_wready; 
                if ((LATTICE_FIFO == 1)) 
                    begin : LSCC_EXT_SLV_WDATA_FF_BLK
                    end
                else
                    begin : CUSTOM_EXT_SLV_WDATA_FF_BLK
                        axi4_interconnect_ipgen_gen_fifo #(W_AWID,
                                W_DWID,
                                0,
                                EXT_SLV_WR_DATA_FIFO_DEPTH) u_ext_slv_wdata_ff (// Pointer Width
                                // Data Width { size}
                                // Whether Output needs to be registered or not
                                // Number of entries in FIFO
                                .clk(aclk_i), 
                                    .aresetn_i(aresetn_i), 
                                    .we(wdata_ff_wr_en), 
                                    .wdata(wdata_ff_wdata), 
                                    .re(wdata_ff_rd_en), 
                                    .rdata(wdata_ff_rdata), 
                                    .full(wdata_ff_full), 
                                    .pre_full(), 
                                    .empty(wdata_ff_empty)) ; 
                    end
                //);
                always
                    @(posedge aclk_i or 
                        negedge aresetn_i)
                    begin
                        if ((!aresetn_i)) 
                            begin
                                o_ext_slv_prt_wvalid <=  1'b0 ;
                                o_ext_slv_prt_wdata <=  {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ;
                                o_ext_slv_prt_wstrb <=  {(EXT_SLV_AXI_DATA_WIDTH / 8){1'b0}} ;
                                o_ext_slv_prt_wuser <=  {AXI_USER_WIDTH{1'b0}} ;
                                o_ext_slv_prt_wlast <=  1'b0 ;
                            end
                        else
                            begin
                                o_ext_slv_prt_wvalid <=  ((wdata_ff_empty || (o_ext_slv_prt_wvalid & (!i_ext_slv_prt_wready))) ? (i_ext_slv_prt_wready ? 1'b0 : o_ext_slv_prt_wvalid) : wdata_ff_rdata[0]) ;
                                o_ext_slv_prt_wdata <=  ((wdata_ff_empty || (o_ext_slv_prt_wvalid & (!i_ext_slv_prt_wready))) ? o_ext_slv_prt_wdata : wdata_ff_rdata[1 +: EXT_SLV_AXI_DATA_WIDTH]) ;
                                o_ext_slv_prt_wstrb <=  ((wdata_ff_empty || (o_ext_slv_prt_wvalid & (!i_ext_slv_prt_wready))) ? o_ext_slv_prt_wstrb : wdata_ff_rdata[(1 + EXT_SLV_AXI_DATA_WIDTH) +: (EXT_SLV_AXI_DATA_WIDTH / 8)]) ;
                                o_ext_slv_prt_wuser <=  ((wdata_ff_empty || (o_ext_slv_prt_wvalid & (!i_ext_slv_prt_wready))) ? o_ext_slv_prt_wuser : wdata_ff_rdata[((1 + EXT_SLV_AXI_DATA_WIDTH) + (EXT_SLV_AXI_DATA_WIDTH / 8)) +: AXI_USER_WIDTH]) ;
                                o_ext_slv_prt_wlast <=  ((EXT_SLV_AXI_PROTOCOL == 1) ? 1'b1 : ((wdata_ff_empty || (o_ext_slv_prt_wvalid & (!i_ext_slv_prt_wready))) ? o_ext_slv_prt_wlast : wdata_ff_rdata[(W_DWID - 1)])) ;
                            end
                    end
                if ((EXT_SLV_AXI_PROTOCOL == 1)) 
                    begin : AXI4_LITE_EXTSLV_AWIDFF_BLK
                        // AWID FIFO 
                        localparam AWID_DWIDTH = EXT_SLV_AXI_ID_WIDTH ; 
                        //localparam AWID_AWIDTH = clog2(EXT_SLV_AXI_WR_ISSUE);
                        logic ext_slv_awid_ff_wr_en ; 
                        logic ext_slv_awid_ff_rd_en ; 
                        logic ext_slv_awid_ff_empty ; 
                        assign ext_slv_awid_ff_wr_en = ((~ext_slv_awid_ff_full) & o_ext_slv_prt_awvalid_ff) ; 
                        assign ext_slv_awid_ff_rd_en = (((~ext_slv_awid_ff_empty) & i_ext_slv_prt_bvalid) & o_ext_slv_prt_bready) ; 
                        //assign ext_slv_awid_ff_rd_en   = (~ext_slv_awid_ff_empty & i_ext_slv_prt_bvalid & (!ext_slv_wresp_ff_full) );
                        if ((LATTICE_FIFO == 1)) 
                            begin : LSCC_FF_BLK
                            end
                        else
                            begin : CUSTOM_FF_BLK
                                axi4_interconnect_ipgen_gen_fifo #(AW_AWID,
                                        AWID_DWIDTH,
                                        0,
                                        EXT_SLV_AXI_WR_ISSUE) u_ext_slv_awid_fifo (// Pointer Width
                                        // Data Width { size}
                                        // Whether Output needs to be registered or not
                                        // Number of entries in FIFO
                                        //EXT_SLV_AXI_WR_ISSUE_DEPTH// Number of entries in FIFO
                                        .clk(aclk_i), 
                                            .aresetn_i(aresetn_i), 
                                            .we(ext_slv_awid_ff_wr_en), 
                                            .wdata(o_ext_slv_prt_awid_ff), 
                                            .re(ext_slv_awid_ff_rd_en), 
                                            .rdata(ext_slv_awid_ff_rdata), 
                                            .full(ext_slv_awid_ff_full), 
                                            .pre_full(), 
                                            .empty(ext_slv_awid_ff_empty)) ; 
                            end
                    end
                //===================================================================================
                // BRESP ( Write Response )
                //===================================================================================
                localparam WR_AWID = clog2(EXT_SLV_BRESP_FIFO_DEPTH) ; 
                localparam WR_DWID = (EXT_SLV_AXI_PROTOCOL ? (EXT_SLV_AXI_ID_WIDTH + 2) : ((EXT_SLV_AXI_ID_WIDTH + AXI_USER_WIDTH) + 2)) ; 
                logic ext_slv_wresp_ff_wr_en ; 
                logic ext_slv_wresp_ff_rd_en ; 
                logic [(WR_DWID - 1):0] ext_slv_wresp_ff_data_in ; 
                logic [(WR_DWID - 1):0] ext_slv_wresp_ff_rdata ; 
                logic i_ext_slv_prt_bvalid_sig ; 
                logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] i_ext_slv_prt_bid_sig ; 
                logic [1:0] i_ext_slv_prt_bresp_sig ; 
                logic [(AXI_USER_WIDTH - 1):0] i_ext_slv_prt_buser_sig ; 
                logic aw_b_complete_d ; 
                always
                    @(posedge aclk_i or 
                        negedge aresetn_i)
                    begin
                        if ((!aresetn_i)) 
                            begin
                                i_ext_slv_prt_bvalid_sig <=  1'b0 ;
                                i_ext_slv_prt_bid_sig <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                i_ext_slv_prt_bresp_sig <=  2'd0 ;
                                i_ext_slv_prt_buser_sig <=  {AXI_USER_WIDTH{1'b0}} ;
                                aw_b_complete_d <=  1'b0 ;
                                o_ext_slv_prt_bready <=  1'b1 ;
                            end
                        else
                            begin
                                i_ext_slv_prt_bvalid_sig <=  ((|aw_b_complete) ? 1'b0 : ((~ext_slv_wresp_ff_full) & i_ext_slv_prt_bvalid)) ;
                                i_ext_slv_prt_bresp_sig <=  (((|i_ext_slv_prt_bresp_sig) & i_ext_slv_prt_bvalid_sig) ? (((!(|aw_b_complete)) & (!aw_b_complete_d)) ? 2'd0 : i_ext_slv_prt_bresp_sig) : (((~ext_slv_wresp_ff_full) & i_ext_slv_prt_bvalid) ? i_ext_slv_prt_bresp : i_ext_slv_prt_bresp_sig)) ;
                                //i_ext_slv_prt_bresp_sig  <= !(|aw_b_complete) & !aw_b_complete_d ?  2'd0 : (|i_ext_slv_prt_bresp_sig ? i_ext_slv_prt_bresp_sig : i_ext_slv_prt_bresp);
                                i_ext_slv_prt_bid_sig <=  (EXT_SLV_AXI_PROTOCOL ? ext_slv_awid_ff_rdata[(EXT_SLV_AXI_ID_WIDTH - 1):0] : i_ext_slv_prt_bid) ;
                                i_ext_slv_prt_buser_sig <=  i_ext_slv_prt_buser ;
                                aw_b_complete_d <=  (|aw_b_complete) ;
                                o_ext_slv_prt_bready <=  (~ext_slv_wresp_ff_full) ;
                            end
                    end
                assign ext_slv_wresp_ff_wr_en = i_ext_slv_prt_bvalid_sig ; 
                //assign ext_slv_wresp_ff_wr_en              = (~ext_slv_wresp_ff_full & i_ext_slv_prt_bvalid_sig );
                assign ext_slv_wresp_ff_data_in = (EXT_SLV_AXI_PROTOCOL ? {i_ext_slv_prt_bid_sig,
                            i_ext_slv_prt_bresp_sig} : {i_ext_slv_prt_buser_sig,
                            i_ext_slv_prt_bid_sig,
                            i_ext_slv_prt_bresp_sig}) ; 
                //assign ext_slv_wresp_ff_rd_en              = (~ext_slv_wresp_ff_empty & i_s_bready  );
                assign ext_slv_wresp_ff_rd_en = (o_s_bvalid ? (i_s_bready & (~ext_slv_wresp_ff_empty)) : (~ext_slv_wresp_ff_empty)) ; 
                //assign o_ext_slv_prt_bready                 = ~ext_slv_wresp_ff_full;
                if ((LATTICE_FIFO == 1)) 
                    begin : LSCC_EXT_SLV_WRESP_FF_BLK
                    end
                else
                    begin : CUSTOM_EXT_SLV_WRESP_FF_BLK
                        axi4_interconnect_ipgen_gen_fifo #(WR_AWID,
                                WR_DWID,
                                0,
                                EXT_SLV_BRESP_FIFO_DEPTH) u_ext_slv_wresp_fifo (// Pointer Width
                                // Data Width { size}
                                //0,                    // Whether Output needs to be registered or not
                                // Whether Output needs to be registered or not
                                // Number of entries in FIFO
                                .clk(aclk_i), 
                                    .aresetn_i(aresetn_i), 
                                    .we(ext_slv_wresp_ff_wr_en), 
                                    .wdata(ext_slv_wresp_ff_data_in), 
                                    .re(ext_slv_wresp_ff_rd_en), 
                                    .rdata(ext_slv_wresp_ff_rdata), 
                                    .full(ext_slv_wresp_ff_full), 
                                    .pre_full(), 
                                    .empty(ext_slv_wresp_ff_empty)) ; 
                    end
                always
                    @(posedge aclk_i or 
                        negedge aresetn_i)
                    begin
                        if ((!aresetn_i)) 
                            begin
                                o_s_bvalid <=  1'b0 ;
                                o_s_bresp <=  2'd0 ;
                                o_s_bid <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                o_s_buser <=  {AXI_USER_WIDTH{1'b0}} ;
                            end
                        else
                            begin
                                o_s_bvalid <=  (ext_slv_wresp_ff_rd_en ? 1'b1 : (i_s_bready ? 1'b0 : o_s_bvalid)) ;
                                o_s_bresp <=  (ext_slv_wresp_ff_rd_en ? ext_slv_wresp_ff_rdata[0 +: 2] : o_s_bresp) ;
                                o_s_bid <=  (ext_slv_wresp_ff_rd_en ? ext_slv_wresp_ff_rdata[2 +: EXT_SLV_AXI_ID_WIDTH] : o_s_bid) ;
                                o_s_buser <=  (ext_slv_wresp_ff_rd_en ? (EXT_SLV_AXI_PROTOCOL ? {AXI_USER_WIDTH{1'b0}} : ext_slv_wresp_ff_rdata[(2 + EXT_SLV_AXI_ID_WIDTH) +: AXI_USER_WIDTH]) : o_s_buser) ;
                                //o_s_bvalid <= ext_slv_wresp_ff_empty  ? (i_s_bready ? 1'b0 : o_s_bvalid) : (o_s_bvalid ? (!i_s_bready) : 1'b1); 
                                //o_s_bresp  <= (ext_slv_wresp_ff_empty ) ? o_s_bresp : ext_slv_wresp_ff_rdata[0 +:2]; 
                                //o_s_bid    <= (ext_slv_wresp_ff_empty ) ? o_s_bid : ext_slv_wresp_ff_rdata[2 +: EXT_SLV_AXI_ID_WIDTH]; 
                                //o_s_buser  <= (ext_slv_wresp_ff_empty ) ? o_s_buser : (EXT_SLV_AXI_PROTOCOL ? {AXI_USER_WIDTH{1'b0}} : 
                                //              ext_slv_wresp_ff_rdata[2+EXT_SLV_AXI_ID_WIDTH +: AXI_USER_WIDTH]); 
                            end
                    end
            end
        if ((EXT_SLV_ACCESS_TYPE == 2'd1)) 
            begin : RO_ACCESS_BLK
                assign o_s_awready = 1'b0 ; 
                assign o_s_split_awready = 1'b0 ; 
                assign o_s_wready = 1'b0 ; 
                assign o_s_bvalid = 1'b0 ; 
                assign o_s_bid = {EXT_SLV_AXI_ID_WIDTH{1'b0}} ; 
                assign o_s_bresp = 2'd0 ; 
                assign o_s_buser = {AXI_USER_WIDTH{1'b0}} ; 
                assign o_ext_slv_prt_awvalid = 1'b0 ; 
                assign o_ext_slv_prt_awaddr = {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ; 
                assign o_ext_slv_prt_awsize = 3'd0 ; 
                assign o_ext_slv_prt_awlen = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ; 
                assign o_ext_slv_prt_awburst = 2'd0 ; 
                assign o_ext_slv_prt_awcache = 4'd0 ; 
                assign o_ext_slv_prt_awid = {EXT_SLV_AXI_ID_WIDTH{1'b0}} ; 
                assign o_ext_slv_prt_awprot = 3'd0 ; 
                assign o_ext_slv_prt_awlock = 1'd0 ; 
                assign o_ext_slv_prt_awqos = 4'd0 ; 
                assign o_ext_slv_prt_awregion = 4'd0 ; 
                assign o_ext_slv_prt_awuser = {AXI_USER_WIDTH{1'b0}} ; 
                assign o_ext_slv_prt_wvalid = 1'b0 ; 
                assign o_ext_slv_prt_wdata = {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ; 
                assign o_ext_slv_prt_wstrb = {(EXT_SLV_AXI_DATA_WIDTH / 8){1'b0}} ; 
                assign o_ext_slv_prt_wlast = 1'b0 ; 
                assign o_ext_slv_prt_wuser = {AXI_USER_WIDTH{1'b0}} ; 
                assign o_ext_slv_prt_bready = 1'b0 ; 
            end
        if (((EXT_SLV_ACCESS_TYPE == 2'd1) || (EXT_SLV_ACCESS_TYPE == 2'd2))) 
            begin : RO_WR_ACCESS_BLK
                //Read Internal signals
                logic [(6 - 1):0] ext_mas_ard_gnt_reg [TOTAL_EXTMAS_CNT], 
                    nxt_ext_mas_ard_gnt_reg [TOTAL_EXTMAS_CNT] ; 
                logic [(TOTAL_EXTMAS_CNT - 1):0] m_arvalid, 
                    nxt_m_arvalid ; 
                logic [(EXT_SLV_AXI_ADDR_WIDTH - 1):0] m_araddr [TOTAL_EXTMAS_CNT], 
                    nxt_m_araddr [TOTAL_EXTMAS_CNT] ; 
                logic [2:0] m_arsize [TOTAL_EXTMAS_CNT], 
                    nxt_m_arsize [TOTAL_EXTMAS_CNT] ; 
                logic [(EXT_SLV_AXI_LEN_WIDTH - 1):0] m_arlen [TOTAL_EXTMAS_CNT], 
                    nxt_m_arlen [TOTAL_EXTMAS_CNT] ; 
                logic [1:0] m_arburst [TOTAL_EXTMAS_CNT], 
                    nxt_m_arburst [TOTAL_EXTMAS_CNT] ; 
                logic [3:0] m_arcache [TOTAL_EXTMAS_CNT], 
                    nxt_m_arcache [TOTAL_EXTMAS_CNT] ; 
                logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] m_arid [TOTAL_EXTMAS_CNT], 
                    nxt_m_arid [TOTAL_EXTMAS_CNT] ; 
                logic [2:0] m_arprot [TOTAL_EXTMAS_CNT], 
                    nxt_m_arprot [TOTAL_EXTMAS_CNT] ; 
                logic [0:0] m_arlock [TOTAL_EXTMAS_CNT], 
                    nxt_m_arlock [TOTAL_EXTMAS_CNT] ; 
                logic [3:0] m_arqos [TOTAL_EXTMAS_CNT], 
                    nxt_m_arqos [TOTAL_EXTMAS_CNT] ; 
                logic [3:0] m_arregion [TOTAL_EXTMAS_CNT], 
                    nxt_m_arregion [TOTAL_EXTMAS_CNT] ; 
                logic [(AXI_USER_WIDTH - 1):0] m_aruser [TOTAL_EXTMAS_CNT], 
                    nxt_m_aruser [TOTAL_EXTMAS_CNT] ; 
                logic [(TOTAL_EXTMAS_CNT - 1):0] m_arready ; 
                logic [(TOTAL_EXTMAS_CNT - 1):0] m_split_arready ; 
                logic nxt_o_s_arready ; 
                logic nxt_o_s_split_arready ; 
                logic o_ext_slv_prt_arvalid_ff ; 
                logic [(EXT_SLV_AXI_ADDR_WIDTH - 1):0] o_ext_slv_prt_araddr_ff ; 
                logic [2:0] o_ext_slv_prt_arsize_ff ; 
                logic [(EXT_SLV_AXI_LEN_WIDTH - 1):0] o_ext_slv_prt_arlen_ff ; 
                logic [1:0] o_ext_slv_prt_arburst_ff ; 
                logic [3:0] o_ext_slv_prt_arcache_ff ; 
                logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] o_ext_slv_prt_arid_ff ; 
                logic [2:0] o_ext_slv_prt_arprot_ff ; 
                logic [0:0] o_ext_slv_prt_arlock_ff ; 
                logic [3:0] o_ext_slv_prt_arqos_ff ; 
                logic [3:0] o_ext_slv_prt_arregion_ff ; 
                logic [(AXI_USER_WIDTH - 1):0] o_ext_slv_prt_aruser_ff ; 
                //EXTERNAL SLAVE read ISSUE
                localparam AR_ISSUE_WIDTH = ((EXT_SLV_AXI_RD_ISSUE == 1) ? 1 : (((EXT_SLV_AXI_RD_ISSUE == 2) || (EXT_SLV_AXI_RD_ISSUE == 3)) ? 2 : (((EXT_SLV_AXI_RD_ISSUE >= 4) && (EXT_SLV_AXI_RD_ISSUE <= 7)) ? 3 : (((EXT_SLV_AXI_RD_ISSUE >= 8) && (EXT_SLV_AXI_RD_ISSUE <= 15)) ? 4 : 5)))) ; 
                localparam AR_ARID = (((EXT_SLV_AXI_RD_ISSUE == 1) || (EXT_SLV_AXI_RD_ISSUE == 2)) ? 1 : (((EXT_SLV_AXI_RD_ISSUE == 3) || (EXT_SLV_AXI_RD_ISSUE == 4)) ? 2 : (((EXT_SLV_AXI_RD_ISSUE >= 5) && (EXT_SLV_AXI_RD_ISSUE <= 8)) ? 3 : 4))) ; 
                //localparam EXT_SLV_AXI_RD_ISSUE_DEPTH = EXT_SLV_AXI_RD_ISSUE==1  || EXT_SLV_AXI_RD_ISSUE==2  ? 2 : 
                //                                        EXT_SLV_AXI_RD_ISSUE==3  || EXT_SLV_AXI_RD_ISSUE==4  ? 4 : 
                //                                        EXT_SLV_AXI_RD_ISSUE>=5  && EXT_SLV_AXI_RD_ISSUE<=8  ? 8 : 16; 
                localparam AR_DWID = ((EXT_SLV_AXI_PROTOCOL == 1'b0) ? (((EXT_SLV_AXI_ADDR_WIDTH + EXT_SLV_AXI_ID_WIDTH) + AXI_USER_WIDTH) + 30) : (EXT_SLV_AXI_ADDR_WIDTH + 4)) ; 
                logic ext_slv_rd_issue_ff_wr_en ; 
                logic ext_slv_rd_issue_ff_rd_en ; 
                logic [(AR_DWID - 1):0] ext_slv_rd_issue_ff_data_in ; 
                logic [(AR_DWID - 1):0] ext_slv_rd_issue_ff_rdata ; 
                logic ext_slv_rd_issue_ff_full ; 
                logic ext_slv_rd_issue_ff_empty ; 
                logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] ext_slv_arid_ff_rdata ; 
                logic ext_slv_rd_ff_full ; 
                logic ext_slv_rd_ff_pre_full ; 
                logic ext_slv_rd_ff_empty ; 
                logic [(TOTAL_EXTMAS_CNT - 1):0] ar_b_complete ; 
                logic i_ext_slv_prt_rlast_sig ; 
                logic ext_slv_arid_ff_full ; 
                // Number of Read Issue  Check
                logic [(AR_ISSUE_WIDTH - 1):0] rd_issue_cnt ; 
                logic rd_issue_full ; 
                assign rd_issue_full = (rd_issue_cnt == EXT_SLV_AXI_RD_ISSUE) ; 
                always
                    @(posedge aclk_i or 
                        negedge aresetn_i)
                    begin
                        if ((!aresetn_i)) 
                            begin
                                rd_issue_cnt <=  {AR_ISSUE_WIDTH{1'b0}} ;
                            end
                        else
                            begin
                                rd_issue_cnt <=  rd_issue_cnt ;
                                if ((((o_ext_slv_prt_arvalid_ff & (~ext_slv_rd_issue_ff_full)) & (~rd_issue_full)) & ((i_ext_slv_prt_rvalid & i_ext_slv_prt_rlast) & o_ext_slv_prt_rready))) 
                                    //if ( (o_ext_slv_prt_arvalid_ff & ~ext_slv_rd_issue_ff_full & ~rd_issue_full) & (i_ext_slv_prt_rvalid & i_ext_slv_prt_rlast & ~ext_slv_rd_ff_pre_full))
                                    rd_issue_cnt <=  rd_issue_cnt ;
                                else
                                    if (((o_ext_slv_prt_arvalid_ff & (~ext_slv_rd_issue_ff_full)) & (~rd_issue_full))) 
                                        rd_issue_cnt <=  (rd_issue_cnt + 1'd1) ;
                                    else
                                        if ((((i_ext_slv_prt_rvalid & i_ext_slv_prt_rlast) & o_ext_slv_prt_rready) & (|rd_issue_cnt))) 
                                            //else if ( i_ext_slv_prt_rvalid & i_ext_slv_prt_rlast & ~ext_slv_rd_ff_pre_full & |rd_issue_cnt )
                                            rd_issue_cnt <=  (rd_issue_cnt - 1'd1) ;
                                        else
                                            rd_issue_cnt <=  rd_issue_cnt ;
                            end
                    end
                //===================================================================================
                // ADDRESS READ CHANNEL START 
                //===================================================================================
                if ((EXT_SLV_AXI_PROTOCOL == 0)) 
                    begin : AXI4_EXTSLV_AR_BLK
                        for (ext_mas_cnt = 0;(ext_mas_cnt < TOTAL_EXTMAS_CNT);ext_mas_cnt = (ext_mas_cnt + 1))
                        begin : EXT_MAS_BLK
                            localparam EXT_MAS_AXI_DATA_WIDTH_INT = EXT_MAS_AXI_DATA_WIDTH[(ext_mas_cnt * 11) +: 11] ; 
                            // for - ext_mas_cnt
                            if ((EXT_SLV_CONNECTED_MASTER[ext_mas_cnt] == 1)) 
                                begin : EXTSLV_CNCT_EXTMAS_BLK
                                    if ((EXT_MAS_AXI_PROTOCOL[ext_mas_cnt] == 0)) 
                                        begin : AXI4_EXTMAS_BLK
                                            if (((EXT_MAS_AXI_DATA_WIDTH_INT < EXT_SLV_AXI_DATA_WIDTH) || (EXT_MAS_AXI_DATA_WIDTH_INT == EXT_SLV_AXI_DATA_WIDTH))) 
                                                begin : EQ_UP_BLK
                                                    assign m_arready[ext_mas_cnt] = ((~rd_issue_full) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    assign m_split_arready[ext_mas_cnt] = ((~rd_issue_full) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_split_arready[ext_mas_cnt] = ~rd_issue_full;
                                                    //assign m_arready[ext_mas_cnt]       = ~ext_slv_rd_issue_ff_full & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt) ;
                                                    //assign m_split_arready[ext_mas_cnt] = ~ext_slv_rd_issue_ff_full;
                                                    //assign m_split_arready[ext_mas_cnt] = 1'b0;
                                                    assign ar_b_complete[ext_mas_cnt] = 1'b0 ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((~aresetn_i)) 
                                                                begin
                                                                    m_arvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_araddr[ext_mas_cnt] <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                                                    m_arsize[ext_mas_cnt] <=  3'd0 ;
                                                                    m_arlen[ext_mas_cnt] <=  {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ;
                                                                    m_arburst[ext_mas_cnt] <=  2'd0 ;
                                                                    m_arcache[ext_mas_cnt] <=  4'd0 ;
                                                                    m_arid[ext_mas_cnt] <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                                                    m_arprot[ext_mas_cnt] <=  3'd0 ;
                                                                    m_arlock[ext_mas_cnt] <=  1'd0 ;
                                                                    m_arqos[ext_mas_cnt] <=  4'd0 ;
                                                                    m_arregion[ext_mas_cnt] <=  4'd0 ;
                                                                    m_aruser[ext_mas_cnt] <=  {AXI_USER_WIDTH{1'b0}} ;
                                                                    ext_mas_ard_gnt_reg[ext_mas_cnt] <=  TOTAL_EXTMAS_CNT ;
                                                                    //ext_mas_ard_gnt_reg[ext_mas_cnt]  <= 6'd32;
                                                                end
                                                            else
                                                                begin
                                                                    m_arvalid[ext_mas_cnt] <=  nxt_m_arvalid[ext_mas_cnt] ;
                                                                    m_araddr[ext_mas_cnt] <=  nxt_m_araddr[ext_mas_cnt] ;
                                                                    m_arsize[ext_mas_cnt] <=  nxt_m_arsize[ext_mas_cnt] ;
                                                                    m_arlen[ext_mas_cnt] <=  nxt_m_arlen[ext_mas_cnt] ;
                                                                    m_arburst[ext_mas_cnt] <=  nxt_m_arburst[ext_mas_cnt] ;
                                                                    m_arcache[ext_mas_cnt] <=  nxt_m_arcache[ext_mas_cnt] ;
                                                                    m_arid[ext_mas_cnt] <=  nxt_m_arid[ext_mas_cnt] ;
                                                                    m_arprot[ext_mas_cnt] <=  nxt_m_arprot[ext_mas_cnt] ;
                                                                    m_arlock[ext_mas_cnt] <=  nxt_m_arlock[ext_mas_cnt] ;
                                                                    m_arqos[ext_mas_cnt] <=  nxt_m_arqos[ext_mas_cnt] ;
                                                                    m_arregion[ext_mas_cnt] <=  nxt_m_arregion[ext_mas_cnt] ;
                                                                    m_aruser[ext_mas_cnt] <=  nxt_m_aruser[ext_mas_cnt] ;
                                                                    ext_mas_ard_gnt_reg[ext_mas_cnt] <=  nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                                end
                                                        end
                                                    always
                                                        @(*)
                                                        begin
                                                            nxt_m_arvalid[ext_mas_cnt] = m_arvalid[ext_mas_cnt] ;
                                                            nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                            nxt_m_arsize[ext_mas_cnt] = m_arsize[ext_mas_cnt] ;
                                                            nxt_m_arlen[ext_mas_cnt] = m_arlen[ext_mas_cnt] ;
                                                            nxt_m_arburst[ext_mas_cnt] = m_arburst[ext_mas_cnt] ;
                                                            nxt_m_arcache[ext_mas_cnt] = m_arcache[ext_mas_cnt] ;
                                                            nxt_m_arid[ext_mas_cnt] = m_arid[ext_mas_cnt] ;
                                                            nxt_m_arprot[ext_mas_cnt] = m_arprot[ext_mas_cnt] ;
                                                            nxt_m_arlock[ext_mas_cnt] = m_arlock[ext_mas_cnt] ;
                                                            nxt_m_arqos[ext_mas_cnt] = m_arqos[ext_mas_cnt] ;
                                                            nxt_m_arregion[ext_mas_cnt] = m_arregion[ext_mas_cnt] ;
                                                            nxt_m_aruser[ext_mas_cnt] = m_aruser[ext_mas_cnt] ;
                                                            nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                            if ((((i_s_arvalid & o_s_arready) & (i_s_ext_mas_ard_gnt == ext_mas_cnt)) & (!m_arvalid))) 
                                                                //if ( i_s_arvalid & o_s_arready & (~rd_issue_full) & ( i_s_ext_mas_ard_gnt == ext_mas_cnt)   & (!(m_arvalid)) )
                                                                //if ( i_s_arvalid & o_s_arready & (~rd_issue_full) & ( i_s_ext_mas_ard_gnt == ext_mas_cnt)  )
                                                                begin
                                                                    nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = i_s_ext_mas_ard_gnt ;
                                                                    nxt_m_arvalid[ext_mas_cnt] = i_s_arvalid ;
                                                                    nxt_m_araddr[ext_mas_cnt] = i_s_araddr ;
                                                                    nxt_m_arsize[ext_mas_cnt] = i_s_arsize ;
                                                                    nxt_m_arlen[ext_mas_cnt] = i_s_arlen ;
                                                                    nxt_m_arburst[ext_mas_cnt] = i_s_arburst ;
                                                                    nxt_m_arcache[ext_mas_cnt] = i_s_arcache ;
                                                                    nxt_m_arid[ext_mas_cnt] = i_s_arid ;
                                                                    nxt_m_arprot[ext_mas_cnt] = i_s_arprot ;
                                                                    nxt_m_arlock[ext_mas_cnt] = i_s_arlock ;
                                                                    nxt_m_arqos[ext_mas_cnt] = i_s_arqos ;
                                                                    nxt_m_arregion[ext_mas_cnt] = i_s_arregion ;
                                                                    nxt_m_aruser[ext_mas_cnt] = i_s_aruser ;
                                                                end
                                                            else
                                                                begin
                                                                    nxt_m_arvalid[ext_mas_cnt] = (m_arready[ext_mas_cnt] ? 1'b0 : m_arvalid[ext_mas_cnt]) ;
                                                                    nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = (m_arready[ext_mas_cnt] ? TOTAL_EXTMAS_CNT : ext_mas_ard_gnt_reg[ext_mas_cnt]) ;
                                                                    //nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = m_arready[ext_mas_cnt] ? 6'd32 :ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                                    nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                                    nxt_m_arsize[ext_mas_cnt] = m_arsize[ext_mas_cnt] ;
                                                                    nxt_m_arlen[ext_mas_cnt] = m_arlen[ext_mas_cnt] ;
                                                                    nxt_m_arburst[ext_mas_cnt] = m_arburst[ext_mas_cnt] ;
                                                                    nxt_m_arcache[ext_mas_cnt] = m_arcache[ext_mas_cnt] ;
                                                                    nxt_m_arid[ext_mas_cnt] = m_arid[ext_mas_cnt] ;
                                                                    nxt_m_arprot[ext_mas_cnt] = m_arprot[ext_mas_cnt] ;
                                                                    nxt_m_arlock[ext_mas_cnt] = m_arlock[ext_mas_cnt] ;
                                                                    nxt_m_arqos[ext_mas_cnt] = m_arqos[ext_mas_cnt] ;
                                                                    nxt_m_arregion[ext_mas_cnt] = m_arregion[ext_mas_cnt] ;
                                                                    nxt_m_aruser[ext_mas_cnt] = m_aruser[ext_mas_cnt] ;
                                                                end
                                                        end
                                                end
                                            else
                                                begin : DOWN_BLK
                                                    localparam DOWNSIZE_FACTOR = (EXT_MAS_AXI_DATA_WIDTH_INT / EXT_SLV_AXI_DATA_WIDTH) ; 
                                                    localparam EXT_SLV_BIT_SELECT = ((EXT_SLV_AXI_DATA_WIDTH == 8) ? 0 : ((EXT_SLV_AXI_DATA_WIDTH == 16) ? 1 : ((EXT_SLV_AXI_DATA_WIDTH == 32) ? 2 : ((EXT_SLV_AXI_DATA_WIDTH == 64) ? 3 : ((EXT_SLV_AXI_DATA_WIDTH == 128) ? 4 : ((EXT_SLV_AXI_DATA_WIDTH == 256) ? 5 : 6)))))) ; //(512 is maximum slave bus width during downsize)
                                                    //localparam EXT_MAS_BYTE_CNT = EXT_MAS_AXI_DATA_WIDTH_INT/8;
                                                    //localparam EXT_MAS_BIT_SELECT = clog2 (EXT_MAS_BYTE_CNT); 
                                                    localparam EXT_SLV_BYTE_CNT = (EXT_SLV_AXI_DATA_WIDTH / 8) ; 
                                                    localparam EXT_MAS_ARSIZE_1_IN_BYTES = 2 ; 
                                                    localparam EXT_MAS_ARSIZE_2_IN_BYTES = 4 ; 
                                                    localparam EXT_MAS_ARSIZE_3_IN_BYTES = 8 ; 
                                                    localparam EXT_MAS_ARSIZE_4_IN_BYTES = 16 ; 
                                                    localparam EXT_MAS_ARSIZE_5_IN_BYTES = 32 ; 
                                                    localparam EXT_MAS_ARSIZE_6_IN_BYTES = 64 ; 
                                                    localparam EXT_MAS_ARSIZE_7_IN_BYTES = 128 ; 
                                                    logic ext_slv_rlast_split_ff_wr_en ; 
                                                    logic ext_slv_rlast_split_ff_rd_en ; 
                                                    logic ext_slv_rlast_split_ff_wdata ; 
                                                    logic ext_slv_rlast_split_ff_rdata ; 
                                                    logic ext_slv_rlast_split_ff_full ; 
                                                    logic ext_slv_rlast_split_ff_empty ; 
                                                    logic [7:0] ar_rd_cnt, 
                                                        nxt_ar_rd_cnt ; 
                                                    logic [(EXT_SLV_AXI_LEN_WIDTH - 1):0] m_arlen_reg, 
                                                        nxt_m_arlen_reg ; 
                                                    logic [6:0] ext_mas_req_size_bytes ; 
                                                    logic nxt_req_size_le_ext_slv, 
                                                        req_size_le_ext_slv ; 
                                                    logic [(EXT_SLV_AXI_LEN_WIDTH - 1):0] m_fixed_start_arlen_reg, 
                                                        nxt_m_fixed_start_arlen_reg ; 
                                                    logic [2:0] fixed_burst_ind_cnt, 
                                                        nxt_fixed_burst_ind_cnt ; 
                                                    logic [2:0] fixed_burst_ind_cnt_reg, 
                                                        nxt_fixed_burst_ind_cnt_reg ; 
                                                    assign ext_slv_rlast_split_ff_wdata = m_arready[ext_mas_cnt] ; // since only for last split arready is given
                                                    //assign ext_slv_rlast_split_ff_wdata  =  o_s_arready; // since only for last split arready is given
                                                    assign ext_slv_rlast_split_ff_wr_en = (((o_ext_slv_prt_arvalid_ff & (!ext_slv_rlast_split_ff_full)) & (!ext_slv_rd_issue_ff_full)) & (o_ext_slv_prt_arid_ff[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                    //assign ext_slv_rlast_split_ff_rd_en  = (~ext_slv_rlast_split_ff_empty & i_ext_slv_prt_rvalid & i_ext_slv_prt_rlast & i_ext_slv_prt_rid[EXT_SLV_AXI_ID_WIDTH-1:EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt & (!ext_slv_rd_ff_pre_full));
                                                    assign ext_slv_rlast_split_ff_rd_en = (((((~ext_slv_rlast_split_ff_empty) & i_ext_slv_prt_rvalid) & i_ext_slv_prt_rlast) & (i_ext_slv_prt_rid[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) & o_ext_slv_prt_rready) ; 
                                                    assign ext_mas_req_size_bytes = (1'd1 << m_arsize[ext_mas_cnt]) ; 
                                                    if ((LATTICE_FIFO == 1)) 
                                                        begin : LSCC_FF_BLK
                                                        end
                                                    else
                                                        begin : CUSTOM_FF_BLK
                                                            axi4_interconnect_ipgen_gen_fifo #(AR_ARID,
                                                                    1,
                                                                    0,
                                                                    EXT_SLV_AXI_RD_ISSUE) u_ext_slv_rlast_split_fifo (// Pointer Width
                                                                    // Data Width { size}
                                                                    // Whether Output needs to be registered or not
                                                                    // Number of entries in FIFO
                                                                    //EXT_SLV_AXI_RD_ISSUE_DEPTH// Number of entries in FIFO
                                                                    .clk(aclk_i), 
                                                                        .aresetn_i(aresetn_i), 
                                                                        .we(ext_slv_rlast_split_ff_wr_en), 
                                                                        .wdata(ext_slv_rlast_split_ff_wdata), 
                                                                        .re(ext_slv_rlast_split_ff_rd_en), 
                                                                        .rdata(ext_slv_rlast_split_ff_rdata), 
                                                                        .full(ext_slv_rlast_split_ff_full), 
                                                                        .pre_full(), 
                                                                        .empty(ext_slv_rlast_split_ff_empty)) ; 
                                                        end
                                                    assign m_arready[ext_mas_cnt] = ((((|ar_rd_cnt) || (|nxt_ar_rd_cnt)) || (|fixed_burst_ind_cnt)) ? 1'b0 : (((~rd_issue_full) & (!ext_slv_rlast_split_ff_full)) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt))) ; 
                                                    assign m_split_arready[ext_mas_cnt] = (((~rd_issue_full) & (!ext_slv_rlast_split_ff_full)) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_split_arready[ext_mas_cnt] = ~rd_issue_full & (!ext_slv_rlast_split_ff_full);
                                                    //assign m_arready[ext_mas_cnt]       = (|ar_rd_cnt) || (|nxt_ar_rd_cnt) ? 1'b0 : ~rd_issue_full & (!ext_slv_rlast_split_ff_full) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt) ;
                                                    //assign m_arready[ext_mas_cnt]       = (|ar_rd_cnt) || (|nxt_ar_rd_cnt) ? 1'b0 : ~ext_slv_rd_issue_ff_full & (!ext_slv_rlast_split_ff_full) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt) ;
                                                    //assign m_split_arready[ext_mas_cnt] = ~ext_slv_rd_issue_ff_full & (!ext_slv_rlast_split_ff_full);
                                                    //assign m_arready[ext_mas_cnt]       = (|ar_rd_cnt) || (|nxt_ar_rd_cnt) ? 1'b0 : ~ext_slv_rd_issue_ff_full & (!ext_slv_rlast_split_ff_full);
                                                    //assign m_split_arready[ext_mas_cnt] = ~ext_slv_rd_issue_ff_full & (!ext_slv_rlast_split_ff_full);
                                                    assign ar_b_complete[ext_mas_cnt] = ((((!ext_slv_rlast_split_ff_rdata) & i_ext_slv_prt_rvalid) & i_ext_slv_prt_rlast) & (i_ext_slv_prt_rid[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                    //assign  m_arsize  [ext_mas_cnt]   = (EXT_SLV_AXI_DATA_WIDTH/8) == 1 ? 3'd0 : clog2(EXT_SLV_AXI_DATA_WIDTH/8);
                                                    //assign  m_arburst [ext_mas_cnt]   = 2'd1; // INCR type 
                                                    assign m_arcache[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_arlock[ext_mas_cnt] = 1'd0 ; 
                                                    assign m_arqos[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_arregion[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_aruser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((~aresetn_i)) 
                                                                begin
                                                                    m_arvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_araddr[ext_mas_cnt] <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                                                    m_arid[ext_mas_cnt] <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                                                    m_arlen[ext_mas_cnt] <=  {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ;
                                                                    m_arprot[ext_mas_cnt] <=  3'd0 ;
                                                                    m_arburst[ext_mas_cnt] <=  2'd0 ;
                                                                    ext_mas_ard_gnt_reg[ext_mas_cnt] <=  TOTAL_EXTMAS_CNT ;
                                                                    //ext_mas_ard_gnt_reg[ext_mas_cnt]  <= 6'd32;
                                                                    ar_rd_cnt <=  8'd0 ;
                                                                    m_arlen_reg <=  {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ;
                                                                    m_arsize[ext_mas_cnt] <=  3'd0 ;
                                                                    req_size_le_ext_slv <=  1'b0 ;
                                                                    m_fixed_start_arlen_reg <=  {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ;
                                                                    fixed_burst_ind_cnt <=  3'd0 ;
                                                                    fixed_burst_ind_cnt_reg <=  3'd0 ;
                                                                end
                                                            else
                                                                begin
                                                                    m_arvalid[ext_mas_cnt] <=  nxt_m_arvalid[ext_mas_cnt] ;
                                                                    m_araddr[ext_mas_cnt] <=  nxt_m_araddr[ext_mas_cnt] ;
                                                                    m_arid[ext_mas_cnt] <=  nxt_m_arid[ext_mas_cnt] ;
                                                                    m_arlen[ext_mas_cnt] <=  nxt_m_arlen[ext_mas_cnt] ;
                                                                    m_arprot[ext_mas_cnt] <=  nxt_m_arprot[ext_mas_cnt] ;
                                                                    m_arburst[ext_mas_cnt] <=  nxt_m_arburst[ext_mas_cnt] ;
                                                                    ext_mas_ard_gnt_reg[ext_mas_cnt] <=  nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                                    ar_rd_cnt <=  nxt_ar_rd_cnt ;
                                                                    m_arlen_reg <=  nxt_m_arlen_reg ;
                                                                    m_arsize[ext_mas_cnt] <=  nxt_m_arsize[ext_mas_cnt] ;
                                                                    req_size_le_ext_slv <=  nxt_req_size_le_ext_slv ;
                                                                    m_fixed_start_arlen_reg <=  nxt_m_fixed_start_arlen_reg ;
                                                                    fixed_burst_ind_cnt <=  nxt_fixed_burst_ind_cnt ;
                                                                    fixed_burst_ind_cnt_reg <=  nxt_fixed_burst_ind_cnt_reg ;
                                                                end
                                                        end
                                                    always
                                                        @(*)
                                                        begin
                                                            nxt_m_arvalid[ext_mas_cnt] = m_arvalid[ext_mas_cnt] ;
                                                            nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                            nxt_m_arid[ext_mas_cnt] = m_arid[ext_mas_cnt] ;
                                                            nxt_m_arlen[ext_mas_cnt] = m_arlen[ext_mas_cnt] ;
                                                            nxt_m_arprot[ext_mas_cnt] = m_arprot[ext_mas_cnt] ;
                                                            nxt_m_arburst[ext_mas_cnt] = m_arburst[ext_mas_cnt] ;
                                                            nxt_ar_rd_cnt = ar_rd_cnt ;
                                                            nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                            nxt_m_arlen_reg = m_arlen_reg ;
                                                            nxt_m_arsize[ext_mas_cnt] = m_arsize[ext_mas_cnt] ;
                                                            nxt_req_size_le_ext_slv = req_size_le_ext_slv ;
                                                            nxt_m_fixed_start_arlen_reg = m_fixed_start_arlen_reg ;
                                                            nxt_fixed_burst_ind_cnt = fixed_burst_ind_cnt ;
                                                            nxt_fixed_burst_ind_cnt_reg = fixed_burst_ind_cnt_reg ;
                                                            if (((|ar_rd_cnt) || ((ar_rd_cnt == 8'd0) && (|fixed_burst_ind_cnt)))) 
                                                                //if(| ar_rd_cnt)
                                                                begin
                                                                    if ((m_arvalid[ext_mas_cnt] & m_split_arready[ext_mas_cnt])) 
                                                                        begin
                                                                            nxt_ar_rd_cnt = ((|fixed_burst_ind_cnt) ? ar_rd_cnt : (ar_rd_cnt - 1'd1)) ;
                                                                            nxt_fixed_burst_ind_cnt = ((|fixed_burst_ind_cnt) ? (fixed_burst_ind_cnt - 1'd1) : fixed_burst_ind_cnt_reg) ;
                                                                            //nxt_ar_rd_cnt       = ar_rd_cnt - 1'd1;
                                                                            //nxt_m_arlen[ext_mas_cnt] = |m_arlen_reg ? m_arlen_reg : m_arlen[ext_mas_cnt];
                                                                            if ((m_arburst[ext_mas_cnt] == 2'd0)) 
                                                                                // fixed
                                                                                begin
                                                                                nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                                                nxt_m_arlen[ext_mas_cnt] = ((|fixed_burst_ind_cnt_reg) ? ((m_arlen_reg > 4'hF) ? 4'hF : m_arlen_reg) : m_arlen[ext_mas_cnt]) ;
                                                                                nxt_m_arlen_reg = ((fixed_burst_ind_cnt == 1'd1) ? m_fixed_start_arlen_reg : ((m_arlen_reg > 4'hF) ? (m_arlen_reg - 5'd16) : m_arlen_reg)) ;
                                                                                end
                                                                            else
                                                                                // INCR
                                                                                begin
                                                                                nxt_m_arlen[ext_mas_cnt] = ((|m_arlen_reg) ? m_arlen_reg : m_arlen[ext_mas_cnt]) ;
                                                                                if (((m_arsize[ext_mas_cnt] <= EXT_SLV_BIT_SELECT) && req_size_le_ext_slv)) 
                                                                                begin
                                                                                case (m_arsize[ext_mas_cnt])
                                                                                3'd0 : 
                                                                                nxt_m_araddr[ext_mas_cnt] = ({m_araddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):0]} + ext_mas_req_size_bytes) ;
                                                                                3'd1 : 
                                                                                nxt_m_araddr[ext_mas_cnt] = ({m_araddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):1],
                                                                                1'b0} + ext_mas_req_size_bytes) ;
                                                                                3'd2 : 
                                                                                nxt_m_araddr[ext_mas_cnt] = ({m_araddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):2],
                                                                                2'd0} + ext_mas_req_size_bytes) ;
                                                                                3'd3 : 
                                                                                nxt_m_araddr[ext_mas_cnt] = ({m_araddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):3],
                                                                                3'd0} + ext_mas_req_size_bytes) ;
                                                                                3'd4 : 
                                                                                nxt_m_araddr[ext_mas_cnt] = ({m_araddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):4],
                                                                                4'd0} + ext_mas_req_size_bytes) ;
                                                                                3'd5 : 
                                                                                nxt_m_araddr[ext_mas_cnt] = ({m_araddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):5],
                                                                                5'd0} + ext_mas_req_size_bytes) ;
                                                                                3'd6 : 
                                                                                nxt_m_araddr[ext_mas_cnt] = ({m_araddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):6],
                                                                                6'd0} + ext_mas_req_size_bytes) ;
                                                                                default : 
                                                                                nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                                                endcase 
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_m_araddr[ext_mas_cnt] = ({m_araddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):EXT_SLV_BIT_SELECT],
                                                                                {EXT_SLV_BIT_SELECT{1'b0}}} + ((m_arlen[ext_mas_cnt] + 1) * EXT_SLV_BYTE_CNT)) ;
                                                                                end
                                                                                end
                                                                        end
                                                                    else
                                                                        begin
                                                                            nxt_ar_rd_cnt = ar_rd_cnt ;
                                                                            nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                                        end
                                                                end
                                                            else
                                                                if ((((i_s_arvalid & o_s_arready) & (i_s_ext_mas_ard_gnt == ext_mas_cnt)) & (!m_arvalid))) 
                                                                    //else if ( i_s_arvalid & o_s_arready & (~rd_issue_full) & ( i_s_ext_mas_ard_gnt == ext_mas_cnt)   & (!(m_arvalid)) )
                                                                    //else if ( i_s_arvalid & o_s_arready & (~rd_issue_full) & ( i_s_ext_mas_ard_gnt == ext_mas_cnt)  )
                                                                    begin
                                                                        nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = i_s_ext_mas_ard_gnt ;
                                                                        nxt_m_arvalid[ext_mas_cnt] = i_s_arvalid ;
                                                                        nxt_m_arid[ext_mas_cnt] = i_s_arid ;
                                                                        nxt_m_arprot[ext_mas_cnt] = i_s_arprot ;
                                                                        nxt_m_arburst[ext_mas_cnt] = i_s_arburst ;
                                                                        if ((i_s_arsize <= EXT_SLV_BIT_SELECT)) 
                                                                            begin
                                                                                nxt_ar_rd_cnt = i_s_arlen ;
                                                                                nxt_fixed_burst_ind_cnt = 3'd0 ;
                                                                                nxt_m_araddr[ext_mas_cnt] = ((i_s_arburst == 2'd0) ? i_s_araddr : i_s_araddr) ;
                                                                                //nxt_m_araddr  [ext_mas_cnt] = i_s_araddr;
                                                                                nxt_m_arlen[ext_mas_cnt] = 1'b0 ;
                                                                                nxt_m_arlen_reg = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ;
                                                                                nxt_m_arsize[ext_mas_cnt] = i_s_arsize ;
                                                                                nxt_req_size_le_ext_slv = 1'b1 ;
                                                                            end
                                                                        else
                                                                            begin
                                                                                nxt_ar_rd_cnt = i_s_arlen ;
                                                                                nxt_m_arsize[ext_mas_cnt] = (((EXT_SLV_AXI_DATA_WIDTH / 8) == 1) ? 3'd0 : clog2((EXT_SLV_AXI_DATA_WIDTH / 8))) ;
                                                                                nxt_m_araddr[ext_mas_cnt] = ((i_s_arburst == 2'd0) ? {i_s_araddr[(EXT_SLV_AXI_ADDR_WIDTH - 1):EXT_SLV_BIT_SELECT],
                                                                                {EXT_SLV_BIT_SELECT{1'b0}}} : i_s_araddr) ;
                                                                                nxt_req_size_le_ext_slv = 1'b0 ;
                                                                                //not possible
                                                                                case (i_s_arsize)
                                                                                3'd1 : 
                                                                                begin
                                                                                //nxt_m_arlen[ext_mas_cnt] = ((EXT_MAS_ARSIZE_1_IN_BYTES/EXT_SLV_BYTE_CNT) - (i_s_araddr[0] >>EXT_SLV_BIT_SELECT ) - 1'd1);
                                                                                //nxt_m_arlen_reg = ((EXT_MAS_ARSIZE_1_IN_BYTES/EXT_SLV_BYTE_CNT)- 1'd1);
                                                                                nxt_m_arlen[ext_mas_cnt] = ((i_s_arburst == 2'd0) ? (((((EXT_MAS_ARSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[0] >> EXT_SLV_BIT_SELECT)) - 1'd1) > 4'hF) ? 4'hF : (((EXT_MAS_ARSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) : (((EXT_MAS_ARSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_arlen_reg = ((i_s_arburst == 2'd0) ? ((((EXT_MAS_ARSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[0] >> EXT_SLV_BIT_SELECT)) - 1'd1) - 5'd16) : ((EXT_MAS_ARSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1)) ;
                                                                                nxt_m_fixed_start_arlen_reg = (((EXT_MAS_ARSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[0] >> EXT_SLV_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_fixed_burst_ind_cnt = ((i_s_arburst == 2'd0) ? ((((EXT_MAS_ARSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) : 3'd0) ;
                                                                                nxt_fixed_burst_ind_cnt_reg = ((((EXT_MAS_ARSIZE_1_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) ;
                                                                                end
                                                                                3'd2 : 
                                                                                begin
                                                                                //nxt_m_arlen[ext_mas_cnt]= ((EXT_MAS_ARSIZE_2_IN_BYTES/EXT_SLV_BYTE_CNT) - (i_s_araddr[1:0] >>EXT_SLV_BIT_SELECT ) - 1'd1);
                                                                                //nxt_m_arlen_reg = ((EXT_MAS_ARSIZE_2_IN_BYTES/EXT_SLV_BYTE_CNT)- 1'd1);
                                                                                nxt_m_arlen[ext_mas_cnt] = ((i_s_arburst == 2'd0) ? (((((EXT_MAS_ARSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[1:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) > 4'hF) ? 4'hF : (((EXT_MAS_ARSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[1:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) : (((EXT_MAS_ARSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[1:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_arlen_reg = ((i_s_arburst == 2'd0) ? ((((EXT_MAS_ARSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[1:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) - 5'd16) : ((EXT_MAS_ARSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1)) ;
                                                                                nxt_m_fixed_start_arlen_reg = (((EXT_MAS_ARSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[1:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_fixed_burst_ind_cnt = ((i_s_arburst == 2'd0) ? ((((EXT_MAS_ARSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[1:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) : 3'd0) ;
                                                                                nxt_fixed_burst_ind_cnt_reg = ((((EXT_MAS_ARSIZE_2_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[1:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) ;
                                                                                end
                                                                                3'd3 : 
                                                                                begin
                                                                                //nxt_m_arlen[ext_mas_cnt]= ((EXT_MAS_ARSIZE_3_IN_BYTES/EXT_SLV_BYTE_CNT) - (i_s_araddr[2:0] >>EXT_SLV_BIT_SELECT ) - 1'd1);
                                                                                //nxt_m_arlen_reg = ((EXT_MAS_ARSIZE_3_IN_BYTES/EXT_SLV_BYTE_CNT)- 1'd1);
                                                                                nxt_m_arlen[ext_mas_cnt] = ((i_s_arburst == 2'd0) ? (((((EXT_MAS_ARSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[2:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) > 4'hF) ? 4'hF : (((EXT_MAS_ARSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[2:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) : (((EXT_MAS_ARSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[2:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_arlen_reg = ((i_s_arburst == 2'd0) ? ((((EXT_MAS_ARSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[2:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) - 5'd16) : ((EXT_MAS_ARSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1)) ;
                                                                                nxt_m_fixed_start_arlen_reg = (((EXT_MAS_ARSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[2:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_fixed_burst_ind_cnt = ((i_s_arburst == 2'd0) ? ((((EXT_MAS_ARSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[2:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) : 3'd0) ;
                                                                                nxt_fixed_burst_ind_cnt_reg = ((((EXT_MAS_ARSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[2:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) ;
                                                                                end
                                                                                3'd4 : 
                                                                                begin
                                                                                nxt_m_arlen[ext_mas_cnt] = ((i_s_arburst == 2'd0) ? (((((EXT_MAS_ARSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[3:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) > 4'hF) ? 4'hF : (((EXT_MAS_ARSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[3:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) : (((EXT_MAS_ARSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[3:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_arlen_reg = ((i_s_arburst == 2'd0) ? ((((EXT_MAS_ARSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[3:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) - 5'd16) : ((EXT_MAS_ARSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1)) ;
                                                                                nxt_m_fixed_start_arlen_reg = (((EXT_MAS_ARSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[3:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_fixed_burst_ind_cnt = ((i_s_arburst == 2'd0) ? ((((EXT_MAS_ARSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[3:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) : 3'd0) ;
                                                                                nxt_fixed_burst_ind_cnt_reg = ((((EXT_MAS_ARSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[3:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) ;
                                                                                end
                                                                                3'd5 : 
                                                                                begin
                                                                                nxt_m_arlen[ext_mas_cnt] = ((i_s_arburst == 2'd0) ? (((((EXT_MAS_ARSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[4:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) > 4'hF) ? 4'hF : (((EXT_MAS_ARSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[4:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) : (((EXT_MAS_ARSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[4:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_arlen_reg = ((i_s_arburst == 2'd0) ? ((((EXT_MAS_ARSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[4:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) - 5'd16) : ((EXT_MAS_ARSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1)) ;
                                                                                nxt_m_fixed_start_arlen_reg = (((EXT_MAS_ARSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[4:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_fixed_burst_ind_cnt = ((i_s_arburst == 2'd0) ? ((((EXT_MAS_ARSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[4:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) : 3'd0) ;
                                                                                nxt_fixed_burst_ind_cnt_reg = ((((EXT_MAS_ARSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[4:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) ;
                                                                                end
                                                                                3'd6 : 
                                                                                begin
                                                                                nxt_m_arlen[ext_mas_cnt] = ((i_s_arburst == 2'd0) ? (((((EXT_MAS_ARSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[5:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) > 4'hF) ? 4'hF : (((EXT_MAS_ARSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[5:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) : (((EXT_MAS_ARSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[5:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_arlen_reg = ((i_s_arburst == 2'd0) ? ((((EXT_MAS_ARSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[5:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) - 5'd16) : ((EXT_MAS_ARSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1)) ;
                                                                                nxt_m_fixed_start_arlen_reg = (((EXT_MAS_ARSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[5:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_fixed_burst_ind_cnt = ((i_s_arburst == 2'd0) ? ((((EXT_MAS_ARSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[5:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) : 3'd0) ;
                                                                                nxt_fixed_burst_ind_cnt_reg = ((((EXT_MAS_ARSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[5:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) ;
                                                                                end
                                                                                3'd7 : 
                                                                                begin
                                                                                nxt_m_arlen[ext_mas_cnt] = ((i_s_arburst == 2'd0) ? (((((EXT_MAS_ARSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[6:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) > 4'hF) ? 4'hF : (((EXT_MAS_ARSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[6:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) : (((EXT_MAS_ARSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[6:0] >> EXT_SLV_BIT_SELECT)) - 1'd1)) ;
                                                                                nxt_m_arlen_reg = ((i_s_arburst == 2'd0) ? ((((EXT_MAS_ARSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[6:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) - 5'd16) : ((EXT_MAS_ARSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - 1'd1)) ;
                                                                                nxt_m_fixed_start_arlen_reg = (((EXT_MAS_ARSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[6:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) ;
                                                                                nxt_fixed_burst_ind_cnt = ((i_s_arburst == 2'd0) ? ((((EXT_MAS_ARSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[6:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) : 3'd0) ;
                                                                                nxt_fixed_burst_ind_cnt_reg = ((((EXT_MAS_ARSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[6:0] >> EXT_SLV_BIT_SELECT)) - 1'd1) >> 3'd4) ;
                                                                                end
                                                                                default : 
                                                                                nxt_m_arlen[ext_mas_cnt] = m_arlen[ext_mas_cnt] ;
                                                                                endcase 
                                                                            end
                                                                    end
                                                                else
                                                                    begin
                                                                        nxt_m_arvalid[ext_mas_cnt] = (m_arready[ext_mas_cnt] ? 1'b0 : m_arvalid[ext_mas_cnt]) ;
                                                                        nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = (m_arready[ext_mas_cnt] ? TOTAL_EXTMAS_CNT : ext_mas_ard_gnt_reg[ext_mas_cnt]) ;
                                                                        //nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = m_arready[ext_mas_cnt] ? 6'd32 :ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                                        nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                                        nxt_m_arid[ext_mas_cnt] = m_arid[ext_mas_cnt] ;
                                                                        nxt_m_arlen[ext_mas_cnt] = m_arlen[ext_mas_cnt] ;
                                                                        nxt_m_arprot[ext_mas_cnt] = m_arprot[ext_mas_cnt] ;
                                                                    end
                                                        end
                                                end
                                        end
                                    else
                                        begin : AXI4LITE_EXTMAS_BLK
                                            if (((EXT_MAS_AXI_DATA_WIDTH_INT < EXT_SLV_AXI_DATA_WIDTH) || (EXT_MAS_AXI_DATA_WIDTH_INT == EXT_SLV_AXI_DATA_WIDTH))) 
                                                begin : EQ_UP_BLK
                                                    assign m_arready[ext_mas_cnt] = ((~rd_issue_full) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_arready[ext_mas_cnt]       = ~ext_slv_rd_issue_ff_full & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt) ;
                                                    //assign m_split_arready[ext_mas_cnt] = 1'b0;
                                                    assign m_split_arready[ext_mas_cnt] = ((~rd_issue_full) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_split_arready[ext_mas_cnt] = ~rd_issue_full;
                                                    //assign m_split_arready[ext_mas_cnt] = ~ext_slv_rd_issue_ff_full;
                                                    assign ar_b_complete[ext_mas_cnt] = 1'b0 ; 
                                                    //assign  m_arsize  [ext_mas_cnt]   = clog2(EXT_MAS_AXI_DATA_WIDTH_INT/8);
                                                    assign m_arsize[ext_mas_cnt] = (((EXT_SLV_AXI_DATA_WIDTH / 8) == 1) ? 3'd0 : clog2((EXT_SLV_AXI_DATA_WIDTH / 8))) ; 
                                                    assign m_arburst[ext_mas_cnt] = 2'd1 ; // INCR type 
                                                    assign m_arlen[ext_mas_cnt] = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ; 
                                                    assign m_arcache[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_arlock[ext_mas_cnt] = 1'd0 ; 
                                                    assign m_arqos[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_arregion[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_aruser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((~aresetn_i)) 
                                                                begin
                                                                    m_arvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_araddr[ext_mas_cnt] <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                                                    m_arid[ext_mas_cnt] <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                                                    m_arprot[ext_mas_cnt] <=  3'd0 ;
                                                                    ext_mas_ard_gnt_reg[ext_mas_cnt] <=  TOTAL_EXTMAS_CNT ;
                                                                    //ext_mas_ard_gnt_reg[ext_mas_cnt]  <= 6'd32;
                                                                end
                                                            else
                                                                begin
                                                                    m_arvalid[ext_mas_cnt] <=  nxt_m_arvalid[ext_mas_cnt] ;
                                                                    m_araddr[ext_mas_cnt] <=  nxt_m_araddr[ext_mas_cnt] ;
                                                                    m_arid[ext_mas_cnt] <=  nxt_m_arid[ext_mas_cnt] ;
                                                                    m_arprot[ext_mas_cnt] <=  nxt_m_arprot[ext_mas_cnt] ;
                                                                    ext_mas_ard_gnt_reg[ext_mas_cnt] <=  nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                                end
                                                        end
                                                    always
                                                        @(*)
                                                        begin
                                                            nxt_m_arvalid[ext_mas_cnt] = m_arvalid[ext_mas_cnt] ;
                                                            nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                            nxt_m_arid[ext_mas_cnt] = m_arid[ext_mas_cnt] ;
                                                            nxt_m_arprot[ext_mas_cnt] = m_arprot[ext_mas_cnt] ;
                                                            nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                            if ((((i_s_arvalid & o_s_arready) & (i_s_ext_mas_ard_gnt == ext_mas_cnt)) & (!m_arvalid))) 
                                                                //if ( i_s_arvalid & o_s_arready & (~rd_issue_full) & ( i_s_ext_mas_ard_gnt == ext_mas_cnt)   & (!(m_arvalid)) )
                                                                //if ( i_s_arvalid & o_s_arready & (~rd_issue_full) & ( i_s_ext_mas_ard_gnt == ext_mas_cnt)  )
                                                                begin
                                                                    nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = i_s_ext_mas_ard_gnt ;
                                                                    nxt_m_arvalid[ext_mas_cnt] = i_s_arvalid ;
                                                                    nxt_m_araddr[ext_mas_cnt] = i_s_araddr ;
                                                                    nxt_m_arid[ext_mas_cnt] = i_s_arid ;
                                                                    nxt_m_arprot[ext_mas_cnt] = i_s_arprot ;
                                                                end
                                                            else
                                                                begin
                                                                    nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = (m_arready[ext_mas_cnt] ? TOTAL_EXTMAS_CNT : ext_mas_ard_gnt_reg[ext_mas_cnt]) ;
                                                                    //nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = m_arready[ext_mas_cnt] ? 6'd32 :ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                                    nxt_m_arvalid[ext_mas_cnt] = (m_arready[ext_mas_cnt] ? 1'b0 : m_arvalid[ext_mas_cnt]) ;
                                                                    nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                                    nxt_m_arid[ext_mas_cnt] = m_arid[ext_mas_cnt] ;
                                                                    nxt_m_arprot[ext_mas_cnt] = m_arprot[ext_mas_cnt] ;
                                                                end
                                                        end
                                                end
                                            else
                                                begin : DOWN_BLK
                                                    localparam DOWNSIZE_FACTOR = (EXT_MAS_AXI_DATA_WIDTH_INT / EXT_SLV_AXI_DATA_WIDTH) ; 
                                                    localparam BIT_SELECT = ((EXT_SLV_AXI_DATA_WIDTH == 8) ? 0 : ((EXT_SLV_AXI_DATA_WIDTH == 16) ? 1 : 2)) ; // AXI4LITE->AXI4 i.e 32 -> 16,8 and 64->32,16,8
                                                    assign m_arready[ext_mas_cnt] = ((~rd_issue_full) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_arready[ext_mas_cnt]       = ~ext_slv_rd_issue_ff_full & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt) ;
                                                    //assign m_arready[ext_mas_cnt]       = ~ext_slv_rd_issue_ff_full;
                                                    assign m_split_arready[ext_mas_cnt] = ((~rd_issue_full) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_split_arready[ext_mas_cnt] = ~rd_issue_full;
                                                    //assign m_split_arready[ext_mas_cnt] = ~ext_slv_rd_issue_ff_full;
                                                    assign ar_b_complete[ext_mas_cnt] = 1'b0 ; 
                                                    assign m_arsize[ext_mas_cnt] = (((EXT_SLV_AXI_DATA_WIDTH / 8) == 1) ? 3'd0 : clog2((EXT_SLV_AXI_DATA_WIDTH / 8))) ; 
                                                    assign m_arburst[ext_mas_cnt] = 2'd1 ; // INCR type 
                                                    assign m_arcache[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_arlock[ext_mas_cnt] = 1'd0 ; 
                                                    assign m_arqos[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_arregion[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_aruser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((~aresetn_i)) 
                                                                begin
                                                                    m_arvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_araddr[ext_mas_cnt] <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                                                    m_arid[ext_mas_cnt] <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                                                    m_arlen[ext_mas_cnt] <=  {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ;
                                                                    m_arprot[ext_mas_cnt] <=  3'd0 ;
                                                                    ext_mas_ard_gnt_reg[ext_mas_cnt] <=  TOTAL_EXTMAS_CNT ;
                                                                    //ext_mas_ard_gnt_reg[ext_mas_cnt]  <= 6'd32;
                                                                end
                                                            else
                                                                begin
                                                                    m_arvalid[ext_mas_cnt] <=  nxt_m_arvalid[ext_mas_cnt] ;
                                                                    m_araddr[ext_mas_cnt] <=  nxt_m_araddr[ext_mas_cnt] ;
                                                                    m_arid[ext_mas_cnt] <=  nxt_m_arid[ext_mas_cnt] ;
                                                                    m_arlen[ext_mas_cnt] <=  nxt_m_arlen[ext_mas_cnt] ;
                                                                    m_arprot[ext_mas_cnt] <=  nxt_m_arprot[ext_mas_cnt] ;
                                                                    ext_mas_ard_gnt_reg[ext_mas_cnt] <=  nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                                end
                                                        end
                                                    always
                                                        @(*)
                                                        begin
                                                            nxt_m_arvalid[ext_mas_cnt] = m_arvalid[ext_mas_cnt] ;
                                                            nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                            nxt_m_arid[ext_mas_cnt] = m_arid[ext_mas_cnt] ;
                                                            nxt_m_arlen[ext_mas_cnt] = m_arlen[ext_mas_cnt] ;
                                                            nxt_m_arprot[ext_mas_cnt] = m_arprot[ext_mas_cnt] ;
                                                            nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                            if ((((i_s_arvalid & o_s_arready) & (i_s_ext_mas_ard_gnt == ext_mas_cnt)) & (!m_arvalid))) 
                                                                //if ( i_s_arvalid & o_s_arready & (~rd_issue_full) & ( i_s_ext_mas_ard_gnt == ext_mas_cnt)   & (!(m_arvalid)) )
                                                                //if ( i_s_arvalid & o_s_arready & (~rd_issue_full) & ( i_s_ext_mas_ard_gnt == ext_mas_cnt)  )
                                                                begin
                                                                    nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = i_s_ext_mas_ard_gnt ;
                                                                    nxt_m_arvalid[ext_mas_cnt] = i_s_arvalid ;
                                                                    nxt_m_araddr[ext_mas_cnt] = i_s_araddr ;
                                                                    nxt_m_arid[ext_mas_cnt] = i_s_arid ;
                                                                    nxt_m_arlen[ext_mas_cnt] = ((DOWNSIZE_FACTOR - i_s_araddr[BIT_SELECT +: clog2(DOWNSIZE_FACTOR)]) - 1'd1) ;
                                                                    nxt_m_arprot[ext_mas_cnt] = i_s_arprot ;
                                                                end
                                                            else
                                                                begin
                                                                    nxt_m_arvalid[ext_mas_cnt] = (m_arready[ext_mas_cnt] ? 1'b0 : m_arvalid[ext_mas_cnt]) ;
                                                                    nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = (m_arready[ext_mas_cnt] ? TOTAL_EXTMAS_CNT : ext_mas_ard_gnt_reg[ext_mas_cnt]) ;
                                                                    //nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = m_arready[ext_mas_cnt] ? 6'd32 :ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                                    nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                                    nxt_m_arid[ext_mas_cnt] = m_arid[ext_mas_cnt] ;
                                                                    nxt_m_arlen[ext_mas_cnt] = m_arlen[ext_mas_cnt] ;
                                                                    nxt_m_arprot[ext_mas_cnt] = m_arprot[ext_mas_cnt] ;
                                                                end
                                                        end
                                                end
                                        end
                                end
                            else
                                begin : NO_EXT_MAS_CONNECT_BLK
                                    assign m_arvalid[ext_mas_cnt] = 1'b0 ; 
                                    assign m_araddr[ext_mas_cnt] = {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ; 
                                    assign m_arid[ext_mas_cnt] = {EXT_SLV_AXI_ID_WIDTH{1'b0}} ; 
                                    assign m_arsize[ext_mas_cnt] = 3'd0 ; 
                                    assign m_arlen[ext_mas_cnt] = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ; 
                                    assign m_arburst[ext_mas_cnt] = 2'd0 ; 
                                    assign m_arcache[ext_mas_cnt] = 4'd0 ; 
                                    assign m_arprot[ext_mas_cnt] = 3'd0 ; 
                                    assign m_arlock[ext_mas_cnt] = 1'd0 ; 
                                    assign m_arqos[ext_mas_cnt] = 4'd0 ; 
                                    assign m_arregion[ext_mas_cnt] = 4'd0 ; 
                                    assign m_aruser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                    assign m_arready[ext_mas_cnt] = 1'b0 ; 
                                    assign m_split_arready[ext_mas_cnt] = 1'b0 ; 
                                    assign ar_b_complete[ext_mas_cnt] = 1'b0 ; 
                                end
                        end
                    end
                else
                    begin : AXI4LITE_EXTSLV_AR_BLK
                        for (ext_mas_cnt = 0;(ext_mas_cnt < TOTAL_EXTMAS_CNT);ext_mas_cnt = (ext_mas_cnt + 1))
                        begin : EXT_MAS_BLK
                            localparam EXT_MAS_AXI_DATA_WIDTH_INT = EXT_MAS_AXI_DATA_WIDTH[(ext_mas_cnt * 11) +: 11] ; 
                            // for  - ext_mas_cnt end
                            if ((EXT_SLV_CONNECTED_MASTER[ext_mas_cnt] == 1)) 
                                begin : EXTSLV_CNCT_EXTMAS_BLK
                                    if ((EXT_MAS_AXI_PROTOCOL[ext_mas_cnt] == 0)) 
                                        begin : AXI4_EXTMAS_BLK
                                            if (((EXT_MAS_AXI_DATA_WIDTH_INT == EXT_SLV_AXI_DATA_WIDTH) || (EXT_MAS_AXI_DATA_WIDTH_INT < EXT_SLV_AXI_DATA_WIDTH))) 
                                                begin : EQ_UP_BLK
                                                    //localparam EXT_MAS_BYTE_CNT = EXT_MAS_AXI_DATA_WIDTH_INT/8;
                                                    localparam EXT_MAS_BIT_SELECT = ((EXT_MAS_AXI_DATA_WIDTH_INT == 8) ? 0 : ((EXT_MAS_AXI_DATA_WIDTH_INT == 16) ? 1 : ((EXT_MAS_AXI_DATA_WIDTH_INT == 32) ? 2 : ((EXT_MAS_AXI_DATA_WIDTH_INT == 64) ? 3 : ((EXT_MAS_AXI_DATA_WIDTH_INT == 128) ? 4 : ((EXT_MAS_AXI_DATA_WIDTH_INT == 256) ? 5 : ((EXT_MAS_AXI_DATA_WIDTH_INT == 512) ? 6 : 7))))))) ; 
                                                    logic ext_slv_rlast_split_ff_wr_en ; 
                                                    logic ext_slv_rlast_split_ff_rd_en ; 
                                                    logic ext_slv_rlast_split_ff_wdata ; 
                                                    logic ext_slv_rlast_split_ff_rdata ; 
                                                    logic ext_slv_rlast_split_ff_full ; 
                                                    logic ext_slv_rlast_split_ff_empty ; 
                                                    logic [7:0] ar_rd_cnt, 
                                                        nxt_ar_rd_cnt ; 
                                                    logic [1:0] btype, 
                                                        nxt_btype ; 
                                                    assign ext_slv_rlast_split_ff_wdata = m_arready[ext_mas_cnt] ; // since only for last split arready is given
                                                    //assign ext_slv_rlast_split_ff_wdata  = o_s_arready; // since only for last split arready is given
                                                    assign ext_slv_rlast_split_ff_wr_en = (((o_ext_slv_prt_arvalid_ff & (!ext_slv_rlast_split_ff_full)) & (!ext_slv_rd_issue_ff_full)) & (o_ext_slv_prt_arid_ff[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                    //   assign ext_slv_rlast_split_ff_rd_en  = (~ext_slv_rlast_split_ff_empty & i_ext_slv_prt_rvalid & i_ext_slv_prt_rlast & (ext_slv_arid_ff_rdata[EXT_SLV_AXI_ID_WIDTH-1:EXT_MAS_AXI_ID_WIDTH]==ext_mas_cnt) & (!ext_slv_rd_ff_pre_full));
                                                    assign ext_slv_rlast_split_ff_rd_en = (((((~ext_slv_rlast_split_ff_empty) & i_ext_slv_prt_rvalid) & i_ext_slv_prt_rlast) & (ext_slv_arid_ff_rdata[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) & o_ext_slv_prt_rready) ; 
                                                    if ((LATTICE_FIFO == 1)) 
                                                        begin : LSCC_FF_BLK
                                                        end
                                                    else
                                                        begin : CUSTOM_FF_BLK
                                                            axi4_interconnect_ipgen_gen_fifo #(AR_ARID,
                                                                    1,
                                                                    0,
                                                                    EXT_SLV_AXI_RD_ISSUE) u_ext_slv_rlast_split_fifo (// Pointer Width
                                                                    // Data Width { size}
                                                                    // Whether Output needs to be registered or not
                                                                    // Number of entries in FIFO
                                                                    //EXT_SLV_AXI_RD_ISSUE_DEPTH// Number of entries in FIFO
                                                                    .clk(aclk_i), 
                                                                        .aresetn_i(aresetn_i), 
                                                                        .we(ext_slv_rlast_split_ff_wr_en), 
                                                                        .wdata(ext_slv_rlast_split_ff_wdata), 
                                                                        .re(ext_slv_rlast_split_ff_rd_en), 
                                                                        .rdata(ext_slv_rlast_split_ff_rdata), 
                                                                        .full(ext_slv_rlast_split_ff_full), 
                                                                        .pre_full(), 
                                                                        .empty(ext_slv_rlast_split_ff_empty)) ; 
                                                        end
                                                    assign m_arready[ext_mas_cnt] = (((|ar_rd_cnt) || (|nxt_ar_rd_cnt)) ? 1'b0 : ((((~rd_issue_full) & (!ext_slv_rlast_split_ff_full)) & (!ext_slv_arid_ff_full)) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt))) ; 
                                                    assign m_split_arready[ext_mas_cnt] = ((((~rd_issue_full) & (!ext_slv_rlast_split_ff_full)) & (!ext_slv_arid_ff_full)) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_split_arready[ext_mas_cnt] = ~rd_issue_full & (!ext_slv_rlast_split_ff_full) & (!ext_slv_arid_ff_full) ;
                                                    //assign m_arready[ext_mas_cnt]       = (|ar_rd_cnt) || (|nxt_ar_rd_cnt) ? 1'b0 : ~ext_slv_rd_issue_ff_full & (!ext_slv_rlast_split_ff_full)  & (!ext_slv_arid_ff_full) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt) ;
                                                    //assign m_split_arready[ext_mas_cnt] = ~ext_slv_rd_issue_ff_full & (!ext_slv_rlast_split_ff_full) & (!ext_slv_arid_ff_full) ;
                                                    assign ar_b_complete[ext_mas_cnt] = ((((!ext_slv_rlast_split_ff_rdata) & i_ext_slv_prt_rvalid) & i_ext_slv_prt_rlast) & (ext_slv_arid_ff_rdata[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                    //assign m_arready[ext_mas_cnt]       = |ar_rd_cnt|| (|nxt_ar_rd_cnt) ? 1'b0 : ~ext_slv_rd_issue_ff_full;
                                                    //assign m_split_arready[ext_mas_cnt] = ~ext_slv_rd_issue_ff_full;
                                                    //assign  m_arsize  [ext_mas_cnt]   = 3'd0;// dont care
                                                    assign m_arlen[ext_mas_cnt] = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ; 
                                                    assign m_arburst[ext_mas_cnt] = 2'd0 ; // dont care
                                                    assign m_arcache[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_arlock[ext_mas_cnt] = 1'd0 ; 
                                                    assign m_arqos[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_arregion[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_aruser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((~aresetn_i)) 
                                                                begin
                                                                    m_arvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_araddr[ext_mas_cnt] <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                                                    m_arid[ext_mas_cnt] <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                                                    m_arprot[ext_mas_cnt] <=  3'd0 ;
                                                                    m_arsize[ext_mas_cnt] <=  3'd0 ;
                                                                    ar_rd_cnt <=  8'd0 ;
                                                                    ext_mas_ard_gnt_reg[ext_mas_cnt] <=  TOTAL_EXTMAS_CNT ;
                                                                    //ext_mas_ard_gnt_reg[ext_mas_cnt]  <= 6'd32;
                                                                    btype <=  2'd0 ;
                                                                end
                                                            else
                                                                begin
                                                                    m_arvalid[ext_mas_cnt] <=  nxt_m_arvalid[ext_mas_cnt] ;
                                                                    m_araddr[ext_mas_cnt] <=  nxt_m_araddr[ext_mas_cnt] ;
                                                                    m_arid[ext_mas_cnt] <=  nxt_m_arid[ext_mas_cnt] ;
                                                                    m_arprot[ext_mas_cnt] <=  nxt_m_arprot[ext_mas_cnt] ;
                                                                    m_arsize[ext_mas_cnt] <=  nxt_m_arsize[ext_mas_cnt] ;
                                                                    ar_rd_cnt <=  nxt_ar_rd_cnt ;
                                                                    ext_mas_ard_gnt_reg[ext_mas_cnt] <=  nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                                    btype <=  nxt_btype ;
                                                                end
                                                        end
                                                    always
                                                        @(*)
                                                        begin
                                                            nxt_m_arvalid[ext_mas_cnt] = m_arvalid[ext_mas_cnt] ;
                                                            nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                            nxt_m_arprot[ext_mas_cnt] = m_arprot[ext_mas_cnt] ;
                                                            nxt_m_arid[ext_mas_cnt] = m_arid[ext_mas_cnt] ;
                                                            nxt_m_arsize[ext_mas_cnt] = m_arsize[ext_mas_cnt] ;
                                                            nxt_ar_rd_cnt = ar_rd_cnt ;
                                                            nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                            nxt_btype = btype ;
                                                            if ((|ar_rd_cnt)) 
                                                                begin
                                                                    if ((m_arvalid[ext_mas_cnt] & m_split_arready[ext_mas_cnt])) 
                                                                        //if( m_arvalid [ext_mas_cnt] &  m_split_arready[ext_mas_cnt] & (~rd_issue_full))
                                                                        //if(i_s_arvalid & o_s_split_arready & (~rd_issue_full) & ( i_s_ext_mas_ard_gnt == ext_mas_cnt))
                                                                        begin
                                                                            nxt_ar_rd_cnt = (ar_rd_cnt - 1'd1) ;
                                                                            nxt_m_araddr[ext_mas_cnt] = ((btype == 2'd0) ? m_araddr[ext_mas_cnt] : ((m_arsize[ext_mas_cnt] == 3'd0) ? (m_araddr[ext_mas_cnt] + 3'd1) : ((m_arsize[ext_mas_cnt] == 3'd1) ? ({m_araddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):1],
                                                                                1'b0} + 3'd2) : ((m_arsize[ext_mas_cnt] == 3'd2) ? ({m_araddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):2],
                                                                                2'd0} + 3'd4) : ({m_araddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):3],
                                                                                3'd0} + 3'd8))))) ;
                                                                            //nxt_m_araddr  [ext_mas_cnt]   = btype ==2'd0 ? m_araddr[ext_mas_cnt]  : {m_araddr[ext_mas_cnt][EXT_SLV_AXI_ADDR_WIDTH-1:EXT_MAS_BIT_SELECT],{EXT_MAS_BIT_SELECT{1'b0}} } + EXT_MAS_BYTE_CNT;
                                                                            //nxt_m_araddr  [ext_mas_cnt]   = {i_s_araddr[EXT_SLV_AXI_ADDR_WIDTH-1:EXT_MAS_BIT_SELECT],{EXT_MAS_BIT_SELECT{1'b0}} } + EXT_MAS_BYTE_CNT;
                                                                        end
                                                                    else
                                                                        begin
                                                                            nxt_ar_rd_cnt = ar_rd_cnt ;
                                                                            nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                                        end
                                                                end
                                                            else
                                                                if ((((i_s_arvalid & o_s_arready) & (i_s_ext_mas_ard_gnt == ext_mas_cnt)) & (!m_arvalid))) 
                                                                    //else if ( i_s_arvalid & o_s_arready & (~rd_issue_full) & ( i_s_ext_mas_ard_gnt == ext_mas_cnt)   & (!(m_arvalid)) )
                                                                    //else if ( i_s_arvalid & o_s_arready & (~rd_issue_full) & ( i_s_ext_mas_ard_gnt == ext_mas_cnt)  )
                                                                    begin
                                                                        nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = i_s_ext_mas_ard_gnt ;
                                                                        nxt_ar_rd_cnt = i_s_arlen ;
                                                                        nxt_m_arvalid[ext_mas_cnt] = i_s_arvalid ;
                                                                        nxt_m_araddr[ext_mas_cnt] = i_s_araddr ;
                                                                        nxt_m_arid[ext_mas_cnt] = i_s_arid ;
                                                                        nxt_m_arprot[ext_mas_cnt] = i_s_arprot ;
                                                                        nxt_m_arsize[ext_mas_cnt] = i_s_arsize ;
                                                                        nxt_btype = i_s_arburst ;
                                                                    end
                                                                else
                                                                    begin
                                                                        nxt_ar_rd_cnt = ar_rd_cnt ;
                                                                        nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = (m_arready[ext_mas_cnt] ? TOTAL_EXTMAS_CNT : ext_mas_ard_gnt_reg[ext_mas_cnt]) ;
                                                                        //nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = m_arready[ext_mas_cnt] ? 6'd32 :ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                                        nxt_m_arvalid[ext_mas_cnt] = (m_arready[ext_mas_cnt] ? 1'b0 : m_arvalid[ext_mas_cnt]) ;
                                                                        nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                                        nxt_m_arid[ext_mas_cnt] = m_arid[ext_mas_cnt] ;
                                                                        nxt_m_arprot[ext_mas_cnt] = m_arprot[ext_mas_cnt] ;
                                                                    end
                                                        end
                                                end
                                            else
                                                begin : DOWN_BLK
                                                    localparam DOWNSIZE_FACTOR = (EXT_MAS_AXI_DATA_WIDTH_INT / EXT_SLV_AXI_DATA_WIDTH) ; 
                                                    localparam ADDR_BIT_SELECT = ((EXT_SLV_AXI_DATA_WIDTH == 32) ? 2 : 3) ; //AXI4 master -> AXI4lite slave
                                                    localparam EXT_SLV_BYTE_CNT = (EXT_SLV_AXI_DATA_WIDTH / 8) ; 
                                                    localparam WR_CNT_WIDTH = ((DOWNSIZE_FACTOR == 2) ? 9 : ((DOWNSIZE_FACTOR == 4) ? 10 : ((DOWNSIZE_FACTOR == 8) ? 11 : ((DOWNSIZE_FACTOR == 16) ? 12 : 13)))) ; 
                                                    localparam EXT_MAS_ARSIZE_3_IN_BYTES = 8 ; 
                                                    localparam EXT_MAS_ARSIZE_4_IN_BYTES = 16 ; 
                                                    localparam EXT_MAS_ARSIZE_5_IN_BYTES = 32 ; 
                                                    localparam EXT_MAS_ARSIZE_6_IN_BYTES = 64 ; 
                                                    localparam EXT_MAS_ARSIZE_7_IN_BYTES = 128 ; 
                                                    logic [(WR_CNT_WIDTH - 1):0] ar_rd_cnt, 
                                                        nxt_ar_rd_cnt ; 
                                                    logic [(WR_CNT_WIDTH - 1):0] ar_rd_cnt_reg, 
                                                        nxt_ar_rd_cnt_reg ; 
                                                    logic ext_slv_rlast_split_ff_wr_en ; 
                                                    logic ext_slv_rlast_split_ff_rd_en ; 
                                                    logic ext_slv_rlast_split_ff_wdata ; 
                                                    logic ext_slv_rlast_split_ff_rdata ; 
                                                    logic ext_slv_rlast_split_ff_full ; 
                                                    logic ext_slv_rlast_split_ff_empty ; 
                                                    logic [6:0] ext_mas_req_size_bytes ; 
                                                    logic nxt_req_size_le_ext_slv, 
                                                        req_size_le_ext_slv ; 
                                                    logic nxt_init_flag, 
                                                        init_flag ; 
                                                    logic [7:0] nxt_ar_fixed_len_cnt, 
                                                        ar_fixed_len_cnt ; 
                                                    assign ext_slv_rlast_split_ff_wdata = m_arready[ext_mas_cnt] ; // since only for last split arready is given
                                                    //assign ext_slv_rlast_split_ff_wdata  = o_s_arready; // since only for last split arready is given
                                                    assign ext_slv_rlast_split_ff_wr_en = (((o_ext_slv_prt_arvalid_ff & (!ext_slv_rlast_split_ff_full)) & (!ext_slv_rd_issue_ff_full)) & (o_ext_slv_prt_arid_ff[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                    //   assign ext_slv_rlast_split_ff_rd_en  = (~ext_slv_rlast_split_ff_empty & i_ext_slv_prt_rvalid & i_ext_slv_prt_rlast & (ext_slv_arid_ff_rdata[EXT_SLV_AXI_ID_WIDTH-1:EXT_MAS_AXI_ID_WIDTH]==ext_mas_cnt) & (!ext_slv_rd_ff_pre_full));
                                                    assign ext_slv_rlast_split_ff_rd_en = (((((~ext_slv_rlast_split_ff_empty) & i_ext_slv_prt_rvalid) & i_ext_slv_prt_rlast) & (ext_slv_arid_ff_rdata[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) & o_ext_slv_prt_rready) ; 
                                                    if ((LATTICE_FIFO == 1)) 
                                                        begin : LSCC_FF_BLK
                                                        end
                                                    else
                                                        begin : CUSTOM_FF_BLK
                                                            axi4_interconnect_ipgen_gen_fifo #(AR_ARID,
                                                                    1,
                                                                    0,
                                                                    EXT_SLV_AXI_RD_ISSUE) u_ext_slv_rlast_split_fifo (// Pointer Width
                                                                    // Data Width { size}
                                                                    // Whether Output needs to be registered or not
                                                                    // Number of entries in FIFO
                                                                    //EXT_SLV_AXI_RD_ISSUE_DEPTH// Number of entries in FIFO
                                                                    .clk(aclk_i), 
                                                                        .aresetn_i(aresetn_i), 
                                                                        .we(ext_slv_rlast_split_ff_wr_en), 
                                                                        .wdata(ext_slv_rlast_split_ff_wdata), 
                                                                        .re(ext_slv_rlast_split_ff_rd_en), 
                                                                        .rdata(ext_slv_rlast_split_ff_rdata), 
                                                                        .full(ext_slv_rlast_split_ff_full), 
                                                                        .pre_full(), 
                                                                        .empty(ext_slv_rlast_split_ff_empty)) ; 
                                                        end
                                                    assign m_arready[ext_mas_cnt] = ((((|ar_fixed_len_cnt) || (|ar_rd_cnt)) || (|nxt_ar_rd_cnt)) ? 1'b0 : ((((~rd_issue_full) & (!ext_slv_rlast_split_ff_full)) & (!ext_slv_arid_ff_full)) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt))) ; 
                                                    //assign m_arready[ext_mas_cnt]       = (|ar_rd_cnt) || (|nxt_ar_rd_cnt) ? 1'b0 : ~ext_slv_rd_issue_ff_full & (!ext_slv_rlast_split_ff_full)  & (!ext_slv_arid_ff_full) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt) ;
                                                    //assign m_arready[ext_mas_cnt]       = (|ar_rd_cnt) || (|nxt_ar_rd_cnt) ? 1'b0 : ~ext_slv_rd_issue_ff_full & (!ext_slv_rlast_split_ff_full);
                                                    assign m_split_arready[ext_mas_cnt] = ((((~rd_issue_full) & (!ext_slv_rlast_split_ff_full)) & (!ext_slv_arid_ff_full)) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_split_arready[ext_mas_cnt] = ~rd_issue_full & (!ext_slv_rlast_split_ff_full) & (!ext_slv_arid_ff_full) ;
                                                    //assign m_split_arready[ext_mas_cnt] = ~ext_slv_rd_issue_ff_full & (!ext_slv_rlast_split_ff_full) & (!ext_slv_arid_ff_full) ;
                                                    assign ar_b_complete[ext_mas_cnt] = ((((!ext_slv_rlast_split_ff_rdata) & i_ext_slv_prt_rvalid) & i_ext_slv_prt_rlast) & (ext_slv_arid_ff_rdata[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                    //assign  m_arsize  [ext_mas_cnt]   = 3'd0;// dont care
                                                    assign m_arlen[ext_mas_cnt] = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ; 
                                                    //assign  m_arburst [ext_mas_cnt]   = 2'd0; // dont care
                                                    assign m_arcache[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_arlock[ext_mas_cnt] = 1'd0 ; 
                                                    assign m_arqos[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_arregion[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_aruser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((~aresetn_i)) 
                                                                begin
                                                                    m_arvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_araddr[ext_mas_cnt] <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                                                    m_arid[ext_mas_cnt] <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                                                    m_arprot[ext_mas_cnt] <=  3'd0 ;
                                                                    m_arburst[ext_mas_cnt] <=  2'd0 ;
                                                                    ar_rd_cnt <=  {WR_CNT_WIDTH{1'b0}} ;
                                                                    ar_rd_cnt_reg <=  {WR_CNT_WIDTH{1'b0}} ;
                                                                    ext_mas_ard_gnt_reg[ext_mas_cnt] <=  TOTAL_EXTMAS_CNT ;
                                                                    //ext_mas_ard_gnt_reg[ext_mas_cnt]  <= 6'd32;
                                                                    m_arsize[ext_mas_cnt] <=  3'd0 ;
                                                                    req_size_le_ext_slv <=  1'b0 ;
                                                                    init_flag <=  1'b0 ;
                                                                    ar_fixed_len_cnt <=  8'd0 ;
                                                                end
                                                            else
                                                                begin
                                                                    m_arvalid[ext_mas_cnt] <=  nxt_m_arvalid[ext_mas_cnt] ;
                                                                    m_araddr[ext_mas_cnt] <=  nxt_m_araddr[ext_mas_cnt] ;
                                                                    m_arid[ext_mas_cnt] <=  nxt_m_arid[ext_mas_cnt] ;
                                                                    m_arprot[ext_mas_cnt] <=  nxt_m_arprot[ext_mas_cnt] ;
                                                                    m_arburst[ext_mas_cnt] <=  nxt_m_arburst[ext_mas_cnt] ;
                                                                    ar_rd_cnt <=  nxt_ar_rd_cnt ;
                                                                    ar_rd_cnt_reg <=  nxt_ar_rd_cnt_reg ;
                                                                    ext_mas_ard_gnt_reg[ext_mas_cnt] <=  nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                                    m_arsize[ext_mas_cnt] <=  nxt_m_arsize[ext_mas_cnt] ;
                                                                    req_size_le_ext_slv <=  nxt_req_size_le_ext_slv ;
                                                                    init_flag <=  nxt_init_flag ;
                                                                    ar_fixed_len_cnt <=  nxt_ar_fixed_len_cnt ;
                                                                end
                                                        end
                                                    always
                                                        @(*)
                                                        begin
                                                            nxt_m_arvalid[ext_mas_cnt] = m_arvalid[ext_mas_cnt] ;
                                                            nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                            nxt_m_arprot[ext_mas_cnt] = m_arprot[ext_mas_cnt] ;
                                                            nxt_m_arburst[ext_mas_cnt] = m_arburst[ext_mas_cnt] ;
                                                            nxt_m_arid[ext_mas_cnt] = m_arid[ext_mas_cnt] ;
                                                            nxt_ar_rd_cnt = ar_rd_cnt ;
                                                            nxt_ar_rd_cnt_reg = ar_rd_cnt_reg ;
                                                            nxt_init_flag = init_flag ;
                                                            nxt_ar_fixed_len_cnt = ar_fixed_len_cnt ;
                                                            nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                            nxt_m_arsize[ext_mas_cnt] = m_arsize[ext_mas_cnt] ;
                                                            nxt_req_size_le_ext_slv = req_size_le_ext_slv ;
                                                            if (((|ar_rd_cnt) || (|ar_fixed_len_cnt))) 
                                                                begin
                                                                    if ((m_arvalid[ext_mas_cnt] & m_split_arready[ext_mas_cnt])) 
                                                                        //if( m_arvalid [ext_mas_cnt] &  m_split_arready[ext_mas_cnt] & (~rd_issue_full))
                                                                        begin
                                                                            if ((m_arburst[ext_mas_cnt] == 2'd0)) 
                                                                                // fixed
                                                                                begin
                                                                                nxt_init_flag = 1'b1 ;
                                                                                nxt_ar_rd_cnt_reg = (init_flag ? ar_rd_cnt_reg : ar_rd_cnt) ;
                                                                                nxt_ar_rd_cnt = ((|ar_rd_cnt) ? (ar_rd_cnt - 1'd1) : (init_flag ? ar_rd_cnt_reg : ar_rd_cnt)) ;
                                                                                nxt_ar_fixed_len_cnt = ((|ar_rd_cnt) ? ar_fixed_len_cnt : (ar_fixed_len_cnt - 1'd1)) ;
                                                                                nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                                                end
                                                                            else
                                                                                // INCR
                                                                                begin
                                                                                nxt_ar_rd_cnt = (ar_rd_cnt - 1'd1) ;
                                                                                if (((m_arsize[ext_mas_cnt] <= ADDR_BIT_SELECT) && req_size_le_ext_slv)) 
                                                                                begin
                                                                                case (m_arsize[ext_mas_cnt])
                                                                                3'd0 : 
                                                                                nxt_m_araddr[ext_mas_cnt] = ({m_araddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):0]} + ext_mas_req_size_bytes) ;
                                                                                3'd1 : 
                                                                                nxt_m_araddr[ext_mas_cnt] = ({m_araddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):1],
                                                                                1'b0} + ext_mas_req_size_bytes) ;
                                                                                3'd2 : 
                                                                                nxt_m_araddr[ext_mas_cnt] = ({m_araddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):2],
                                                                                2'd0} + ext_mas_req_size_bytes) ;
                                                                                3'd3 : 
                                                                                nxt_m_araddr[ext_mas_cnt] = ({m_araddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):3],
                                                                                3'd0} + ext_mas_req_size_bytes) ;
                                                                                default : 
                                                                                nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                                                endcase 
                                                                                end
                                                                                else
                                                                                begin
                                                                                nxt_m_araddr[ext_mas_cnt] = ({m_araddr[ext_mas_cnt][(EXT_SLV_AXI_ADDR_WIDTH - 1):ADDR_BIT_SELECT],
                                                                                {ADDR_BIT_SELECT{1'b0}}} + EXT_SLV_BYTE_CNT) ;
                                                                                end
                                                                                end
                                                                        end
                                                                    else
                                                                        begin
                                                                            nxt_ar_rd_cnt = ar_rd_cnt ;
                                                                            nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                                        end
                                                                end
                                                            else
                                                                if ((((i_s_arvalid & o_s_arready) & (i_s_ext_mas_ard_gnt == ext_mas_cnt)) & (!m_arvalid))) 
                                                                    //else if ( i_s_arvalid & o_s_arready & (~rd_issue_full) & ( i_s_ext_mas_ard_gnt == ext_mas_cnt)   & (!(m_arvalid)) )
                                                                    begin
                                                                        nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = i_s_ext_mas_ard_gnt ;
                                                                        nxt_m_arvalid[ext_mas_cnt] = i_s_arvalid ;
                                                                        nxt_m_arid[ext_mas_cnt] = i_s_arid ;
                                                                        nxt_m_arprot[ext_mas_cnt] = i_s_arprot ;
                                                                        nxt_m_arburst[ext_mas_cnt] = i_s_arburst ;
                                                                        if ((i_s_arsize <= ADDR_BIT_SELECT)) 
                                                                            // Narrow transfe with request size is less than or equal to slave bus width
                                                                            begin
                                                                                nxt_ar_rd_cnt = i_s_arlen ;
                                                                                nxt_m_araddr[ext_mas_cnt] = ((i_s_arburst == 2'd0) ? i_s_araddr : i_s_araddr) ;
                                                                                nxt_m_arsize[ext_mas_cnt] = i_s_arsize ;
                                                                                nxt_req_size_le_ext_slv = 1'b1 ;
                                                                            end
                                                                        else
                                                                            // Narrow transfer with request size is greater than slave bus width or Full size
                                                                            begin
                                                                                nxt_m_arsize[ext_mas_cnt] = (((EXT_SLV_AXI_DATA_WIDTH / 8) == 1) ? 3'd0 : clog2((EXT_SLV_AXI_DATA_WIDTH / 8))) ;
                                                                                nxt_m_araddr[ext_mas_cnt] = ((i_s_arburst == 2'd0) ? {i_s_araddr[(EXT_SLV_AXI_ADDR_WIDTH - 1):ADDR_BIT_SELECT],
                                                                                {ADDR_BIT_SELECT{1'b0}}} : i_s_araddr) ;
                                                                                nxt_req_size_le_ext_slv = 1'b0 ;
                                                                                nxt_ar_fixed_len_cnt = ((i_s_arburst == 2'd0) ? i_s_arlen : 8'd0) ;
                                                                                nxt_init_flag = 1'b0 ;
                                                                                case (i_s_arsize)
                                                                                3'd3 : 
                                                                                nxt_ar_rd_cnt = ((i_s_arburst == 2'd0) ? (((EXT_MAS_ARSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[2:0] >> ADDR_BIT_SELECT)) - 1'b1) : ((((i_s_arlen + 1'd1) << clog2((EXT_MAS_ARSIZE_3_IN_BYTES / EXT_SLV_BYTE_CNT))) - (i_s_araddr[2:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                3'd4 : 
                                                                                nxt_ar_rd_cnt = ((i_s_arburst == 2'd0) ? (((EXT_MAS_ARSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[3:0] >> ADDR_BIT_SELECT)) - 1'b1) : ((((i_s_arlen + 1'd1) << clog2((EXT_MAS_ARSIZE_4_IN_BYTES / EXT_SLV_BYTE_CNT))) - (i_s_araddr[3:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                3'd5 : 
                                                                                nxt_ar_rd_cnt = ((i_s_arburst == 2'd0) ? (((EXT_MAS_ARSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[4:0] >> ADDR_BIT_SELECT)) - 1'b1) : ((((i_s_arlen + 1'd1) << clog2((EXT_MAS_ARSIZE_5_IN_BYTES / EXT_SLV_BYTE_CNT))) - (i_s_araddr[4:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                3'd6 : 
                                                                                nxt_ar_rd_cnt = ((i_s_arburst == 2'd0) ? (((EXT_MAS_ARSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[5:0] >> ADDR_BIT_SELECT)) - 1'b1) : ((((i_s_arlen + 1'd1) << clog2((EXT_MAS_ARSIZE_6_IN_BYTES / EXT_SLV_BYTE_CNT))) - (i_s_araddr[5:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                3'd7 : 
                                                                                nxt_ar_rd_cnt = ((i_s_arburst == 2'd0) ? (((EXT_MAS_ARSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT) - (i_s_araddr[6:0] >> ADDR_BIT_SELECT)) - 1'b1) : ((((i_s_arlen + 1'd1) << clog2((EXT_MAS_ARSIZE_7_IN_BYTES / EXT_SLV_BYTE_CNT))) - (i_s_araddr[6:0] >> ADDR_BIT_SELECT)) - 1'd1)) ;
                                                                                endcase 
                                                                                //nxt_ar_rd_cnt       = ((i_s_arlen + 1'd1) << ( (1<<i_s_arsize)/EXT_SLV_BYTE_CNT))- i_s_araddr[i_s_arsize-1 : ADDR_BIT_SELECT] -1'd1;
                                                                                //nxt_ar_rd_cnt       = ((i_s_arlen + 1'd1) << DOWNSIZE_FACTOR_BY2 )- i_s_araddr[i_s_arsize-1 : ADDR_BIT_SELECT] -1'd1;
                                                                            end
                                                                    end
                                                                else
                                                                    begin
                                                                        nxt_ar_rd_cnt = ar_rd_cnt ;
                                                                        nxt_m_arvalid[ext_mas_cnt] = (m_arready[ext_mas_cnt] ? 1'b0 : m_arvalid[ext_mas_cnt]) ;
                                                                        nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = (m_arready[ext_mas_cnt] ? TOTAL_EXTMAS_CNT : ext_mas_ard_gnt_reg[ext_mas_cnt]) ;
                                                                        //nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = m_arready[ext_mas_cnt] ? 6'd32 :ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                                        nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                                        nxt_m_arid[ext_mas_cnt] = m_arid[ext_mas_cnt] ;
                                                                        nxt_m_arprot[ext_mas_cnt] = m_arprot[ext_mas_cnt] ;
                                                                    end
                                                        end
                                                end
                                        end
                                    else
                                        begin : AXI4LITE_EXTMAS_BLK
                                            if (((EXT_MAS_AXI_DATA_WIDTH_INT < EXT_SLV_AXI_DATA_WIDTH) || (EXT_MAS_AXI_DATA_WIDTH_INT == EXT_SLV_AXI_DATA_WIDTH))) 
                                                begin : EQ_UP_BLK
                                                    assign m_arready[ext_mas_cnt] = (((~rd_issue_full) & (!ext_slv_arid_ff_full)) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_arready[ext_mas_cnt]       = ~ext_slv_rd_issue_ff_full & (!ext_slv_arid_ff_full) &  (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt) ;
                                                    //assign m_split_arready[ext_mas_cnt] = 1'b0;
                                                    //assign m_split_arready[ext_mas_cnt] = 1'b0;
                                                    assign m_split_arready[ext_mas_cnt] = (((~rd_issue_full) & (!ext_slv_arid_ff_full)) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_split_arready[ext_mas_cnt] = ~rd_issue_full & (!ext_slv_arid_ff_full) ;
                                                    //assign m_split_arready[ext_mas_cnt] = ~ext_slv_rd_issue_ff_full & (!ext_slv_arid_ff_full) ;
                                                    assign ar_b_complete[ext_mas_cnt] = 1'b0 ; 
                                                    assign m_arsize[ext_mas_cnt] = 3'd0 ; 
                                                    assign m_arlen[ext_mas_cnt] = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ; 
                                                    assign m_arburst[ext_mas_cnt] = 2'd0 ; 
                                                    assign m_arcache[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_arlock[ext_mas_cnt] = 1'd0 ; 
                                                    assign m_arqos[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_arregion[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_aruser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((~aresetn_i)) 
                                                                begin
                                                                    m_arvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_araddr[ext_mas_cnt] <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                                                    m_arid[ext_mas_cnt] <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                                                    m_arprot[ext_mas_cnt] <=  3'd0 ;
                                                                    ext_mas_ard_gnt_reg[ext_mas_cnt] <=  TOTAL_EXTMAS_CNT ;
                                                                    //ext_mas_ard_gnt_reg[ext_mas_cnt]  <= 6'd32;
                                                                end
                                                            else
                                                                begin
                                                                    m_arvalid[ext_mas_cnt] <=  nxt_m_arvalid[ext_mas_cnt] ;
                                                                    m_araddr[ext_mas_cnt] <=  nxt_m_araddr[ext_mas_cnt] ;
                                                                    m_arid[ext_mas_cnt] <=  nxt_m_arid[ext_mas_cnt] ;
                                                                    m_arprot[ext_mas_cnt] <=  nxt_m_arprot[ext_mas_cnt] ;
                                                                    ext_mas_ard_gnt_reg[ext_mas_cnt] <=  nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                                end
                                                        end
                                                    always
                                                        @(*)
                                                        begin
                                                            nxt_m_arvalid[ext_mas_cnt] = m_arvalid[ext_mas_cnt] ;
                                                            nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                            nxt_m_arprot[ext_mas_cnt] = m_arprot[ext_mas_cnt] ;
                                                            nxt_m_arid[ext_mas_cnt] = m_arid[ext_mas_cnt] ;
                                                            nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                            if ((((i_s_arvalid & o_s_arready) & (i_s_ext_mas_ard_gnt == ext_mas_cnt)) & (!m_arvalid))) 
                                                                //if ( i_s_arvalid & o_s_arready & (~rd_issue_full) & ( i_s_ext_mas_ard_gnt == ext_mas_cnt)   & (!(m_arvalid)) )
                                                                //if ( i_s_arvalid & o_s_arready & (~rd_issue_full) & ( i_s_ext_mas_ard_gnt == ext_mas_cnt)  )
                                                                begin
                                                                    nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = i_s_ext_mas_ard_gnt ;
                                                                    nxt_m_arvalid[ext_mas_cnt] = i_s_arvalid ;
                                                                    nxt_m_araddr[ext_mas_cnt] = i_s_araddr ;
                                                                    nxt_m_arid[ext_mas_cnt] = i_s_arid ;
                                                                    nxt_m_arprot[ext_mas_cnt] = i_s_arprot ;
                                                                end
                                                            else
                                                                begin
                                                                    nxt_m_arvalid[ext_mas_cnt] = (m_arready[ext_mas_cnt] ? 1'b0 : m_arvalid[ext_mas_cnt]) ;
                                                                    nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = (m_arready[ext_mas_cnt] ? TOTAL_EXTMAS_CNT : ext_mas_ard_gnt_reg[ext_mas_cnt]) ;
                                                                    //nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = m_arready[ext_mas_cnt] ? 6'd32 :ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                                    nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                                    nxt_m_arid[ext_mas_cnt] = m_arid[ext_mas_cnt] ;
                                                                    nxt_m_arprot[ext_mas_cnt] = m_arprot[ext_mas_cnt] ;
                                                                end
                                                        end
                                                end
                                            else
                                                begin : DOWN_BLK
                                                    logic ar_rd_cnt, 
                                                        nxt_ar_rd_cnt ; 
                                                    logic ext_slv_rlast_split_ff_wr_en ; 
                                                    logic ext_slv_rlast_split_ff_rd_en ; 
                                                    logic ext_slv_rlast_split_ff_wdata ; 
                                                    logic ext_slv_rlast_split_ff_rdata ; 
                                                    logic ext_slv_rlast_split_ff_full ; 
                                                    logic ext_slv_rlast_split_ff_empty ; 
                                                    assign ext_slv_rlast_split_ff_wdata = m_arready[ext_mas_cnt] ; // since only for last split arready is given
                                                    //assign ext_slv_rlast_split_ff_wdata  = o_s_arready; // since only for last split arready is given
                                                    assign ext_slv_rlast_split_ff_wr_en = (((o_ext_slv_prt_arvalid_ff & (!ext_slv_rlast_split_ff_full)) & (!ext_slv_rd_issue_ff_full)) & (o_ext_slv_prt_arid_ff[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                    //   assign ext_slv_rlast_split_ff_rd_en  = (~ext_slv_rlast_split_ff_empty & i_ext_slv_prt_rvalid & i_ext_slv_prt_rlast & (ext_slv_arid_ff_rdata[EXT_SLV_AXI_ID_WIDTH-1:EXT_MAS_AXI_ID_WIDTH]==ext_mas_cnt) & (!ext_slv_rd_ff_pre_full));
                                                    assign ext_slv_rlast_split_ff_rd_en = (((((~ext_slv_rlast_split_ff_empty) & i_ext_slv_prt_rvalid) & i_ext_slv_prt_rlast) & (ext_slv_arid_ff_rdata[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) & o_ext_slv_prt_rready) ; 
                                                    if ((LATTICE_FIFO == 1)) 
                                                        begin : LSCC_FF_BLK
                                                        end
                                                    else
                                                        begin : CUSTOM_FF_BLK
                                                            axi4_interconnect_ipgen_gen_fifo #(AR_ARID,
                                                                    1,
                                                                    0,
                                                                    EXT_SLV_AXI_RD_ISSUE) u_ext_slv_rlast_split_fifo (// Pointer Width
                                                                    // Data Width { size}
                                                                    // Whether Output needs to be registered or not
                                                                    // Number of entries in FIFO
                                                                    //EXT_SLV_AXI_RD_ISSUE_DEPTH// Number of entries in FIFO
                                                                    .clk(aclk_i), 
                                                                        .aresetn_i(aresetn_i), 
                                                                        .we(ext_slv_rlast_split_ff_wr_en), 
                                                                        .wdata(ext_slv_rlast_split_ff_wdata), 
                                                                        .re(ext_slv_rlast_split_ff_rd_en), 
                                                                        .rdata(ext_slv_rlast_split_ff_rdata), 
                                                                        .full(ext_slv_rlast_split_ff_full), 
                                                                        .pre_full(), 
                                                                        .empty(ext_slv_rlast_split_ff_empty)) ; 
                                                        end
                                                    assign m_arready[ext_mas_cnt] = (((|ar_rd_cnt) || (|nxt_ar_rd_cnt)) ? 1'b0 : ((((~rd_issue_full) & (!ext_slv_rlast_split_ff_full)) & (!ext_slv_arid_ff_full)) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt))) ; 
                                                    assign m_split_arready[ext_mas_cnt] = ((((~rd_issue_full) & (!ext_slv_rlast_split_ff_full)) & (!ext_slv_arid_ff_full)) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt)) ; 
                                                    //assign m_split_arready[ext_mas_cnt] = ~rd_issue_full & (!ext_slv_rlast_split_ff_full) & (!ext_slv_arid_ff_full) ;
                                                    //assign m_arready[ext_mas_cnt]       = (|ar_rd_cnt) || (|nxt_ar_rd_cnt) ? 1'b0 : ~ext_slv_rd_issue_ff_full & (!ext_slv_rlast_split_ff_full)  & (!ext_slv_arid_ff_full) & (ext_mas_ard_gnt_reg[ext_mas_cnt] == ext_mas_cnt) ;
                                                    //assign m_split_arready[ext_mas_cnt] = ~ext_slv_rd_issue_ff_full & (!ext_slv_rlast_split_ff_full) & (!ext_slv_arid_ff_full) ;
                                                    assign ar_b_complete[ext_mas_cnt] = ((((!ext_slv_rlast_split_ff_rdata) & i_ext_slv_prt_rvalid) & i_ext_slv_prt_rlast) & (ext_slv_arid_ff_rdata[(EXT_SLV_AXI_ID_WIDTH - 1):EXT_MAS_AXI_ID_WIDTH] == ext_mas_cnt)) ; 
                                                    assign m_arsize[ext_mas_cnt] = 3'd0 ; 
                                                    assign m_arlen[ext_mas_cnt] = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ; 
                                                    assign m_arburst[ext_mas_cnt] = 2'd0 ; 
                                                    assign m_arcache[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_arlock[ext_mas_cnt] = 1'd0 ; 
                                                    assign m_arqos[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_arregion[ext_mas_cnt] = 4'd0 ; 
                                                    assign m_aruser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                                    always
                                                        @(posedge aclk_i or 
                                                            negedge aresetn_i)
                                                        begin
                                                            if ((~aresetn_i)) 
                                                                begin
                                                                    m_arvalid[ext_mas_cnt] <=  1'b0 ;
                                                                    m_arprot[ext_mas_cnt] <=  3'd0 ;
                                                                    m_araddr[ext_mas_cnt] <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                                                    m_arid[ext_mas_cnt] <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                                                    ar_rd_cnt <=  1'd0 ;
                                                                    ext_mas_ard_gnt_reg[ext_mas_cnt] <=  TOTAL_EXTMAS_CNT ;
                                                                    //ext_mas_ard_gnt_reg[ext_mas_cnt]  <= 6'd32;
                                                                end
                                                            else
                                                                begin
                                                                    m_arvalid[ext_mas_cnt] <=  nxt_m_arvalid[ext_mas_cnt] ;
                                                                    m_araddr[ext_mas_cnt] <=  nxt_m_araddr[ext_mas_cnt] ;
                                                                    m_arid[ext_mas_cnt] <=  nxt_m_arid[ext_mas_cnt] ;
                                                                    m_arprot[ext_mas_cnt] <=  nxt_m_arprot[ext_mas_cnt] ;
                                                                    ar_rd_cnt <=  nxt_ar_rd_cnt ;
                                                                    ext_mas_ard_gnt_reg[ext_mas_cnt] <=  nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                                end
                                                        end
                                                    always
                                                        @(*)
                                                        begin
                                                            nxt_m_arvalid[ext_mas_cnt] = m_arvalid[ext_mas_cnt] ;
                                                            nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                            nxt_m_arid[ext_mas_cnt] = m_arid[ext_mas_cnt] ;
                                                            nxt_m_arprot[ext_mas_cnt] = m_arprot[ext_mas_cnt] ;
                                                            nxt_ar_rd_cnt = ar_rd_cnt ;
                                                            nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                            if (ar_rd_cnt) 
                                                                begin
                                                                    if ((m_arvalid[ext_mas_cnt] & m_split_arready[ext_mas_cnt])) 
                                                                        //if( m_arvalid [ext_mas_cnt] & m_split_arready[ext_mas_cnt] & (~rd_issue_full))
                                                                        //if(i_s_arvalid & o_s_split_arready & (~rd_issue_full) & ( i_s_ext_mas_ard_gnt == ext_mas_cnt))
                                                                        begin
                                                                            nxt_m_arvalid[ext_mas_cnt] = 1'b1 ;
                                                                            nxt_m_araddr[ext_mas_cnt] = ({i_s_araddr[(EXT_SLV_AXI_ADDR_WIDTH - 1):2],
                                                                                2'd0} + 3'd4) ;
                                                                            nxt_ar_rd_cnt = 1'b0 ;
                                                                        end
                                                                    else
                                                                        begin
                                                                            nxt_m_arvalid[ext_mas_cnt] = m_arvalid[ext_mas_cnt] ;
                                                                            nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                                            nxt_ar_rd_cnt = ar_rd_cnt ;
                                                                        end
                                                                end
                                                            else
                                                                if ((((i_s_arvalid & o_s_arready) & (i_s_ext_mas_ard_gnt == ext_mas_cnt)) & (!m_arvalid))) 
                                                                    //else if ( i_s_arvalid & o_s_arready & (~rd_issue_full) & ( i_s_ext_mas_ard_gnt == ext_mas_cnt)   & (!(m_arvalid)) )
                                                                    //else if ( i_s_arvalid & o_s_arready & (~rd_issue_full) & ( i_s_ext_mas_ard_gnt == ext_mas_cnt)  )
                                                                    begin
                                                                        nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = i_s_ext_mas_ard_gnt ;
                                                                        nxt_m_arvalid[ext_mas_cnt] = i_s_arvalid ;
                                                                        nxt_m_araddr[ext_mas_cnt] = i_s_araddr ;
                                                                        nxt_m_arid[ext_mas_cnt] = i_s_arid ;
                                                                        nxt_m_arprot[ext_mas_cnt] = i_s_arprot ;
                                                                        nxt_ar_rd_cnt = (i_s_araddr[2] ? 1'b0 : 1'b1) ;// 64 ->32 applicable
                                                                    end
                                                                else
                                                                    begin
                                                                        nxt_m_arvalid[ext_mas_cnt] = (m_arready[ext_mas_cnt] ? 1'b0 : m_arvalid[ext_mas_cnt]) ;
                                                                        nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = (m_arready[ext_mas_cnt] ? TOTAL_EXTMAS_CNT : ext_mas_ard_gnt_reg[ext_mas_cnt]) ;
                                                                        //nxt_ext_mas_ard_gnt_reg[ext_mas_cnt] = m_arready[ext_mas_cnt] ? 6'd32 :ext_mas_ard_gnt_reg[ext_mas_cnt] ;
                                                                        nxt_m_araddr[ext_mas_cnt] = m_araddr[ext_mas_cnt] ;
                                                                        nxt_m_arid[ext_mas_cnt] = m_arid[ext_mas_cnt] ;
                                                                        nxt_m_arprot[ext_mas_cnt] = m_arprot[ext_mas_cnt] ;
                                                                        nxt_ar_rd_cnt = ar_rd_cnt ;
                                                                    end
                                                        end
                                                end
                                        end
                                end
                            else
                                begin : NO_EXT_MAS_CONNECT_BLK
                                    assign m_arvalid[ext_mas_cnt] = 1'b0 ; 
                                    assign m_araddr[ext_mas_cnt] = {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ; 
                                    assign m_arsize[ext_mas_cnt] = 3'd0 ; 
                                    assign m_arlen[ext_mas_cnt] = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ; 
                                    assign m_arburst[ext_mas_cnt] = 2'd0 ; 
                                    assign m_arcache[ext_mas_cnt] = 4'd0 ; 
                                    assign m_arid[ext_mas_cnt] = {EXT_SLV_AXI_ID_WIDTH{1'b0}} ; 
                                    assign m_arprot[ext_mas_cnt] = 3'd0 ; 
                                    assign m_arlock[ext_mas_cnt] = 1'd0 ; 
                                    assign m_arqos[ext_mas_cnt] = 4'd0 ; 
                                    assign m_arregion[ext_mas_cnt] = 4'd0 ; 
                                    assign m_aruser[ext_mas_cnt] = {AXI_USER_WIDTH{1'b0}} ; 
                                    assign m_arready[ext_mas_cnt] = 1'b0 ; 
                                    assign m_split_arready[ext_mas_cnt] = 1'b0 ; 
                                    assign ar_b_complete[ext_mas_cnt] = 1'b0 ; 
                                end
                        end
                    end
                always
                    @(posedge aclk_i or 
                        negedge aresetn_i)
                    begin
                        if ((~aresetn_i)) 
                            begin
                                o_s_arready <=  1'b1 ;
                                o_s_split_arready <=  1'b1 ;
                            end
                        else
                            begin
                                o_s_arready <=  nxt_o_s_arready ;
                                o_s_split_arready <=  nxt_o_s_split_arready ;
                            end
                    end
                integer ext_mas_val ; 
                always
                    @(*)
                    begin
                        nxt_o_s_arready = o_s_arready ;
                        nxt_o_s_split_arready = o_s_split_arready ;
                        o_ext_slv_prt_arvalid_ff = 1'b0 ;
                        o_ext_slv_prt_araddr_ff = {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                        o_ext_slv_prt_arsize_ff = 3'd0 ;
                        o_ext_slv_prt_arlen_ff = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ;
                        o_ext_slv_prt_arburst_ff = 2'd0 ;
                        o_ext_slv_prt_arcache_ff = 4'd0 ;
                        o_ext_slv_prt_arid_ff = {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                        o_ext_slv_prt_arprot_ff = 3'd0 ;
                        o_ext_slv_prt_arlock_ff = 1'd0 ;
                        o_ext_slv_prt_arqos_ff = 4'd0 ;
                        o_ext_slv_prt_arregion_ff = 4'd0 ;
                        o_ext_slv_prt_aruser_ff = {AXI_USER_WIDTH{1'b0}} ;
                        for (ext_mas_val = 0 ; (ext_mas_val < TOTAL_EXTMAS_CNT) ; ext_mas_val = (ext_mas_val + 1))
                            begin
                                //if(ext_mas_ard_gnt_reg[ext_mas_val]==ext_mas_val)
                                if (m_arvalid[ext_mas_val]) 
                                    begin
                                        o_ext_slv_prt_arvalid_ff = (m_arvalid[ext_mas_val] & m_split_arready[ext_mas_val]) ;
                                        o_ext_slv_prt_araddr_ff = m_araddr[ext_mas_val] ;
                                        o_ext_slv_prt_arsize_ff = m_arsize[ext_mas_val] ;
                                        o_ext_slv_prt_arlen_ff = m_arlen[ext_mas_val] ;
                                        o_ext_slv_prt_arburst_ff = m_arburst[ext_mas_val] ;
                                        o_ext_slv_prt_arcache_ff = m_arcache[ext_mas_val] ;
                                        o_ext_slv_prt_arid_ff = m_arid[ext_mas_val] ;
                                        o_ext_slv_prt_arprot_ff = m_arprot[ext_mas_val] ;
                                        o_ext_slv_prt_arlock_ff = m_arlock[ext_mas_val] ;
                                        o_ext_slv_prt_arqos_ff = m_arqos[ext_mas_val] ;
                                        o_ext_slv_prt_arregion_ff = m_arregion[ext_mas_val] ;
                                        o_ext_slv_prt_aruser_ff = m_aruser[ext_mas_val] ;
                                    end
                                else
                                    ; 
                                //if(ext_mas_ard_gnt_reg[ext_mas_val]==ext_mas_val)
                                if (((ext_mas_ard_gnt_reg[ext_mas_val] == ext_mas_val) || ((i_s_ext_mas_ard_gnt == ext_mas_val) && i_s_arvalid))) 
                                    begin
                                        nxt_o_s_arready = m_arready[ext_mas_val] ;
                                        nxt_o_s_split_arready = m_split_arready[ext_mas_val] ;
                                    end
                                else
                                    ; 
                            end
                    end
                //===================================================================================
                // EXT_SLV_RD_ISSUE_FIFO
                //===================================================================================
                assign ext_slv_rd_issue_ff_data_in = ((EXT_SLV_AXI_PROTOCOL == 1'b0) ? {o_ext_slv_prt_aruser_ff,
                            o_ext_slv_prt_arregion_ff,
                            o_ext_slv_prt_arqos_ff,
                            o_ext_slv_prt_arlock_ff,
                            o_ext_slv_prt_arprot_ff,
                            o_ext_slv_prt_arid_ff,
                            o_ext_slv_prt_arcache_ff,
                            o_ext_slv_prt_arburst_ff,
                            o_ext_slv_prt_arlen_ff,
                            o_ext_slv_prt_arsize_ff,
                            o_ext_slv_prt_araddr_ff,
                            o_ext_slv_prt_arvalid_ff} : {o_ext_slv_prt_arprot_ff,
                            o_ext_slv_prt_araddr_ff,
                            o_ext_slv_prt_arvalid_ff}) ; 
                assign ext_slv_rd_issue_ff_wr_en = (((~ext_slv_rd_issue_ff_full) & o_ext_slv_prt_arvalid_ff) & (~rd_issue_full)) ; 
                assign ext_slv_rd_issue_ff_rd_en = ((~ext_slv_rd_issue_ff_empty) & ((o_ext_slv_prt_arvalid & i_ext_slv_prt_arready) || (!o_ext_slv_prt_arvalid))) ; 
                //assign ext_slv_rd_issue_ff_rd_en   = (~ext_slv_rd_issue_ff_empty & i_ext_slv_prt_arready );
                if ((LATTICE_FIFO == 1)) 
                    begin : LSCC_EXT_SLV_RD_ISSUE_FF_BLK
                    end
                else
                    begin : CUSTOM_EXT_SLV_RD_ISSUE_FF_BLK
                        axi4_interconnect_ipgen_gen_fifo #(AR_ARID,
                                AR_DWID,
                                0,
                                EXT_SLV_AXI_RD_ISSUE) u_ext_slv_ar_rd_issue_fifo (// Pointer Width
                                // Data Width { size}
                                // Whether Output needs to be registered or not
                                // Number of entries in FIFO
                                //EXT_SLV_AXI_RD_ISSUE_DEPTH// Number of entries in FIFO
                                .clk(aclk_i), 
                                    .aresetn_i(aresetn_i), 
                                    .we(ext_slv_rd_issue_ff_wr_en), 
                                    .wdata(ext_slv_rd_issue_ff_data_in), 
                                    .re(ext_slv_rd_issue_ff_rd_en), 
                                    .rdata(ext_slv_rd_issue_ff_rdata), 
                                    .full(ext_slv_rd_issue_ff_full), 
                                    .pre_full(), 
                                    .empty(ext_slv_rd_issue_ff_empty)) ; 
                    end
                if ((EXT_SLV_AXI_PROTOCOL == 1)) 
                    begin : AXI4LITE_SLV_ARBLK
                        //assign o_ext_slv_prt_arvalid     = ( ext_slv_rd_issue_ff_empty ) ? 'd0 : ext_slv_rd_issue_ff_rdata[0];
                        //assign o_ext_slv_prt_araddr      = ( ext_slv_rd_issue_ff_empty ) ? 'd0 : ext_slv_rd_issue_ff_rdata[EXT_SLV_AXI_ADDR_WIDTH:1];
                        //assign o_ext_slv_prt_arprot      = ( ext_slv_rd_issue_ff_empty ) ? 'd0 : ext_slv_rd_issue_ff_rdata[EXT_SLV_AXI_ADDR_WIDTH+1 +:3] ;
                        always
                            @(posedge aclk_i or 
                                negedge aresetn_i)
                            begin
                                if ((~aresetn_i)) 
                                    begin
                                        o_ext_slv_prt_arvalid <=  1'b0 ;
                                        o_ext_slv_prt_araddr <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                        o_ext_slv_prt_arprot <=  3'd0 ;
                                    end
                                else
                                    begin
                                        o_ext_slv_prt_arvalid <=  ((ext_slv_rd_issue_ff_empty || (o_ext_slv_prt_arvalid & (!i_ext_slv_prt_arready))) ? (i_ext_slv_prt_arready ? 1'd0 : o_ext_slv_prt_arvalid) : ext_slv_rd_issue_ff_rdata[0]) ;
                                        o_ext_slv_prt_araddr <=  ((ext_slv_rd_issue_ff_empty || (o_ext_slv_prt_arvalid & (!i_ext_slv_prt_arready))) ? o_ext_slv_prt_araddr : ext_slv_rd_issue_ff_rdata[EXT_SLV_AXI_ADDR_WIDTH:1]) ;
                                        o_ext_slv_prt_arprot <=  ((ext_slv_rd_issue_ff_empty || (o_ext_slv_prt_arvalid & (!i_ext_slv_prt_arready))) ? o_ext_slv_prt_arprot : ext_slv_rd_issue_ff_rdata[(EXT_SLV_AXI_ADDR_WIDTH + 1) +: 3]) ;
                                    end
                            end
                        assign o_ext_slv_prt_arsize = 3'd0 ; 
                        assign o_ext_slv_prt_arlen = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ; 
                        assign o_ext_slv_prt_arburst = 2'd0 ; 
                        assign o_ext_slv_prt_arcache = 4'd0 ; 
                        assign o_ext_slv_prt_arid = {EXT_SLV_AXI_ID_WIDTH{1'b0}} ; 
                        assign o_ext_slv_prt_arlock = 1'd0 ; 
                        assign o_ext_slv_prt_arqos = 4'd0 ; 
                        assign o_ext_slv_prt_arregion = 4'd0 ; 
                        assign o_ext_slv_prt_aruser = {AXI_USER_WIDTH{1'b0}} ; 
                    end
                else
                    begin : AXI4_SLV_ARBLK
                        always
                            @(posedge aclk_i or 
                                negedge aresetn_i)
                            begin
                                if ((~aresetn_i)) 
                                    begin
                                        o_ext_slv_prt_arvalid <=  1'b0 ;
                                        o_ext_slv_prt_araddr <=  {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ;
                                        o_ext_slv_prt_arsize <=  3'd0 ;
                                        o_ext_slv_prt_arlen <=  {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ;
                                        o_ext_slv_prt_arburst <=  2'd0 ;
                                        o_ext_slv_prt_arcache <=  4'd0 ;
                                        o_ext_slv_prt_arid <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                        o_ext_slv_prt_arprot <=  3'd0 ;
                                        o_ext_slv_prt_arlock <=  1'd0 ;
                                        o_ext_slv_prt_arqos <=  4'd0 ;
                                        o_ext_slv_prt_arregion <=  4'd0 ;
                                        o_ext_slv_prt_aruser <=  {AXI_USER_WIDTH{1'd0}} ;
                                    end
                                else
                                    begin
                                        //o_ext_slv_prt_arvalid     <= ( ext_slv_rd_issue_ff_rd_en ) ? ext_slv_rd_issue_ff_rdata[0] : (i_ext_slv_prt_arready ? 1'd0 : o_ext_slv_prt_arvalid);
                                        //o_ext_slv_prt_araddr      <= ( ext_slv_rd_issue_ff_rd_en ) ? ext_slv_rd_issue_ff_rdata[EXT_SLV_AXI_ADDR_WIDTH:1] : 'd0;
                                        o_ext_slv_prt_arvalid <=  ((ext_slv_rd_issue_ff_empty || (o_ext_slv_prt_arvalid & (!i_ext_slv_prt_arready))) ? (i_ext_slv_prt_arready ? 1'd0 : o_ext_slv_prt_arvalid) : ext_slv_rd_issue_ff_rdata[0]) ;
                                        o_ext_slv_prt_araddr <=  ((ext_slv_rd_issue_ff_empty || (o_ext_slv_prt_arvalid & (!i_ext_slv_prt_arready))) ? o_ext_slv_prt_araddr : ext_slv_rd_issue_ff_rdata[EXT_SLV_AXI_ADDR_WIDTH:1]) ;
                                        o_ext_slv_prt_arsize <=  ((ext_slv_rd_issue_ff_empty || (o_ext_slv_prt_arvalid & (!i_ext_slv_prt_arready))) ? o_ext_slv_prt_arsize : ext_slv_rd_issue_ff_rdata[(EXT_SLV_AXI_ADDR_WIDTH + 1) +: 3]) ;
                                        o_ext_slv_prt_arlen <=  ((ext_slv_rd_issue_ff_empty || (o_ext_slv_prt_arvalid & (!i_ext_slv_prt_arready))) ? o_ext_slv_prt_arlen : ext_slv_rd_issue_ff_rdata[(EXT_SLV_AXI_ADDR_WIDTH + 4) +: EXT_SLV_AXI_LEN_WIDTH]) ;
                                        o_ext_slv_prt_arburst <=  ((ext_slv_rd_issue_ff_empty || (o_ext_slv_prt_arvalid & (!i_ext_slv_prt_arready))) ? o_ext_slv_prt_arburst : ext_slv_rd_issue_ff_rdata[((EXT_SLV_AXI_ADDR_WIDTH + 4) + EXT_SLV_AXI_LEN_WIDTH) +: 2]) ;
                                        o_ext_slv_prt_arcache <=  ((ext_slv_rd_issue_ff_empty || (o_ext_slv_prt_arvalid & (!i_ext_slv_prt_arready))) ? o_ext_slv_prt_arcache : ext_slv_rd_issue_ff_rdata[((EXT_SLV_AXI_ADDR_WIDTH + 6) + EXT_SLV_AXI_LEN_WIDTH) +: 4]) ;
                                        o_ext_slv_prt_arid <=  ((ext_slv_rd_issue_ff_empty || (o_ext_slv_prt_arvalid & (!i_ext_slv_prt_arready))) ? o_ext_slv_prt_arid : ext_slv_rd_issue_ff_rdata[((EXT_SLV_AXI_ADDR_WIDTH + 10) + EXT_SLV_AXI_LEN_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]) ;
                                        o_ext_slv_prt_arprot <=  ((ext_slv_rd_issue_ff_empty || (o_ext_slv_prt_arvalid & (!i_ext_slv_prt_arready))) ? o_ext_slv_prt_arprot : ext_slv_rd_issue_ff_rdata[(((EXT_SLV_AXI_ADDR_WIDTH + 10) + EXT_SLV_AXI_LEN_WIDTH) + EXT_SLV_AXI_ID_WIDTH) +: 3]) ;
                                        o_ext_slv_prt_arlock <=  ((ext_slv_rd_issue_ff_empty || (o_ext_slv_prt_arvalid & (!i_ext_slv_prt_arready))) ? o_ext_slv_prt_arlock : ext_slv_rd_issue_ff_rdata[(((EXT_SLV_AXI_ADDR_WIDTH + 13) + EXT_SLV_AXI_LEN_WIDTH) + EXT_SLV_AXI_ID_WIDTH) +: 1]) ;
                                        o_ext_slv_prt_arqos <=  ((ext_slv_rd_issue_ff_empty || (o_ext_slv_prt_arvalid & (!i_ext_slv_prt_arready))) ? o_ext_slv_prt_arqos : ext_slv_rd_issue_ff_rdata[(((EXT_SLV_AXI_ADDR_WIDTH + 14) + EXT_SLV_AXI_LEN_WIDTH) + EXT_SLV_AXI_ID_WIDTH) +: 4]) ;
                                        o_ext_slv_prt_arregion <=  ((ext_slv_rd_issue_ff_empty || (o_ext_slv_prt_arvalid & (!i_ext_slv_prt_arready))) ? o_ext_slv_prt_arregion : ext_slv_rd_issue_ff_rdata[(((EXT_SLV_AXI_ADDR_WIDTH + 18) + EXT_SLV_AXI_LEN_WIDTH) + EXT_SLV_AXI_ID_WIDTH) +: 4]) ;
                                        o_ext_slv_prt_aruser <=  ((ext_slv_rd_issue_ff_empty || (o_ext_slv_prt_arvalid & (!i_ext_slv_prt_arready))) ? o_ext_slv_prt_aruser : ext_slv_rd_issue_ff_rdata[(((EXT_SLV_AXI_ADDR_WIDTH + 22) + EXT_SLV_AXI_LEN_WIDTH) + EXT_SLV_AXI_ID_WIDTH) +: AXI_USER_WIDTH]) ;
                                    end
                            end
                    end
                if ((EXT_SLV_AXI_PROTOCOL == AXI4_LITE)) 
                    begin : AXI4_LITE_EXTSLV_ARIDFF_BLK
                        // ARID FIFO 
                        localparam ARID_DWIDTH = EXT_SLV_AXI_ID_WIDTH ; 
                        //localparam ARID_AWIDTH = clog2(EXT_SLV_AXI_RD_ISSUE);
                        logic ext_slv_arid_ff_wr_en ; 
                        logic ext_slv_arid_ff_rd_en ; 
                        logic ext_slv_arid_ff_empty ; 
                        assign ext_slv_arid_ff_wr_en = ((~ext_slv_arid_ff_full) & o_ext_slv_prt_arvalid_ff) ; 
                        assign ext_slv_arid_ff_rd_en = (((~ext_slv_arid_ff_empty) & i_ext_slv_prt_rvalid) & o_ext_slv_prt_rready) ; 
                        //assign ext_slv_arid_ff_rd_en   = (~ext_slv_arid_ff_empty & i_ext_slv_prt_rvalid & ~ext_slv_rd_ff_pre_full);
                        if ((LATTICE_FIFO == 1)) 
                            begin : LSCC_FF_BLK
                            end
                        else
                            begin : CUSTOM_FF_BLK
                                axi4_interconnect_ipgen_gen_fifo #(AR_ARID,
                                        ARID_DWIDTH,
                                        0,
                                        EXT_SLV_AXI_RD_ISSUE) u_ext_slv_arid_fifo (// Pointer Width
                                        // Data Width { size}
                                        // Whether Output needs to be registered or not
                                        // Number of entries in FIFO
                                        //EXT_SLV_AXI_RD_ISSUE_DEPTH// Number of entries in FIFO
                                        .clk(aclk_i), 
                                            .aresetn_i(aresetn_i), 
                                            .we(ext_slv_arid_ff_wr_en), 
                                            .wdata(o_ext_slv_prt_arid_ff), 
                                            .re(ext_slv_arid_ff_rd_en), 
                                            .rdata(ext_slv_arid_ff_rdata), 
                                            .full(ext_slv_arid_ff_full), 
                                            .pre_full(), 
                                            .empty(ext_slv_arid_ff_empty)) ; 
                            end
                    end
                //===================================================================================
                // Read Response 
                //===================================================================================
                logic nxt_o_s_rvalid ; 
                logic [(EXT_SLV_AXI_DATA_WIDTH - 1):0] nxt_o_s_rdata ; 
                logic [(EXT_SLV_AXI_ID_WIDTH - 1):0] nxt_o_s_rid ; 
                logic nxt_o_s_rlast ; 
                logic [(AXI_USER_WIDTH - 1):0] nxt_o_s_ruser ; 
                logic [(2 - 1):0] nxt_o_s_rresp ; 
                assign i_ext_slv_prt_rlast_sig = ((|ar_b_complete) ? 1'b0 : i_ext_slv_prt_rlast) ; 
                localparam R_DWID = (((EXT_SLV_AXI_DATA_WIDTH + EXT_SLV_AXI_ID_WIDTH) + AXI_USER_WIDTH) + 3) ; 
                localparam R_PWID = clog2(EXT_SLV_RD_DATA_FIFO_DEPTH) ; 
                logic [(R_DWID - 1):0] ext_slv_rd_ff_rdata ; 
                logic [(R_DWID - 1):0] ext_slv_rd_ff_data_in ; 
                logic ext_slv_rd_ff_wr_en ; 
                logic ext_slv_rd_ff_rd_en ; 
                logic rd_data_avail, 
                    nxt_rd_data_avail ; 
                logic [(R_DWID - 1):0] rd_data_reg, 
                    nxt_rd_data_reg ; 
                assign ext_slv_rd_ff_data_in = ((EXT_SLV_AXI_PROTOCOL == 1) ? {i_ext_slv_prt_rlast_sig,
                            i_ext_slv_prt_rresp,
                            i_ext_slv_prt_ruser,
                            ext_slv_arid_ff_rdata,
                            i_ext_slv_prt_rdata} : {i_ext_slv_prt_rlast_sig,
                            i_ext_slv_prt_rresp,
                            i_ext_slv_prt_ruser,
                            i_ext_slv_prt_rid,
                            i_ext_slv_prt_rdata}) ; 
                always
                    @(posedge aclk_i or 
                        negedge aresetn_i)
                    begin
                        if ((~aresetn_i)) 
                            begin
                                o_ext_slv_prt_rready = 1'b1 ;
                            end
                        else
                            begin
                                o_ext_slv_prt_rready = ((~ext_slv_rd_ff_pre_full) && (~ext_slv_rd_ff_full)) ;
                            end
                    end
                //assign o_ext_slv_prt_rready  = ~ext_slv_rd_ff_pre_full;
                assign ext_slv_rd_ff_wr_en = (((~ext_slv_rd_ff_full) & i_ext_slv_prt_rvalid) & o_ext_slv_prt_rready) ; 
                assign ext_slv_rd_ff_rd_en = ((~ext_slv_rd_ff_empty) & (!rd_data_avail)) ; 
                if ((LATTICE_FIFO == 1)) 
                    begin : LSCC_FF_BLK
                    end
                else
                    begin : CUSTOM_FF_BLK
                        axi4_interconnect_ipgen_gen_fifo #(R_PWID,
                                R_DWID,
                                0,
                                EXT_SLV_RD_DATA_FIFO_DEPTH) u_ext_slv_rd_fifo (// Pointer Width
                                // Data Width { size}
                                // Whether Output needs to be registered or not
                                // Number of entries in FIFO
                                .clk(aclk_i), 
                                    .aresetn_i(aresetn_i), 
                                    .we(ext_slv_rd_ff_wr_en), 
                                    .wdata(ext_slv_rd_ff_data_in), 
                                    .re(ext_slv_rd_ff_rd_en), 
                                    .rdata(ext_slv_rd_ff_rdata), 
                                    .full(ext_slv_rd_ff_full), 
                                    .pre_full(ext_slv_rd_ff_pre_full), 
                                    .empty(ext_slv_rd_ff_empty)) ; 
                    end
                always
                    @(posedge aclk_i or 
                        negedge aresetn_i)
                    begin
                        if ((!aresetn_i)) 
                            begin
                                o_s_rvalid <=  1'b0 ;
                                o_s_rdata <=  {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ;
                                o_s_rid <=  {EXT_SLV_AXI_ID_WIDTH{1'b0}} ;
                                o_s_ruser <=  {AXI_USER_WIDTH{1'b0}} ;
                                o_s_rresp <=  {2{1'b0}} ;
                                o_s_rlast <=  {1'b0} ;
                                rd_data_avail <=  1'b0 ;
                                rd_data_reg <=  {R_DWID{1'b0}} ;
                            end
                        else
                            begin
                                o_s_rvalid <=  nxt_o_s_rvalid ;
                                o_s_rdata <=  nxt_o_s_rdata ;
                                o_s_rid <=  nxt_o_s_rid ;
                                o_s_ruser <=  nxt_o_s_ruser ;
                                o_s_rresp <=  nxt_o_s_rresp ;
                                o_s_rlast <=  nxt_o_s_rlast ;
                                rd_data_avail <=  nxt_rd_data_avail ;
                                rd_data_reg <=  nxt_rd_data_reg ;
                            end
                    end
                always
                    @(*)
                    begin
                        nxt_rd_data_avail = rd_data_avail ;
                        nxt_rd_data_reg = rd_data_reg ;
                        nxt_o_s_rvalid = o_s_rvalid ;
                        nxt_o_s_rdata = o_s_rdata ;
                        nxt_o_s_rid = o_s_rid ;
                        nxt_o_s_ruser = o_s_ruser ;
                        nxt_o_s_rresp = o_s_rresp ;
                        nxt_o_s_rlast = o_s_rlast ;
                        if (ext_slv_rd_ff_empty) 
                            begin
                                if (i_s_rready) 
                                    begin
                                        nxt_rd_data_avail = 1'b0 ;
                                        nxt_o_s_rvalid = rd_data_avail ;
                                        nxt_o_s_rdata = rd_data_reg[(EXT_SLV_AXI_DATA_WIDTH - 1):0] ;
                                        nxt_o_s_rid = rd_data_reg[EXT_SLV_AXI_DATA_WIDTH +: EXT_SLV_AXI_ID_WIDTH] ;
                                        nxt_o_s_ruser = rd_data_reg[(EXT_SLV_AXI_DATA_WIDTH + EXT_SLV_AXI_ID_WIDTH) +: AXI_USER_WIDTH] ;
                                        nxt_o_s_rresp = rd_data_reg[((EXT_SLV_AXI_DATA_WIDTH + EXT_SLV_AXI_ID_WIDTH) + AXI_USER_WIDTH) +: 2] ;
                                        nxt_o_s_rlast = rd_data_reg[(((EXT_SLV_AXI_DATA_WIDTH + EXT_SLV_AXI_ID_WIDTH) + AXI_USER_WIDTH) + 2)] ;
                                    end
                                else
                                    begin
                                        nxt_o_s_rvalid = o_s_rvalid ;
                                    end
                            end
                        else
                            begin
                                if ((o_s_rvalid & i_s_rready)) 
                                    begin
                                        nxt_o_s_rvalid = 1'b1 ;
                                        nxt_rd_data_avail = 1'b0 ;
                                        nxt_o_s_rdata = (rd_data_avail ? rd_data_reg[(EXT_SLV_AXI_DATA_WIDTH - 1):0] : ext_slv_rd_ff_rdata[(EXT_SLV_AXI_DATA_WIDTH - 1):0]) ;
                                        nxt_o_s_rid = (rd_data_avail ? rd_data_reg[EXT_SLV_AXI_DATA_WIDTH +: EXT_SLV_AXI_ID_WIDTH] : ext_slv_rd_ff_rdata[EXT_SLV_AXI_DATA_WIDTH +: EXT_SLV_AXI_ID_WIDTH]) ;
                                        nxt_o_s_ruser = (rd_data_avail ? rd_data_reg[(EXT_SLV_AXI_DATA_WIDTH + EXT_SLV_AXI_ID_WIDTH) +: AXI_USER_WIDTH] : ext_slv_rd_ff_rdata[(EXT_SLV_AXI_DATA_WIDTH + EXT_SLV_AXI_ID_WIDTH) +: AXI_USER_WIDTH]) ;
                                        nxt_o_s_rresp = (rd_data_avail ? rd_data_reg[((EXT_SLV_AXI_DATA_WIDTH + EXT_SLV_AXI_ID_WIDTH) + AXI_USER_WIDTH) +: 2] : ext_slv_rd_ff_rdata[((EXT_SLV_AXI_DATA_WIDTH + EXT_SLV_AXI_ID_WIDTH) + AXI_USER_WIDTH) +: 2]) ;
                                        nxt_o_s_rlast = (rd_data_avail ? rd_data_reg[(((EXT_SLV_AXI_DATA_WIDTH + EXT_SLV_AXI_ID_WIDTH) + AXI_USER_WIDTH) + 2)] : ext_slv_rd_ff_rdata[(((EXT_SLV_AXI_DATA_WIDTH + EXT_SLV_AXI_ID_WIDTH) + AXI_USER_WIDTH) + 2)]) ;
                                    end
                                else
                                    if ((o_s_rvalid & (!i_s_rready))) 
                                        begin
                                            nxt_rd_data_avail = 1'b1 ;
                                            nxt_rd_data_reg = (rd_data_avail ? rd_data_reg : ext_slv_rd_ff_rdata) ;
                                            nxt_o_s_rvalid = o_s_rvalid ;
                                            nxt_o_s_rdata = o_s_rdata ;
                                            nxt_o_s_rid = o_s_rid ;
                                            nxt_o_s_ruser = o_s_ruser ;
                                            nxt_o_s_rresp = o_s_rresp ;
                                            nxt_o_s_rlast = o_s_rlast ;
                                        end
                                    else
                                        begin
                                            nxt_o_s_rvalid = 1'b1 ;
                                            nxt_o_s_rdata = ext_slv_rd_ff_rdata[(EXT_SLV_AXI_DATA_WIDTH - 1):0] ;
                                            nxt_o_s_rid = ext_slv_rd_ff_rdata[EXT_SLV_AXI_DATA_WIDTH +: EXT_SLV_AXI_ID_WIDTH] ;
                                            nxt_o_s_ruser = ext_slv_rd_ff_rdata[(EXT_SLV_AXI_DATA_WIDTH + EXT_SLV_AXI_ID_WIDTH) +: AXI_USER_WIDTH] ;
                                            nxt_o_s_rresp = ext_slv_rd_ff_rdata[((EXT_SLV_AXI_DATA_WIDTH + EXT_SLV_AXI_ID_WIDTH) + AXI_USER_WIDTH) +: 2] ;
                                            nxt_o_s_rlast = ext_slv_rd_ff_rdata[(((EXT_SLV_AXI_DATA_WIDTH + EXT_SLV_AXI_ID_WIDTH) + AXI_USER_WIDTH) + 2)] ;
                                        end
                            end
                    end//always
            end
        if ((EXT_SLV_ACCESS_TYPE == 2'd0)) 
            begin : WO_ACCESS_BLK
                assign o_s_arready = 1'b0 ; 
                assign o_s_split_arready = 1'b0 ; 
                assign o_s_rvalid = 1'b0 ; 
                assign o_s_rdata = {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ; 
                assign o_s_rid = {EXT_SLV_AXI_ID_WIDTH{1'b0}} ; 
                assign o_s_rlast = 1'b0 ; 
                assign o_s_ruser = {AXI_USER_WIDTH{1'b0}} ; 
                assign o_s_rresp = 2'd0 ; 
                assign o_ext_slv_prt_arvalid = 1'b0 ; 
                assign o_ext_slv_prt_araddr = {EXT_SLV_AXI_ADDR_WIDTH{1'b0}} ; 
                assign o_ext_slv_prt_arsize = 3'd0 ; 
                assign o_ext_slv_prt_arlen = {EXT_SLV_AXI_LEN_WIDTH{1'b0}} ; 
                assign o_ext_slv_prt_arburst = 2'd0 ; 
                assign o_ext_slv_prt_arcache = 4'd0 ; 
                assign o_ext_slv_prt_arid = {EXT_SLV_AXI_ID_WIDTH{1'b0}} ; 
                assign o_ext_slv_prt_arprot = 3'd0 ; 
                assign o_ext_slv_prt_arlock = 1'd0 ; 
                assign o_ext_slv_prt_arqos = 4'd0 ; 
                assign o_ext_slv_prt_arregion = 4'd0 ; 
                assign o_ext_slv_prt_aruser = {AXI_USER_WIDTH{1'b0}} ; 
                assign o_ext_slv_prt_rready = 1'b0 ; 
            end
    endgenerate
endmodule



module axi4_interconnect_ipgen_ext_slv_rdresp_ifc (aclk_i, 
        aresetn_i, 
        si_rvalid, 
        si_rdata, 
        si_rid, 
        si_rresp, 
        si_rlast, 
        si_ruser, 
        so_rready, 
        so_m_rvalid, 
        so_m_rdata, 
        so_m_rid, 
        so_m_rresp, 
        so_m_rlast, 
        so_m_ruser, 
        si_m_rready) ;
    parameter TOTAL_EXTMAS_CNT = 32 ; 
    parameter EXT_SLV_AXI_ID_WIDTH = 11 ; 
    parameter EXT_SLV_AXI_DATA_WIDTH = 1024 ; 
    parameter EXT_MAS_AXI_ID_WIDTH = 6 ; 
    parameter AXI_USER_WIDTH = 11 ; 
    localparam AXI_ID_SLV_WIDTH = (((TOTAL_EXTMAS_CNT == 1) && (EXT_SLV_AXI_ID_WIDTH == EXT_MAS_AXI_ID_WIDTH)) ? 0 : (EXT_SLV_AXI_ID_WIDTH - 1)) ; 
    localparam AXI_ID_MAS_WIDTH = (((TOTAL_EXTMAS_CNT == 1) && (EXT_SLV_AXI_ID_WIDTH == EXT_MAS_AXI_ID_WIDTH)) ? 0 : EXT_MAS_AXI_ID_WIDTH) ; 
    //*******************************INPUTS & OUTPUTS************************************
    input aclk_i ; 
    input aresetn_i ; 
    input si_rvalid ; 
    input [(EXT_SLV_AXI_DATA_WIDTH - 1):0] si_rdata ; 
    input [(EXT_SLV_AXI_ID_WIDTH - 1):0] si_rid ; 
    input [1:0] si_rresp ; 
    input si_rlast ; 
    input [(AXI_USER_WIDTH - 1):0] si_ruser ; 
    output logic so_rready ; 
    output logic [(TOTAL_EXTMAS_CNT - 1):0] so_m_rvalid ; 
    output logic [((TOTAL_EXTMAS_CNT * EXT_SLV_AXI_DATA_WIDTH) - 1):0] so_m_rdata ; 
    output logic [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] so_m_rid ; 
    output logic [((TOTAL_EXTMAS_CNT * 2) - 1):0] so_m_rresp ; 
    output logic [(TOTAL_EXTMAS_CNT - 1):0] so_m_rlast ; 
    output logic [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] so_m_ruser ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] si_m_rready ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] si_rready_chk, 
        nxt_si_rready_chk ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] nxt_so_m_rvalid ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_SLV_AXI_DATA_WIDTH) - 1):0] nxt_so_m_rdata ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] nxt_so_m_rid ; 
    logic [((TOTAL_EXTMAS_CNT * 2) - 1):0] nxt_so_m_rresp ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] nxt_so_m_rlast ; 
    logic [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] nxt_so_m_ruser ; 
    //logic                      nxt_so_rready  ;
    //always @ (posedge aclk_i or negedge aresetn_i)
    //begin
    //   if(!aresetn_i)
    //   begin
    //      so_rready <= 1'b1;
    //   end
    //   else
    //   begin
    //      so_rready <= nxt_so_rready;
    //   end
    //end
    genvar i ; 
    generate
        for (i = 0;(i < TOTAL_EXTMAS_CNT);i = (i + 1))
        begin : genblk1
            always
            //for
                @(posedge aclk_i or 
                    negedge aresetn_i)
                begin
                    if ((!aresetn_i)) 
                        begin
                            si_rready_chk[i] <=  1'b0 ;
                            so_m_rvalid[i] <=  1'b0 ;
                            so_m_rdata[(i * EXT_SLV_AXI_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH] <=  {EXT_SLV_AXI_DATA_WIDTH{1'b0}} ;
                            so_m_rid[(i * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] <=  {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                            so_m_rresp[(i * 2) +: 2] <=  2'd0 ;
                            so_m_rlast[i] <=  1'b0 ;
                            so_m_ruser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH] <=  {AXI_USER_WIDTH{1'b0}} ;
                        end
                    else
                        begin
                            si_rready_chk[i] <=  nxt_si_rready_chk[i] ;
                            so_m_rvalid[i] <=  nxt_so_m_rvalid[i] ;
                            so_m_rdata[(i * EXT_SLV_AXI_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH] <=  nxt_so_m_rdata[(i * EXT_SLV_AXI_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH] ;
                            so_m_rid[(i * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] <=  nxt_so_m_rid[(i * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] ;
                            so_m_rresp[(i * 2) +: 2] <=  nxt_so_m_rresp[(i * 2) +: 2] ;
                            so_m_rlast[i] <=  nxt_so_m_rlast[i] ;
                            so_m_ruser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH] <=  nxt_so_m_ruser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ;
                        end
                end
            always
                @(*)
                begin
                    nxt_si_rready_chk[i] = si_rready_chk[i] ;
                    nxt_so_m_rvalid[i] = so_m_rvalid[i] ;
                    nxt_so_m_rdata[(i * EXT_SLV_AXI_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH] = so_m_rdata[(i * EXT_SLV_AXI_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH] ;
                    nxt_so_m_rid[(i * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = so_m_rid[(i * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] ;
                    nxt_so_m_rresp[(i * 2) +: 2] = so_m_rresp[(i * 2) +: 2] ;
                    nxt_so_m_rlast[i] = so_m_rlast[i] ;
                    nxt_so_m_ruser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = so_m_ruser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ;
                    if (so_m_rvalid[i]) 
                        begin
                            if ((((si_rvalid & so_rready) & (si_rid[AXI_ID_SLV_WIDTH:AXI_ID_MAS_WIDTH] == i)) & (!si_rready_chk[i]))) 
                                begin
                                    nxt_so_m_rvalid[i] = 1'b1 ;
                                    nxt_so_m_rdata[(i * EXT_SLV_AXI_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH] = si_rdata ;
                                    nxt_so_m_rid[(i * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = si_rid[(EXT_MAS_AXI_ID_WIDTH - 1):0] ;
                                    nxt_so_m_rresp[(i * 2) +: 2] = si_rresp ;
                                    nxt_so_m_rlast[i] = si_rlast ;
                                    nxt_so_m_ruser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = si_ruser ;
                                end
                            else
                                begin
                                    nxt_so_m_rvalid[i] = (si_m_rready[i] ? 1'b0 : so_m_rvalid[i]) ;
                                    nxt_so_m_rlast[i] = (si_m_rready[i] ? 1'b0 : so_m_rlast[i]) ;
                                    nxt_si_rready_chk[i] = ((si_rready_chk[i] & so_rready) ? 1'b0 : si_rready_chk[i]) ;
                                end
                        end
                    else
                        if ((((si_rvalid & so_rready) & (si_rid[AXI_ID_SLV_WIDTH:AXI_ID_MAS_WIDTH] == i)) & (!si_rready_chk[i]))) 
                            begin
                                nxt_si_rready_chk[i] = 1'b0 ;
                                nxt_so_m_rvalid[i] = 1'b1 ;
                                nxt_so_m_rdata[(i * EXT_SLV_AXI_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH] = si_rdata ;
                                nxt_so_m_rid[(i * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = si_rid[(EXT_MAS_AXI_ID_WIDTH - 1):0] ;
                                nxt_so_m_rresp[(i * 2) +: 2] = si_rresp ;
                                nxt_so_m_rlast[i] = si_rlast ;
                                nxt_so_m_ruser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = si_ruser ;
                            end
                        else
                            if ((si_rvalid & (si_rid[AXI_ID_SLV_WIDTH:AXI_ID_MAS_WIDTH] == i))) 
                                begin
                                    nxt_si_rready_chk[i] = ((si_rready_chk[i] & so_rready) ? 1'b0 : 1'b1) ;
                                    nxt_so_m_rvalid[i] = ((si_rready_chk[i] & so_rready) ? 1'b0 : 1'b1) ;
                                    nxt_so_m_rdata[(i * EXT_SLV_AXI_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH] = si_rdata ;
                                    nxt_so_m_rid[(i * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = si_rid[(EXT_MAS_AXI_ID_WIDTH - 1):0] ;
                                    nxt_so_m_rresp[(i * 2) +: 2] = si_rresp ;
                                    nxt_so_m_rlast[i] = si_rlast ;
                                    nxt_so_m_ruser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = si_ruser ;
                                end
                            else
                                begin
                                    nxt_so_m_rvalid[i] = (si_m_rready[i] ? 1'b0 : so_m_rvalid[i]) ;
                                end
                end
        end
    endgenerate
    integer ext_mas_cnt ; 
    always
        @(*)
        begin
            so_rready = 1'b0 ;
            for (ext_mas_cnt = 0 ; (ext_mas_cnt < TOTAL_EXTMAS_CNT) ; ext_mas_cnt = (ext_mas_cnt + 1))
                begin
                    if ((si_rid[AXI_ID_SLV_WIDTH:AXI_ID_MAS_WIDTH] == ext_mas_cnt)) 
                        begin
                            so_rready = si_m_rready[ext_mas_cnt] ;
                        end
                    else
                        ; 
                end
        end
endmodule



module axi4_interconnect_ipgen_ext_slv_wrresp_ifc (aclk_i, 
        aresetn_i, 
        si_bvalid, 
        si_bid, 
        si_bresp, 
        si_buser, 
        so_bready, 
        so_m_bvalid, 
        so_m_bid, 
        so_m_bresp, 
        so_m_buser, 
        si_m_bready) ;
    parameter TOTAL_EXTMAS_CNT = 32 ; 
    parameter EXT_SLV_AXI_ID_WIDTH = 11 ; 
    parameter EXT_MAS_AXI_ID_WIDTH = 6 ; 
    parameter AXI_USER_WIDTH = 11 ; 
    localparam AXI_ID_SLV_WIDTH = (((TOTAL_EXTMAS_CNT == 1) && (EXT_SLV_AXI_ID_WIDTH == EXT_MAS_AXI_ID_WIDTH)) ? 0 : (EXT_SLV_AXI_ID_WIDTH - 1)) ; 
    localparam AXI_ID_MAS_WIDTH = (((TOTAL_EXTMAS_CNT == 1) && (EXT_SLV_AXI_ID_WIDTH == EXT_MAS_AXI_ID_WIDTH)) ? 0 : EXT_MAS_AXI_ID_WIDTH) ; 
    //*********************************INPUTS & OUTPUTS************************************
    input aclk_i ; 
    input aresetn_i ; 
    input si_bvalid ; 
    input [1:0] si_bresp ; 
    input [(EXT_SLV_AXI_ID_WIDTH - 1):0] si_bid ; 
    input [(AXI_USER_WIDTH - 1):0] si_buser ; 
    output logic so_bready ; 
    output logic [(TOTAL_EXTMAS_CNT - 1):0] so_m_bvalid ; 
    output logic [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] so_m_bid ; 
    output logic [((TOTAL_EXTMAS_CNT * 2) - 1):0] so_m_bresp ; 
    output logic [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] so_m_buser ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] si_m_bready ; 
    //genvar i;
    //generate
    //
    //for ( i = 0; i < TOTAL_EXTMAS_CNT; i = i+1 )
    //begin
    //
    //assign so_m_bvalid[i]                                             = si_bvalid & so_bready ? 1'b0 : si_bvalid & (si_bid[EXT_SLV_AXI_ID_WIDTH-1:EXT_MAS_AXI_ID_WIDTH] == i);
    //assign so_m_bresp [i*2 +:2]                                       = si_bresp;
    //assign so_m_bid   [i*EXT_MAS_AXI_ID_WIDTH +:EXT_MAS_AXI_ID_WIDTH] = si_bid[EXT_MAS_AXI_ID_WIDTH-1:0] ; 
    //assign so_m_buser [i*AXI_USER_WIDTH +:AXI_USER_WIDTH] = si_buser;
    //end
    //endgenerate
    genvar i ; 
    generate
        for (i = 0;(i < TOTAL_EXTMAS_CNT);i = (i + 1))
        begin : genblk1
            always
            //for
                @(posedge aclk_i or 
                    negedge aresetn_i)
                begin
                    if ((!aresetn_i)) 
                        begin
                            so_m_bvalid[i] <=  1'b0 ;
                            so_m_bresp[(i * 2) +: 2] <=  2'd0 ;
                            so_m_bid[(i * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] <=  {EXT_MAS_AXI_ID_WIDTH{1'b0}} ;
                            so_m_buser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH] <=  {AXI_USER_WIDTH{1'b0}} ;
                        end
                    else
                        begin
                            so_m_bvalid[i] <=  (so_m_bvalid[i] ? (si_m_bready[i] ? 1'b0 : so_m_bvalid[i]) : (si_bvalid & (si_bid[AXI_ID_SLV_WIDTH:AXI_ID_MAS_WIDTH] == i))) ;
                            //so_m_bvalid[i]                                             <= (so_m_bvalid[i] & si_m_bready[i]) ? 1'b0  : (si_bvalid & (si_bid[EXT_SLV_AXI_ID_WIDTH-1:EXT_MAS_AXI_ID_WIDTH] == i) ) ; 
                            so_m_bresp[(i * 2) +: 2] <=  si_bresp ;
                            so_m_bid[(i * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] <=  si_bid[(EXT_MAS_AXI_ID_WIDTH - 1):0] ;
                            so_m_buser[(i * AXI_USER_WIDTH) +: AXI_USER_WIDTH] <=  si_buser ;
                        end
                end
        end
    endgenerate
    //logic                           nxt_so_bready;
    //always @ (posedge aclk_i or negedge aresetn_i)
    //begin
    //   if(!aresetn_i)
    //   begin
    //      so_bready <= 1'b1;
    //   end
    //   else
    //   begin
    //      so_bready <= nxt_so_bready;
    //   end
    //end
    integer ext_mas_cnt ; 
    always
        @(*)
        begin
            so_bready = 1'b0 ;
            for (ext_mas_cnt = 0 ; (ext_mas_cnt < TOTAL_EXTMAS_CNT) ; ext_mas_cnt = (ext_mas_cnt + 1))
                begin
                    if ((si_bid[AXI_ID_SLV_WIDTH:AXI_ID_MAS_WIDTH] == ext_mas_cnt)) 
                        begin
                            so_bready = si_m_bready[ext_mas_cnt] ;
                        end
                    else
                        ; 
                end
        end
endmodule



module axi4_interconnect_ipgen_fixed_arb (aclk_i, 
        aresetn_i, 
        input_req_i, 
        req_gnt_o) ;
    parameter REQ_WIDTH = 32 ; 
    parameter [((REQ_WIDTH * 5) - 1):0] FIXED_GNT = {(REQ_WIDTH * 5){1'b0}} ; 
    //parameter [((REQ_WIDTH*5)+6)-1:0] FIXED_GNT = {6'd0,{REQ_WIDTH*5{1'b0}}};
    //parameter [3*5-1:0] FIXED_GNT = {5'd2, 5'd0, 5'd1};
    input aclk_i ; 
    input aresetn_i ; 
    input [(REQ_WIDTH - 1):0] input_req_i ; 
    output logic [(REQ_WIDTH - 1):0] req_gnt_o ; 
    logic [(REQ_WIDTH - 1):0] req_in ; 
    logic [(REQ_WIDTH - 1):0] req_in_negate ; 
    logic [(REQ_WIDTH - 1):0] gnt_int ; 
    logic [(REQ_WIDTH - 1):0] gnt ; 
    logic valid ; 
    always
        @(posedge aclk_i or 
            negedge aresetn_i)
        begin
            if ((!aresetn_i)) 
            //req_gnt_o<= valid ? gnt : req_gnt_o;
                req_gnt_o <=  {REQ_WIDTH{1'b0}} ;
            else
                req_gnt_o <=  (valid ? gnt : {REQ_WIDTH{1'b0}}) ;
        end
    assign valid = (|req_in) ; 
    //assign req_in[0]  = input_req_i[1];
    //assign req_in[1]  = input_req_i[0];
    //assign req_in[2]  = input_req_i[2];
    //assign gnt[1] = gnt_int[0];
    //assign gnt[0] = gnt_int[1];
    //assign gnt[2] = gnt_int[2];
    genvar i ; 
    generate
        for (i = 0;(i < REQ_WIDTH);i = (i + 1))
        begin : genblk1
            //assign req_in[i]  = input_req_i[i];
            //assign req_in[FIXED_GNT[((5+(5*i))-1):(5*i)]]  = input_req_i[i];
            assign req_in[FIXED_GNT[((5 + (5 * i)) - 1):(5 * i)]] = input_req_i[i] ; 
            assign gnt[i] = gnt_int[FIXED_GNT[((5 + (5 * i)) - 1):(5 * i)]] ; 
        end
    endgenerate
    assign gnt_int = (req_in & (-req_in)) ; 
    assign req_in_negate = (-req_in) ; 
endmodule



module axi4_interconnect_ipgen_fixed_arb_ext_mas (aclk_i, 
        aresetn_i, 
        input_req_i, 
        req_gnt_o) ;
    parameter REQ_WIDTH = 32 ; 
    parameter [((REQ_WIDTH * 5) - 1):0] FIXED_GNT = {(REQ_WIDTH * 5){1'b0}} ; 
    //parameter [((REQ_WIDTH*5)+6)-1:0] FIXED_GNT = {6'd0,{REQ_WIDTH*5{1'b0}}};
    //parameter [3*5-1:0] FIXED_GNT = {5'd2, 5'd0, 5'd1};
    input aclk_i ; 
    input aresetn_i ; 
    input [(REQ_WIDTH - 1):0] input_req_i ; 
    output logic [(REQ_WIDTH - 1):0] req_gnt_o ; 
    logic [(REQ_WIDTH - 1):0] req_in ; 
    logic [(REQ_WIDTH - 1):0] gnt ; 
    logic [(REQ_WIDTH - 1):0] gnt_int ; 
    logic valid ; 
    //assign gnt[2]= gnt_int[2];
    //assign gnt[1]= gnt_int[0];
    //assign gnt[0]= gnt_int[1];
    always
        @(posedge aclk_i or 
            negedge aresetn_i)
        begin
            if ((!aresetn_i)) 
                req_gnt_o <=  {REQ_WIDTH{1'b0}} ;
            else
                req_gnt_o <=  (valid ? gnt : req_gnt_o) ;
        end
    assign valid = (|req_in) ; 
    //reg [4:0] test0, test1, test2,test3, test4, test5,test6, test7, test8,test30, test31;
    //
    //assign test0 = FIXED_GNT[4:0];
    //assign test1 = FIXED_GNT[9:5];
    //assign test2 = FIXED_GNT[14:10];
    //assign test3 = FIXED_GNT[19:15];
    //assign test4 = FIXED_GNT[24:20];
    //assign test5 = FIXED_GNT[29:25];
    //assign test6 = FIXED_GNT[34:30];
    //assign test7 = FIXED_GNT[39:35];
    //assign test8 = FIXED_GNT[44:40];
    //assign test30 = FIXED_GNT[154:150];
    //assign test31 = FIXED_GNT[159:155];
    genvar i ; 
    generate
        for (i = 0;(i < REQ_WIDTH);i = (i + 1))
        begin : genblk1
            //assign req_in[i]  = input_req_i[i];
            if ((i == (REQ_WIDTH - 1))) 
                begin : genblk1
                    assign req_in[i] = input_req_i[i] ; 
                    assign gnt[i] = gnt_int[i] ; 
                end
            else
                begin : genblk1
                    assign req_in[FIXED_GNT[((5 + (5 * i)) - 1):(5 * i)]] = input_req_i[i] ; 
                    assign gnt[i] = gnt_int[FIXED_GNT[((5 + (5 * i)) - 1):(5 * i)]] ; 
                end
        end
    endgenerate
    assign gnt_int = (req_in & (-req_in)) ; 
endmodule



module axi4_interconnect_ipgen_gen_fifo (clk, 
        aresetn_i, 
        we, 
        wdata, 
        re, 
        rdata, 
        full, 
        pre_full, 
        empty) ;
    parameter PTR_WIDTH = 3 ; // Pointer Width
    parameter DATA_WIDTH = 1 ; // Data Width
    parameter FLOP = 0 ; // Whether Output needs to be logicistered or not
    parameter DEPTH = 1 ; // Number of entries in FIFO
    //===================================================================================
    input clk ; 
    input aresetn_i ; 
    input we ; 
    input [(DATA_WIDTH - 1):0] wdata ; 
    input re ; 
    output [(DATA_WIDTH - 1):0] rdata ; 
    output empty ; 
    output full ; 
    output pre_full ; 
    //===================================================================================
    logic [(PTR_WIDTH - 1):0] wr_ptr ; 
    logic [(PTR_WIDTH - 1):0] rd_ptr ; 
    logic [PTR_WIDTH:0] wr_rd_cnt ; 
    //===================================================================================
    assign full = (wr_rd_cnt == DEPTH) ; 
    assign pre_full = (wr_rd_cnt == (DEPTH - 1)) ; 
    assign empty = (~(|wr_rd_cnt)) ; 
    always
        @(posedge clk or 
            negedge aresetn_i)
        begin
            if ((!aresetn_i)) 
                wr_ptr <=  {PTR_WIDTH{1'b0}} ;
            else
                begin
                    if (we) 
                        begin
                            if ((wr_ptr == (DEPTH - 1))) 
                                wr_ptr <=  {PTR_WIDTH{1'b0}} ;
                            else
                                wr_ptr <=  (wr_ptr + 1'b1) ;
                        end
                end
        end
    always
        @(posedge clk or 
            negedge aresetn_i)
        begin
            if ((!aresetn_i)) 
                rd_ptr <=  {PTR_WIDTH{1'b0}} ;
            else
                begin
                    if (re) 
                        begin
                            if ((rd_ptr == (DEPTH - 1))) 
                                rd_ptr <=  {PTR_WIDTH{1'b0}} ;
                            else
                                rd_ptr <=  (rd_ptr + 1'b1) ;
                        end
                end
        end
    always
        @(posedge clk or 
            negedge aresetn_i)
        begin
            if ((!aresetn_i)) 
                wr_rd_cnt <=  {(PTR_WIDTH + 1){1'b0}} ;
            else
                begin
                    if ((we & (~re))) 
                        wr_rd_cnt <=  (wr_rd_cnt + 1'b1) ;
                    else
                        if ((re & (~we))) 
                            wr_rd_cnt <=  (wr_rd_cnt - 1'b1) ;
                end
        end
    axi4_interconnect_ipgen_gen_memfile #(PTR_WIDTH,
            DATA_WIDTH,
            FLOP,
            DEPTH) u_gen_memfile (.wclk(clk), 
                .we(we), 
                .waddr(wr_ptr), 
                .wdata(wdata), 
                .rclk(clk), 
                .re(re), 
                .raddr(rd_ptr), 
                .rdata(rdata)) ; 

// gen_fifo
endmodule



// Generic asynchronous FIFO controller.
// This module does not include the actual data storage
// element (register bank or SRAM).  The datapath is outside
// this control module.
//
module axi4_interconnect_ipgen_gen_fifo_async_ctl (// Outputs
    wdepth, 
        rdepth, 
        ram_write_strobe, 
        ram_write_addr, 
        ram_read_strobe, 
        ram_read_addr, 
        full, 
        pre_full, 
        empty, 
        dout_v, 
        // Inputs
    wusable, 
        wreset, 
        wclk, 
        rusable, 
        rreset, 
        rclk, 
        push, 
        pop) ;
    parameter PTR_WIDTH = 1 ; 
    input pop ; // Read data out of fifo
    input push ; // Write data into fifo
    input rclk ; // Read clock
    input rreset ; // Read side reset
    input rusable ; // Read side usable
    input wclk ; // Write clock
    input wreset ; // Write side reset
    input wusable ; // Write side usable
    output dout_v ; // Read data valid (read side)
    output empty ; // Fifo empty (read side)
    output full ; // Fifo full (write side)
    output pre_full ; // Fifo pre full (write side)
    output [(PTR_WIDTH - 1):0] ram_read_addr ; // Read address
    output ram_read_strobe ; // Read strobe
    output [(PTR_WIDTH - 1):0] ram_write_addr ; // Write address
    output ram_write_strobe ; // Write  strobe
    output [PTR_WIDTH:0] rdepth ; // Depth (as seen on read side)
    output [PTR_WIDTH:0] wdepth ; // Depth (as seen on write side)
    wire [PTR_WIDTH:0] far_read_addr_gray ; // Gray coded read pointer
    wire [PTR_WIDTH:0] faw_write_addr_gray ; // Gray coded write pointer
    //==========================
    // Code starts here...
    //==========================
    axi4_interconnect_ipgen_gen_fifo_async_rdctl #(PTR_WIDTH) far (// Outputs
            .far_dout_v(dout_v), 
                .far_depth(rdepth[PTR_WIDTH:0]), 
                .far_empty(empty), 
                .far_read_addr_gray(far_read_addr_gray[PTR_WIDTH:0]), 
                .far_ram_read_addr(ram_read_addr[(PTR_WIDTH - 1):0]), 
                .far_ram_read_strobe(ram_read_strobe), 
                // Inputs
            .rclk(rclk), 
                .rreset(rreset), 
                .rusable(rusable), 
                .pop(pop), 
                .faw_write_addr_gray(faw_write_addr_gray[PTR_WIDTH:0])) ; 
    axi4_interconnect_ipgen_gen_fifo_async_wrctl #(PTR_WIDTH) faw (// Outputs
            .faw_depth(wdepth[PTR_WIDTH:0]), 
                .faw_full(full), 
                .faw_pre_full(pre_full), 
                .faw_write_addr_gray(faw_write_addr_gray[PTR_WIDTH:0]), 
                .faw_ram_write_addr(ram_write_addr[(PTR_WIDTH - 1):0]), 
                .faw_ram_write_strobe(ram_write_strobe), 
                // Inputs
            .wclk(wclk), 
                .wreset(wreset), 
                .wusable(wusable), 
                .push(push), 
                .far_read_addr_gray(far_read_addr_gray[PTR_WIDTH:0])) ; 
endmodule



// read controller for asynchronous FIFOs.
module axi4_interconnect_ipgen_gen_fifo_async_rdctl (// Outputs
    far_dout_v, 
        far_depth, 
        far_empty, 
        far_read_addr_gray, 
        far_ram_read_addr, 
        far_ram_read_strobe, 
        // Inputs
    rclk, 
        pop, 
        rreset, 
        rusable, 
        faw_write_addr_gray) ;
    parameter PTR_WIDTH = 1 ; 
    // external interface
    input rclk ; // read clock.
    input rreset ; // read reset.
    input rusable ; // signal from write clock 
    // is usable in read clock.
    input pop ; // read from FIFO.
    output far_dout_v ; // data from RAM is valid.
    output [PTR_WIDTH:0] far_depth ; // current FIFO depth as viewed 
    // in the read clock domain.
    output far_empty ; // FIFO empty as viewed in the 
    // read clock domain.
    // fifo_async_wrctl interface
    input [PTR_WIDTH:0] faw_write_addr_gray ; // gray-coded write address 
    // from write clock domain.
    output [PTR_WIDTH:0] far_read_addr_gray ; // gray-coded read address 
    // from read clock domain.
    // RAM interface
    output [(PTR_WIDTH - 1):0] far_ram_read_addr ; // binary-coded RAM read address
    // pointer.
    output far_ram_read_strobe ; // RAM read strobe.
    wire [PTR_WIDTH:0] write_addr_gray_d2 ; // stage 2 sync of gray
    // coded write address.
    wire [PTR_WIDTH:0] write_addr_binary_d2 ; // stage 2 binary-coded 
    // write address.
    reg [PTR_WIDTH:0] Write_addr_binary_d3 ; // stage 3 binary-coded 
    // write address.
    reg Data_out_valid ; // data out is valid.
    reg [PTR_WIDTH:0] Fifo_depth ; // current FIFO depth.
    reg Fifo_empty ; // current FIFO empty.
    reg [PTR_WIDTH:0] Read_addr_binary ; // current binary-coded 
    // read address.
    wire [PTR_WIDTH:0] fifo_depth_next ; // FIFO depth next cycle
    wire fifo_empty_next ; // FIFO empty next cycle
    wire [PTR_WIDTH:0] read_addr_binary_next ; // binary-coded read 
    // address next cycle.
    wire [PTR_WIDTH:0] wr_rd_addr_gap ; // gap between write add
    // and read address.
    wire [PTR_WIDTH:0] wr_rd_addr_gap_minus_1 ; // decremented gap 
    // between write address
    // and read address.
    wire [PTR_WIDTH:0] read_addr_binary_plus_1 ; // incremented current 
    // binary-coded read 
    // address.
    wire [PTR_WIDTH:0] read_addr_gray ; // current gray-coded 
    // read address.
    wire pop_final ; 
    //=============================
    // Code starts here...
    //=============================
    assign pop_final = (pop & (~Fifo_empty)) ; 
    // synchronize faw_write_addr_gray
    axi4_interconnect_ipgen_gen_sync_scalar #((PTR_WIDTH + 1)) ss_wraddr_gray (.in(faw_write_addr_gray), 
                .out(write_addr_gray_d2), 
                .reset(rreset), 
                .clk(rclk)) ; 
    //always @ (posedge rclk or posedge rreset ) begin
    //      // register the binary-coded write address just converted from gray-code.
    //      // We only use write_addr_binary_d2 when it is usable as indicated 
    //      // by rusable.
    //
    //      Write_addr_binary_d3 	<= (rusable ? write_addr_binary_d2 
    //					: {PTR_WIDTH+1{1'b0}});
    //      Data_out_valid		<= pop_final;
    //      Fifo_empty		<= (rreset ? 1'b1 : fifo_empty_next);
    //      Fifo_depth		<= (rreset ? {PTR_WIDTH+1{1'b0}} 
    //					: fifo_depth_next);
    //      Read_addr_binary		<= (rreset ? {PTR_WIDTH+1{1'b0}} 
    //					: read_addr_binary_next);
    //end
    always
        @(posedge rclk or 
            posedge rreset)
        begin
            //always @ (posedge rclk ) begin
            // register the binary-coded write address just converted from gray-code.
            // We only use write_addr_binary_d2 when it is usable as indicated 
            // by rusable.
            if (rreset) 
                begin
                    Write_addr_binary_d3 <=  {(PTR_WIDTH + 1){1'b0}} ;
                end
            else
                begin
                    Write_addr_binary_d3 <=  (rusable ? write_addr_binary_d2 : {(PTR_WIDTH + 1){1'b0}}) ;
                end
        end
    always
        @(posedge rclk or 
            posedge rreset)
        begin
            // register the binary-coded write address just converted from gray-code.
            // We only use write_addr_binary_d2 when it is usable as indicated 
            // by rusable.
            if (rreset) 
                begin
                    Data_out_valid <=  1'b0 ;
                    Fifo_empty <=  1'b1 ;
                    Fifo_depth <=  {(PTR_WIDTH + 1){1'b0}} ;
                    Read_addr_binary <=  {(PTR_WIDTH + 1){1'b0}} ;
                end
            else
                begin
                    Data_out_valid <=  pop_final ;
                    Fifo_empty <=  fifo_empty_next ;
                    Fifo_depth <=  fifo_depth_next ;
                    Read_addr_binary <=  read_addr_binary_next ;
                end
        end
    // convert gray-coded write address into binary-coded write address.
    axi4_interconnect_ipgen_gen_gray2binary #((PTR_WIDTH + 1)) waconv (.dout(write_addr_binary_d2), 
                .din(write_addr_gray_d2)) ; 
    // generate FIFO depth in the next cycle.
    assign wr_rd_addr_gap = (Write_addr_binary_d3 - Read_addr_binary) ; 
    assign wr_rd_addr_gap_minus_1 = (wr_rd_addr_gap - 1'b1) ; 
    axi4_interconnect_ipgen_gen_mux2 #((PTR_WIDTH + 1)) depthmux (.sel(pop_final), 
                .z(fifo_depth_next), 
                .d0(wr_rd_addr_gap), 
                .d1(wr_rd_addr_gap_minus_1)) ; 
    // generate FIFO empty in the next cycle.
    assign fifo_empty_next = (fifo_depth_next == {(PTR_WIDTH + 1){1'b0}}) ; 
    // generate binary read address in the next cycle.
    assign read_addr_binary_plus_1 = (Read_addr_binary + 1'b1) ; 
    axi4_interconnect_ipgen_gen_mux2 #((PTR_WIDTH + 1)) ramux (.sel(pop_final), 
                .z(read_addr_binary_next), 
                .d0(Read_addr_binary), 
                .d1(read_addr_binary_plus_1)) ; 
    // generate gray read address in the current cycle.
    axi4_interconnect_ipgen_gen_gray_counter #((PTR_WIDTH + 1)) ragc (.count(read_addr_gray), 
                .clk(rclk), 
                .reset(rreset), 
                .enable(pop_final)) ; 
    //---------------------
    // other outputs
    //---------------------
    assign far_dout_v = Data_out_valid ; 
    assign far_depth = Fifo_depth ; 
    assign far_empty = Fifo_empty ; 
    assign far_read_addr_gray = read_addr_gray ; 
    assign far_ram_read_strobe = pop_final ; 
    assign far_ram_read_addr = Read_addr_binary[(PTR_WIDTH - 1):0] ; 
endmodule



// write controller for asynchronous FIFOs.
module axi4_interconnect_ipgen_gen_fifo_async_wrctl (// Outputs
    faw_depth, 
        faw_full, 
        faw_pre_full, 
        faw_write_addr_gray, 
        faw_ram_write_addr, 
        faw_ram_write_strobe, 
        // Inputs
    wclk, 
        wreset, 
        wusable, 
        push, 
        far_read_addr_gray) ;
    parameter PTR_WIDTH = 1 ; 
    // external interface
    input wclk ; // write clock.
    input wreset ; // write reset.
    input wusable ; // signal from read clock is 
    // usable in wclk.
    input push ; // write to FIFO.
    output [PTR_WIDTH:0] faw_depth ; // current FIFO depth as viewed 
    // in the write clock domain.
    output faw_full ; // FIFO full as viewed in the 
    output faw_pre_full ; 
    // fifo_async_rdctl interface
    input [PTR_WIDTH:0] far_read_addr_gray ; // gray-coded read address from 
    // read clock domain.
    output [PTR_WIDTH:0] faw_write_addr_gray ; // gray-coded write address from
    // write clock domain.
    // RAM interface
    output [(PTR_WIDTH - 1):0] faw_ram_write_addr ; // binary-coded RAM write 
    // add pointer.
    output faw_ram_write_strobe ; // RAM write strobe.
    wire [PTR_WIDTH:0] read_addr_gray_d2 ; // stage 2 sync of gray
    // coded read address.
    wire [PTR_WIDTH:0] read_addr_binary_d2 ; // stage 2 binary-coded 
    // read address.
    reg [PTR_WIDTH:0] Read_addr_binary_d3 ; // stage 3 binary-coded 
    // read address.
    reg [PTR_WIDTH:0] Fifo_depth ; // current FIFO depth.
    reg Fifo_full ; // current FIFO full.
    reg Fifo_pre_full ; // current FIFO full.
    reg [PTR_WIDTH:0] Write_addr_binary ; // current binary-coded 
    // write address.
    wire [PTR_WIDTH:0] fifo_depth_next ; // FIFO depth next cycle
    wire fifo_full_next ; // FIFO full next cycle.
    wire fifo_pre_full_next ; // FIFO full next cycle.
    wire [PTR_WIDTH:0] write_addr_binary_next ; // binary-coded write 
    // address next cycle.
    wire [PTR_WIDTH:0] wr_rd_addr_gap ; // gap between write 
    // address and read addr
    wire [PTR_WIDTH:0] wr_rd_addr_gap_plus_1 ; // incremented gap 								// between write 
    // address and read
    // address.
    wire [PTR_WIDTH:0] write_addr_binary_plus_1 ; // incremented current 
    // binary-coded write 
    // address.
    wire [PTR_WIDTH:0] write_addr_gray ; // current gray-coded 
    // write address.
    wire push_final ; 
    //=============================
    // Code starts here...
    //=============================
    assign push_final = (push & (~Fifo_full)) ; 
    // synchronize far_read_addr_gray
    axi4_interconnect_ipgen_gen_sync_scalar #((PTR_WIDTH + 1)) ss_rdaddr_gray (.in(far_read_addr_gray), 
                .out(read_addr_gray_d2), 
                .reset(wreset), 
                .clk(wclk)) ; 
    //always @ (posedge wclk ) begin
    always
        @(posedge wclk or 
            posedge wreset)
        begin
            // register the binary-coded read address just converted from gray-code.
            // We only use read_addr_binary_d2 when it is usable as indicated by 
            // wusable.
            if (wreset) 
                begin
                    Read_addr_binary_d3 <=  {(PTR_WIDTH + 1){1'b0}} ;
                end
            else
                begin
                    Read_addr_binary_d3 <=  (wusable ? read_addr_binary_d2 : {(PTR_WIDTH + 1){1'b0}}) ;
                end
        end
    always
        @(posedge wclk or 
            posedge wreset)
        begin
            // register the binary-coded read address just converted from gray-code.
            // We only use read_addr_binary_d2 when it is usable as indicated by 
            // wusable.
            if (wreset) 
                begin
                    Fifo_full <=  1'b0 ;
                    Fifo_pre_full <=  1'b0 ;
                    Fifo_depth <=  {(PTR_WIDTH + 1){1'b0}} ;
                    Write_addr_binary <=  {(PTR_WIDTH + 1){1'b0}} ;
                end
            else
                begin
                    Fifo_full <=  fifo_full_next ;
                    Fifo_pre_full <=  fifo_pre_full_next ;
                    Fifo_depth <=  fifo_depth_next ;
                    Write_addr_binary <=  write_addr_binary_next ;
                end
        end
    // convert gray-coded read address into binary-coded read address.
    axi4_interconnect_ipgen_gen_gray2binary #((PTR_WIDTH + 1)) raconv (.dout(read_addr_binary_d2), 
                .din(read_addr_gray_d2)) ; 
    // generate FIFO depth in the next cycle.
    assign wr_rd_addr_gap = (Write_addr_binary - Read_addr_binary_d3) ; 
    assign wr_rd_addr_gap_plus_1 = (wr_rd_addr_gap + 1'b1) ; 
    axi4_interconnect_ipgen_gen_mux2 #((PTR_WIDTH + 1)) depthmux (.sel(push_final), 
                .z(fifo_depth_next), 
                .d0(wr_rd_addr_gap), 
                .d1(wr_rd_addr_gap_plus_1)) ; 
    // generate FIFO full in the next cycle.
    assign fifo_full_next = (fifo_depth_next == {1'b1,
                {PTR_WIDTH{1'b0}}}) ; 
    assign fifo_pre_full_next = ((|fifo_depth_next) ? (fifo_depth_next == ({1'b1,
                {PTR_WIDTH{1'b0}}} - 1)) : 1'b0) ; 
    // generate binary write address in the next cycle.
    assign write_addr_binary_plus_1 = (Write_addr_binary + 1'b1) ; 
    axi4_interconnect_ipgen_gen_mux2 #((PTR_WIDTH + 1)) wamux (.sel(push_final), 
                .z(write_addr_binary_next), 
                .d0(Write_addr_binary), 
                .d1(write_addr_binary_plus_1)) ; 
    // generate gray write address in the current cycle.
    axi4_interconnect_ipgen_gen_gray_counter #((PTR_WIDTH + 1)) wagc (.count(write_addr_gray), 
                .clk(wclk), 
                .reset(wreset), 
                .enable(push_final)) ; 
    //---------------------
    // other outputs
    //---------------------
    assign faw_depth = Fifo_depth ; 
    assign faw_full = Fifo_full ; 
    assign faw_pre_full = Fifo_pre_full ; 
    assign faw_write_addr_gray = write_addr_gray ; 
    assign faw_ram_write_strobe = push_final ; 
    assign faw_ram_write_addr = Write_addr_binary[(PTR_WIDTH - 1):0] ; 
endmodule



// Generate a binary representation of a gray coded
// number.  Module is purely combinational
//
// Required parameters:
//   WIDTH -- sets bit width of gray/binary number
module axi4_interconnect_ipgen_gen_gray2binary (// inputs
    din, 
        // outputs
    dout) ;
    parameter WIDTH = 2 ; 
    input [(WIDTH - 1):0] din ; 
    output [(WIDTH - 1):0] dout ; 
    reg [(WIDTH - 1):0] dout ; 
    integer i ; 
    always
        @(din)
        begin
            for (i = 0 ; (i < WIDTH) ; i = (i + 1))
                begin
                    dout[i] = (^(din >> i)) ;
                end
        end
endmodule



// Gray code counter with enable and synchronous reset.
// Required parameters:
//   WIDTH -- Sets the bit width of counter
module axi4_interconnect_ipgen_gen_gray_counter (count, 
        clk, 
        reset, 
        enable) ;
    parameter WIDTH = 2 ; // counter width.
    input enable ; // counter enable.
    input reset ; 
    input clk ; 
    output [(WIDTH - 1):0] count ; // counter value.
    reg [(WIDTH - 1):0] count ; // gray counter current value.
    integer i ; // loop index
    reg [(WIDTH - 1):0] gnext ; 
    reg [(WIDTH - 1):0] bnext ; 
    reg [(WIDTH - 1):0] bin ; 
    //==========================
    // Code starts here...
    //==========================
    always
        @(posedge clk or 
            posedge reset)
        begin
            if (reset) 
                count <=  {WIDTH{1'b0}} ;
            else
                count <=  gnext ;
        end
    // calculate next value for bit
    always
        @(count or 
            enable)
        begin
            for (i = 0 ; (i < WIDTH) ; i = (i + 1))
                bin[i] = (^(count >> i)) ;
            bnext = (bin + {{(WIDTH - 1){1'b0}},
                    enable}) ;
            gnext = ((bnext >> 1) ^ bnext) ;
        end
endmodule



// Simple, parameterized, 2-input MUX.
// Suitable for helping force Synopsys to obey your critical paths.
module axi4_interconnect_ipgen_gen_mux2 (// Outputs
    z, 
        // Inputs
    d0, 
        d1, 
        sel) ;
    parameter WIDTH = 1 ; 
    input [(WIDTH - 1):0] d0 ; // data input used when sel is 0
    input [(WIDTH - 1):0] d1 ; // data input used when sel is 1
    input sel ; // MUX select signal
    output [(WIDTH - 1):0] z ; // output
    assign z = (sel ? d1 : d0) ; 
endmodule



module axi4_interconnect_ipgen_gen_memfile (wclk, 
        we, 
        waddr, 
        wdata, 
        rclk, 
        re, 
        raddr, 
        rdata) ;
    parameter PTR_WIDTH = 3 ; 
    parameter DATA_WIDTH = 1 ; 
    parameter FLOP = 0 ; 
    parameter DEPTH = 8 ; 
    input wclk ; 
    input we ; 
    input [(PTR_WIDTH - 1):0] waddr ; 
    input [(DATA_WIDTH - 1):0] wdata ; 
    input rclk ; 
    input re ; 
    input [(PTR_WIDTH - 1):0] raddr ; 
    output [(DATA_WIDTH - 1):0] rdata ; 
    logic [(DATA_WIDTH - 1):0] Ram [0:(DEPTH - 1)] ; 
    logic [(DATA_WIDTH - 1):0] rdata_reg ; 
    wire bypass = (we & (waddr == raddr)) ; 
    always
        @(posedge wclk)
        begin
            if (we) 
                Ram[waddr] <=  wdata ;
        end
    always
        @(posedge rclk)
        begin
            if (re) 
                begin
                    rdata_reg <=  (bypass ? wdata : Ram[raddr]) ;
                end
        end
    assign rdata = (FLOP ? rdata_reg : Ram[raddr]) ; 

// gen_memfile
endmodule



module axi4_interconnect_ipgen_gen_sync_scalar (// Outputs
    out, 
        // Inputs
    clk, 
        reset, 
        in) ;
    parameter WIDTH = 1 ; 
    input clk ; // Clock
    input reset ; 
    input [(WIDTH - 1):0] in ; // Input signal
    output [(WIDTH - 1):0] out ; // Output signal
    reg [(WIDTH - 1):0] intermediate ; // Stage 1 of synchronizer
    reg [(WIDTH - 1):0] out ; // Stage 2 of synchronizer
    // Used for async behavioral modelling
    always
        @(posedge clk or 
            posedge reset)
        begin
            if (reset) 
                begin
                    intermediate <=  {WIDTH{1'b0}} ;
                    out <=  {WIDTH{1'b0}} ;
                end
            else
                begin
                    intermediate <=  in ;
                    out <=  intermediate ;
                end
        end
endmodule



`timescale 1ns/1ps
module axi4_interconnect_ipgen_lscc_axi_interconnect (// Input/Output Ports
    axi_aclk_i, 
        axi_aresetn_i, 
        // AXI External Master Write Address
    axi_s_aclk_i, 
        axi_s_aclken_i, 
        axi_s_aresetn_i, 
        axi_s_awvalid_i, 
        axi_s_awaddr_i, 
        axi_s_awsize_i, 
        axi_s_awlen_i, 
        axi_s_awburst_i, 
        axi_s_awcache_i, 
        axi_s_awid_i, 
        axi_s_awprot_i, 
        axi_s_awlock_i, 
        axi_s_awqos_i, 
        axi_s_awregion_i, 
        axi_s_awuser_i, 
        axi_s_awready_o, 
        axi_s_wvalid_i, 
        axi_s_wdata_i, 
        axi_s_wstrb_i, 
        axi_s_wuser_i, 
        axi_s_wlast_i, 
        axi_s_wready_o, 
        axi_s_bvalid_o, 
        axi_s_bid_o, 
        axi_s_bresp_o, 
        axi_s_buser_o, 
        axi_s_bready_i, 
        axi_s_arvalid_i, 
        axi_s_araddr_i, 
        axi_s_arsize_i, 
        axi_s_arlen_i, 
        axi_s_arburst_i, 
        axi_s_arcache_i, 
        axi_s_arid_i, 
        axi_s_arprot_i, 
        axi_s_arlock_i, 
        axi_s_arqos_i, 
        axi_s_arregion_i, 
        axi_s_aruser_i, 
        axi_s_arready_o, 
        axi_s_rvalid_o, 
        axi_s_rid_o, 
        axi_s_rdata_o, 
        axi_s_rresp_o, 
        axi_s_ruser_o, 
        axi_s_rlast_o, 
        axi_s_rready_i, 
        // -----------------------------------------
    // AXI4 Master Interface (to/from External Slave)
    // -----------------------------------------
    axi_m_aclk_i, 
        axi_m_aclken_i, 
        axi_m_aresetn_i, 
        axi_m_awvalid_o, 
        axi_m_awaddr_o, 
        axi_m_awsize_o, 
        axi_m_awlen_o, 
        axi_m_awburst_o, 
        axi_m_awcache_o, 
        axi_m_awid_o, 
        axi_m_awprot_o, 
        axi_m_awlock_o, 
        axi_m_awqos_o, 
        axi_m_awregion_o, 
        axi_m_awuser_o, 
        axi_m_awready_i, 
        axi_m_wvalid_o, 
        axi_m_wdata_o, 
        axi_m_wstrb_o, 
        axi_m_wuser_o, 
        axi_m_wlast_o, 
        axi_m_wready_i, 
        axi_m_bvalid_i, 
        axi_m_bid_i, 
        axi_m_bresp_i, 
        axi_m_buser_i, 
        axi_m_bready_o, 
        axi_m_arvalid_o, 
        axi_m_arid_o, 
        axi_m_araddr_o, 
        axi_m_arlen_o, 
        axi_m_arsize_o, 
        axi_m_arburst_o, 
        axi_m_arlock_o, 
        axi_m_arcache_o, 
        axi_m_arprot_o, 
        axi_m_arqos_o, 
        axi_m_arregion_o, 
        axi_m_aruser_o, 
        axi_m_arready_i, 
        axi_m_rvalid_i, 
        axi_m_rdata_i, 
        axi_m_rid_i, 
        axi_m_rresp_i, 
        axi_m_ruser_i, 
        axi_m_rlast_i, 
        axi_m_rready_o) ;
    parameter integer TOTAL_EXTMAS_CNT = 2 ; 
    parameter EXT_MAS_MAX_ADDR_WIDTH = 32 ; 
    parameter EXT_MAS_MAX_DATA_WIDTH = 32 ; 
    parameter EXT_MAS_AXI_ID_WIDTH = 6 ; 
    parameter MAX_NUM_OF_ID_EXT_MAS_SUPPRT = 64 ; 
    parameter integer TOTAL_EXTSLV_CNT = 2 ; 
    parameter EXT_SLV_MAX_ADDR_WIDTH = 32 ; 
    parameter EXT_SLV_MAX_DATA_WIDTH = 32 ; 
    parameter EXT_SLV_AXI_ID_WIDTH = 11 ; 
    parameter EXT_SLV_MAX_FRAGMENT_CNT = 8 ; 
    parameter AXI_USER_WIDTH = 128 ; 
    parameter FULL_DECODE_4KB_EN = 0 ; 
    parameter OUTREG_EN = 0 ; 
    parameter FAMILY = "LIFCL" ; 
    // -----------------------------------------------------------------------------
    // Interconnect Slave  parameters 
    // -----------------------------------------------------------------------------
    //--- External Master  -------------------------------------------------------------------
    parameter [((TOTAL_EXTMAS_CNT * 2) - 1):0] EXT_MAS_ACCESS_TYPE = {TOTAL_EXTMAS_CNT{2'd2}} ; 
    parameter [(TOTAL_EXTMAS_CNT - 1):0] EXT_MAS_CDC_EN = {TOTAL_EXTMAS_CNT{1'b1}} ; 
    parameter [(TOTAL_EXTMAS_CNT - 1):0] EXT_MAS_AXI_PROTOCOL = {TOTAL_EXTMAS_CNT{1'b0}} ; 
    parameter [((TOTAL_EXTMAS_CNT * 7) - 1):0] EXT_MAS_AXI_ADDR_WIDTH = {TOTAL_EXTMAS_CNT{7'd32}} ; 
    parameter [((TOTAL_EXTMAS_CNT * 11) - 1):0] EXT_MAS_AXI_DATA_WIDTH = {TOTAL_EXTMAS_CNT{11'd32}} ; 
    parameter [((TOTAL_EXTMAS_CNT * 7) - 1):0] NUM_OF_ID_EXT_MAS_SUPPRT = {TOTAL_EXTMAS_CNT{7'd64}} ; 
    parameter [(TOTAL_EXTMAS_CNT - 1):0] ID_ORDER_EN_EXT_MAS = {TOTAL_EXTMAS_CNT{1'b0}} ; 
    parameter [((TOTAL_EXTMAS_CNT * 5) - 1):0] EXT_MAS_AXI_WR_ACCEPT = {TOTAL_EXTMAS_CNT{5'd16}} ; 
    parameter [((TOTAL_EXTMAS_CNT * 5) - 1):0] EXT_MAS_AXI_RD_ACCEPT = {TOTAL_EXTMAS_CNT{5'd16}} ; 
    parameter [(TOTAL_EXTMAS_CNT - 1):0] EXT_MAS_PRIORITY_SCHEME = {TOTAL_EXTMAS_CNT{1'b0}} ; 
    parameter [(((TOTAL_EXTMAS_CNT * TOTAL_EXTSLV_CNT) * 5) - 1):0] EXT_MAS_FIXED_PRIORITY = {((TOTAL_EXTMAS_CNT * TOTAL_EXTSLV_CNT) * 5){1'b0}} ; 
    //--- External Slave  -------------------------------------------------------------------
    parameter [((TOTAL_EXTSLV_CNT * 2) - 1):0] EXT_SLV_ACCESS_TYPE = {TOTAL_EXTSLV_CNT{2'd2}} ; 
    parameter [(TOTAL_EXTSLV_CNT - 1):0] EXT_SLV_CDC_EN = {TOTAL_EXTSLV_CNT{1'b0}} ; 
    parameter [(TOTAL_EXTSLV_CNT - 1):0] EXT_SLV_AXI_PROTOCOL = {TOTAL_EXTSLV_CNT{1'b0}} ; 
    parameter [((TOTAL_EXTSLV_CNT * 7) - 1):0] EXT_SLV_AXI_ADDR_WIDTH = {TOTAL_EXTSLV_CNT{7'd32}} ; 
    parameter [((TOTAL_EXTSLV_CNT * 11) - 1):0] EXT_SLV_AXI_DATA_WIDTH = {TOTAL_EXTSLV_CNT{11'd32}} ; 
    parameter [((TOTAL_EXTSLV_CNT * 5) - 1):0] EXT_SLV_AXI_WR_ISSUE = {TOTAL_EXTSLV_CNT{5'd16}} ; 
    parameter [((TOTAL_EXTSLV_CNT * 5) - 1):0] EXT_SLV_AXI_RD_ISSUE = {TOTAL_EXTSLV_CNT{5'd16}} ; 
    parameter [((TOTAL_EXTSLV_CNT * 4) - 1):0] EXT_SLV_FRAGMENT_CNT = {TOTAL_EXTSLV_CNT{4'd8}} ; 
    parameter [(((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_FRAGMENT_CNT) * 64) - 1):0] EXT_SLV_FRAGMENT_BASE_ADDR = {((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_FRAGMENT_CNT) * 64){1'b0}} ; 
    parameter [(((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_FRAGMENT_CNT) * 64) - 1):0] EXT_SLV_FRAGMENT_END_ADDR = {((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_FRAGMENT_CNT) * 64){1'b0}} ; 
    parameter [(TOTAL_EXTSLV_CNT - 1):0] EXT_SLV_PRIORITY_SCHEME = {TOTAL_EXTSLV_CNT{1'b0}} ; 
    parameter [(((TOTAL_EXTSLV_CNT * TOTAL_EXTMAS_CNT) * 5) - 1):0] EXT_SLV_FIXED_PRIORITY = {((TOTAL_EXTSLV_CNT * TOTAL_EXTMAS_CNT) * 5){1'b0}} ; 
    input axi_aclk_i ; 
    input axi_aresetn_i ; 
    // -------------------------------------------
    // AXI Slave Interface (to/from External master)
    // -------------------------------------------
    // AXI External Master Write Address
    input [(TOTAL_EXTMAS_CNT - 1):0] axi_s_aclk_i ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] axi_s_aclken_i ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] axi_s_aresetn_i ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] axi_s_awvalid_i ; 
    input [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_ADDR_WIDTH) - 1):0] axi_s_awaddr_i ; 
    input [((TOTAL_EXTMAS_CNT * 3) - 1):0] axi_s_awsize_i ; 
    input [((TOTAL_EXTMAS_CNT * 8) - 1):0] axi_s_awlen_i ; 
    input [((TOTAL_EXTMAS_CNT * 2) - 1):0] axi_s_awburst_i ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] axi_s_awcache_i ; 
    input [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] axi_s_awid_i ; 
    input [((TOTAL_EXTMAS_CNT * 3) - 1):0] axi_s_awprot_i ; 
    input [((TOTAL_EXTMAS_CNT * 1) - 1):0] axi_s_awlock_i ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] axi_s_awqos_i ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] axi_s_awregion_i ; 
    input [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] axi_s_awuser_i ; 
    output [(TOTAL_EXTMAS_CNT - 1):0] axi_s_awready_o ; 
    // AXI External Master Write Data
    input [(TOTAL_EXTMAS_CNT - 1):0] axi_s_wvalid_i ; 
    input [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_DATA_WIDTH) - 1):0] axi_s_wdata_i ; 
    input [(((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_DATA_WIDTH) / 8) - 1):0] axi_s_wstrb_i ; 
    input [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] axi_s_wuser_i ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] axi_s_wlast_i ; 
    output [(TOTAL_EXTMAS_CNT - 1):0] axi_s_wready_o ; 
    // AXI External Master Write Response
    output [(TOTAL_EXTMAS_CNT - 1):0] axi_s_bvalid_o ; 
    output [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] axi_s_bid_o ; 
    output [((TOTAL_EXTMAS_CNT * 2) - 1):0] axi_s_bresp_o ; 
    output [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] axi_s_buser_o ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] axi_s_bready_i ; 
    // AXI External Master Read Address
    input [(TOTAL_EXTMAS_CNT - 1):0] axi_s_arvalid_i ; 
    input [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_ADDR_WIDTH) - 1):0] axi_s_araddr_i ; 
    input [((TOTAL_EXTMAS_CNT * 3) - 1):0] axi_s_arsize_i ; 
    input [((TOTAL_EXTMAS_CNT * 8) - 1):0] axi_s_arlen_i ; 
    input [((TOTAL_EXTMAS_CNT * 2) - 1):0] axi_s_arburst_i ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] axi_s_arcache_i ; 
    input [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] axi_s_arid_i ; 
    input [((TOTAL_EXTMAS_CNT * 3) - 1):0] axi_s_arprot_i ; 
    input [((TOTAL_EXTMAS_CNT * 1) - 1):0] axi_s_arlock_i ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] axi_s_arqos_i ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] axi_s_arregion_i ; 
    input [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] axi_s_aruser_i ; 
    output [(TOTAL_EXTMAS_CNT - 1):0] axi_s_arready_o ; 
    // AXI External Master Read Data
    output [(TOTAL_EXTMAS_CNT - 1):0] axi_s_rvalid_o ; 
    output [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] axi_s_rid_o ; 
    output [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_DATA_WIDTH) - 1):0] axi_s_rdata_o ; 
    output [((TOTAL_EXTMAS_CNT * 2) - 1):0] axi_s_rresp_o ; 
    output [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] axi_s_ruser_o ; 
    output [(TOTAL_EXTMAS_CNT - 1):0] axi_s_rlast_o ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] axi_s_rready_i ; 
    // -----------------------------------------
    // AXI4 Master Interface (to/from External Slave)
    // -----------------------------------------
    input [(TOTAL_EXTSLV_CNT - 1):0] axi_m_aclk_i ; 
    input [(TOTAL_EXTSLV_CNT - 1):0] axi_m_aclken_i ; 
    input [(TOTAL_EXTSLV_CNT - 1):0] axi_m_aresetn_i ; 
    //AXI External Slave Write Address
    output [(TOTAL_EXTSLV_CNT - 1):0] axi_m_awvalid_o ; 
    output [((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_ADDR_WIDTH) - 1):0] axi_m_awaddr_o ; 
    output [((TOTAL_EXTSLV_CNT * 3) - 1):0] axi_m_awsize_o ; 
    output [((TOTAL_EXTSLV_CNT * 8) - 1):0] axi_m_awlen_o ; 
    output [((TOTAL_EXTSLV_CNT * 2) - 1):0] axi_m_awburst_o ; 
    output [((TOTAL_EXTSLV_CNT * 4) - 1):0] axi_m_awcache_o ; 
    output [((TOTAL_EXTSLV_CNT * EXT_SLV_AXI_ID_WIDTH) - 1):0] axi_m_awid_o ; 
    output [((TOTAL_EXTSLV_CNT * 3) - 1):0] axi_m_awprot_o ; 
    output [((TOTAL_EXTSLV_CNT * 1) - 1):0] axi_m_awlock_o ; 
    output [((TOTAL_EXTSLV_CNT * 4) - 1):0] axi_m_awqos_o ; 
    output [((TOTAL_EXTSLV_CNT * 4) - 1):0] axi_m_awregion_o ; 
    output [((TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) - 1):0] axi_m_awuser_o ; 
    input [(TOTAL_EXTSLV_CNT - 1):0] axi_m_awready_i ; 
    //AXI External Slave Write Data
    output [(TOTAL_EXTSLV_CNT - 1):0] axi_m_wvalid_o ; 
    output [((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_DATA_WIDTH) - 1):0] axi_m_wdata_o ; 
    output [(((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_DATA_WIDTH) / 8) - 1):0] axi_m_wstrb_o ; 
    output [((TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) - 1):0] axi_m_wuser_o ; 
    output [(TOTAL_EXTSLV_CNT - 1):0] axi_m_wlast_o ; 
    input [(TOTAL_EXTSLV_CNT - 1):0] axi_m_wready_i ; 
    //AXI Slave Write Response 
    input [(TOTAL_EXTSLV_CNT - 1):0] axi_m_bvalid_i ; 
    input [((TOTAL_EXTSLV_CNT * EXT_SLV_AXI_ID_WIDTH) - 1):0] axi_m_bid_i ; 
    input [((TOTAL_EXTSLV_CNT * 2) - 1):0] axi_m_bresp_i ; 
    input [((TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) - 1):0] axi_m_buser_i ; 
    output [(TOTAL_EXTSLV_CNT - 1):0] axi_m_bready_o ; 
    //AXI Slave Read Address
    output [(TOTAL_EXTSLV_CNT - 1):0] axi_m_arvalid_o ; 
    output [((TOTAL_EXTSLV_CNT * EXT_SLV_AXI_ID_WIDTH) - 1):0] axi_m_arid_o ; 
    output [((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_ADDR_WIDTH) - 1):0] axi_m_araddr_o ; 
    output [((TOTAL_EXTSLV_CNT * 8) - 1):0] axi_m_arlen_o ; 
    output [((TOTAL_EXTSLV_CNT * 3) - 1):0] axi_m_arsize_o ; 
    output [((TOTAL_EXTSLV_CNT * 2) - 1):0] axi_m_arburst_o ; 
    output [((TOTAL_EXTSLV_CNT * 1) - 1):0] axi_m_arlock_o ; 
    output [((TOTAL_EXTSLV_CNT * 4) - 1):0] axi_m_arcache_o ; 
    output [((TOTAL_EXTSLV_CNT * 3) - 1):0] axi_m_arprot_o ; 
    output [((TOTAL_EXTSLV_CNT * 4) - 1):0] axi_m_arqos_o ; 
    output [((TOTAL_EXTSLV_CNT * 4) - 1):0] axi_m_arregion_o ; 
    output [((TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) - 1):0] axi_m_aruser_o ; 
    input [(TOTAL_EXTSLV_CNT - 1):0] axi_m_arready_i ; 
    //AXI Slave Read Data 
    input [(TOTAL_EXTSLV_CNT - 1):0] axi_m_rvalid_i ; 
    input [((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_DATA_WIDTH) - 1):0] axi_m_rdata_i ; 
    input [((TOTAL_EXTSLV_CNT * EXT_SLV_AXI_ID_WIDTH) - 1):0] axi_m_rid_i ; 
    input [((TOTAL_EXTSLV_CNT * 2) - 1):0] axi_m_rresp_i ; 
    input [((TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) - 1):0] axi_m_ruser_i ; 
    input [(TOTAL_EXTSLV_CNT - 1):0] axi_m_rlast_i ; 
    output [(TOTAL_EXTSLV_CNT - 1):0] axi_m_rready_o ; 
    //parameter [TOTAL_EXTMAS_CNT*TOTAL_EXTSLV_CNT*TOTAL_EXTSLV_BIT_WIDTH-1:0] EXT_MAS_FIXED_PRIORITY = {2'd0,2'd1,2'd2,2'd3, 2'd0,2'd1,2'd2,2'd3};
    //parameter [TOTAL_EXTMAS_CNT*TOTAL_EXTSLV_CNT*TOTAL_EXTSLV_BIT_WIDTH-1:0] EXT_MAS_FIXED_PRIORITY = {'d0,'d1,'d2,'d3, 'd0,'d1,'d2};
    localparam DEF_SLV_PRIORITY_SCHEME = 1'b0 ; 
    localparam [1:0] DEF_SLV_ACCESS_TYPE = 2'd2 ; 
    localparam [((TOTAL_EXTMAS_CNT * 5) - 1):0] DEF_SLV_FIXED_PRIORITY = {TOTAL_EXTMAS_CNT{5'd0}} ; 
    //localparam [TOTAL_EXTMAS_CNT*5 -1:0] DEF_SLV_FIXED_PRIORITY ={{5'd31,5'd30,5'd29,5'd28,5'd27,5'd26,5'd25,5'd24,5'd23,5'd22,5'd21,5'd20,5'd19,5'd18,5'd17,5'd16,5'd15,5'd14,5'd13,5'd12,5'd11,5'd10,5'd9,5'd8,5'd7,5'd6,5'd5,5'd4,5'd3,5'd2,5'd1,5'd0}}; 
    localparam [TOTAL_EXTSLV_CNT:0] EXT_SLV_PRIORITY_SCHEME_FINAL = {DEF_SLV_PRIORITY_SCHEME,
                EXT_SLV_PRIORITY_SCHEME} ; 
    //localparam [TOTAL_EXTSLV_CNT:0] EXT_SLV_PRIORITY_SCHEME_FINAL  = {DEF_SLV_PRIORITY_SCHEME,{TOTAL_EXTSLV_CNT{1'b0}} };
    localparam [((((TOTAL_EXTSLV_CNT + 1) * TOTAL_EXTMAS_CNT) * 5) - 1):0] EXT_SLV_FIXED_PRIORITY_FINAL = {DEF_SLV_FIXED_PRIORITY,
                EXT_SLV_FIXED_PRIORITY} ; 
    //localparam [(TOTAL_EXTSLV_CNT+1)*TOTAL_EXTMAS_CNT*5 -1:0] EXT_SLV_FIXED_PRIORITY_FINAL = {DEF_SLV_FIXED_PRIORITY, {TOTAL_EXTSLV_CNT*TOTAL_EXTMAS_CNT*5{1'b0}} };
    localparam [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] EXT_SLV_ACCESS_TYPE_FINAL = {DEF_SLV_ACCESS_TYPE,
                EXT_SLV_ACCESS_TYPE} ; 
    localparam [((TOTAL_EXTMAS_CNT * 4) - 1):0] EXT_MAS_AXI_LEN_WIDTH = {TOTAL_EXTMAS_CNT{4'd8}} ; 
    localparam [((TOTAL_EXTSLV_CNT * 4) - 1):0] EXT_SLV_AXI_LEN_WIDTH = {TOTAL_EXTSLV_CNT{4'd8}} ; 
    localparam LATTICE_FIFO = 1'b0 ; 
    localparam [((TOTAL_EXTSLV_CNT * 5) - 1):0] EXT_MAS_AWR_GNT_FF_DEPTH = EXT_SLV_AXI_WR_ISSUE ; 
    localparam EXT_MAS_WR_DATA_FIFO_DEPTH = 16 ; 
    localparam EXT_MAS_BRESP_FIFO_DEPTH = 4 ; 
    localparam EXT_MAS_RD_DATA_FIFO_DEPTH = 16 ; 
    localparam EXT_SLV_AW_FF_DEPTH = 8 ; 
    localparam EXT_SLV_WR_DATA_FIFO_DEPTH = 64 ; 
    localparam EXT_SLV_BRESP_FIFO_DEPTH = 8 ; 
    localparam EXT_SLV_RD_DATA_FIFO_DEPTH = 64 ; 
    localparam USE_DCC_CLK_GATE = 0 ; 
    wire [(TOTAL_EXTMAS_CNT - 1):0] i_ext_mas_prt_awvalid ; 
    wire [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_ADDR_WIDTH) - 1):0] i_ext_mas_prt_awaddr ; 
    wire [((TOTAL_EXTMAS_CNT * 3) - 1):0] i_ext_mas_prt_awsize ; 
    wire [((TOTAL_EXTMAS_CNT * 8) - 1):0] i_ext_mas_prt_awlen ; 
    wire [((TOTAL_EXTMAS_CNT * 2) - 1):0] i_ext_mas_prt_awburst ; 
    wire [((TOTAL_EXTMAS_CNT * 4) - 1):0] i_ext_mas_prt_awcache ; 
    wire [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] i_ext_mas_prt_awid ; 
    wire [((TOTAL_EXTMAS_CNT * 3) - 1):0] i_ext_mas_prt_awprot ; 
    wire [((TOTAL_EXTMAS_CNT * 1) - 1):0] i_ext_mas_prt_awlock ; 
    wire [((TOTAL_EXTMAS_CNT * 4) - 1):0] i_ext_mas_prt_awqos ; 
    wire [((TOTAL_EXTMAS_CNT * 4) - 1):0] i_ext_mas_prt_awregion ; 
    wire [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] i_ext_mas_prt_awuser ; 
    wire [(TOTAL_EXTMAS_CNT - 1):0] o_ext_mas_prt_awready ; 
    wire [(TOTAL_EXTMAS_CNT - 1):0] o_ext_mas_prt_split_awready ; 
    wire [(TOTAL_EXTMAS_CNT - 1):0] i_ext_mas_prt_wvalid ; 
    wire [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_DATA_WIDTH) - 1):0] i_ext_mas_prt_wdata ; 
    wire [((TOTAL_EXTMAS_CNT * (EXT_MAS_MAX_DATA_WIDTH / 8)) - 1):0] i_ext_mas_prt_wstrb ; 
    wire [(TOTAL_EXTMAS_CNT - 1):0] i_ext_mas_prt_wlast ; 
    wire [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] i_ext_mas_prt_wuser ; 
    wire [(TOTAL_EXTMAS_CNT - 1):0] o_ext_mas_prt_wready ; 
    wire [(TOTAL_EXTMAS_CNT - 1):0] i_ext_mas_prt_arvalid ; 
    wire [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_ADDR_WIDTH) - 1):0] i_ext_mas_prt_araddr ; 
    wire [((TOTAL_EXTMAS_CNT * 3) - 1):0] i_ext_mas_prt_arsize ; 
    wire [((TOTAL_EXTMAS_CNT * 8) - 1):0] i_ext_mas_prt_arlen ; 
    wire [((TOTAL_EXTMAS_CNT * 2) - 1):0] i_ext_mas_prt_arburst ; 
    wire [((TOTAL_EXTMAS_CNT * 4) - 1):0] i_ext_mas_prt_arcache ; 
    wire [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] i_ext_mas_prt_arid ; 
    wire [((TOTAL_EXTMAS_CNT * 3) - 1):0] i_ext_mas_prt_arprot ; 
    wire [((TOTAL_EXTMAS_CNT * 1) - 1):0] i_ext_mas_prt_arlock ; 
    wire [((TOTAL_EXTMAS_CNT * 4) - 1):0] i_ext_mas_prt_arqos ; 
    wire [((TOTAL_EXTMAS_CNT * 4) - 1):0] i_ext_mas_prt_arregion ; 
    wire [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] i_ext_mas_prt_aruser ; 
    wire [(TOTAL_EXTMAS_CNT - 1):0] o_ext_mas_prt_arready ; 
    wire [(TOTAL_EXTMAS_CNT - 1):0] o_ext_mas_prt_split_arready ; 
    wire [(TOTAL_EXTMAS_CNT - 1):0] o_ext_mas_prt_bvalid ; 
    wire [((TOTAL_EXTMAS_CNT * 2) - 1):0] o_ext_mas_prt_bresp ; 
    wire [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] o_ext_mas_prt_bid ; 
    wire [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] o_ext_mas_prt_buser ; 
    wire [(TOTAL_EXTMAS_CNT - 1):0] i_ext_mas_prt_bready ; 
    wire [(TOTAL_EXTMAS_CNT - 1):0] o_ext_mas_prt_rvalid ; 
    wire [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_DATA_WIDTH) - 1):0] o_ext_mas_prt_rdata ; 
    wire [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] o_ext_mas_prt_rid ; 
    wire [(TOTAL_EXTMAS_CNT - 1):0] o_ext_mas_prt_rlast ; 
    wire [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] o_ext_mas_prt_ruser ; 
    wire [((TOTAL_EXTMAS_CNT * 2) - 1):0] o_ext_mas_prt_rresp ; 
    wire [(TOTAL_EXTMAS_CNT - 1):0] i_ext_mas_prt_rready ; 
    wire [(TOTAL_EXTSLV_CNT - 1):0] o_ext_slv_prt_awvalid ; 
    wire [((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_ADDR_WIDTH) - 1):0] o_ext_slv_prt_awaddr ; 
    wire [((TOTAL_EXTSLV_CNT * 3) - 1):0] o_ext_slv_prt_awsize ; 
    wire [((TOTAL_EXTSLV_CNT * 8) - 1):0] o_ext_slv_prt_awlen ; 
    wire [((TOTAL_EXTSLV_CNT * 2) - 1):0] o_ext_slv_prt_awburst ; 
    wire [((TOTAL_EXTSLV_CNT * 4) - 1):0] o_ext_slv_prt_awcache ; 
    wire [((TOTAL_EXTSLV_CNT * EXT_SLV_AXI_ID_WIDTH) - 1):0] o_ext_slv_prt_awid ; 
    wire [((TOTAL_EXTSLV_CNT * 3) - 1):0] o_ext_slv_prt_awprot ; 
    wire [((TOTAL_EXTSLV_CNT * 1) - 1):0] o_ext_slv_prt_awlock ; 
    wire [((TOTAL_EXTSLV_CNT * 4) - 1):0] o_ext_slv_prt_awqos ; 
    wire [((TOTAL_EXTSLV_CNT * 4) - 1):0] o_ext_slv_prt_awregion ; 
    wire [((TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) - 1):0] o_ext_slv_prt_awuser ; 
    wire [(TOTAL_EXTSLV_CNT - 1):0] i_ext_slv_prt_awready ; 
    wire [(TOTAL_EXTSLV_CNT - 1):0] i_ext_slv_prt_split_awready ; 
    wire [(TOTAL_EXTSLV_CNT - 1):0] o_ext_slv_prt_wvalid ; 
    wire [((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_DATA_WIDTH) - 1):0] o_ext_slv_prt_wdata ; 
    wire [((TOTAL_EXTSLV_CNT * (EXT_SLV_MAX_DATA_WIDTH / 8)) - 1):0] o_ext_slv_prt_wstrb ; 
    wire [(TOTAL_EXTSLV_CNT - 1):0] o_ext_slv_prt_wlast ; 
    wire [((TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) - 1):0] o_ext_slv_prt_wuser ; 
    wire [(TOTAL_EXTSLV_CNT - 1):0] i_ext_slv_prt_wready ; 
    wire [(TOTAL_EXTSLV_CNT - 1):0] o_ext_slv_prt_arvalid ; 
    wire [((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_ADDR_WIDTH) - 1):0] o_ext_slv_prt_araddr ; 
    wire [((TOTAL_EXTSLV_CNT * 3) - 1):0] o_ext_slv_prt_arsize ; 
    wire [((TOTAL_EXTSLV_CNT * 8) - 1):0] o_ext_slv_prt_arlen ; 
    wire [((TOTAL_EXTSLV_CNT * 2) - 1):0] o_ext_slv_prt_arburst ; 
    wire [((TOTAL_EXTSLV_CNT * 4) - 1):0] o_ext_slv_prt_arcache ; 
    wire [((TOTAL_EXTSLV_CNT * EXT_SLV_AXI_ID_WIDTH) - 1):0] o_ext_slv_prt_arid ; 
    wire [((TOTAL_EXTSLV_CNT * 3) - 1):0] o_ext_slv_prt_arprot ; 
    wire [((TOTAL_EXTSLV_CNT * 1) - 1):0] o_ext_slv_prt_arlock ; 
    wire [((TOTAL_EXTSLV_CNT * 4) - 1):0] o_ext_slv_prt_arqos ; 
    wire [((TOTAL_EXTSLV_CNT * 4) - 1):0] o_ext_slv_prt_arregion ; 
    wire [((TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) - 1):0] o_ext_slv_prt_aruser ; 
    wire [(TOTAL_EXTSLV_CNT - 1):0] i_ext_slv_prt_arready ; 
    wire [(TOTAL_EXTSLV_CNT - 1):0] i_ext_slv_prt_split_arready ; 
    wire [(TOTAL_EXTSLV_CNT - 1):0] i_ext_slv_prt_bvalid ; 
    wire [((TOTAL_EXTSLV_CNT * 2) - 1):0] i_ext_slv_prt_bresp ; 
    wire [((TOTAL_EXTSLV_CNT * EXT_SLV_AXI_ID_WIDTH) - 1):0] i_ext_slv_prt_bid ; 
    wire [((TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) - 1):0] i_ext_slv_prt_buser ; 
    wire [(TOTAL_EXTSLV_CNT - 1):0] o_ext_slv_prt_bready ; 
    wire [(TOTAL_EXTSLV_CNT - 1):0] i_ext_slv_prt_rvalid ; 
    wire [((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_DATA_WIDTH) - 1):0] i_ext_slv_prt_rdata ; 
    wire [((TOTAL_EXTSLV_CNT * EXT_SLV_AXI_ID_WIDTH) - 1):0] i_ext_slv_prt_rid ; 
    wire [((TOTAL_EXTSLV_CNT * 2) - 1):0] i_ext_slv_prt_rresp ; 
    wire [((TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) - 1):0] i_ext_slv_prt_ruser ; 
    wire [(TOTAL_EXTSLV_CNT - 1):0] i_ext_slv_prt_rlast ; 
    wire [(TOTAL_EXTSLV_CNT - 1):0] o_ext_slv_prt_rready ; 
    wire [(TOTAL_EXTSLV_CNT - 1):0] axi_m_aclk_gated ; 
    wire [(TOTAL_EXTMAS_CNT - 1):0] axi_s_aclk_gated ; 
    reg [(TOTAL_EXTSLV_CNT - 1):0] axi_m_aclken_i_reg ; 
    reg [(TOTAL_EXTMAS_CNT - 1):0] axi_s_aclken_i_reg ; 
    wire [(TOTAL_EXTSLV_CNT - 1):0] axi_m_rlast_wire ; 
    genvar ext_slv_cnt, 
        ext_mas_cnt ; 
    generate
        for (ext_slv_cnt = 0;(ext_slv_cnt < TOTAL_EXTSLV_CNT);ext_slv_cnt = (ext_slv_cnt + 1))
        begin : ext_slv_blk
            if (USE_DCC_CLK_GATE) 
            //ext_slv_blk
                begin : DCC_CLK_GATE
                    DCC #(DCCEN(1)) u_axi_m_aclk_gate (.CLKI(axi_m_aclk_i[ext_slv_cnt]), 
                                .CE(axi_m_aclken_i[ext_slv_cnt]), 
                                .CLKO(axi_m_aclk_gated[ext_slv_cnt])) ; 
                end
            else
                begin : AND_CLK_GATE
                    always
                        @(posedge axi_m_aclk_i[ext_slv_cnt] or 
                            negedge axi_m_aresetn_i[ext_slv_cnt])
                        begin
                            if ((!axi_m_aresetn_i[ext_slv_cnt])) 
                                begin
                                    axi_m_aclken_i_reg[ext_slv_cnt] = 1'b0 ;
                                end
                            else
                                begin
                                    axi_m_aclken_i_reg[ext_slv_cnt] = axi_m_aclken_i[ext_slv_cnt] ;
                                end
                        end
                    assign axi_m_aclk_gated[ext_slv_cnt] = (axi_m_aclken_i_reg[ext_slv_cnt] & axi_m_aclk_i[ext_slv_cnt]) ; 
                end
        end
        for (ext_mas_cnt = 0;(ext_mas_cnt < TOTAL_EXTMAS_CNT);ext_mas_cnt = (ext_mas_cnt + 1))
        begin : ext_mas_blk
            if (USE_DCC_CLK_GATE) 
            //ext_mas_blk
                begin : DCC_CLK_GATE
                    DCC #(DCCEN(1)) u_axi_s_aclk_gate (.CLKI(axi_s_aclk_i[ext_mas_cnt]), 
                                .CE(axi_s_aclken_i[ext_mas_cnt]), 
                                .CLKO(axi_s_aclk_gated[ext_mas_cnt])) ; 
                end
            else
                begin : AND_CLK_GATE
                    always
                        @(posedge axi_s_aclk_i[ext_mas_cnt] or 
                            negedge axi_s_aresetn_i[ext_mas_cnt])
                        begin
                            if ((!axi_s_aresetn_i[ext_mas_cnt])) 
                                begin
                                    axi_s_aclken_i_reg[ext_mas_cnt] = 1'b0 ;
                                end
                            else
                                begin
                                    axi_s_aclken_i_reg[ext_mas_cnt] = axi_s_aclken_i[ext_mas_cnt] ;
                                end
                        end
                    assign axi_s_aclk_gated[ext_mas_cnt] = (axi_s_aclken_i_reg[ext_mas_cnt] & axi_s_aclk_i[ext_mas_cnt]) ; 
                end
        end
    endgenerate
    axi4_interconnect_ipgen_lscc_sync_axi_interconnect #(.TOTAL_EXTMAS_CNT(TOTAL_EXTMAS_CNT),
            .EXT_MAS_AXI_ID_WIDTH(EXT_MAS_AXI_ID_WIDTH),
            .EXT_MAS_MAX_ADDR_WIDTH(EXT_MAS_MAX_ADDR_WIDTH),
            .EXT_MAS_MAX_DATA_WIDTH(EXT_MAS_MAX_DATA_WIDTH),
            .EXT_MAS_CDC_EN(EXT_MAS_CDC_EN),
            .ID_ORDER_EN_EXT_MAS(ID_ORDER_EN_EXT_MAS),
            .MAX_NUM_OF_ID_EXT_MAS_SUPPRT(MAX_NUM_OF_ID_EXT_MAS_SUPPRT),
            .NUM_OF_ID_EXT_MAS_SUPPRT(NUM_OF_ID_EXT_MAS_SUPPRT),
            .EXT_MAS_AXI_PROTOCOL(EXT_MAS_AXI_PROTOCOL),
            .AXI_USER_WIDTH(AXI_USER_WIDTH),
            .EXT_MAS_AXI_ADDR_WIDTH(EXT_MAS_AXI_ADDR_WIDTH),
            .EXT_MAS_AXI_DATA_WIDTH(EXT_MAS_AXI_DATA_WIDTH),
            .EXT_MAS_AXI_LEN_WIDTH(EXT_MAS_AXI_LEN_WIDTH),
            .EXT_MAS_AXI_WR_ACCEPT(EXT_MAS_AXI_WR_ACCEPT),
            .EXT_MAS_AXI_RD_ACCEPT(EXT_MAS_AXI_RD_ACCEPT),
            .EXT_MAS_PRIORITY_SCHEME(EXT_MAS_PRIORITY_SCHEME),
            .EXT_MAS_FIXED_PRIORITY(EXT_MAS_FIXED_PRIORITY),
            .EXT_MAS_AWR_GNT_FF_DEPTH(EXT_MAS_AWR_GNT_FF_DEPTH),
            .EXT_MAS_WR_DATA_FIFO_DEPTH(EXT_MAS_WR_DATA_FIFO_DEPTH),
            .EXT_MAS_BRESP_FIFO_DEPTH(EXT_MAS_BRESP_FIFO_DEPTH),
            .EXT_MAS_RD_DATA_FIFO_DEPTH(EXT_MAS_RD_DATA_FIFO_DEPTH),
            .EXT_MAS_ACCESS_TYPE(EXT_MAS_ACCESS_TYPE),
            .TOTAL_EXTSLV_CNT(TOTAL_EXTSLV_CNT),
            .EXT_SLV_AXI_ID_WIDTH(EXT_SLV_AXI_ID_WIDTH),
            .EXT_SLV_MAX_ADDR_WIDTH(EXT_SLV_MAX_ADDR_WIDTH),
            .EXT_SLV_MAX_DATA_WIDTH(EXT_SLV_MAX_DATA_WIDTH),
            .EXT_SLV_AXI_PROTOCOL(EXT_SLV_AXI_PROTOCOL),
            .EXT_SLV_AXI_ADDR_WIDTH(EXT_SLV_AXI_ADDR_WIDTH),
            .EXT_SLV_AXI_DATA_WIDTH(EXT_SLV_AXI_DATA_WIDTH),
            .EXT_SLV_AXI_LEN_WIDTH(EXT_SLV_AXI_LEN_WIDTH),
            .EXT_SLV_AXI_WR_ISSUE(EXT_SLV_AXI_WR_ISSUE),
            .EXT_SLV_AXI_RD_ISSUE(EXT_SLV_AXI_RD_ISSUE),
            .EXT_SLV_PRIORITY_SCHEME(EXT_SLV_PRIORITY_SCHEME_FINAL),
            .EXT_SLV_FIXED_PRIORITY(EXT_SLV_FIXED_PRIORITY_FINAL),
            .EXT_SLV_MAX_FRAGMENT_CNT(EXT_SLV_MAX_FRAGMENT_CNT),
            .EXT_SLV_FRAGMENT_CNT(EXT_SLV_FRAGMENT_CNT),
            .EXT_SLV_FRAGMENT_BASE_ADDR(EXT_SLV_FRAGMENT_BASE_ADDR),
            .EXT_SLV_FRAGMENT_END_ADDR(EXT_SLV_FRAGMENT_END_ADDR),
            .EXT_SLV_ACCESS_TYPE(EXT_SLV_ACCESS_TYPE_FINAL),
            .LATTICE_FIFO(LATTICE_FIFO),
            .EXT_SLV_AW_FF_DEPTH(EXT_SLV_AW_FF_DEPTH),
            .EXT_SLV_WR_DATA_FIFO_DEPTH(EXT_SLV_WR_DATA_FIFO_DEPTH),
            .EXT_SLV_BRESP_FIFO_DEPTH(EXT_SLV_BRESP_FIFO_DEPTH),
            .EXT_SLV_RD_DATA_FIFO_DEPTH(EXT_SLV_RD_DATA_FIFO_DEPTH)) u_lscc_sync_axi_interconnect (.aclk_i(axi_aclk_i), 
                .aresetn_i(axi_aresetn_i), 
                .i_ext_mas_prt_awvalid(i_ext_mas_prt_awvalid), 
                .i_ext_mas_prt_awaddr(i_ext_mas_prt_awaddr), 
                .i_ext_mas_prt_awsize(i_ext_mas_prt_awsize), 
                .i_ext_mas_prt_awlen(i_ext_mas_prt_awlen), 
                .i_ext_mas_prt_awburst(i_ext_mas_prt_awburst), 
                .i_ext_mas_prt_awcache(i_ext_mas_prt_awcache), 
                .i_ext_mas_prt_awid(i_ext_mas_prt_awid), 
                .i_ext_mas_prt_awprot(i_ext_mas_prt_awprot), 
                .i_ext_mas_prt_awlock(i_ext_mas_prt_awlock), 
                .i_ext_mas_prt_awqos(i_ext_mas_prt_awqos), 
                .i_ext_mas_prt_awregion(i_ext_mas_prt_awregion), 
                .i_ext_mas_prt_awuser(i_ext_mas_prt_awuser), 
                .o_ext_mas_prt_awready(o_ext_mas_prt_awready), 
                .i_ext_mas_prt_wvalid(i_ext_mas_prt_wvalid), 
                .i_ext_mas_prt_wdata(i_ext_mas_prt_wdata), 
                .i_ext_mas_prt_wstrb(i_ext_mas_prt_wstrb), 
                .i_ext_mas_prt_wlast(i_ext_mas_prt_wlast), 
                .i_ext_mas_prt_wuser(i_ext_mas_prt_wuser), 
                .o_ext_mas_prt_wready(o_ext_mas_prt_wready), 
                .i_ext_mas_prt_arvalid(i_ext_mas_prt_arvalid), 
                .i_ext_mas_prt_araddr(i_ext_mas_prt_araddr), 
                .i_ext_mas_prt_arsize(i_ext_mas_prt_arsize), 
                .i_ext_mas_prt_arlen(i_ext_mas_prt_arlen), 
                .i_ext_mas_prt_arburst(i_ext_mas_prt_arburst), 
                .i_ext_mas_prt_arcache(i_ext_mas_prt_arcache), 
                .i_ext_mas_prt_arid(i_ext_mas_prt_arid), 
                .i_ext_mas_prt_arprot(i_ext_mas_prt_arprot), 
                .i_ext_mas_prt_arlock(i_ext_mas_prt_arlock), 
                .i_ext_mas_prt_arqos(i_ext_mas_prt_arqos), 
                .i_ext_mas_prt_arregion(i_ext_mas_prt_arregion), 
                .i_ext_mas_prt_aruser(i_ext_mas_prt_aruser), 
                .o_ext_mas_prt_arready(o_ext_mas_prt_arready), 
                .o_ext_mas_prt_bvalid(o_ext_mas_prt_bvalid), 
                .o_ext_mas_prt_bresp(o_ext_mas_prt_bresp), 
                .o_ext_mas_prt_bid(o_ext_mas_prt_bid), 
                .o_ext_mas_prt_buser(o_ext_mas_prt_buser), 
                .i_ext_mas_prt_bready(i_ext_mas_prt_bready), 
                .o_ext_mas_prt_rvalid(o_ext_mas_prt_rvalid), 
                .o_ext_mas_prt_rdata(o_ext_mas_prt_rdata), 
                .o_ext_mas_prt_rid(o_ext_mas_prt_rid), 
                .o_ext_mas_prt_rlast(o_ext_mas_prt_rlast), 
                .o_ext_mas_prt_ruser(o_ext_mas_prt_ruser), 
                .o_ext_mas_prt_rresp(o_ext_mas_prt_rresp), 
                .i_ext_mas_prt_rready(i_ext_mas_prt_rready), 
                .o_ext_slv_prt_awvalid(o_ext_slv_prt_awvalid), 
                .o_ext_slv_prt_awaddr(o_ext_slv_prt_awaddr), 
                .o_ext_slv_prt_awsize(o_ext_slv_prt_awsize), 
                .o_ext_slv_prt_awlen(o_ext_slv_prt_awlen), 
                .o_ext_slv_prt_awburst(o_ext_slv_prt_awburst), 
                .o_ext_slv_prt_awcache(o_ext_slv_prt_awcache), 
                .o_ext_slv_prt_awid(o_ext_slv_prt_awid), 
                .o_ext_slv_prt_awprot(o_ext_slv_prt_awprot), 
                .o_ext_slv_prt_awlock(o_ext_slv_prt_awlock), 
                .o_ext_slv_prt_awqos(o_ext_slv_prt_awqos), 
                .o_ext_slv_prt_awregion(o_ext_slv_prt_awregion), 
                .o_ext_slv_prt_awuser(o_ext_slv_prt_awuser), 
                .i_ext_slv_prt_awready(i_ext_slv_prt_awready), 
                .o_ext_slv_prt_wvalid(o_ext_slv_prt_wvalid), 
                .o_ext_slv_prt_wdata(o_ext_slv_prt_wdata), 
                .o_ext_slv_prt_wstrb(o_ext_slv_prt_wstrb), 
                .o_ext_slv_prt_wlast(o_ext_slv_prt_wlast), 
                .o_ext_slv_prt_wuser(o_ext_slv_prt_wuser), 
                .i_ext_slv_prt_wready(i_ext_slv_prt_wready), 
                .o_ext_slv_prt_arvalid(o_ext_slv_prt_arvalid), 
                .o_ext_slv_prt_araddr(o_ext_slv_prt_araddr), 
                .o_ext_slv_prt_arsize(o_ext_slv_prt_arsize), 
                .o_ext_slv_prt_arlen(o_ext_slv_prt_arlen), 
                .o_ext_slv_prt_arburst(o_ext_slv_prt_arburst), 
                .o_ext_slv_prt_arcache(o_ext_slv_prt_arcache), 
                .o_ext_slv_prt_arid(o_ext_slv_prt_arid), 
                .o_ext_slv_prt_arprot(o_ext_slv_prt_arprot), 
                .o_ext_slv_prt_arlock(o_ext_slv_prt_arlock), 
                .o_ext_slv_prt_arqos(o_ext_slv_prt_arqos), 
                .o_ext_slv_prt_arregion(o_ext_slv_prt_arregion), 
                .o_ext_slv_prt_aruser(o_ext_slv_prt_aruser), 
                .i_ext_slv_prt_arready(i_ext_slv_prt_arready), 
                .i_ext_slv_prt_bvalid(i_ext_slv_prt_bvalid), 
                .i_ext_slv_prt_bresp(i_ext_slv_prt_bresp), 
                .i_ext_slv_prt_bid(i_ext_slv_prt_bid), 
                .i_ext_slv_prt_buser(i_ext_slv_prt_buser), 
                .o_ext_slv_prt_bready(o_ext_slv_prt_bready), 
                .i_ext_slv_prt_rvalid(i_ext_slv_prt_rvalid), 
                .i_ext_slv_prt_rdata(i_ext_slv_prt_rdata), 
                .i_ext_slv_prt_rid(i_ext_slv_prt_rid), 
                .i_ext_slv_prt_rlast(i_ext_slv_prt_rlast), 
                .i_ext_slv_prt_ruser(i_ext_slv_prt_ruser), 
                .i_ext_slv_prt_rresp(i_ext_slv_prt_rresp), 
                .o_ext_slv_prt_rready(o_ext_slv_prt_rready)) ; 
    generate
        for (ext_mas_cnt = 0;(ext_mas_cnt < TOTAL_EXTMAS_CNT);ext_mas_cnt = (ext_mas_cnt + 1))
        begin : EXT_MAS_CDC_BLK
            //localparam [6:0] NUM_OF_ID_EXT_MAS_SUPPRT[TOTAL_EXTSLV_CNT-1:0] = '{para_cnt:NUM_OF_ID_EXT_MAS_SUPPRT_SCALAR[para_cnt*7+:7], default:7'h0};
            localparam EXT_MAS_AXI_ADDR_WIDTH_INT = EXT_MAS_AXI_ADDR_WIDTH[(ext_mas_cnt * 7) +: 7] ; 
            localparam EXT_MAS_AXI_DATA_WIDTH_INT = EXT_MAS_AXI_DATA_WIDTH[(ext_mas_cnt * 11) +: 11] ; 
            localparam EXT_MAS_AXI_LEN_WIDTH_INT = EXT_MAS_AXI_LEN_WIDTH[(ext_mas_cnt * 4) +: 4] ; 
            //localparam EXT_MAS_AXI_LEN_WIDTH_INT  = EXT_MAS_AXI_PROTOCOL[ext_mas_cnt] ? 1 : 8;
            localparam EXT_MAS_AXI_WR_ACCEPT_INT = EXT_MAS_AXI_WR_ACCEPT[(ext_mas_cnt * 5) +: 5] ; 
            localparam EXT_MAS_AXI_RD_ACCEPT_INT = EXT_MAS_AXI_RD_ACCEPT[(ext_mas_cnt * 5) +: 5] ; 
            //localparam EXT_MAS_AXI_WR_ACCEPT_INT  = (EXT_MAS_AXI_WR_ACCEPT[ext_mas_cnt*5 +:5]==1 || EXT_MAS_AXI_WR_ACCEPT[ext_mas_cnt*5 +:5]==3 || EXT_MAS_AXI_WR_ACCEPT[ext_mas_cnt*5 +:5]==5 || EXT_MAS_AXI_WR_ACCEPT[ext_mas_cnt*5 +:5]==7 || EXT_MAS_AXI_WR_ACCEPT[ext_mas_cnt*5 +:5]==9 || EXT_MAS_AXI_WR_ACCEPT[ext_mas_cnt*5 +:5]==11 || EXT_MAS_AXI_WR_ACCEPT[ext_mas_cnt*5 +:5]==13 || EXT_MAS_AXI_WR_ACCEPT[ext_mas_cnt*5 +:5]==15) ? EXT_MAS_AXI_WR_ACCEPT[ext_mas_cnt*5 +:5]+1 : EXT_MAS_AXI_WR_ACCEPT[ext_mas_cnt*5 +:5];
            //localparam EXT_MAS_AXI_RD_ACCEPT_INT  = (EXT_MAS_AXI_RD_ACCEPT[ext_mas_cnt*5 +:5]==1 || EXT_MAS_AXI_RD_ACCEPT[ext_mas_cnt*5 +:5]==3 || EXT_MAS_AXI_RD_ACCEPT[ext_mas_cnt*5 +:5]==5 || EXT_MAS_AXI_RD_ACCEPT[ext_mas_cnt*5 +:5]==7 || EXT_MAS_AXI_RD_ACCEPT[ext_mas_cnt*5 +:5]==9 || EXT_MAS_AXI_RD_ACCEPT[ext_mas_cnt*5 +:5]==11 || EXT_MAS_AXI_RD_ACCEPT[ext_mas_cnt*5 +:5]==13 || EXT_MAS_AXI_RD_ACCEPT[ext_mas_cnt*5 +:5]==15) ? EXT_MAS_AXI_RD_ACCEPT[ext_mas_cnt*5 +:5]+1 : EXT_MAS_AXI_RD_ACCEPT[ext_mas_cnt*5 +:5];
            localparam EXT_MAS_ACCESS_TYPE_INT = EXT_MAS_ACCESS_TYPE[(ext_mas_cnt * 2) +: 2] ; 
            if ((EXT_MAS_CDC_EN[ext_mas_cnt] == 1)) 
                begin : EXT_MAS_CDC_EN_BLK
                    axi4_interconnect_ipgen_axi_cdc #(.AXI_ADDR_WIDTH(EXT_MAS_AXI_ADDR_WIDTH_INT),
                            .AXI_DATA_WIDTH(EXT_MAS_AXI_DATA_WIDTH_INT),
                            .AXI_ID_WIDTH(EXT_MAS_AXI_ID_WIDTH),
                            .AXI_LEN_WIDTH(EXT_MAS_AXI_LEN_WIDTH_INT),
                            .AXI_USER_WIDTH(AXI_USER_WIDTH),
                            .AXI_WR_FIFO_DEPTH(EXT_MAS_AXI_WR_ACCEPT_INT),
                            .AXI_RD_FIFO_DEPTH(EXT_MAS_AXI_RD_ACCEPT_INT),
                            .ACCESS_TYPE(EXT_MAS_ACCESS_TYPE_INT),
                            .WR_DATA_FIFO_DEPTH(EXT_MAS_WR_DATA_FIFO_DEPTH),
                            .BRESP_FIFO_DEPTH(EXT_MAS_BRESP_FIFO_DEPTH),
                            .RD_DATA_FIFO_DEPTH(EXT_MAS_RD_DATA_FIFO_DEPTH)) u_axi_cdc (//input                   
                            .mi_aclk(axi_s_aclk_gated[ext_mas_cnt]), 
                                .mi_rst_n(axi_s_aresetn_i[ext_mas_cnt]), 
                                //input                   
                            .mi_awvalid(axi_s_awvalid_i[ext_mas_cnt]), 
                                .mi_awaddr(axi_s_awaddr_i[(ext_mas_cnt * EXT_MAS_MAX_ADDR_WIDTH) +: EXT_MAS_AXI_ADDR_WIDTH_INT]), 
                                .mi_awsize(axi_s_awsize_i[(ext_mas_cnt * 3) +: 3]), 
                                .mi_awlen(axi_s_awlen_i[(ext_mas_cnt * 8) +: 8]), 
                                .mi_awburst(axi_s_awburst_i[(ext_mas_cnt * 2) +: 2]), 
                                .mi_awcache(axi_s_awcache_i[(ext_mas_cnt * 4) +: 4]), 
                                .mi_awid(axi_s_awid_i[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                                .mi_awprot(axi_s_awprot_i[(ext_mas_cnt * 3) +: 3]), 
                                .mi_awlock(axi_s_awlock_i[(ext_mas_cnt * 1) +: 1]), 
                                .mi_awqos(axi_s_awqos_i[(ext_mas_cnt * 4) +: 4]), 
                                .mi_awregion(axi_s_awregion_i[(ext_mas_cnt * 4) +: 4]), 
                                .mi_awuser(axi_s_awuser_i[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mi_awready(axi_s_awready_o[ext_mas_cnt]), 
                                //input                   
                            .mi_wvalid(axi_s_wvalid_i[ext_mas_cnt]), 
                                .mi_wdata(axi_s_wdata_i[(ext_mas_cnt * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_AXI_DATA_WIDTH_INT]), 
                                .mi_wstrb(axi_s_wstrb_i[(ext_mas_cnt * (EXT_MAS_MAX_DATA_WIDTH / 8)) +: (EXT_MAS_AXI_DATA_WIDTH_INT / 8)]), 
                                .mi_wuser(axi_s_wuser_i[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mi_wlast(axi_s_wlast_i[ext_mas_cnt]), 
                                .mi_wready(axi_s_wready_o[ext_mas_cnt]), 
                                //output                   
                            .mi_bvalid(axi_s_bvalid_o[ext_mas_cnt]), 
                                .mi_bid(axi_s_bid_o[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                                .mi_bresp(axi_s_bresp_o[(ext_mas_cnt * 2) +: 2]), 
                                .mi_buser(axi_s_buser_o[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mi_bready(axi_s_bready_i[ext_mas_cnt]), 
                                //input                   
                            .mi_arvalid(axi_s_arvalid_i[ext_mas_cnt]), 
                                .mi_araddr(axi_s_araddr_i[(ext_mas_cnt * EXT_MAS_MAX_ADDR_WIDTH) +: EXT_MAS_AXI_ADDR_WIDTH_INT]), 
                                .mi_arsize(axi_s_arsize_i[(ext_mas_cnt * 3) +: 3]), 
                                .mi_arlen(axi_s_arlen_i[(ext_mas_cnt * 8) +: 8]), 
                                .mi_arburst(axi_s_arburst_i[(ext_mas_cnt * 2) +: 2]), 
                                .mi_arcache(axi_s_arcache_i[(ext_mas_cnt * 4) +: 4]), 
                                .mi_arid(axi_s_arid_i[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                                .mi_arprot(axi_s_arprot_i[(ext_mas_cnt * 3) +: 3]), 
                                .mi_arlock(axi_s_arlock_i[(ext_mas_cnt * 1) +: 1]), 
                                .mi_arqos(axi_s_arqos_i[(ext_mas_cnt * 4) +: 4]), 
                                .mi_arregion(axi_s_arregion_i[(ext_mas_cnt * 4) +: 4]), 
                                .mi_aruser(axi_s_aruser_i[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mi_arready(axi_s_arready_o[ext_mas_cnt]), 
                                //output                   
                            .mi_rvalid(axi_s_rvalid_o[ext_mas_cnt]), 
                                .mi_rid(axi_s_rid_o[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                                .mi_rdata(axi_s_rdata_o[(ext_mas_cnt * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_AXI_DATA_WIDTH_INT]), 
                                .mi_rresp(axi_s_rresp_o[(ext_mas_cnt * 2) +: 2]), 
                                .mi_ruser(axi_s_ruser_o[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mi_rlast(axi_s_rlast_o[ext_mas_cnt]), 
                                .mi_rready(axi_s_rready_i[ext_mas_cnt]), 
                                //input                   
                            .mo_aclk(axi_aclk_i), 
                                .mo_rst_n(axi_aresetn_i), 
                                //output                   
                            .mo_awvalid(i_ext_mas_prt_awvalid[ext_mas_cnt]), 
                                .mo_awaddr(i_ext_mas_prt_awaddr[(ext_mas_cnt * EXT_MAS_MAX_ADDR_WIDTH) +: EXT_MAS_AXI_ADDR_WIDTH_INT]), 
                                .mo_awsize(i_ext_mas_prt_awsize[(ext_mas_cnt * 3) +: 3]), 
                                .mo_awlen(i_ext_mas_prt_awlen[(ext_mas_cnt * 8) +: 8]), 
                                .mo_awburst(i_ext_mas_prt_awburst[(ext_mas_cnt * 2) +: 2]), 
                                .mo_awcache(i_ext_mas_prt_awcache[(ext_mas_cnt * 4) +: 4]), 
                                .mo_awid(i_ext_mas_prt_awid[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                                .mo_awprot(i_ext_mas_prt_awprot[(ext_mas_cnt * 3) +: 3]), 
                                .mo_awlock(i_ext_mas_prt_awlock[(ext_mas_cnt * 1) +: 1]), 
                                .mo_awqos(i_ext_mas_prt_awqos[(ext_mas_cnt * 4) +: 4]), 
                                .mo_awregion(i_ext_mas_prt_awregion[(ext_mas_cnt * 4) +: 4]), 
                                .mo_awuser(i_ext_mas_prt_awuser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mo_awready(o_ext_mas_prt_awready[ext_mas_cnt]), 
                                //output                   
                            .mo_wvalid(i_ext_mas_prt_wvalid[ext_mas_cnt]), 
                                .mo_wdata(i_ext_mas_prt_wdata[(ext_mas_cnt * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_AXI_DATA_WIDTH_INT]), 
                                .mo_wstrb(i_ext_mas_prt_wstrb[((ext_mas_cnt * EXT_MAS_MAX_DATA_WIDTH) / 8) +: (EXT_MAS_AXI_DATA_WIDTH_INT / 8)]), 
                                .mo_wuser(i_ext_mas_prt_wuser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mo_wlast(i_ext_mas_prt_wlast[ext_mas_cnt]), 
                                .mo_wready(o_ext_mas_prt_wready[ext_mas_cnt]), 
                                //input                   
                            .mo_bvalid(o_ext_mas_prt_bvalid[ext_mas_cnt]), 
                                .mo_bid(o_ext_mas_prt_bid[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                                .mo_bresp(o_ext_mas_prt_bresp[(ext_mas_cnt * 2) +: 2]), 
                                .mo_buser(o_ext_mas_prt_buser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mo_bready(i_ext_mas_prt_bready[ext_mas_cnt]), 
                                //output                   
                            .mo_arvalid(i_ext_mas_prt_arvalid[ext_mas_cnt]), 
                                .mo_araddr(i_ext_mas_prt_araddr[(ext_mas_cnt * EXT_MAS_MAX_ADDR_WIDTH) +: EXT_MAS_AXI_ADDR_WIDTH_INT]), 
                                .mo_arsize(i_ext_mas_prt_arsize[(ext_mas_cnt * 3) +: 3]), 
                                .mo_arlen(i_ext_mas_prt_arlen[(ext_mas_cnt * 8) +: 8]), 
                                .mo_arburst(i_ext_mas_prt_arburst[(ext_mas_cnt * 2) +: 2]), 
                                .mo_arcache(i_ext_mas_prt_arcache[(ext_mas_cnt * 4) +: 4]), 
                                .mo_arid(i_ext_mas_prt_arid[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                                .mo_arprot(i_ext_mas_prt_arprot[(ext_mas_cnt * 3) +: 3]), 
                                .mo_arlock(i_ext_mas_prt_arlock[(ext_mas_cnt * 1) +: 1]), 
                                .mo_arqos(i_ext_mas_prt_arqos[(ext_mas_cnt * 4) +: 4]), 
                                .mo_arregion(i_ext_mas_prt_arregion[(ext_mas_cnt * 4) +: 4]), 
                                .mo_aruser(i_ext_mas_prt_aruser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mo_arready(o_ext_mas_prt_arready[ext_mas_cnt]), 
                                //input                   
                            .mo_rvalid(o_ext_mas_prt_rvalid[ext_mas_cnt]), 
                                .mo_rid(o_ext_mas_prt_rid[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                                .mo_rdata(o_ext_mas_prt_rdata[(ext_mas_cnt * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_AXI_DATA_WIDTH_INT]), 
                                .mo_rresp(o_ext_mas_prt_rresp[(ext_mas_cnt * 2) +: 2]), 
                                .mo_ruser(o_ext_mas_prt_ruser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mo_rlast(o_ext_mas_prt_rlast[ext_mas_cnt]), 
                                .mo_rready(i_ext_mas_prt_rready[ext_mas_cnt])) ; 
                end
            else
                begin : EXT_MAS_CDC_DIS_BLK
                    assign i_ext_mas_prt_awvalid[ext_mas_cnt] = axi_s_awvalid_i[ext_mas_cnt] ; 
                    assign i_ext_mas_prt_awaddr[(ext_mas_cnt * EXT_MAS_MAX_ADDR_WIDTH) +: EXT_MAS_AXI_ADDR_WIDTH_INT] = axi_s_awaddr_i[(ext_mas_cnt * EXT_MAS_MAX_ADDR_WIDTH) +: EXT_MAS_AXI_ADDR_WIDTH_INT] ; 
                    assign i_ext_mas_prt_awsize[(ext_mas_cnt * 3) +: 3] = axi_s_awsize_i[(ext_mas_cnt * 3) +: 3] ; 
                    assign i_ext_mas_prt_awlen[(ext_mas_cnt * 8) +: 8] = axi_s_awlen_i[(ext_mas_cnt * 8) +: 8] ; 
                    assign i_ext_mas_prt_awburst[(ext_mas_cnt * 2) +: 2] = axi_s_awburst_i[(ext_mas_cnt * 2) +: 2] ; 
                    assign i_ext_mas_prt_awcache[(ext_mas_cnt * 4) +: 4] = axi_s_awcache_i[(ext_mas_cnt * 4) +: 4] ; 
                    assign i_ext_mas_prt_awid[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = axi_s_awid_i[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] ; 
                    assign i_ext_mas_prt_awprot[(ext_mas_cnt * 3) +: 3] = axi_s_awprot_i[(ext_mas_cnt * 3) +: 3] ; 
                    assign i_ext_mas_prt_awlock[(ext_mas_cnt * 1) +: 1] = axi_s_awlock_i[(ext_mas_cnt * 1) +: 1] ; 
                    assign i_ext_mas_prt_awqos[(ext_mas_cnt * 4) +: 4] = axi_s_awqos_i[(ext_mas_cnt * 4) +: 4] ; 
                    assign i_ext_mas_prt_awregion[(ext_mas_cnt * 4) +: 4] = axi_s_awregion_i[(ext_mas_cnt * 4) +: 4] ; 
                    assign i_ext_mas_prt_awuser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = axi_s_awuser_i[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ; 
                    assign axi_s_awready_o[ext_mas_cnt] = o_ext_mas_prt_awready[ext_mas_cnt] ; 
                    assign i_ext_mas_prt_wvalid[ext_mas_cnt] = axi_s_wvalid_i[ext_mas_cnt] ; 
                    assign i_ext_mas_prt_wdata[(ext_mas_cnt * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_AXI_DATA_WIDTH_INT] = axi_s_wdata_i[(ext_mas_cnt * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_AXI_DATA_WIDTH_INT] ; 
                    assign i_ext_mas_prt_wstrb[((ext_mas_cnt * EXT_MAS_MAX_DATA_WIDTH) / 8) +: (EXT_MAS_AXI_DATA_WIDTH_INT / 8)] = axi_s_wstrb_i[((ext_mas_cnt * EXT_MAS_MAX_DATA_WIDTH) / 8) +: (EXT_MAS_AXI_DATA_WIDTH_INT / 8)] ; 
                    assign i_ext_mas_prt_wuser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = axi_s_wuser_i[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ; 
                    assign i_ext_mas_prt_wlast[ext_mas_cnt] = axi_s_wlast_i[ext_mas_cnt] ; 
                    assign axi_s_wready_o[ext_mas_cnt] = o_ext_mas_prt_wready[ext_mas_cnt] ; 
                    assign i_ext_mas_prt_arvalid[ext_mas_cnt] = axi_s_arvalid_i[ext_mas_cnt] ; 
                    assign i_ext_mas_prt_araddr[(ext_mas_cnt * EXT_MAS_MAX_ADDR_WIDTH) +: EXT_MAS_AXI_ADDR_WIDTH_INT] = axi_s_araddr_i[(ext_mas_cnt * EXT_MAS_MAX_ADDR_WIDTH) +: EXT_MAS_AXI_ADDR_WIDTH_INT] ; 
                    assign i_ext_mas_prt_arsize[(ext_mas_cnt * 3) +: 3] = axi_s_arsize_i[(ext_mas_cnt * 3) +: 3] ; 
                    assign i_ext_mas_prt_arlen[(ext_mas_cnt * 8) +: 8] = axi_s_arlen_i[(ext_mas_cnt * 8) +: 8] ; 
                    assign i_ext_mas_prt_arburst[(ext_mas_cnt * 2) +: 2] = axi_s_arburst_i[(ext_mas_cnt * 2) +: 2] ; 
                    assign i_ext_mas_prt_arcache[(ext_mas_cnt * 4) +: 4] = axi_s_arcache_i[(ext_mas_cnt * 4) +: 4] ; 
                    assign i_ext_mas_prt_arid[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = axi_s_arid_i[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] ; 
                    assign i_ext_mas_prt_arprot[(ext_mas_cnt * 3) +: 3] = axi_s_arprot_i[(ext_mas_cnt * 3) +: 3] ; 
                    assign i_ext_mas_prt_arlock[(ext_mas_cnt * 1) +: 1] = axi_s_arlock_i[(ext_mas_cnt * 1) +: 1] ; 
                    assign i_ext_mas_prt_arqos[(ext_mas_cnt * 4) +: 4] = axi_s_arqos_i[(ext_mas_cnt * 4) +: 4] ; 
                    assign i_ext_mas_prt_arregion[(ext_mas_cnt * 4) +: 4] = axi_s_arregion_i[(ext_mas_cnt * 4) +: 4] ; 
                    assign i_ext_mas_prt_aruser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = axi_s_aruser_i[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ; 
                    assign axi_s_arready_o[ext_mas_cnt] = o_ext_mas_prt_arready[ext_mas_cnt] ; 
                    assign axi_s_bvalid_o[ext_mas_cnt] = o_ext_mas_prt_bvalid[ext_mas_cnt] ; 
                    assign axi_s_bid_o[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = o_ext_mas_prt_bid[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] ; 
                    assign axi_s_bresp_o[(ext_mas_cnt * 2) +: 2] = o_ext_mas_prt_bresp[(ext_mas_cnt * 2) +: 2] ; 
                    assign axi_s_buser_o[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = o_ext_mas_prt_buser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ; 
                    assign i_ext_mas_prt_bready[ext_mas_cnt] = axi_s_bready_i[ext_mas_cnt] ; 
                    assign axi_s_rvalid_o[ext_mas_cnt] = o_ext_mas_prt_rvalid[ext_mas_cnt] ; 
                    assign axi_s_rid_o[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] = o_ext_mas_prt_rid[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH] ; 
                    assign axi_s_rdata_o[(ext_mas_cnt * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_AXI_DATA_WIDTH_INT] = o_ext_mas_prt_rdata[(ext_mas_cnt * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_AXI_DATA_WIDTH_INT] ; 
                    assign axi_s_rresp_o[(ext_mas_cnt * 2) +: 2] = o_ext_mas_prt_rresp[(ext_mas_cnt * 2) +: 2] ; 
                    assign axi_s_ruser_o[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = o_ext_mas_prt_ruser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ; 
                    assign axi_s_rlast_o[ext_mas_cnt] = o_ext_mas_prt_rlast[ext_mas_cnt] ; 
                    assign i_ext_mas_prt_rready[ext_mas_cnt] = axi_s_rready_i[ext_mas_cnt] ; 
                end
        end
        for (ext_slv_cnt = 0;(ext_slv_cnt < TOTAL_EXTSLV_CNT);ext_slv_cnt = (ext_slv_cnt + 1))
        begin : EXT_SLV_CDC_BLK
            localparam EXT_SLV_AXI_ADDR_WIDTH_INT = EXT_SLV_AXI_ADDR_WIDTH[(ext_slv_cnt * 7) +: 7] ; 
            localparam EXT_SLV_AXI_DATA_WIDTH_INT = EXT_SLV_AXI_DATA_WIDTH[(ext_slv_cnt * 11) +: 11] ; 
            localparam EXT_SLV_AXI_LEN_WIDTH_INT = EXT_SLV_AXI_LEN_WIDTH[(ext_slv_cnt * 4) +: 4] ; 
            //localparam EXT_SLV_AXI_LEN_WIDTH_INT  = EXT_SLV_AXI_PROTOCOL[ext_slv_cnt] ? 1 : 8;
            localparam EXT_SLV_AXI_WR_ISSUE_INT = EXT_SLV_AXI_WR_ISSUE[(ext_slv_cnt * 5) +: 5] ; 
            localparam EXT_SLV_AXI_RD_ISSUE_INT = EXT_SLV_AXI_RD_ISSUE[(ext_slv_cnt * 5) +: 5] ; 
            //localparam EXT_SLV_AXI_WR_ISSUE_INT   = (EXT_SLV_AXI_WR_ISSUE[ext_slv_cnt*5 +:5]==1 || EXT_SLV_AXI_WR_ISSUE[ext_slv_cnt*5 +:5]==3 || EXT_SLV_AXI_WR_ISSUE[ext_slv_cnt*5 +:5]==5 || EXT_SLV_AXI_WR_ISSUE[ext_slv_cnt*5 +:5]==7 || EXT_SLV_AXI_WR_ISSUE[ext_slv_cnt*5 +:5]==9 || EXT_SLV_AXI_WR_ISSUE[ext_slv_cnt*5 +:5]==11 || EXT_SLV_AXI_WR_ISSUE[ext_slv_cnt*5 +:5]==13 || EXT_SLV_AXI_WR_ISSUE[ext_slv_cnt*5 +:5]==15) ? EXT_SLV_AXI_WR_ISSUE[ext_slv_cnt*5 +:5]+1 : EXT_SLV_AXI_WR_ISSUE[ext_slv_cnt*5 +:5];
            //localparam EXT_SLV_AXI_RD_ISSUE_INT   = ( EXT_SLV_AXI_RD_ISSUE[ext_slv_cnt*5 +:5]==1 ||  EXT_SLV_AXI_RD_ISSUE[ext_slv_cnt*5 +:5] ==3 ||  EXT_SLV_AXI_RD_ISSUE[ext_slv_cnt*5 +:5] ==5 ||  EXT_SLV_AXI_RD_ISSUE[ext_slv_cnt*5 +:5] ==7 ||  EXT_SLV_AXI_RD_ISSUE[ext_slv_cnt*5 +:5] ==9 ||  EXT_SLV_AXI_RD_ISSUE[ext_slv_cnt*5 +:5] ==11 ||  EXT_SLV_AXI_RD_ISSUE[ext_slv_cnt*5 +:5] ==13 ||  EXT_SLV_AXI_RD_ISSUE[ext_slv_cnt*5 +:5] ==15) ? EXT_SLV_AXI_RD_ISSUE[ext_slv_cnt*5 +:5]+1 :  EXT_SLV_AXI_RD_ISSUE[ext_slv_cnt*5 +:5] ;
            localparam EXT_SLV_ACCESS_TYPE_INT = EXT_SLV_ACCESS_TYPE[(ext_slv_cnt * 2) +: 2] ; 
            assign axi_m_rlast_wire[ext_slv_cnt] = ((EXT_SLV_AXI_PROTOCOL[ext_slv_cnt] == 1) ? 1'b1 : axi_m_rlast_i[ext_slv_cnt]) ; 
            if ((EXT_SLV_CDC_EN[ext_slv_cnt] == 1)) 
                begin : EXT_SLV_CDC_EN_BLK
                    axi4_interconnect_ipgen_axi_cdc #(.AXI_ADDR_WIDTH(EXT_SLV_AXI_ADDR_WIDTH_INT),
                            .AXI_DATA_WIDTH(EXT_SLV_AXI_DATA_WIDTH_INT),
                            .AXI_ID_WIDTH(EXT_SLV_AXI_ID_WIDTH),
                            .AXI_LEN_WIDTH(EXT_SLV_AXI_LEN_WIDTH_INT),
                            .AXI_USER_WIDTH(AXI_USER_WIDTH),
                            .AXI_WR_FIFO_DEPTH(EXT_SLV_AXI_WR_ISSUE_INT),
                            .AXI_RD_FIFO_DEPTH(EXT_SLV_AXI_RD_ISSUE_INT),
                            .ACCESS_TYPE(EXT_SLV_ACCESS_TYPE_INT),
                            .WR_DATA_FIFO_DEPTH(EXT_SLV_WR_DATA_FIFO_DEPTH),
                            .BRESP_FIFO_DEPTH(EXT_SLV_BRESP_FIFO_DEPTH),
                            .RD_DATA_FIFO_DEPTH(EXT_SLV_RD_DATA_FIFO_DEPTH)) u_axi_cdc (//input                   
                            .mi_aclk(axi_aclk_i), 
                                .mi_rst_n(axi_aresetn_i), 
                                //input                   
                            .mi_awvalid(o_ext_slv_prt_awvalid[ext_slv_cnt]), 
                                .mi_awaddr(o_ext_slv_prt_awaddr[(ext_slv_cnt * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_AXI_ADDR_WIDTH_INT]), 
                                .mi_awsize(o_ext_slv_prt_awsize[(ext_slv_cnt * 3) +: 3]), 
                                .mi_awlen(o_ext_slv_prt_awlen[(ext_slv_cnt * 8) +: 8]), 
                                .mi_awburst(o_ext_slv_prt_awburst[(ext_slv_cnt * 2) +: 2]), 
                                .mi_awcache(o_ext_slv_prt_awcache[(ext_slv_cnt * 4) +: 4]), 
                                .mi_awid(o_ext_slv_prt_awid[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                                .mi_awprot(o_ext_slv_prt_awprot[(ext_slv_cnt * 3) +: 3]), 
                                .mi_awlock(o_ext_slv_prt_awlock[(ext_slv_cnt * 1) +: 1]), 
                                .mi_awqos(o_ext_slv_prt_awqos[(ext_slv_cnt * 4) +: 4]), 
                                .mi_awregion(o_ext_slv_prt_awregion[(ext_slv_cnt * 4) +: 4]), 
                                .mi_awuser(o_ext_slv_prt_awuser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mi_awready(i_ext_slv_prt_awready[ext_slv_cnt]), 
                                //input                   
                            .mi_wvalid(o_ext_slv_prt_wvalid[ext_slv_cnt]), 
                                .mi_wdata(o_ext_slv_prt_wdata[(ext_slv_cnt * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH_INT]), 
                                .mi_wstrb(o_ext_slv_prt_wstrb[((ext_slv_cnt * EXT_SLV_MAX_DATA_WIDTH) / 8) +: (EXT_SLV_AXI_DATA_WIDTH_INT / 8)]), 
                                .mi_wuser(o_ext_slv_prt_wuser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mi_wlast(o_ext_slv_prt_wlast[ext_slv_cnt]), 
                                .mi_wready(i_ext_slv_prt_wready[ext_slv_cnt]), 
                                //output                   
                            .mi_bvalid(i_ext_slv_prt_bvalid[ext_slv_cnt]), 
                                .mi_bid(i_ext_slv_prt_bid[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                                .mi_bresp(i_ext_slv_prt_bresp[(ext_slv_cnt * 2) +: 2]), 
                                .mi_buser(i_ext_slv_prt_buser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mi_bready(o_ext_slv_prt_bready[ext_slv_cnt]), 
                                //input                   
                            .mi_arvalid(o_ext_slv_prt_arvalid[ext_slv_cnt]), 
                                .mi_araddr(o_ext_slv_prt_araddr[(ext_slv_cnt * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_AXI_ADDR_WIDTH_INT]), 
                                .mi_arsize(o_ext_slv_prt_arsize[(ext_slv_cnt * 3) +: 3]), 
                                .mi_arlen(o_ext_slv_prt_arlen[(ext_slv_cnt * 8) +: 8]), 
                                .mi_arburst(o_ext_slv_prt_arburst[(ext_slv_cnt * 2) +: 2]), 
                                .mi_arcache(o_ext_slv_prt_arcache[(ext_slv_cnt * 4) +: 4]), 
                                .mi_arid(o_ext_slv_prt_arid[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                                .mi_arprot(o_ext_slv_prt_arprot[(ext_slv_cnt * 3) +: 3]), 
                                .mi_arlock(o_ext_slv_prt_arlock[(ext_slv_cnt * 1) +: 1]), 
                                .mi_arqos(o_ext_slv_prt_arqos[(ext_slv_cnt * 4) +: 4]), 
                                .mi_arregion(o_ext_slv_prt_arregion[(ext_slv_cnt * 4) +: 4]), 
                                .mi_aruser(o_ext_slv_prt_aruser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mi_arready(i_ext_slv_prt_arready[ext_slv_cnt]), 
                                //output                   
                            .mi_rvalid(i_ext_slv_prt_rvalid[ext_slv_cnt]), 
                                .mi_rdata(i_ext_slv_prt_rdata[(ext_slv_cnt * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH_INT]), 
                                .mi_rid(i_ext_slv_prt_rid[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                                .mi_rresp(i_ext_slv_prt_rresp[(ext_slv_cnt * 2) +: 2]), 
                                .mi_ruser(i_ext_slv_prt_ruser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mi_rlast(i_ext_slv_prt_rlast[ext_slv_cnt]), 
                                .mi_rready(o_ext_slv_prt_rready[ext_slv_cnt]), 
                                //input                   
                            .mo_aclk(axi_m_aclk_gated[ext_slv_cnt]), 
                                .mo_rst_n(axi_m_aresetn_i[ext_slv_cnt]), 
                                //output                   
                            .mo_awvalid(axi_m_awvalid_o[ext_slv_cnt]), 
                                .mo_awaddr(axi_m_awaddr_o[(ext_slv_cnt * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_AXI_ADDR_WIDTH_INT]), 
                                .mo_awsize(axi_m_awsize_o[(ext_slv_cnt * 3) +: 3]), 
                                .mo_awlen(axi_m_awlen_o[(ext_slv_cnt * 8) +: 8]), 
                                .mo_awburst(axi_m_awburst_o[(ext_slv_cnt * 2) +: 2]), 
                                .mo_awcache(axi_m_awcache_o[(ext_slv_cnt * 4) +: 4]), 
                                .mo_awid(axi_m_awid_o[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                                .mo_awprot(axi_m_awprot_o[(ext_slv_cnt * 3) +: 3]), 
                                .mo_awlock(axi_m_awlock_o[(ext_slv_cnt * 1) +: 1]), 
                                .mo_awqos(axi_m_awqos_o[(ext_slv_cnt * 4) +: 4]), 
                                .mo_awregion(axi_m_awregion_o[(ext_slv_cnt * 4) +: 4]), 
                                .mo_awuser(axi_m_awuser_o[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mo_awready(axi_m_awready_i[ext_slv_cnt]), 
                                //output                                                                                                                                                
                            .mo_wvalid(axi_m_wvalid_o[ext_slv_cnt]), 
                                .mo_wdata(axi_m_wdata_o[(ext_slv_cnt * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH_INT]), 
                                .mo_wstrb(axi_m_wstrb_o[((ext_slv_cnt * EXT_SLV_MAX_DATA_WIDTH) / 8) +: (EXT_SLV_AXI_DATA_WIDTH_INT / 8)]), 
                                .mo_wuser(axi_m_wuser_o[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mo_wlast(axi_m_wlast_o[ext_slv_cnt]), 
                                .mo_wready(axi_m_wready_i[ext_slv_cnt]), 
                                //input                   
                            .mo_bvalid(axi_m_bvalid_i[ext_slv_cnt]), 
                                .mo_bid(axi_m_bid_i[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                                .mo_bresp(axi_m_bresp_i[(ext_slv_cnt * 2) +: 2]), 
                                .mo_buser(axi_m_buser_i[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mo_bready(axi_m_bready_o[ext_slv_cnt]), 
                                //output                   
                            .mo_arvalid(axi_m_arvalid_o[ext_slv_cnt]), 
                                .mo_araddr(axi_m_araddr_o[(ext_slv_cnt * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_AXI_ADDR_WIDTH_INT]), 
                                .mo_arsize(axi_m_arsize_o[(ext_slv_cnt * 3) +: 3]), 
                                .mo_arlen(axi_m_arlen_o[(ext_slv_cnt * 8) +: 8]), 
                                .mo_arburst(axi_m_arburst_o[(ext_slv_cnt * 2) +: 2]), 
                                .mo_arcache(axi_m_arcache_o[(ext_slv_cnt * 4) +: 4]), 
                                .mo_arid(axi_m_arid_o[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                                .mo_arprot(axi_m_arprot_o[(ext_slv_cnt * 3) +: 3]), 
                                .mo_arlock(axi_m_arlock_o[(ext_slv_cnt * 1) +: 1]), 
                                .mo_arqos(axi_m_arqos_o[(ext_slv_cnt * 4) +: 4]), 
                                .mo_arregion(axi_m_arregion_o[(ext_slv_cnt * 4) +: 4]), 
                                .mo_aruser(axi_m_aruser_o[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mo_arready(axi_m_arready_i[ext_slv_cnt]), 
                                //input              
                            .mo_rvalid(axi_m_rvalid_i[ext_slv_cnt]), 
                                .mo_rdata(axi_m_rdata_i[(ext_slv_cnt * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH_INT]), 
                                .mo_rid(axi_m_rid_i[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                                .mo_rresp(axi_m_rresp_i[(ext_slv_cnt * 2) +: 2]), 
                                .mo_ruser(axi_m_ruser_i[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                                .mo_rlast(axi_m_rlast_wire[ext_slv_cnt]), 
                                .mo_rready(axi_m_rready_o[ext_slv_cnt])) ; 
                end
            else
                begin : EXT_SLV_CDC_DIS_BLK
                    assign axi_m_awvalid_o[ext_slv_cnt] = o_ext_slv_prt_awvalid[ext_slv_cnt] ; 
                    assign axi_m_awaddr_o[(ext_slv_cnt * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_AXI_ADDR_WIDTH_INT] = o_ext_slv_prt_awaddr[(ext_slv_cnt * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_AXI_ADDR_WIDTH_INT] ; 
                    assign axi_m_awsize_o[(ext_slv_cnt * 3) +: 3] = o_ext_slv_prt_awsize[(ext_slv_cnt * 3) +: 3] ; 
                    assign axi_m_awlen_o[(ext_slv_cnt * 8) +: 8] = o_ext_slv_prt_awlen[(ext_slv_cnt * 8) +: 8] ; 
                    assign axi_m_awburst_o[(ext_slv_cnt * 2) +: 2] = o_ext_slv_prt_awburst[(ext_slv_cnt * 2) +: 2] ; 
                    assign axi_m_awcache_o[(ext_slv_cnt * 4) +: 4] = o_ext_slv_prt_awcache[(ext_slv_cnt * 4) +: 4] ; 
                    assign axi_m_awid_o[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH] = o_ext_slv_prt_awid[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH] ; 
                    assign axi_m_awprot_o[(ext_slv_cnt * 3) +: 3] = o_ext_slv_prt_awprot[(ext_slv_cnt * 3) +: 3] ; 
                    assign axi_m_awlock_o[(ext_slv_cnt * 1) +: 1] = o_ext_slv_prt_awlock[(ext_slv_cnt * 1) +: 1] ; 
                    assign axi_m_awqos_o[(ext_slv_cnt * 4) +: 4] = o_ext_slv_prt_awqos[(ext_slv_cnt * 4) +: 4] ; 
                    assign axi_m_awregion_o[(ext_slv_cnt * 4) +: 4] = o_ext_slv_prt_awregion[(ext_slv_cnt * 4) +: 4] ; 
                    assign axi_m_awuser_o[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = o_ext_slv_prt_awuser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ; 
                    assign i_ext_slv_prt_awready[ext_slv_cnt] = axi_m_awready_i[ext_slv_cnt] ; 
                    assign axi_m_wvalid_o[ext_slv_cnt] = o_ext_slv_prt_wvalid[ext_slv_cnt] ; 
                    assign axi_m_wdata_o[(ext_slv_cnt * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH_INT] = o_ext_slv_prt_wdata[(ext_slv_cnt * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH_INT] ; 
                    assign axi_m_wstrb_o[(ext_slv_cnt * (EXT_SLV_MAX_DATA_WIDTH / 8)) +: (EXT_SLV_AXI_DATA_WIDTH_INT / 8)] = o_ext_slv_prt_wstrb[(ext_slv_cnt * (EXT_SLV_MAX_DATA_WIDTH / 8)) +: (EXT_SLV_AXI_DATA_WIDTH_INT / 8)] ; 
                    assign axi_m_wuser_o[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = o_ext_slv_prt_wuser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ; 
                    assign axi_m_wlast_o[ext_slv_cnt] = o_ext_slv_prt_wlast[ext_slv_cnt] ; 
                    assign i_ext_slv_prt_wready[ext_slv_cnt] = axi_m_wready_i[ext_slv_cnt] ; 
                    assign i_ext_slv_prt_bvalid[ext_slv_cnt] = axi_m_bvalid_i[ext_slv_cnt] ; 
                    assign i_ext_slv_prt_bid[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH] = axi_m_bid_i[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH] ; 
                    assign i_ext_slv_prt_bresp[(ext_slv_cnt * 2) +: 2] = axi_m_bresp_i[(ext_slv_cnt * 2) +: 2] ; 
                    assign i_ext_slv_prt_buser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = axi_m_buser_i[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ; 
                    assign axi_m_bready_o[ext_slv_cnt] = o_ext_slv_prt_bready[ext_slv_cnt] ; 
                    assign axi_m_arvalid_o[ext_slv_cnt] = o_ext_slv_prt_arvalid[ext_slv_cnt] ; 
                    assign axi_m_araddr_o[(ext_slv_cnt * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_AXI_ADDR_WIDTH_INT] = o_ext_slv_prt_araddr[(ext_slv_cnt * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_AXI_ADDR_WIDTH_INT] ; 
                    assign axi_m_arsize_o[(ext_slv_cnt * 3) +: 3] = o_ext_slv_prt_arsize[(ext_slv_cnt * 3) +: 3] ; 
                    assign axi_m_arlen_o[(ext_slv_cnt * 8) +: 8] = o_ext_slv_prt_arlen[(ext_slv_cnt * 8) +: 8] ; 
                    assign axi_m_arburst_o[(ext_slv_cnt * 2) +: 2] = o_ext_slv_prt_arburst[(ext_slv_cnt * 2) +: 2] ; 
                    assign axi_m_arcache_o[(ext_slv_cnt * 4) +: 4] = o_ext_slv_prt_arcache[(ext_slv_cnt * 4) +: 4] ; 
                    assign axi_m_arid_o[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH] = o_ext_slv_prt_arid[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH] ; 
                    assign axi_m_arprot_o[(ext_slv_cnt * 3) +: 3] = o_ext_slv_prt_arprot[(ext_slv_cnt * 3) +: 3] ; 
                    assign axi_m_arlock_o[(ext_slv_cnt * 1) +: 1] = o_ext_slv_prt_arlock[(ext_slv_cnt * 1) +: 1] ; 
                    assign axi_m_arqos_o[(ext_slv_cnt * 4) +: 4] = o_ext_slv_prt_arqos[(ext_slv_cnt * 4) +: 4] ; 
                    assign axi_m_arregion_o[(ext_slv_cnt * 4) +: 4] = o_ext_slv_prt_arregion[(ext_slv_cnt * 4) +: 4] ; 
                    assign axi_m_aruser_o[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = o_ext_slv_prt_aruser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ; 
                    assign i_ext_slv_prt_arready[ext_slv_cnt] = axi_m_arready_i[ext_slv_cnt] ; 
                    assign i_ext_slv_prt_rvalid[ext_slv_cnt] = axi_m_rvalid_i[ext_slv_cnt] ; 
                    assign i_ext_slv_prt_rdata[(ext_slv_cnt * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH_INT] = axi_m_rdata_i[(ext_slv_cnt * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH_INT] ; 
                    assign i_ext_slv_prt_rid[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH] = axi_m_rid_i[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH] ; 
                    assign i_ext_slv_prt_rresp[(ext_slv_cnt * 2) +: 2] = axi_m_rresp_i[(ext_slv_cnt * 2) +: 2] ; 
                    assign i_ext_slv_prt_ruser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] = axi_m_ruser_i[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH] ; 
                    assign i_ext_slv_prt_rlast[ext_slv_cnt] = axi_m_rlast_wire[ext_slv_cnt] ; 
                    assign axi_m_rready_o[ext_slv_cnt] = o_ext_slv_prt_rready[ext_slv_cnt] ; 
                end
        end
    endgenerate
endmodule



module axi4_interconnect_ipgen_lscc_sync_axi_interconnect (aclk_i, 
        aresetn_i, 
        i_ext_mas_prt_awvalid, 
        i_ext_mas_prt_awaddr, 
        i_ext_mas_prt_awsize, 
        i_ext_mas_prt_awlen, 
        i_ext_mas_prt_awburst, 
        i_ext_mas_prt_awcache, 
        i_ext_mas_prt_awid, 
        i_ext_mas_prt_awprot, 
        i_ext_mas_prt_awlock, 
        i_ext_mas_prt_awqos, 
        i_ext_mas_prt_awregion, 
        i_ext_mas_prt_awuser, 
        o_ext_mas_prt_awready, 
        i_ext_mas_prt_wvalid, 
        i_ext_mas_prt_wdata, 
        i_ext_mas_prt_wstrb, 
        i_ext_mas_prt_wlast, 
        i_ext_mas_prt_wuser, 
        o_ext_mas_prt_wready, 
        i_ext_mas_prt_arvalid, 
        i_ext_mas_prt_araddr, 
        i_ext_mas_prt_arsize, 
        i_ext_mas_prt_arlen, 
        i_ext_mas_prt_arburst, 
        i_ext_mas_prt_arcache, 
        i_ext_mas_prt_arid, 
        i_ext_mas_prt_arprot, 
        i_ext_mas_prt_arlock, 
        i_ext_mas_prt_arqos, 
        i_ext_mas_prt_arregion, 
        i_ext_mas_prt_aruser, 
        o_ext_mas_prt_arready, 
        o_ext_mas_prt_bvalid, 
        o_ext_mas_prt_bresp, 
        o_ext_mas_prt_bid, 
        o_ext_mas_prt_buser, 
        i_ext_mas_prt_bready, 
        o_ext_mas_prt_rvalid, 
        o_ext_mas_prt_rdata, 
        o_ext_mas_prt_rid, 
        o_ext_mas_prt_rlast, 
        o_ext_mas_prt_ruser, 
        o_ext_mas_prt_rresp, 
        i_ext_mas_prt_rready, 
        o_ext_slv_prt_awvalid, 
        o_ext_slv_prt_awaddr, 
        o_ext_slv_prt_awsize, 
        o_ext_slv_prt_awlen, 
        o_ext_slv_prt_awburst, 
        o_ext_slv_prt_awcache, 
        o_ext_slv_prt_awid, 
        o_ext_slv_prt_awprot, 
        o_ext_slv_prt_awlock, 
        o_ext_slv_prt_awqos, 
        o_ext_slv_prt_awregion, 
        o_ext_slv_prt_awuser, 
        i_ext_slv_prt_awready, 
        o_ext_slv_prt_wvalid, 
        o_ext_slv_prt_wdata, 
        o_ext_slv_prt_wstrb, 
        o_ext_slv_prt_wlast, 
        o_ext_slv_prt_wuser, 
        i_ext_slv_prt_wready, 
        o_ext_slv_prt_arvalid, 
        o_ext_slv_prt_araddr, 
        o_ext_slv_prt_arsize, 
        o_ext_slv_prt_arlen, 
        o_ext_slv_prt_arburst, 
        o_ext_slv_prt_arcache, 
        o_ext_slv_prt_arid, 
        o_ext_slv_prt_arprot, 
        o_ext_slv_prt_arlock, 
        o_ext_slv_prt_arqos, 
        o_ext_slv_prt_arregion, 
        o_ext_slv_prt_aruser, 
        i_ext_slv_prt_arready, 
        i_ext_slv_prt_bvalid, 
        i_ext_slv_prt_bresp, 
        i_ext_slv_prt_bid, 
        i_ext_slv_prt_buser, 
        o_ext_slv_prt_bready, 
        i_ext_slv_prt_rvalid, 
        i_ext_slv_prt_rdata, 
        i_ext_slv_prt_rid, 
        i_ext_slv_prt_rlast, 
        i_ext_slv_prt_ruser, 
        i_ext_slv_prt_rresp, 
        o_ext_slv_prt_rready) ;
    parameter TOTAL_EXTMAS_CNT = 2 ; 
    parameter TOTAL_EXTSLV_CNT = 32 ; 
    parameter AXI_USER_WIDTH = 4 ; 
    parameter EXT_MAS_AXI_ID_WIDTH = 6 ; 
    parameter EXT_MAS_MAX_ADDR_WIDTH = 16 ; 
    parameter EXT_MAS_MAX_DATA_WIDTH = 32 ; 
    parameter [(TOTAL_EXTMAS_CNT - 1):0] EXT_MAS_CDC_EN = {TOTAL_EXTMAS_CNT{1'b0}} ; 
    parameter [(TOTAL_EXTMAS_CNT - 1):0] ID_ORDER_EN_EXT_MAS = {TOTAL_EXTMAS_CNT{1'b0}} ; 
    parameter integer MAX_NUM_OF_ID_EXT_MAS_SUPPRT = 4 ; 
    parameter [((TOTAL_EXTMAS_CNT * 7) - 1):0] NUM_OF_ID_EXT_MAS_SUPPRT = {TOTAL_EXTMAS_CNT{7'd64}} ; 
    parameter [(TOTAL_EXTMAS_CNT - 1):0] EXT_MAS_AXI_PROTOCOL = {TOTAL_EXTMAS_CNT{1'b0}} ; 
    parameter [((TOTAL_EXTMAS_CNT * 7) - 1):0] EXT_MAS_AXI_ADDR_WIDTH = {TOTAL_EXTMAS_CNT{7'd32}} ; 
    parameter [((TOTAL_EXTMAS_CNT * 11) - 1):0] EXT_MAS_AXI_DATA_WIDTH = {TOTAL_EXTMAS_CNT{11'd64}} ; 
    parameter [((TOTAL_EXTMAS_CNT * 4) - 1):0] EXT_MAS_AXI_LEN_WIDTH = {TOTAL_EXTMAS_CNT{4'd8}} ; 
    parameter [((TOTAL_EXTMAS_CNT * 5) - 1):0] EXT_MAS_AXI_WR_ACCEPT = {TOTAL_EXTMAS_CNT{5'd16}} ; 
    parameter [((TOTAL_EXTMAS_CNT * 5) - 1):0] EXT_MAS_AXI_RD_ACCEPT = {TOTAL_EXTMAS_CNT{5'd16}} ; 
    parameter [(TOTAL_EXTMAS_CNT - 1):0] EXT_MAS_PRIORITY_SCHEME = {TOTAL_EXTMAS_CNT{1'b0}} ; 
    parameter [(((TOTAL_EXTMAS_CNT * TOTAL_EXTSLV_CNT) * 5) - 1):0] EXT_MAS_FIXED_PRIORITY = {((TOTAL_EXTMAS_CNT * TOTAL_EXTSLV_CNT) * 5){1'b0}} ; 
    parameter [((TOTAL_EXTMAS_CNT * 2) - 1):0] EXT_MAS_ACCESS_TYPE = {TOTAL_EXTMAS_CNT{2'd2}} ; 
    parameter [((TOTAL_EXTSLV_CNT * 5) - 1):0] EXT_MAS_AWR_GNT_FF_DEPTH = {TOTAL_EXTSLV_CNT{5'd16}} ; 
    parameter EXT_MAS_WR_DATA_FIFO_DEPTH = 8 ; 
    parameter EXT_MAS_BRESP_FIFO_DEPTH = 8 ; 
    parameter EXT_MAS_RD_DATA_FIFO_DEPTH = 8 ; 
    parameter EXT_SLV_AXI_ID_WIDTH = 11 ; 
    parameter EXT_SLV_MAX_ADDR_WIDTH = 16 ; 
    parameter EXT_SLV_MAX_DATA_WIDTH = 32 ; 
    parameter [(TOTAL_EXTSLV_CNT - 1):0] EXT_SLV_AXI_PROTOCOL = {TOTAL_EXTSLV_CNT{1'b0}} ; 
    parameter [((TOTAL_EXTSLV_CNT * 7) - 1):0] EXT_SLV_AXI_ADDR_WIDTH = {TOTAL_EXTSLV_CNT{7'd32}} ; 
    parameter [((TOTAL_EXTSLV_CNT * 11) - 1):0] EXT_SLV_AXI_DATA_WIDTH = {TOTAL_EXTSLV_CNT{11'd64}} ; 
    parameter [((TOTAL_EXTSLV_CNT * 4) - 1):0] EXT_SLV_AXI_LEN_WIDTH = {TOTAL_EXTSLV_CNT{4'd8}} ; 
    parameter [((TOTAL_EXTSLV_CNT * 5) - 1):0] EXT_SLV_AXI_WR_ISSUE = {TOTAL_EXTSLV_CNT{5'd16}} ; 
    parameter [((TOTAL_EXTSLV_CNT * 5) - 1):0] EXT_SLV_AXI_RD_ISSUE = {TOTAL_EXTSLV_CNT{5'd16}} ; 
    parameter [TOTAL_EXTSLV_CNT:0] EXT_SLV_PRIORITY_SCHEME = {(TOTAL_EXTSLV_CNT + 1){1'b0}} ; 
    parameter [((((TOTAL_EXTSLV_CNT + 1) * TOTAL_EXTMAS_CNT) * 5) - 1):0] EXT_SLV_FIXED_PRIORITY = {(((TOTAL_EXTSLV_CNT + 1) * TOTAL_EXTMAS_CNT) * 5){1'b0}} ; 
    parameter EXT_SLV_MAX_FRAGMENT_CNT = 8 ; 
    parameter [((TOTAL_EXTSLV_CNT * 4) - 1):0] EXT_SLV_FRAGMENT_CNT = {TOTAL_EXTSLV_CNT{4'd8}} ; 
    parameter [(((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_FRAGMENT_CNT) * 64) - 1):0] EXT_SLV_FRAGMENT_BASE_ADDR = {((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_FRAGMENT_CNT) * 64){1'b0}} ; 
    parameter [(((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_FRAGMENT_CNT) * 64) - 1):0] EXT_SLV_FRAGMENT_END_ADDR = {((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_FRAGMENT_CNT) * 64){1'b0}} ; 
    parameter [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] EXT_SLV_ACCESS_TYPE = {(TOTAL_EXTSLV_CNT + 1){2'd2}} ; 
    parameter LATTICE_FIFO = 1'b0 ; 
    parameter EXT_SLV_AW_FF_DEPTH = 8 ; 
    parameter EXT_SLV_WR_DATA_FIFO_DEPTH = 8 ; 
    parameter EXT_SLV_BRESP_FIFO_DEPTH = 8 ; 
    parameter EXT_SLV_RD_DATA_FIFO_DEPTH = 8 ; 
    input aclk_i ; 
    input aresetn_i ; 
    //External master interface from MAS PORT   
    input [(TOTAL_EXTMAS_CNT - 1):0] i_ext_mas_prt_awvalid ; 
    input [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_ADDR_WIDTH) - 1):0] i_ext_mas_prt_awaddr ; 
    input [((TOTAL_EXTMAS_CNT * 3) - 1):0] i_ext_mas_prt_awsize ; 
    input [((TOTAL_EXTMAS_CNT * 8) - 1):0] i_ext_mas_prt_awlen ; 
    input [((TOTAL_EXTMAS_CNT * 2) - 1):0] i_ext_mas_prt_awburst ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] i_ext_mas_prt_awcache ; 
    input [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] i_ext_mas_prt_awid ; 
    input [((TOTAL_EXTMAS_CNT * 3) - 1):0] i_ext_mas_prt_awprot ; 
    input [((TOTAL_EXTMAS_CNT * 1) - 1):0] i_ext_mas_prt_awlock ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] i_ext_mas_prt_awqos ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] i_ext_mas_prt_awregion ; 
    input [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] i_ext_mas_prt_awuser ; 
    output [(TOTAL_EXTMAS_CNT - 1):0] o_ext_mas_prt_awready ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] i_ext_mas_prt_wvalid ; 
    input [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_DATA_WIDTH) - 1):0] i_ext_mas_prt_wdata ; 
    input [((TOTAL_EXTMAS_CNT * (EXT_MAS_MAX_DATA_WIDTH / 8)) - 1):0] i_ext_mas_prt_wstrb ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] i_ext_mas_prt_wlast ; 
    input [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] i_ext_mas_prt_wuser ; 
    output [(TOTAL_EXTMAS_CNT - 1):0] o_ext_mas_prt_wready ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] i_ext_mas_prt_arvalid ; 
    input [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_ADDR_WIDTH) - 1):0] i_ext_mas_prt_araddr ; 
    input [((TOTAL_EXTMAS_CNT * 3) - 1):0] i_ext_mas_prt_arsize ; 
    input [((TOTAL_EXTMAS_CNT * 8) - 1):0] i_ext_mas_prt_arlen ; 
    input [((TOTAL_EXTMAS_CNT * 2) - 1):0] i_ext_mas_prt_arburst ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] i_ext_mas_prt_arcache ; 
    input [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] i_ext_mas_prt_arid ; 
    input [((TOTAL_EXTMAS_CNT * 3) - 1):0] i_ext_mas_prt_arprot ; 
    input [((TOTAL_EXTMAS_CNT * 1) - 1):0] i_ext_mas_prt_arlock ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] i_ext_mas_prt_arqos ; 
    input [((TOTAL_EXTMAS_CNT * 4) - 1):0] i_ext_mas_prt_arregion ; 
    input [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] i_ext_mas_prt_aruser ; 
    output [(TOTAL_EXTMAS_CNT - 1):0] o_ext_mas_prt_arready ; 
    output [(TOTAL_EXTMAS_CNT - 1):0] o_ext_mas_prt_bvalid ; 
    output [((TOTAL_EXTMAS_CNT * 2) - 1):0] o_ext_mas_prt_bresp ; 
    output [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] o_ext_mas_prt_bid ; 
    output [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] o_ext_mas_prt_buser ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] i_ext_mas_prt_bready ; 
    output [(TOTAL_EXTMAS_CNT - 1):0] o_ext_mas_prt_rvalid ; 
    output [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_DATA_WIDTH) - 1):0] o_ext_mas_prt_rdata ; 
    output [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] o_ext_mas_prt_rid ; 
    output [(TOTAL_EXTMAS_CNT - 1):0] o_ext_mas_prt_rlast ; 
    output [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] o_ext_mas_prt_ruser ; 
    output [((TOTAL_EXTMAS_CNT * 2) - 1):0] o_ext_mas_prt_rresp ; 
    input [(TOTAL_EXTMAS_CNT - 1):0] i_ext_mas_prt_rready ; 
    //External slave interface from SLV PORT   
    output [(TOTAL_EXTSLV_CNT - 1):0] o_ext_slv_prt_awvalid ; 
    output [((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_ADDR_WIDTH) - 1):0] o_ext_slv_prt_awaddr ; 
    output [((TOTAL_EXTSLV_CNT * 3) - 1):0] o_ext_slv_prt_awsize ; 
    output [((TOTAL_EXTSLV_CNT * 8) - 1):0] o_ext_slv_prt_awlen ; 
    output [((TOTAL_EXTSLV_CNT * 2) - 1):0] o_ext_slv_prt_awburst ; 
    output [((TOTAL_EXTSLV_CNT * 4) - 1):0] o_ext_slv_prt_awcache ; 
    output [((TOTAL_EXTSLV_CNT * EXT_SLV_AXI_ID_WIDTH) - 1):0] o_ext_slv_prt_awid ; 
    output [((TOTAL_EXTSLV_CNT * 3) - 1):0] o_ext_slv_prt_awprot ; 
    output [((TOTAL_EXTSLV_CNT * 1) - 1):0] o_ext_slv_prt_awlock ; 
    output [((TOTAL_EXTSLV_CNT * 4) - 1):0] o_ext_slv_prt_awqos ; 
    output [((TOTAL_EXTSLV_CNT * 4) - 1):0] o_ext_slv_prt_awregion ; 
    output [((TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) - 1):0] o_ext_slv_prt_awuser ; 
    input [(TOTAL_EXTSLV_CNT - 1):0] i_ext_slv_prt_awready ; 
    output [(TOTAL_EXTSLV_CNT - 1):0] o_ext_slv_prt_wvalid ; 
    output [((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_DATA_WIDTH) - 1):0] o_ext_slv_prt_wdata ; 
    output [((TOTAL_EXTSLV_CNT * (EXT_SLV_MAX_DATA_WIDTH / 8)) - 1):0] o_ext_slv_prt_wstrb ; 
    output [(TOTAL_EXTSLV_CNT - 1):0] o_ext_slv_prt_wlast ; 
    output [((TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) - 1):0] o_ext_slv_prt_wuser ; 
    input [(TOTAL_EXTSLV_CNT - 1):0] i_ext_slv_prt_wready ; 
    output [(TOTAL_EXTSLV_CNT - 1):0] o_ext_slv_prt_arvalid ; 
    output [((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_ADDR_WIDTH) - 1):0] o_ext_slv_prt_araddr ; 
    output [((TOTAL_EXTSLV_CNT * 3) - 1):0] o_ext_slv_prt_arsize ; 
    output [((TOTAL_EXTSLV_CNT * 8) - 1):0] o_ext_slv_prt_arlen ; 
    output [((TOTAL_EXTSLV_CNT * 2) - 1):0] o_ext_slv_prt_arburst ; 
    output [((TOTAL_EXTSLV_CNT * 4) - 1):0] o_ext_slv_prt_arcache ; 
    output [((TOTAL_EXTSLV_CNT * EXT_SLV_AXI_ID_WIDTH) - 1):0] o_ext_slv_prt_arid ; 
    output [((TOTAL_EXTSLV_CNT * 3) - 1):0] o_ext_slv_prt_arprot ; 
    output [((TOTAL_EXTSLV_CNT * 1) - 1):0] o_ext_slv_prt_arlock ; 
    output [((TOTAL_EXTSLV_CNT * 4) - 1):0] o_ext_slv_prt_arqos ; 
    output [((TOTAL_EXTSLV_CNT * 4) - 1):0] o_ext_slv_prt_arregion ; 
    output [((TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) - 1):0] o_ext_slv_prt_aruser ; 
    input [(TOTAL_EXTSLV_CNT - 1):0] i_ext_slv_prt_arready ; 
    input [(TOTAL_EXTSLV_CNT - 1):0] i_ext_slv_prt_bvalid ; 
    input [((TOTAL_EXTSLV_CNT * 2) - 1):0] i_ext_slv_prt_bresp ; 
    input [((TOTAL_EXTSLV_CNT * EXT_SLV_AXI_ID_WIDTH) - 1):0] i_ext_slv_prt_bid ; 
    input [((TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) - 1):0] i_ext_slv_prt_buser ; 
    output [(TOTAL_EXTSLV_CNT - 1):0] o_ext_slv_prt_bready ; 
    input [(TOTAL_EXTSLV_CNT - 1):0] i_ext_slv_prt_rvalid ; 
    input [((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_DATA_WIDTH) - 1):0] i_ext_slv_prt_rdata ; 
    input [((TOTAL_EXTSLV_CNT * EXT_SLV_AXI_ID_WIDTH) - 1):0] i_ext_slv_prt_rid ; 
    input [(TOTAL_EXTSLV_CNT - 1):0] i_ext_slv_prt_rlast ; 
    input [((TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) - 1):0] i_ext_slv_prt_ruser ; 
    input [((TOTAL_EXTSLV_CNT * 2) - 1):0] i_ext_slv_prt_rresp ; 
    output [(TOTAL_EXTSLV_CNT - 1):0] o_ext_slv_prt_rready ; 
    //Internal wire declaration - EXTERNAL MASTER TO CROSSBAR
    logic [(TOTAL_EXTMAS_CNT - 1):0] ext_mas_prt_to_cb_awvalid ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_ADDR_WIDTH) - 1):0] ext_mas_prt_to_cb_awaddr ; 
    logic [((TOTAL_EXTMAS_CNT * 3) - 1):0] ext_mas_prt_to_cb_awsize ; 
    logic [((TOTAL_EXTMAS_CNT * 8) - 1):0] ext_mas_prt_to_cb_awlen ; 
    logic [((TOTAL_EXTMAS_CNT * 2) - 1):0] ext_mas_prt_to_cb_awburst ; 
    logic [((TOTAL_EXTMAS_CNT * 4) - 1):0] ext_mas_prt_to_cb_awcache ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] ext_mas_prt_to_cb_awid ; 
    logic [((TOTAL_EXTMAS_CNT * 3) - 1):0] ext_mas_prt_to_cb_awprot ; 
    logic [((TOTAL_EXTMAS_CNT * 1) - 1):0] ext_mas_prt_to_cb_awlock ; 
    logic [((TOTAL_EXTMAS_CNT * 4) - 1):0] ext_mas_prt_to_cb_awqos ; 
    logic [((TOTAL_EXTMAS_CNT * 4) - 1):0] ext_mas_prt_to_cb_awregion ; 
    logic [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] ext_mas_prt_to_cb_awuser ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] cb_to_ext_mas_prt_awready ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] cb_to_ext_mas_prt_split_awready ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] ext_mas_prt_to_cb_wvalid ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_DATA_WIDTH) - 1):0] ext_mas_prt_to_cb_wdata ; 
    logic [((TOTAL_EXTMAS_CNT * (EXT_MAS_MAX_DATA_WIDTH / 8)) - 1):0] ext_mas_prt_to_cb_wstrb ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] ext_mas_prt_to_cb_wlast ; 
    logic [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] ext_mas_prt_to_cb_wuser ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] cb_to_ext_mas_prt_wready ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] ext_mas_prt_to_cb_arvalid ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_ADDR_WIDTH) - 1):0] ext_mas_prt_to_cb_araddr ; 
    logic [((TOTAL_EXTMAS_CNT * 3) - 1):0] ext_mas_prt_to_cb_arsize ; 
    logic [((TOTAL_EXTMAS_CNT * 8) - 1):0] ext_mas_prt_to_cb_arlen ; 
    logic [((TOTAL_EXTMAS_CNT * 2) - 1):0] ext_mas_prt_to_cb_arburst ; 
    logic [((TOTAL_EXTMAS_CNT * 4) - 1):0] ext_mas_prt_to_cb_arcache ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] ext_mas_prt_to_cb_arid ; 
    logic [((TOTAL_EXTMAS_CNT * 3) - 1):0] ext_mas_prt_to_cb_arprot ; 
    logic [((TOTAL_EXTMAS_CNT * 1) - 1):0] ext_mas_prt_to_cb_arlock ; 
    logic [((TOTAL_EXTMAS_CNT * 4) - 1):0] ext_mas_prt_to_cb_arqos ; 
    logic [((TOTAL_EXTMAS_CNT * 4) - 1):0] ext_mas_prt_to_cb_arregion ; 
    logic [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] ext_mas_prt_to_cb_aruser ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] cb_to_ext_mas_prt_arready ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] cb_to_ext_mas_prt_split_arready ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] cb_to_ext_mas_prt_bvalid ; 
    logic [((TOTAL_EXTMAS_CNT * 2) - 1):0] cb_to_ext_mas_prt_bresp ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] cb_to_ext_mas_prt_bid ; 
    logic [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] cb_to_ext_mas_prt_buser ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] ext_mas_prt_to_cb_bready ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] cb_to_ext_mas_prt_rvalid ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_SLV_MAX_DATA_WIDTH) - 1):0] cb_to_ext_mas_prt_rdata ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_MAS_AXI_ID_WIDTH) - 1):0] cb_to_ext_mas_prt_rid ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] cb_to_ext_mas_prt_rlast ; 
    logic [((TOTAL_EXTMAS_CNT * AXI_USER_WIDTH) - 1):0] cb_to_ext_mas_prt_ruser ; 
    logic [((TOTAL_EXTMAS_CNT * 2) - 1):0] cb_to_ext_mas_prt_rresp ; 
    logic [(TOTAL_EXTMAS_CNT - 1):0] ext_mas_prt_to_cb_rready ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_ADDR_WIDTH) - 1):0] ext_mas_prt_to_cb_awaddr_int ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_ADDR_WIDTH) - 1):0] ext_mas_prt_to_cb_araddr_int ; 
    logic [((TOTAL_EXTMAS_CNT * EXT_MAS_MAX_DATA_WIDTH) - 1):0] ext_mas_prt_to_cb_wdata_int ; 
    logic [((TOTAL_EXTMAS_CNT * (EXT_MAS_MAX_DATA_WIDTH / 8)) - 1):0] ext_mas_prt_to_cb_wstrb_int ; 
    logic [((TOTAL_EXTMAS_CNT * 6) - 1):0] ext_mas_prt_to_cb_ext_slv_wr_sel ; 
    logic [((TOTAL_EXTMAS_CNT * 6) - 1):0] ext_mas_prt_to_cb_ext_slv_rd_sel ; 
    logic [((TOTAL_EXTMAS_CNT * 6) - 1):0] ext_mas_prt_to_cb_ext_slv_dwr_sel ; 
    logic [((MAX_NUM_OF_ID_EXT_MAS_SUPPRT * 6) - 1):0] ext_mas_prt_to_cb_bid_ext_slv_gnt [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [((MAX_NUM_OF_ID_EXT_MAS_SUPPRT * 6) - 1):0] ext_mas_prt_to_cb_rid_ext_slv_gnt [(TOTAL_EXTMAS_CNT - 1):0] ; 
    logic [(((TOTAL_EXTMAS_CNT * MAX_NUM_OF_ID_EXT_MAS_SUPPRT) * 6) - 1):0] ext_mas_prt_to_cb_bid_ext_slv_gnt_int ; 
    logic [(((TOTAL_EXTMAS_CNT * MAX_NUM_OF_ID_EXT_MAS_SUPPRT) * 6) - 1):0] ext_mas_prt_to_cb_rid_ext_slv_gnt_int ; 
    logic [((TOTAL_EXTMAS_CNT * 6) - 1):0] cb_to_ext_mas_prt_ext_slv_wrresp_gnt ; 
    logic [((TOTAL_EXTMAS_CNT * 6) - 1):0] cb_to_ext_mas_prt_ext_slv_rdresp_gnt ; 
    //Internal wire declaration - CROSSBAR TO EXTERNAL SLAVE
    logic [TOTAL_EXTSLV_CNT:0] cb_to_ext_slv_prt_awvalid ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_MAX_ADDR_WIDTH) - 1):0] cb_to_ext_slv_prt_awaddr ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 3) - 1):0] cb_to_ext_slv_prt_awsize ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 8) - 1):0] cb_to_ext_slv_prt_awlen ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] cb_to_ext_slv_prt_awburst ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] cb_to_ext_slv_prt_awcache ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_AXI_ID_WIDTH) - 1):0] cb_to_ext_slv_prt_awid ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 3) - 1):0] cb_to_ext_slv_prt_awprot ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 1) - 1):0] cb_to_ext_slv_prt_awlock ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] cb_to_ext_slv_prt_awqos ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] cb_to_ext_slv_prt_awregion ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] cb_to_ext_slv_prt_awuser ; 
    logic [TOTAL_EXTSLV_CNT:0] ext_slv_prt_to_cb_awready ; 
    logic [TOTAL_EXTSLV_CNT:0] ext_slv_prt_to_cb_split_awready ; 
    logic [TOTAL_EXTSLV_CNT:0] cb_to_ext_slv_prt_wvalid ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * EXT_MAS_MAX_DATA_WIDTH) - 1):0] cb_to_ext_slv_prt_wdata ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * (EXT_MAS_MAX_DATA_WIDTH / 8)) - 1):0] cb_to_ext_slv_prt_wstrb ; 
    logic [TOTAL_EXTSLV_CNT:0] cb_to_ext_slv_prt_wlast ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] cb_to_ext_slv_prt_wuser ; 
    logic [TOTAL_EXTSLV_CNT:0] ext_slv_prt_to_cb_wready ; 
    logic [TOTAL_EXTSLV_CNT:0] cb_to_ext_slv_prt_arvalid ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_MAX_ADDR_WIDTH) - 1):0] cb_to_ext_slv_prt_araddr ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 3) - 1):0] cb_to_ext_slv_prt_arsize ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 8) - 1):0] cb_to_ext_slv_prt_arlen ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] cb_to_ext_slv_prt_arburst ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] cb_to_ext_slv_prt_arcache ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_AXI_ID_WIDTH) - 1):0] cb_to_ext_slv_prt_arid ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 3) - 1):0] cb_to_ext_slv_prt_arprot ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 1) - 1):0] cb_to_ext_slv_prt_arlock ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] cb_to_ext_slv_prt_arqos ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 4) - 1):0] cb_to_ext_slv_prt_arregion ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] cb_to_ext_slv_prt_aruser ; 
    logic [TOTAL_EXTSLV_CNT:0] ext_slv_prt_to_cb_arready ; 
    logic [TOTAL_EXTSLV_CNT:0] ext_slv_prt_to_cb_split_arready ; 
    logic [TOTAL_EXTSLV_CNT:0] ext_slv_prt_to_cb_bvalid ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_AXI_ID_WIDTH) - 1):0] ext_slv_prt_to_cb_bid ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] ext_slv_prt_to_cb_bresp ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] ext_slv_prt_to_cb_buser ; 
    logic [TOTAL_EXTSLV_CNT:0] cb_to_ext_slv_prt_bready ; 
    logic [TOTAL_EXTSLV_CNT:0] ext_slv_prt_to_cb_rvalid ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_MAX_DATA_WIDTH) - 1):0] ext_slv_prt_to_cb_rdata ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * EXT_SLV_AXI_ID_WIDTH) - 1):0] ext_slv_prt_to_cb_rid ; 
    logic [TOTAL_EXTSLV_CNT:0] ext_slv_prt_to_cb_rlast ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * AXI_USER_WIDTH) - 1):0] ext_slv_prt_to_cb_ruser ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 2) - 1):0] ext_slv_prt_to_cb_rresp ; 
    logic [TOTAL_EXTSLV_CNT:0] cb_to_ext_slv_prt_rready ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 6) - 1):0] cb_to_ext_slv_prt_ext_mas_awr_gnt ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 6) - 1):0] cb_to_ext_slv_prt_ext_mas_ard_gnt ; 
    logic [(((TOTAL_EXTSLV_CNT + 1) * 6) - 1):0] cb_to_ext_slv_prt_ext_mas_dwr_gnt ; 
    logic [((TOTAL_EXTSLV_CNT * EXT_SLV_MAX_DATA_WIDTH) - 1):0] ext_slv_prt_to_cb_rdata_int ; 
    genvar ext_mas_cnt, 
        id_cnt ; 
    generate
        for (ext_mas_cnt = 0;(ext_mas_cnt < TOTAL_EXTMAS_CNT);ext_mas_cnt = (ext_mas_cnt + 1))
        begin : ext_mas_blk
            localparam EXT_MAS_CDC_EN_INT = EXT_MAS_CDC_EN[ext_mas_cnt] ; 
            localparam EXT_MAS_AXI_ADDR_WIDTH_INT = EXT_MAS_AXI_ADDR_WIDTH[(ext_mas_cnt * 7) +: 7] ; 
            localparam EXT_MAS_AXI_DATA_WIDTH_INT = EXT_MAS_AXI_DATA_WIDTH[(ext_mas_cnt * 11) +: 11] ; 
            localparam EXT_MAS_AXI_PROTOCOL_INT = EXT_MAS_AXI_PROTOCOL[ext_mas_cnt] ; 
            localparam EXT_MAS_AXI_LEN_WIDTH_INT = EXT_MAS_AXI_LEN_WIDTH[(ext_mas_cnt * 4) +: 4] ; 
            localparam EXT_MAS_AXI_WR_ACCEPT_INT = EXT_MAS_AXI_WR_ACCEPT[(ext_mas_cnt * 5) +: 5] ; 
            localparam EXT_MAS_AXI_RD_ACCEPT_INT = EXT_MAS_AXI_RD_ACCEPT[(ext_mas_cnt * 5) +: 5] ; 
            localparam EXT_MAS_ACCESS_TYPE_INT = EXT_MAS_ACCESS_TYPE[(ext_mas_cnt * 2) +: 2] ; 
            localparam ID_ORDER_EN_EXT_MAS_INT = ID_ORDER_EN_EXT_MAS[ext_mas_cnt] ; 
            localparam integer NUM_OF_ID_EXT_MAS_SUPPRT_INT = NUM_OF_ID_EXT_MAS_SUPPRT[(ext_mas_cnt * 7) +: 7] ; 
            assign ext_mas_prt_to_cb_awaddr[(ext_mas_cnt * EXT_MAS_MAX_ADDR_WIDTH) +: EXT_MAS_MAX_ADDR_WIDTH] = {{(EXT_MAS_MAX_ADDR_WIDTH - EXT_MAS_AXI_ADDR_WIDTH_INT){1'b0}},
                        ext_mas_prt_to_cb_awaddr_int[(ext_mas_cnt * EXT_MAS_MAX_ADDR_WIDTH) +: EXT_MAS_AXI_ADDR_WIDTH_INT]} ; 
            assign ext_mas_prt_to_cb_araddr[(ext_mas_cnt * EXT_MAS_MAX_ADDR_WIDTH) +: EXT_MAS_MAX_ADDR_WIDTH] = {{(EXT_MAS_MAX_ADDR_WIDTH - EXT_MAS_AXI_ADDR_WIDTH_INT){1'b0}},
                        ext_mas_prt_to_cb_araddr_int[(ext_mas_cnt * EXT_MAS_MAX_ADDR_WIDTH) +: EXT_MAS_AXI_ADDR_WIDTH_INT]} ; 
            assign ext_mas_prt_to_cb_wdata[(ext_mas_cnt * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_MAX_DATA_WIDTH] = {{(EXT_MAS_MAX_DATA_WIDTH - EXT_MAS_AXI_DATA_WIDTH_INT){1'b0}},
                        ext_mas_prt_to_cb_wdata_int[(ext_mas_cnt * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_AXI_DATA_WIDTH_INT]} ; 
            assign ext_mas_prt_to_cb_wstrb[(ext_mas_cnt * (EXT_MAS_MAX_DATA_WIDTH / 8)) +: (EXT_MAS_MAX_DATA_WIDTH / 8)] = {{((EXT_MAS_MAX_DATA_WIDTH / 8) - (EXT_MAS_AXI_DATA_WIDTH_INT / 8)){1'b0}},
                        ext_mas_prt_to_cb_wstrb_int[(ext_mas_cnt * (EXT_MAS_MAX_DATA_WIDTH / 8)) +: (EXT_MAS_AXI_DATA_WIDTH_INT / 8)]} ; 
            for (id_cnt = 0;(id_cnt < MAX_NUM_OF_ID_EXT_MAS_SUPPRT);id_cnt = (id_cnt + 1))
            begin : MAX_NUM_OF_ID_EXT_MAS_BLK
                if ((id_cnt < NUM_OF_ID_EXT_MAS_SUPPRT_INT)) 
                    begin : genblk1
                        assign ext_mas_prt_to_cb_bid_ext_slv_gnt[ext_mas_cnt][(id_cnt * 6) +: 6] = ext_mas_prt_to_cb_bid_ext_slv_gnt_int[(((ext_mas_cnt * MAX_NUM_OF_ID_EXT_MAS_SUPPRT) * 6) + (id_cnt * 6)) +: 6] ; 
                        assign ext_mas_prt_to_cb_rid_ext_slv_gnt[ext_mas_cnt][(id_cnt * 6) +: 6] = ext_mas_prt_to_cb_rid_ext_slv_gnt_int[(((ext_mas_cnt * MAX_NUM_OF_ID_EXT_MAS_SUPPRT) * 6) + (id_cnt * 6)) +: 6] ; 
                    end
                else
                    begin : genblk1
                        assign ext_mas_prt_to_cb_bid_ext_slv_gnt[ext_mas_cnt][(id_cnt * 6) +: 6] = 6'd0 ; 
                        assign ext_mas_prt_to_cb_rid_ext_slv_gnt[ext_mas_cnt][(id_cnt * 6) +: 6] = 6'd0 ; 
                    end
            end
            axi4_interconnect_ipgen_ext_mas_port #(.EXT_MAS_CDC_EN(EXT_MAS_CDC_EN_INT),
                    .EXT_MAS_AXI_ID_WIDTH(EXT_MAS_AXI_ID_WIDTH),
                    .EXT_MAS_AXI_DATA_WIDTH(EXT_MAS_AXI_DATA_WIDTH_INT),
                    .EXT_MAS_AXI_ADDR_WIDTH(EXT_MAS_AXI_ADDR_WIDTH_INT),
                    .EXT_MAS_AXI_PROTOCOL(EXT_MAS_AXI_PROTOCOL_INT),
                    .EXT_MAS_ACCESS_TYPE(EXT_MAS_ACCESS_TYPE_INT),
                    .AXI_USER_WIDTH(AXI_USER_WIDTH),
                    .EXT_MAS_AXI_LEN_WIDTH(EXT_MAS_AXI_LEN_WIDTH_INT),
                    .EXT_MAS_AXI_WR_ACCEPT(EXT_MAS_AXI_WR_ACCEPT_INT),
                    .EXT_MAS_AXI_RD_ACCEPT(EXT_MAS_AXI_RD_ACCEPT_INT),
                    .ID_ORDER_EN_EXT_MAS(ID_ORDER_EN_EXT_MAS_INT),
                    .NUM_OF_ID_EXT_MAS_SUPPRT(NUM_OF_ID_EXT_MAS_SUPPRT_INT),
                    .EXT_MAS_WR_DATA_FIFO_DEPTH(EXT_MAS_WR_DATA_FIFO_DEPTH),
                    .EXT_MAS_BRESP_FIFO_DEPTH(EXT_MAS_BRESP_FIFO_DEPTH),
                    .EXT_MAS_RD_DATA_FIFO_DEPTH(EXT_MAS_WR_DATA_FIFO_DEPTH),
                    .TOTAL_EXTSLV_CNT(TOTAL_EXTSLV_CNT),
                    .EXT_SLV_AXI_DATA_WIDTH(EXT_SLV_AXI_DATA_WIDTH),
                    .EXT_SLV_AXI_PROTOCOL(EXT_SLV_AXI_PROTOCOL),
                    .EXT_SLV_MAX_DATA_WIDTH(EXT_SLV_MAX_DATA_WIDTH),
                    .EXT_SLV_MAX_FRAGMENT_CNT(EXT_SLV_MAX_FRAGMENT_CNT),
                    .EXT_SLV_FRAGMENT_CNT(EXT_SLV_FRAGMENT_CNT),
                    .EXT_SLV_FRAGMENT_BASE_ADDR(EXT_SLV_FRAGMENT_BASE_ADDR),
                    .EXT_SLV_FRAGMENT_END_ADDR(EXT_SLV_FRAGMENT_END_ADDR),
                    .LATTICE_FIFO(LATTICE_FIFO)) u_ext_mas_port (//. EXT_SLV_ACCESS_TYPE        (EXT_SLV_ACCESS_TYPE)
                    .aclk_i(aclk_i), 
                        .aresetn_i(aresetn_i), 
                        .o_m_awvalid(ext_mas_prt_to_cb_awvalid[ext_mas_cnt]), 
                        .o_m_awaddr(ext_mas_prt_to_cb_awaddr_int[(ext_mas_cnt * EXT_MAS_MAX_ADDR_WIDTH) +: EXT_MAS_AXI_ADDR_WIDTH_INT]), 
                        .o_m_awsize(ext_mas_prt_to_cb_awsize[(ext_mas_cnt * 3) +: 3]), 
                        .o_m_awlen(ext_mas_prt_to_cb_awlen[(ext_mas_cnt * 8) +: 8]), 
                        .o_m_awburst(ext_mas_prt_to_cb_awburst[(ext_mas_cnt * 2) +: 2]), 
                        .o_m_awcache(ext_mas_prt_to_cb_awcache[(ext_mas_cnt * 4) +: 4]), 
                        .o_m_awid(ext_mas_prt_to_cb_awid[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                        .o_m_awprot(ext_mas_prt_to_cb_awprot[(ext_mas_cnt * 3) +: 3]), 
                        .o_m_awlock(ext_mas_prt_to_cb_awlock[(ext_mas_cnt * 1) +: 1]), 
                        .o_m_awqos(ext_mas_prt_to_cb_awqos[(ext_mas_cnt * 4) +: 4]), 
                        .o_m_awregion(ext_mas_prt_to_cb_awregion[(ext_mas_cnt * 4) +: 4]), 
                        .o_m_awuser(ext_mas_prt_to_cb_awuser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .i_m_awready(cb_to_ext_mas_prt_awready[ext_mas_cnt]), 
                        .i_m_split_awready(cb_to_ext_mas_prt_split_awready[ext_mas_cnt]), 
                        .o_m_wvalid(ext_mas_prt_to_cb_wvalid[ext_mas_cnt]), 
                        .o_m_wdata(ext_mas_prt_to_cb_wdata_int[(ext_mas_cnt * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_AXI_DATA_WIDTH_INT]), 
                        .o_m_wstrb(ext_mas_prt_to_cb_wstrb_int[(ext_mas_cnt * (EXT_MAS_MAX_DATA_WIDTH / 8)) +: (EXT_MAS_AXI_DATA_WIDTH_INT / 8)]), 
                        .o_m_wlast(ext_mas_prt_to_cb_wlast[ext_mas_cnt]), 
                        .o_m_wuser(ext_mas_prt_to_cb_wuser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .i_m_wready(cb_to_ext_mas_prt_wready[ext_mas_cnt]), 
                        .o_m_arvalid(ext_mas_prt_to_cb_arvalid[ext_mas_cnt]), 
                        .o_m_araddr(ext_mas_prt_to_cb_araddr_int[(ext_mas_cnt * EXT_MAS_MAX_ADDR_WIDTH) +: EXT_MAS_AXI_ADDR_WIDTH_INT]), 
                        .o_m_arsize(ext_mas_prt_to_cb_arsize[(ext_mas_cnt * 3) +: 3]), 
                        .o_m_arlen(ext_mas_prt_to_cb_arlen[(ext_mas_cnt * 8) +: 8]), 
                        .o_m_arburst(ext_mas_prt_to_cb_arburst[(ext_mas_cnt * 2) +: 2]), 
                        .o_m_arcache(ext_mas_prt_to_cb_arcache[(ext_mas_cnt * 4) +: 4]), 
                        .o_m_arid(ext_mas_prt_to_cb_arid[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                        .o_m_arprot(ext_mas_prt_to_cb_arprot[(ext_mas_cnt * 3) +: 3]), 
                        .o_m_arlock(ext_mas_prt_to_cb_arlock[(ext_mas_cnt * 1) +: 1]), 
                        .o_m_arqos(ext_mas_prt_to_cb_arqos[(ext_mas_cnt * 4) +: 4]), 
                        .o_m_arregion(ext_mas_prt_to_cb_arregion[(ext_mas_cnt * 4) +: 4]), 
                        .o_m_aruser(ext_mas_prt_to_cb_aruser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .i_m_arready(cb_to_ext_mas_prt_arready[ext_mas_cnt]), 
                        .i_m_split_arready(cb_to_ext_mas_prt_split_arready[ext_mas_cnt]), 
                        .i_m_bvalid(cb_to_ext_mas_prt_bvalid[ext_mas_cnt]), 
                        .i_m_bresp(cb_to_ext_mas_prt_bresp[(ext_mas_cnt * 2) +: 2]), 
                        .i_m_bid(cb_to_ext_mas_prt_bid[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                        .i_m_buser(cb_to_ext_mas_prt_buser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .o_m_bready(ext_mas_prt_to_cb_bready[ext_mas_cnt]), 
                        .i_m_rvalid(cb_to_ext_mas_prt_rvalid[ext_mas_cnt]), 
                        .i_m_rdata(cb_to_ext_mas_prt_rdata[(ext_mas_cnt * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_MAX_DATA_WIDTH]), 
                        .i_m_rid(cb_to_ext_mas_prt_rid[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                        .i_m_rlast(cb_to_ext_mas_prt_rlast[ext_mas_cnt]), 
                        .i_m_ruser(cb_to_ext_mas_prt_ruser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .i_m_rresp(cb_to_ext_mas_prt_rresp[(ext_mas_cnt * 2) +: 2]), 
                        .o_m_rready(ext_mas_prt_to_cb_rready[ext_mas_cnt]), 
                        .ext_mas_slv_wr_sel(ext_mas_prt_to_cb_ext_slv_wr_sel[(ext_mas_cnt * 6) +: 6]), 
                        .ext_mas_slv_rd_sel(ext_mas_prt_to_cb_ext_slv_rd_sel[(ext_mas_cnt * 6) +: 6]), 
                        .ext_mas_slv_dwr_sel(ext_mas_prt_to_cb_ext_slv_dwr_sel[(ext_mas_cnt * 6) +: 6]), 
                        .o_bid_ext_slv_gnt(ext_mas_prt_to_cb_bid_ext_slv_gnt_int[((ext_mas_cnt * MAX_NUM_OF_ID_EXT_MAS_SUPPRT) * 6) +: (NUM_OF_ID_EXT_MAS_SUPPRT_INT * 6)]), 
                        .o_rid_ext_slv_gnt(ext_mas_prt_to_cb_rid_ext_slv_gnt_int[((ext_mas_cnt * MAX_NUM_OF_ID_EXT_MAS_SUPPRT) * 6) +: (NUM_OF_ID_EXT_MAS_SUPPRT_INT * 6)]), 
                        .i_ext_slv_wrresp_gnt(cb_to_ext_mas_prt_ext_slv_wrresp_gnt[(ext_mas_cnt * 6) +: 6]), 
                        .i_ext_slv_rdresp_gnt(cb_to_ext_mas_prt_ext_slv_rdresp_gnt[(ext_mas_cnt * 6) +: 6]), 
                        .i_ext_mas_prt_awvalid(i_ext_mas_prt_awvalid[ext_mas_cnt]), 
                        .i_ext_mas_prt_awaddr(i_ext_mas_prt_awaddr[(ext_mas_cnt * EXT_MAS_MAX_ADDR_WIDTH) +: EXT_MAS_AXI_ADDR_WIDTH_INT]), 
                        .i_ext_mas_prt_awsize(i_ext_mas_prt_awsize[(ext_mas_cnt * 3) +: 3]), 
                        .i_ext_mas_prt_awlen(i_ext_mas_prt_awlen[(ext_mas_cnt * 8) +: 8]), 
                        .i_ext_mas_prt_awburst(i_ext_mas_prt_awburst[(ext_mas_cnt * 2) +: 2]), 
                        .i_ext_mas_prt_awcache(i_ext_mas_prt_awcache[(ext_mas_cnt * 4) +: 4]), 
                        .i_ext_mas_prt_awid(i_ext_mas_prt_awid[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                        .i_ext_mas_prt_awprot(i_ext_mas_prt_awprot[(ext_mas_cnt * 3) +: 3]), 
                        .i_ext_mas_prt_awlock(i_ext_mas_prt_awlock[(ext_mas_cnt * 1) +: 1]), 
                        .i_ext_mas_prt_awqos(i_ext_mas_prt_awqos[(ext_mas_cnt * 4) +: 4]), 
                        .i_ext_mas_prt_awregion(i_ext_mas_prt_awregion[(ext_mas_cnt * 4) +: 4]), 
                        .i_ext_mas_prt_awuser(i_ext_mas_prt_awuser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .o_ext_mas_prt_awready(o_ext_mas_prt_awready[ext_mas_cnt]), 
                        .i_ext_mas_prt_wvalid(i_ext_mas_prt_wvalid[ext_mas_cnt]), 
                        .i_ext_mas_prt_wdata(i_ext_mas_prt_wdata[(ext_mas_cnt * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_AXI_DATA_WIDTH_INT]), 
                        .i_ext_mas_prt_wstrb(i_ext_mas_prt_wstrb[(ext_mas_cnt * (EXT_MAS_MAX_DATA_WIDTH / 8)) +: (EXT_MAS_AXI_DATA_WIDTH_INT / 8)]), 
                        .i_ext_mas_prt_wlast(i_ext_mas_prt_wlast[ext_mas_cnt]), 
                        .i_ext_mas_prt_wuser(i_ext_mas_prt_wuser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .o_ext_mas_prt_wready(o_ext_mas_prt_wready[ext_mas_cnt]), 
                        .i_ext_mas_prt_arvalid(i_ext_mas_prt_arvalid[ext_mas_cnt]), 
                        .i_ext_mas_prt_araddr(i_ext_mas_prt_araddr[(ext_mas_cnt * EXT_MAS_MAX_ADDR_WIDTH) +: EXT_MAS_AXI_ADDR_WIDTH_INT]), 
                        .i_ext_mas_prt_arsize(i_ext_mas_prt_arsize[(ext_mas_cnt * 3) +: 3]), 
                        .i_ext_mas_prt_arlen(i_ext_mas_prt_arlen[(ext_mas_cnt * 8) +: 8]), 
                        .i_ext_mas_prt_arburst(i_ext_mas_prt_arburst[(ext_mas_cnt * 2) +: 2]), 
                        .i_ext_mas_prt_arcache(i_ext_mas_prt_arcache[(ext_mas_cnt * 4) +: 4]), 
                        .i_ext_mas_prt_arid(i_ext_mas_prt_arid[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                        .i_ext_mas_prt_arprot(i_ext_mas_prt_arprot[(ext_mas_cnt * 3) +: 3]), 
                        .i_ext_mas_prt_arlock(i_ext_mas_prt_arlock[(ext_mas_cnt * 1) +: 1]), 
                        .i_ext_mas_prt_arqos(i_ext_mas_prt_arqos[(ext_mas_cnt * 4) +: 4]), 
                        .i_ext_mas_prt_arregion(i_ext_mas_prt_arregion[(ext_mas_cnt * 4) +: 4]), 
                        .i_ext_mas_prt_aruser(i_ext_mas_prt_aruser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .o_ext_mas_prt_arready(o_ext_mas_prt_arready[ext_mas_cnt]), 
                        .o_ext_mas_prt_bvalid(o_ext_mas_prt_bvalid[ext_mas_cnt]), 
                        .o_ext_mas_prt_bresp(o_ext_mas_prt_bresp[(ext_mas_cnt * 2) +: 2]), 
                        .o_ext_mas_prt_bid(o_ext_mas_prt_bid[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                        .o_ext_mas_prt_buser(o_ext_mas_prt_buser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .i_ext_mas_prt_bready(i_ext_mas_prt_bready[ext_mas_cnt]), 
                        .o_ext_mas_prt_rvalid(o_ext_mas_prt_rvalid[ext_mas_cnt]), 
                        .o_ext_mas_prt_rdata(o_ext_mas_prt_rdata[(ext_mas_cnt * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_AXI_DATA_WIDTH_INT]), 
                        .o_ext_mas_prt_rid(o_ext_mas_prt_rid[(ext_mas_cnt * EXT_MAS_AXI_ID_WIDTH) +: EXT_MAS_AXI_ID_WIDTH]), 
                        .o_ext_mas_prt_rlast(o_ext_mas_prt_rlast[ext_mas_cnt]), 
                        .o_ext_mas_prt_ruser(o_ext_mas_prt_ruser[(ext_mas_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .o_ext_mas_prt_rresp(o_ext_mas_prt_rresp[(ext_mas_cnt * 2) +: 2]), 
                        .i_ext_mas_prt_rready(i_ext_mas_prt_rready[ext_mas_cnt])) ; 
        end
    endgenerate
    axi4_interconnect_ipgen_axi_cross_bar #(.TOTAL_EXTMAS_CNT(TOTAL_EXTMAS_CNT),
            .EXT_MAS_AXI_ID_WIDTH(EXT_MAS_AXI_ID_WIDTH),
            .EXT_MAS_MAX_ADDR_WIDTH(EXT_MAS_MAX_ADDR_WIDTH),
            .AXI_USER_WIDTH(AXI_USER_WIDTH),
            .EXT_MAS_MAX_DATA_WIDTH(EXT_MAS_MAX_DATA_WIDTH),
            .TOTAL_EXTSLV_CNT(TOTAL_EXTSLV_CNT),
            .EXT_SLV_AXI_ID_WIDTH(EXT_SLV_AXI_ID_WIDTH),
            .EXT_SLV_MAX_ADDR_WIDTH(EXT_SLV_MAX_ADDR_WIDTH),
            .EXT_SLV_MAX_DATA_WIDTH(EXT_SLV_MAX_DATA_WIDTH),
            .EXT_MAS_AWR_GNT_FF_DEPTH(EXT_MAS_AWR_GNT_FF_DEPTH),
            .ID_ORDER_EN_EXT_MAS(ID_ORDER_EN_EXT_MAS),
            .MAX_NUM_OF_ID_EXT_MAS_SUPPRT(MAX_NUM_OF_ID_EXT_MAS_SUPPRT),
            .NUM_OF_ID_EXT_MAS_SUPPRT(NUM_OF_ID_EXT_MAS_SUPPRT),
            .EXT_MAS_PRIORITY_SCHEME(EXT_MAS_PRIORITY_SCHEME),
            .EXT_MAS_FIXED_PRIORITY(EXT_MAS_FIXED_PRIORITY),
            .EXT_MAS_ACCESS_TYPE(EXT_MAS_ACCESS_TYPE),
            .EXT_SLV_PRIORITY_SCHEME(EXT_SLV_PRIORITY_SCHEME),
            .EXT_SLV_FIXED_PRIORITY(EXT_SLV_FIXED_PRIORITY),
            .EXT_SLV_ACCESS_TYPE(EXT_SLV_ACCESS_TYPE),
            .LATTICE_FIFO(LATTICE_FIFO)) u_axi_cross_bar (.aclk_i(aclk_i), 
                .aresetn_i(aresetn_i), 
                //External master interface from MAS PORT   
            .i_m_awvalid(ext_mas_prt_to_cb_awvalid), 
                .i_m_awaddr(ext_mas_prt_to_cb_awaddr), 
                .i_m_awsize(ext_mas_prt_to_cb_awsize), 
                .i_m_awlen(ext_mas_prt_to_cb_awlen), 
                .i_m_awburst(ext_mas_prt_to_cb_awburst), 
                .i_m_awcache(ext_mas_prt_to_cb_awcache), 
                .i_m_awid(ext_mas_prt_to_cb_awid), 
                .i_m_awprot(ext_mas_prt_to_cb_awprot), 
                .i_m_awlock(ext_mas_prt_to_cb_awlock), 
                .i_m_awqos(ext_mas_prt_to_cb_awqos), 
                .i_m_awregion(ext_mas_prt_to_cb_awregion), 
                .i_m_awuser(ext_mas_prt_to_cb_awuser), 
                .o_m_awready(cb_to_ext_mas_prt_awready), 
                .o_m_split_awready(cb_to_ext_mas_prt_split_awready), 
                .i_m_wvalid(ext_mas_prt_to_cb_wvalid), 
                .i_m_wdata(ext_mas_prt_to_cb_wdata), 
                .i_m_wstrb(ext_mas_prt_to_cb_wstrb), 
                .i_m_wlast(ext_mas_prt_to_cb_wlast), 
                .i_m_wuser(ext_mas_prt_to_cb_wuser), 
                .o_m_wready(cb_to_ext_mas_prt_wready), 
                .i_m_arvalid(ext_mas_prt_to_cb_arvalid), 
                .i_m_araddr(ext_mas_prt_to_cb_araddr), 
                .i_m_arsize(ext_mas_prt_to_cb_arsize), 
                .i_m_arlen(ext_mas_prt_to_cb_arlen), 
                .i_m_arburst(ext_mas_prt_to_cb_arburst), 
                .i_m_arcache(ext_mas_prt_to_cb_arcache), 
                .i_m_arid(ext_mas_prt_to_cb_arid), 
                .i_m_arprot(ext_mas_prt_to_cb_arprot), 
                .i_m_arlock(ext_mas_prt_to_cb_arlock), 
                .i_m_arqos(ext_mas_prt_to_cb_arqos), 
                .i_m_arregion(ext_mas_prt_to_cb_arregion), 
                .i_m_aruser(ext_mas_prt_to_cb_aruser), 
                .o_m_arready(cb_to_ext_mas_prt_arready), 
                .o_m_split_arready(cb_to_ext_mas_prt_split_arready), 
                .o_m_bvalid(cb_to_ext_mas_prt_bvalid), 
                .o_m_bresp(cb_to_ext_mas_prt_bresp), 
                .o_m_bid(cb_to_ext_mas_prt_bid), 
                .o_m_buser(cb_to_ext_mas_prt_buser), 
                .i_m_bready(ext_mas_prt_to_cb_bready), 
                .o_m_rvalid(cb_to_ext_mas_prt_rvalid), 
                .o_m_rdata(cb_to_ext_mas_prt_rdata), 
                .o_m_rid(cb_to_ext_mas_prt_rid), 
                .o_m_rlast(cb_to_ext_mas_prt_rlast), 
                .o_m_ruser(cb_to_ext_mas_prt_ruser), 
                .o_m_rresp(cb_to_ext_mas_prt_rresp), 
                .i_m_rready(ext_mas_prt_to_cb_rready), 
                //External slave interface to SLV PORT   
            .o_s_awvalid(cb_to_ext_slv_prt_awvalid), 
                .o_s_awaddr(cb_to_ext_slv_prt_awaddr), 
                .o_s_awsize(cb_to_ext_slv_prt_awsize), 
                .o_s_awlen(cb_to_ext_slv_prt_awlen), 
                .o_s_awburst(cb_to_ext_slv_prt_awburst), 
                .o_s_awcache(cb_to_ext_slv_prt_awcache), 
                .o_s_awid(cb_to_ext_slv_prt_awid), 
                .o_s_awprot(cb_to_ext_slv_prt_awprot), 
                .o_s_awlock(cb_to_ext_slv_prt_awlock), 
                .o_s_awqos(cb_to_ext_slv_prt_awqos), 
                .o_s_awregion(cb_to_ext_slv_prt_awregion), 
                .o_s_awuser(cb_to_ext_slv_prt_awuser), 
                .i_s_awready(ext_slv_prt_to_cb_awready), 
                .i_s_split_awready(ext_slv_prt_to_cb_split_awready), 
                .o_s_wvalid(cb_to_ext_slv_prt_wvalid), 
                .o_s_wdata(cb_to_ext_slv_prt_wdata), 
                .o_s_wstrb(cb_to_ext_slv_prt_wstrb), 
                .o_s_wlast(cb_to_ext_slv_prt_wlast), 
                .o_s_wuser(cb_to_ext_slv_prt_wuser), 
                .i_s_wready(ext_slv_prt_to_cb_wready), 
                .o_s_arvalid(cb_to_ext_slv_prt_arvalid), 
                .o_s_araddr(cb_to_ext_slv_prt_araddr), 
                .o_s_arsize(cb_to_ext_slv_prt_arsize), 
                .o_s_arlen(cb_to_ext_slv_prt_arlen), 
                .o_s_arburst(cb_to_ext_slv_prt_arburst), 
                .o_s_arcache(cb_to_ext_slv_prt_arcache), 
                .o_s_arid(cb_to_ext_slv_prt_arid), 
                .o_s_arprot(cb_to_ext_slv_prt_arprot), 
                .o_s_arlock(cb_to_ext_slv_prt_arlock), 
                .o_s_arqos(cb_to_ext_slv_prt_arqos), 
                .o_s_arregion(cb_to_ext_slv_prt_arregion), 
                .o_s_aruser(cb_to_ext_slv_prt_aruser), 
                .i_s_arready(ext_slv_prt_to_cb_arready), 
                .i_s_split_arready(ext_slv_prt_to_cb_split_arready), 
                .i_s_bvalid(ext_slv_prt_to_cb_bvalid), 
                .i_s_bresp(ext_slv_prt_to_cb_bresp), 
                .i_s_bid(ext_slv_prt_to_cb_bid), 
                .i_s_buser(ext_slv_prt_to_cb_buser), 
                .o_s_bready(cb_to_ext_slv_prt_bready), 
                .i_s_rvalid(ext_slv_prt_to_cb_rvalid), 
                .i_s_rdata(ext_slv_prt_to_cb_rdata), 
                .i_s_rid(ext_slv_prt_to_cb_rid), 
                .i_s_rlast(ext_slv_prt_to_cb_rlast), 
                .i_s_ruser(ext_slv_prt_to_cb_ruser), 
                .i_s_rresp(ext_slv_prt_to_cb_rresp), 
                .o_s_rready(cb_to_ext_slv_prt_rready), 
                .i_ext_mas_slv_wr_sel(ext_mas_prt_to_cb_ext_slv_wr_sel), 
                .i_ext_mas_slv_rd_sel(ext_mas_prt_to_cb_ext_slv_rd_sel), 
                .i_ext_mas_slv_dwr_sel(ext_mas_prt_to_cb_ext_slv_dwr_sel), 
                .i_bid_ext_slv_gnt(ext_mas_prt_to_cb_bid_ext_slv_gnt), 
                .i_rid_ext_slv_gnt(ext_mas_prt_to_cb_rid_ext_slv_gnt), 
                .o_s_ext_mas_awr_gnt(cb_to_ext_slv_prt_ext_mas_awr_gnt), 
                .o_s_ext_mas_ard_gnt(cb_to_ext_slv_prt_ext_mas_ard_gnt), 
                .o_s_ext_mas_dwr_gnt(cb_to_ext_slv_prt_ext_mas_dwr_gnt), 
                .o_m_ext_slv_wrresp_gnt(cb_to_ext_mas_prt_ext_slv_wrresp_gnt), 
                .o_m_ext_slv_rdresp_gnt(cb_to_ext_mas_prt_ext_slv_rdresp_gnt)) ; 
    axi4_interconnect_ipgen_def_slave #(.EXT_SLV_AXI_ID_WIDTH(EXT_SLV_AXI_ID_WIDTH),
            .EXT_SLV_AXI_DATA_WIDTH(EXT_SLV_MAX_DATA_WIDTH),
            .EXT_SLV_AXI_ADDR_WIDTH(EXT_SLV_MAX_ADDR_WIDTH),
            .EXT_MAS_MAX_DATA_WIDTH(EXT_MAS_MAX_DATA_WIDTH),
            .AXI_USER_WIDTH(AXI_USER_WIDTH)) U_DEF_SLAVE (.aclk(aclk_i), 
                .areset_n(aresetn_i), 
                .s_awvalid(cb_to_ext_slv_prt_awvalid[TOTAL_EXTSLV_CNT]), 
                .s_awid(cb_to_ext_slv_prt_awid[(TOTAL_EXTSLV_CNT * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                .s_awuser(cb_to_ext_slv_prt_awuser[(TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                .s_awready(ext_slv_prt_to_cb_awready[TOTAL_EXTSLV_CNT]), 
                .s_split_awready(ext_slv_prt_to_cb_split_awready[TOTAL_EXTSLV_CNT]), 
                .s_wvalid(cb_to_ext_slv_prt_wvalid[TOTAL_EXTSLV_CNT]), 
                .s_wlast(cb_to_ext_slv_prt_wlast[TOTAL_EXTSLV_CNT]), 
                .s_wready(ext_slv_prt_to_cb_wready[TOTAL_EXTSLV_CNT]), 
                .s_arvalid(cb_to_ext_slv_prt_arvalid[TOTAL_EXTSLV_CNT]), 
                .s_arlen(cb_to_ext_slv_prt_arlen[(TOTAL_EXTSLV_CNT * 8) +: 8]), 
                .s_arid(cb_to_ext_slv_prt_arid[(TOTAL_EXTSLV_CNT * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                .s_aruser(cb_to_ext_slv_prt_aruser[(TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                .s_arready(ext_slv_prt_to_cb_arready[TOTAL_EXTSLV_CNT]), 
                .s_split_arready(ext_slv_prt_to_cb_split_arready[TOTAL_EXTSLV_CNT]), 
                .s_bvalid(ext_slv_prt_to_cb_bvalid[TOTAL_EXTSLV_CNT]), 
                .s_bid(ext_slv_prt_to_cb_bid[(TOTAL_EXTSLV_CNT * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                .s_bresp(ext_slv_prt_to_cb_bresp[(TOTAL_EXTSLV_CNT * 2) +: 2]), 
                .s_buser(ext_slv_prt_to_cb_buser[(TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                .s_bready(cb_to_ext_slv_prt_bready[TOTAL_EXTSLV_CNT]), 
                .s_rvalid(ext_slv_prt_to_cb_rvalid[TOTAL_EXTSLV_CNT]), 
                .s_rdata(ext_slv_prt_to_cb_rdata[(TOTAL_EXTSLV_CNT * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_MAX_DATA_WIDTH]), 
                .s_rid(ext_slv_prt_to_cb_rid[(TOTAL_EXTSLV_CNT * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                .s_rlast(ext_slv_prt_to_cb_rlast[TOTAL_EXTSLV_CNT]), 
                .s_ruser(ext_slv_prt_to_cb_ruser[(TOTAL_EXTSLV_CNT * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                .s_rresp(ext_slv_prt_to_cb_rresp[(TOTAL_EXTSLV_CNT * 2) +: 2]), 
                .s_rready(cb_to_ext_slv_prt_rready[TOTAL_EXTSLV_CNT])) ; 
    genvar ext_slv_cnt ; 
    generate
        for (ext_slv_cnt = 0;(ext_slv_cnt < TOTAL_EXTSLV_CNT);ext_slv_cnt = (ext_slv_cnt + 1))
        begin : ext_slv_blk
            localparam EXT_SLV_AXI_ADDR_WIDTH_INT = EXT_SLV_AXI_ADDR_WIDTH[(ext_slv_cnt * 7) +: 7] ; 
            localparam EXT_SLV_AXI_DATA_WIDTH_INT = EXT_SLV_AXI_DATA_WIDTH[(ext_slv_cnt * 11) +: 11] ; 
            localparam EXT_SLV_AXI_PROTOCOL_INT = EXT_SLV_AXI_PROTOCOL[ext_slv_cnt] ; 
            localparam EXT_SLV_AXI_LEN_WIDTH_INT = EXT_SLV_AXI_LEN_WIDTH[(ext_slv_cnt * 4) +: 4] ; 
            //localparam EXT_SLV_AXI_LEN_WIDTH_INT  = EXT_SLV_AXI_PROTOCOL[ext_slv_cnt] ? 8 : 4;
            localparam EXT_SLV_AXI_WR_ISSUE_INT = EXT_SLV_AXI_WR_ISSUE[(ext_slv_cnt * 5) +: 5] ; 
            localparam EXT_SLV_AXI_RD_ISSUE_INT = EXT_SLV_AXI_RD_ISSUE[(ext_slv_cnt * 5) +: 5] ; 
            localparam EXT_SLV_ACCESS_TYPE_INT = EXT_SLV_ACCESS_TYPE[(ext_slv_cnt * 2) +: 2] ; 
            //assign ext_slv_prt_to_cb_rdata[ext_slv_cnt*EXT_SLV_MAX_DATA_WIDTH +: EXT_SLV_MAX_DATA_WIDTH] = { {EXT_SLV_MAX_DATA_WIDTH-EXT_SLV_AXI_DATA_WIDTH_INT{1'b0}}, 
            //                        ext_slv_prt_to_cb_rdata_int[ext_slv_cnt*EXT_SLV_AXI_DATA_WIDTH_INT +: EXT_SLV_AXI_DATA_WIDTH_INT ] };
            axi4_interconnect_ipgen_ext_slv_port #(.EXT_SLV_AXI_ID_WIDTH(EXT_SLV_AXI_ID_WIDTH),
                    .EXT_SLV_AXI_DATA_WIDTH(EXT_SLV_AXI_DATA_WIDTH_INT),
                    .EXT_SLV_AXI_ADDR_WIDTH(EXT_SLV_AXI_ADDR_WIDTH_INT),
                    .EXT_SLV_AXI_PROTOCOL(EXT_SLV_AXI_PROTOCOL_INT),
                    .EXT_SLV_AXI_LEN_WIDTH(EXT_SLV_AXI_LEN_WIDTH_INT),
                    .AXI_USER_WIDTH(AXI_USER_WIDTH),
                    .EXT_SLV_AXI_WR_ISSUE(EXT_SLV_AXI_WR_ISSUE_INT),
                    .EXT_SLV_AXI_RD_ISSUE(EXT_SLV_AXI_RD_ISSUE_INT),
                    .TOTAL_EXTMAS_CNT(TOTAL_EXTMAS_CNT),
                    .EXT_MAS_MAX_DATA_WIDTH(EXT_MAS_MAX_DATA_WIDTH),
                    .EXT_MAS_AXI_PROTOCOL(EXT_MAS_AXI_PROTOCOL),
                    .EXT_MAS_AXI_DATA_WIDTH(EXT_MAS_AXI_DATA_WIDTH),
                    .EXT_MAS_AXI_ID_WIDTH(EXT_MAS_AXI_ID_WIDTH),
                    .EXT_MAS_ACCESS_TYPE(EXT_MAS_ACCESS_TYPE),
                    .LATTICE_FIFO(LATTICE_FIFO),
                    .EXT_SLV_AW_FF_DEPTH(EXT_SLV_AW_FF_DEPTH),
                    .EXT_SLV_WR_DATA_FIFO_DEPTH(EXT_SLV_WR_DATA_FIFO_DEPTH),
                    .EXT_SLV_BRESP_FIFO_DEPTH(EXT_SLV_BRESP_FIFO_DEPTH),
                    .EXT_SLV_RD_DATA_FIFO_DEPTH(EXT_SLV_RD_DATA_FIFO_DEPTH),
                    .EXT_SLV_ACCESS_TYPE(EXT_SLV_ACCESS_TYPE_INT)) u_ext_slv_port (.aclk_i(aclk_i), 
                        .aresetn_i(aresetn_i), 
                        .i_s_awvalid(cb_to_ext_slv_prt_awvalid[ext_slv_cnt]), 
                        .i_s_awaddr(cb_to_ext_slv_prt_awaddr[(ext_slv_cnt * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_AXI_ADDR_WIDTH_INT]), 
                        .i_s_awsize(cb_to_ext_slv_prt_awsize[(ext_slv_cnt * 3) +: 3]), 
                        .i_s_awlen(cb_to_ext_slv_prt_awlen[(ext_slv_cnt * 8) +: EXT_SLV_AXI_LEN_WIDTH_INT]), 
                        .i_s_awburst(cb_to_ext_slv_prt_awburst[(ext_slv_cnt * 2) +: 2]), 
                        .i_s_awcache(cb_to_ext_slv_prt_awcache[(ext_slv_cnt * 4) +: 4]), 
                        .i_s_awid(cb_to_ext_slv_prt_awid[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                        .i_s_awprot(cb_to_ext_slv_prt_awprot[(ext_slv_cnt * 3) +: 3]), 
                        .i_s_awlock(cb_to_ext_slv_prt_awlock[(ext_slv_cnt * 1) +: 1]), 
                        .i_s_awqos(cb_to_ext_slv_prt_awqos[(ext_slv_cnt * 4) +: 4]), 
                        .i_s_awregion(cb_to_ext_slv_prt_awregion[(ext_slv_cnt * 4) +: 4]), 
                        .i_s_awuser(cb_to_ext_slv_prt_awuser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .o_s_awready(ext_slv_prt_to_cb_awready[ext_slv_cnt]), 
                        .o_s_split_awready(ext_slv_prt_to_cb_split_awready[ext_slv_cnt]), 
                        .i_s_wvalid(cb_to_ext_slv_prt_wvalid[ext_slv_cnt]), 
                        .i_s_wdata(cb_to_ext_slv_prt_wdata[(ext_slv_cnt * EXT_MAS_MAX_DATA_WIDTH) +: EXT_MAS_MAX_DATA_WIDTH]), 
                        .i_s_wstrb(cb_to_ext_slv_prt_wstrb[(ext_slv_cnt * (EXT_MAS_MAX_DATA_WIDTH / 8)) +: (EXT_MAS_MAX_DATA_WIDTH / 8)]), 
                        .i_s_wlast(cb_to_ext_slv_prt_wlast[ext_slv_cnt]), 
                        .i_s_wuser(cb_to_ext_slv_prt_wuser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .o_s_wready(ext_slv_prt_to_cb_wready[ext_slv_cnt]), 
                        .i_s_arvalid(cb_to_ext_slv_prt_arvalid[ext_slv_cnt]), 
                        .i_s_araddr(cb_to_ext_slv_prt_araddr[(ext_slv_cnt * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_AXI_ADDR_WIDTH_INT]), 
                        .i_s_arsize(cb_to_ext_slv_prt_arsize[(ext_slv_cnt * 3) +: 3]), 
                        .i_s_arlen(cb_to_ext_slv_prt_arlen[(ext_slv_cnt * 8) +: EXT_SLV_AXI_LEN_WIDTH_INT]), 
                        .i_s_arburst(cb_to_ext_slv_prt_arburst[(ext_slv_cnt * 2) +: 2]), 
                        .i_s_arcache(cb_to_ext_slv_prt_arcache[(ext_slv_cnt * 4) +: 4]), 
                        .i_s_arid(cb_to_ext_slv_prt_arid[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                        .i_s_arprot(cb_to_ext_slv_prt_arprot[(ext_slv_cnt * 3) +: 3]), 
                        .i_s_arlock(cb_to_ext_slv_prt_arlock[(ext_slv_cnt * 1) +: 1]), 
                        .i_s_arqos(cb_to_ext_slv_prt_arqos[(ext_slv_cnt * 4) +: 4]), 
                        .i_s_arregion(cb_to_ext_slv_prt_arregion[(ext_slv_cnt * 4) +: 4]), 
                        .i_s_aruser(cb_to_ext_slv_prt_aruser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .o_s_arready(ext_slv_prt_to_cb_arready[ext_slv_cnt]), 
                        .o_s_split_arready(ext_slv_prt_to_cb_split_arready[ext_slv_cnt]), 
                        .o_s_bvalid(ext_slv_prt_to_cb_bvalid[ext_slv_cnt]), 
                        .o_s_bresp(ext_slv_prt_to_cb_bresp[(ext_slv_cnt * 2) +: 2]), 
                        .o_s_bid(ext_slv_prt_to_cb_bid[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                        .o_s_buser(ext_slv_prt_to_cb_buser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .i_s_bready(cb_to_ext_slv_prt_bready[ext_slv_cnt]), 
                        .o_s_rvalid(ext_slv_prt_to_cb_rvalid[ext_slv_cnt]), 
                        .o_s_rdata(ext_slv_prt_to_cb_rdata[(ext_slv_cnt * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH_INT]), 
                        //. o_s_rdata            ( ext_slv_prt_to_cb_rdata_int [ext_slv_cnt * EXT_SLV_MAX_DATA_WIDTH +: EXT_SLV_AXI_DATA_WIDTH_INT]                ),
                    .o_s_rid(ext_slv_prt_to_cb_rid[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                        .o_s_rlast(ext_slv_prt_to_cb_rlast[ext_slv_cnt]), 
                        .o_s_ruser(ext_slv_prt_to_cb_ruser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .o_s_rresp(ext_slv_prt_to_cb_rresp[(ext_slv_cnt * 2) +: 2]), 
                        .i_s_rready(cb_to_ext_slv_prt_rready[ext_slv_cnt]), 
                        .i_s_ext_mas_awr_gnt(cb_to_ext_slv_prt_ext_mas_awr_gnt[(ext_slv_cnt * 6) +: 6]), 
                        .i_s_ext_mas_ard_gnt(cb_to_ext_slv_prt_ext_mas_ard_gnt[(ext_slv_cnt * 6) +: 6]), 
                        .i_s_ext_mas_dwr_gnt(cb_to_ext_slv_prt_ext_mas_dwr_gnt[(ext_slv_cnt * 6) +: 6]), 
                        .o_ext_slv_prt_awvalid(o_ext_slv_prt_awvalid[ext_slv_cnt]), 
                        .o_ext_slv_prt_awaddr(o_ext_slv_prt_awaddr[(ext_slv_cnt * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_AXI_ADDR_WIDTH_INT]), 
                        .o_ext_slv_prt_awsize(o_ext_slv_prt_awsize[(ext_slv_cnt * 3) +: 3]), 
                        .o_ext_slv_prt_awlen(o_ext_slv_prt_awlen[(ext_slv_cnt * 8) +: EXT_SLV_AXI_LEN_WIDTH_INT]), 
                        .o_ext_slv_prt_awburst(o_ext_slv_prt_awburst[(ext_slv_cnt * 2) +: 2]), 
                        .o_ext_slv_prt_awcache(o_ext_slv_prt_awcache[(ext_slv_cnt * 4) +: 4]), 
                        .o_ext_slv_prt_awid(o_ext_slv_prt_awid[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                        .o_ext_slv_prt_awprot(o_ext_slv_prt_awprot[(ext_slv_cnt * 3) +: 3]), 
                        .o_ext_slv_prt_awlock(o_ext_slv_prt_awlock[(ext_slv_cnt * 1) +: 1]), 
                        .o_ext_slv_prt_awqos(o_ext_slv_prt_awqos[(ext_slv_cnt * 4) +: 4]), 
                        .o_ext_slv_prt_awregion(o_ext_slv_prt_awregion[(ext_slv_cnt * 4) +: 4]), 
                        .o_ext_slv_prt_awuser(o_ext_slv_prt_awuser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .i_ext_slv_prt_awready(i_ext_slv_prt_awready[ext_slv_cnt]), 
                        .o_ext_slv_prt_wvalid(o_ext_slv_prt_wvalid[ext_slv_cnt]), 
                        .o_ext_slv_prt_wdata(o_ext_slv_prt_wdata[(ext_slv_cnt * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH_INT]), 
                        .o_ext_slv_prt_wstrb(o_ext_slv_prt_wstrb[(ext_slv_cnt * (EXT_SLV_MAX_DATA_WIDTH / 8)) +: (EXT_SLV_AXI_DATA_WIDTH_INT / 8)]), 
                        .o_ext_slv_prt_wlast(o_ext_slv_prt_wlast[ext_slv_cnt]), 
                        .o_ext_slv_prt_wuser(o_ext_slv_prt_wuser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .i_ext_slv_prt_wready(i_ext_slv_prt_wready[ext_slv_cnt]), 
                        .o_ext_slv_prt_arvalid(o_ext_slv_prt_arvalid[ext_slv_cnt]), 
                        .o_ext_slv_prt_araddr(o_ext_slv_prt_araddr[(ext_slv_cnt * EXT_SLV_MAX_ADDR_WIDTH) +: EXT_SLV_AXI_ADDR_WIDTH_INT]), 
                        .o_ext_slv_prt_arsize(o_ext_slv_prt_arsize[(ext_slv_cnt * 3) +: 3]), 
                        .o_ext_slv_prt_arlen(o_ext_slv_prt_arlen[(ext_slv_cnt * 8) +: EXT_SLV_AXI_LEN_WIDTH_INT]), 
                        .o_ext_slv_prt_arburst(o_ext_slv_prt_arburst[(ext_slv_cnt * 2) +: 2]), 
                        .o_ext_slv_prt_arcache(o_ext_slv_prt_arcache[(ext_slv_cnt * 4) +: 4]), 
                        .o_ext_slv_prt_arid(o_ext_slv_prt_arid[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                        .o_ext_slv_prt_arprot(o_ext_slv_prt_arprot[(ext_slv_cnt * 3) +: 3]), 
                        .o_ext_slv_prt_arlock(o_ext_slv_prt_arlock[(ext_slv_cnt * 1) +: 1]), 
                        .o_ext_slv_prt_arqos(o_ext_slv_prt_arqos[(ext_slv_cnt * 4) +: 4]), 
                        .o_ext_slv_prt_arregion(o_ext_slv_prt_arregion[(ext_slv_cnt * 4) +: 4]), 
                        .o_ext_slv_prt_aruser(o_ext_slv_prt_aruser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .i_ext_slv_prt_arready(i_ext_slv_prt_arready[ext_slv_cnt]), 
                        .i_ext_slv_prt_bvalid(i_ext_slv_prt_bvalid[ext_slv_cnt]), 
                        .i_ext_slv_prt_bresp(i_ext_slv_prt_bresp[(ext_slv_cnt * 2) +: 2]), 
                        .i_ext_slv_prt_bid(i_ext_slv_prt_bid[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                        .i_ext_slv_prt_buser(i_ext_slv_prt_buser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .o_ext_slv_prt_bready(o_ext_slv_prt_bready[ext_slv_cnt]), 
                        .i_ext_slv_prt_rvalid(i_ext_slv_prt_rvalid[ext_slv_cnt]), 
                        .i_ext_slv_prt_rdata(i_ext_slv_prt_rdata[(ext_slv_cnt * EXT_SLV_MAX_DATA_WIDTH) +: EXT_SLV_AXI_DATA_WIDTH_INT]), 
                        .i_ext_slv_prt_rid(i_ext_slv_prt_rid[(ext_slv_cnt * EXT_SLV_AXI_ID_WIDTH) +: EXT_SLV_AXI_ID_WIDTH]), 
                        .i_ext_slv_prt_rlast(i_ext_slv_prt_rlast[ext_slv_cnt]), 
                        .i_ext_slv_prt_ruser(i_ext_slv_prt_ruser[(ext_slv_cnt * AXI_USER_WIDTH) +: AXI_USER_WIDTH]), 
                        .i_ext_slv_prt_rresp(i_ext_slv_prt_rresp[(ext_slv_cnt * 2) +: 2]), 
                        .o_ext_slv_prt_rready(o_ext_slv_prt_rready[ext_slv_cnt])) ; 
        end
    endgenerate
endmodule



module axi4_interconnect_ipgen_mem_1w1r (wclk, 
        waddr, 
        wen, 
        wdata, 
        rclk, 
        raddr, 
        ren, 
        rdata) ;
    parameter PTR_WIDTH = 4 ; 
    parameter DATA_WIDTH = 32 ; 
    parameter DEPTH = 15 ; 
    input wclk ; 
    input [(PTR_WIDTH - 1):0] waddr ; 
    input wen ; 
    input [(DATA_WIDTH - 1):0] wdata ; 
    input rclk ; 
    input [(PTR_WIDTH - 1):0] raddr ; 
    input ren ; 
    output [(DATA_WIDTH - 1):0] rdata ; 
    reg [(DATA_WIDTH - 1):0] rdata ; 
    reg [(DATA_WIDTH - 1):0] mem [DEPTH:0] ; 
    always
        @(posedge wclk)
        begin
            if (wen) 
                mem[waddr] <=  wdata ;
        end
    always
        @(posedge rclk)
        begin
            if (ren) 
                rdata <=  mem[raddr] ;
        end
endmodule



//====================================================================================
// AXI read respone clock crossing interface,
// This module act as bridge between both AXI master read response 
// interface and Slave AXI read response interface. Async FIFO inside will
// storge all interface signals.   
//====================================================================================
module axi4_interconnect_ipgen_rdata_cdc_ifc (mi_rvalid, 
        mi_rdata, 
        mi_rlast, 
        mi_rresp, 
        mi_rid, 
        mi_ruser, 
        mi_rready, 
        mi_aclk, 
        mi_rst_n, 
        mo_rvalid, 
        mo_rdata, 
        mo_rlast, 
        mo_rresp, 
        mo_rid, 
        mo_ruser, 
        mo_rready, 
        mo_aclk, 
        mo_rst_n) ;
    parameter RD_DATA_FIFO_DEPTH = 32 ; 
    parameter AXI_DATA_WIDTH = 128 ; 
    parameter AXI_ID_WIDTH = 12 ; 
    parameter AXI_USER_WIDTH = 1 ; 
    parameter PTR_WIDTH = clog2(RD_DATA_FIFO_DEPTH) ; 
    parameter DEPTH = (RD_DATA_FIFO_DEPTH - 1) ; 
    parameter DATA_WIDTH = (((AXI_DATA_WIDTH + AXI_ID_WIDTH) + AXI_USER_WIDTH) + 4) ; 
    // Function Definition
    function integer clog2( 
        input integer depth )  ; 
        begin
            //if (depth == 0)
            if (((depth == 0) || (depth == 1))) 
                clog2 = 1 ;
            else
                for (clog2 = 0 ; (depth > 1) ; clog2 = (clog2 + 1))
                    //for (clog2 = 0; depth > 1;  clog2 = clog2 + 1)
                    depth = (depth >> 1) ;
        end
    endfunction
    //*********************************INPUTS & OUTPUTS************************************
    input mi_aclk ; 
    input mi_rst_n ; 
    input mi_rvalid ; 
    input [(AXI_DATA_WIDTH - 1):0] mi_rdata ; 
    input [(AXI_ID_WIDTH - 1):0] mi_rid ; 
    input [1:0] mi_rresp ; 
    input mi_rlast ; 
    input [(AXI_USER_WIDTH - 1):0] mi_ruser ; 
    output logic mi_rready ; 
    output logic mo_rvalid ; 
    output logic [(AXI_DATA_WIDTH - 1):0] mo_rdata ; 
    output logic [(AXI_ID_WIDTH - 1):0] mo_rid ; 
    output logic [1:0] mo_rresp ; 
    output logic mo_rlast ; 
    output logic [(AXI_USER_WIDTH - 1):0] mo_ruser ; 
    input mo_rready ; 
    input mo_aclk ; 
    input mo_rst_n ; 
    //===================================================================================
    logic mi_r_ff_wren ; 
    logic [(((AXI_DATA_WIDTH + AXI_ID_WIDTH) + AXI_USER_WIDTH) + 3):0] mi_r_ff_wdata ; 
    logic mo_r_ff_rden ; 
    logic [(((AXI_DATA_WIDTH + AXI_ID_WIDTH) + AXI_USER_WIDTH) + 3):0] mo_r_ff_rdata ; 
    logic [(((AXI_DATA_WIDTH + AXI_ID_WIDTH) + AXI_USER_WIDTH) + 3):0] mo_r_ff_rdata_reg ; 
    logic r_ff_pre_full ; 
    logic r_ff_full ; 
    logic r_ff_empty ; 
    logic rdata_valid ; 
    logic [(PTR_WIDTH - 1):0] ram_write_addr ; 
    logic [(PTR_WIDTH - 1):0] ram_read_addr ; 
    logic ram_write_strobe ; 
    logic ram_read_strobe ; 
    assign mi_r_ff_wren = ((mi_rvalid & mi_rready) & (~r_ff_full)) ; 
    assign mi_r_ff_wdata = {mi_ruser,
                mi_rlast,
                mi_rresp,
                mi_rid,
                mi_rdata} ; 
    axi4_interconnect_ipgen_gen_fifo_async_ctl #(PTR_WIDTH) u_mas_r_ff (// Outputs
            .wdepth(), 
                .rdepth(), 
                .ram_write_strobe(ram_write_strobe), 
                .ram_write_addr(ram_write_addr), 
                .ram_read_strobe(ram_read_strobe), 
                .ram_read_addr(ram_read_addr), 
                .full(r_ff_full), 
                .pre_full(r_ff_pre_full), 
                .empty(r_ff_empty), 
                .dout_v(rdata_valid), 
                // Inputs
            .wusable(1'b1), 
                .wreset((~mi_rst_n)), 
                .wclk(mi_aclk), 
                .rusable(1'b1), 
                .rreset((~mo_rst_n)), 
                .rclk(mo_aclk), 
                .push(mi_r_ff_wren), 
                .pop(mo_r_ff_rden)) ; 
    axi4_interconnect_ipgen_mem_1w1r #(PTR_WIDTH,
            DATA_WIDTH,
            DEPTH) u_mas_r_ff_mem (.wclk(mi_aclk), 
                .waddr(ram_write_addr), 
                .wen(ram_write_strobe), 
                .wdata(mi_r_ff_wdata), 
                .rclk(mo_aclk), 
                .raddr(ram_read_addr), 
                .ren(ram_read_strobe), 
                .rdata(mo_r_ff_rdata)) ; 
    //===================================================================================
    // MI clock interface
    //===================================================================================
    always
        @(posedge mi_aclk or 
            negedge mi_rst_n)
        begin
            if ((~mi_rst_n)) 
                begin
                    mi_rready <=  1'b1 ;
                end
            else
                begin
                    mi_rready <=  ((!r_ff_pre_full) & (!r_ff_full)) ;
                end
        end
    //===================================================================================
    // MO clock interface
    //===================================================================================
    parameter MO_IDLE = 2'b00 ; 
    parameter MO_RD = 2'b01 ; 
    parameter MO_RD_V = 2'b10 ; 
    logic [1:0] cur_mor_state ; 
    logic [1:0] nxt_mor_state ; 
    //logic check;
    //logic [1:0 ]sample;
    //assign sample = 2'd1;
    //integer slv;
    //
    always
        @(*)
        begin
            case (cur_mor_state)
            MO_IDLE : 
                begin
                    if ((~r_ff_empty)) 
                        begin
                            nxt_mor_state = MO_RD ;
                            //for(slv=0; slv<sample; slv=slv+1)
                            //check = mi_rdata[slv];
                        end
                    else
                        nxt_mor_state = MO_IDLE ;
                end
            MO_RD : 
                begin
                    if ((mo_rready & r_ff_empty)) 
                        nxt_mor_state = MO_IDLE ;
                    else
                        if ((mo_rready & (~r_ff_empty))) 
                            nxt_mor_state = MO_RD_V ;
                        else
                            nxt_mor_state = MO_RD ;
                end
            MO_RD_V : 
                begin
                    if ((mo_rready & r_ff_empty)) 
                        nxt_mor_state = MO_IDLE ;
                    else
                        if ((mo_rready & (~r_ff_empty))) 
                            nxt_mor_state = MO_RD ;
                        else
                            nxt_mor_state = MO_RD_V ;
                end
            default : 
                begin
                    nxt_mor_state = MO_IDLE ;
                end
            endcase 
        end
    assign mo_r_ff_rden = ((((cur_mor_state == MO_IDLE) & (nxt_mor_state == MO_RD)) | ((cur_mor_state == MO_RD) & (nxt_mor_state == MO_RD_V))) | ((cur_mor_state == MO_RD_V) & (nxt_mor_state == MO_RD))) ; 
    always
        @(posedge mo_aclk or 
            negedge mo_rst_n)
        begin
            if ((~mo_rst_n)) 
                begin
                    cur_mor_state <=  MO_IDLE ;
                    mo_r_ff_rdata_reg <=  'd0 ;
                end
            else
                begin
                    cur_mor_state <=  nxt_mor_state ;
                    if (rdata_valid) 
                        mo_r_ff_rdata_reg <=  mo_r_ff_rdata ;
                end
        end
    always
        @(*)
        begin
            if (((cur_mor_state == MO_RD) || (cur_mor_state == MO_RD_V))) 
                begin
                    mo_rvalid = 1'b1 ;
                    //mo_rvalid     =  (rdata_valid) ? mo_r_ff_rdata[0] : mo_r_ff_rdata_reg[0] ;
                    mo_rdata = (rdata_valid ? mo_r_ff_rdata[0 +: AXI_DATA_WIDTH] : mo_r_ff_rdata_reg[0 +: AXI_DATA_WIDTH]) ;
                    mo_rid = (rdata_valid ? mo_r_ff_rdata[AXI_DATA_WIDTH +: AXI_ID_WIDTH] : mo_r_ff_rdata_reg[AXI_DATA_WIDTH +: AXI_ID_WIDTH]) ;
                    mo_rresp = (rdata_valid ? mo_r_ff_rdata[(AXI_DATA_WIDTH + AXI_ID_WIDTH) +: 2] : mo_r_ff_rdata_reg[(AXI_DATA_WIDTH + AXI_ID_WIDTH) +: 2]) ;
                    mo_rlast = (rdata_valid ? mo_r_ff_rdata[((AXI_DATA_WIDTH + AXI_ID_WIDTH) + 2)] : mo_r_ff_rdata_reg[((AXI_DATA_WIDTH + AXI_ID_WIDTH) + 2)]) ;
                    mo_ruser = (rdata_valid ? mo_r_ff_rdata[((AXI_DATA_WIDTH + AXI_ID_WIDTH) + 3) +: AXI_USER_WIDTH] : mo_r_ff_rdata_reg[((AXI_DATA_WIDTH + AXI_ID_WIDTH) + 3) +: AXI_USER_WIDTH]) ;
                end
            else
                begin
                    mo_rvalid = 1'd0 ;
                    mo_rdata = {AXI_DATA_WIDTH{1'd0}} ;
                    mo_rid = {AXI_ID_WIDTH{1'd0}} ;
                    mo_ruser = {AXI_USER_WIDTH{1'd0}} ;
                    mo_rresp = 2'd0 ;
                    mo_rlast = 1'd0 ;
                end
        end

// rdata_cdc_ifc 
endmodule



module axi4_interconnect_ipgen_rr_arb (aclk_i, 
        aresetn_i, 
        input_req, 
        req_gnt) ;
    parameter REQ_WIDTH = 32 ; 
    input aclk_i ; 
    input aresetn_i ; 
    input [(REQ_WIDTH - 1):0] input_req ; 
    output [(REQ_WIDTH - 1):0] req_gnt ; 
    logic [((2 * REQ_WIDTH) - 1):0] input_req_replicate ; 
    logic [((2 * REQ_WIDTH) - 1):0] gnts_ext ; 
    reg [(REQ_WIDTH - 1):0] req_gnt ; 
    logic [(REQ_WIDTH - 1):0] req_gnt_int ; 
    (* syn_preserve=1 *) logic [(REQ_WIDTH - 1):0] prev_gnt ; 
    logic [(REQ_WIDTH - 1):0] input_req_cache ; 
    logic [(REQ_WIDTH - 1):0] input_req_int ; 
    // Both input_req and input_req_cache holds valid request. The input_req_cache is meant
    // to hold the request that wasn't serviced in the previous cycle
    assign input_req_int = (input_req_cache | input_req) ; 
    assign input_req_replicate = {input_req_int,
                input_req_int} ; 
    // Register the incoming requests, hold it until it is serviced
    // Drive the Request Granted signals
    integer i ; 
    always
        @(posedge aclk_i or 
            negedge aresetn_i)
        begin
            if ((!aresetn_i)) 
                begin
                    input_req_cache <=  {REQ_WIDTH{1'b0}} ;
                end
            else
                begin
                    for (i = 0 ; (i < REQ_WIDTH) ; i = (i + 1))
                        begin
                            // We want to cache the input request when it is asserted (valid request)
                            if (input_req[i]) 
                                begin
                                    input_req_cache[i] <=  input_req[i] ;
                                end
                            // We want to clear the cache when request has been granted
                            if (req_gnt[i]) 
                                input_req_cache[i] <=  1'b0 ;
                        end
                end
        end
    // Register the previous grant so it can be subtracted from the
    // input request
    always
        @(posedge aclk_i or 
            negedge aresetn_i)
        begin
            if ((!aresetn_i)) 
                begin
                    // This is default to 1 as it is needed for correct calculation below
                    prev_gnt <=  {{(REQ_WIDTH - 1){1'b0}},
                            1'b1} ;
                end
            else
                if ((|input_req_int)) 
                    begin
                        prev_gnt <=  req_gnt_int ;
                    end
                else
                    prev_gnt <=  prev_gnt ;
        end
    assign gnts_ext = ((~(input_req_replicate - {prev_gnt,
                prev_gnt})) & input_req_replicate) ; 
    assign req_gnt_int = (gnts_ext[((2 * REQ_WIDTH) - 1):REQ_WIDTH] | gnts_ext[(REQ_WIDTH - 1):0]) ; // ORing is useful when request transfer from 010,011,001 
    generate
        genvar j ; 
        for (j = 0;(j < REQ_WIDTH);j = (j + 1))
        begin : genblk1
            assign req_gnt[j] = (input_req_int[j] ? prev_gnt[j] : 1'b0) ; 
        end
    endgenerate
endmodule



module axi4_interconnect_ipgen_wdata_cdc_ifc (mi_aclk, 
        mi_rst_n, 
        mi_wvalid, 
        mi_wdata, 
        mi_wstrb, 
        mi_wlast, 
        mi_wuser, 
        mi_wready, 
        mo_aclk, 
        mo_rst_n, 
        mo_wvalid, 
        mo_wdata, 
        mo_wstrb, 
        mo_wlast, 
        mo_wuser, 
        mo_wready) ;
    parameter AXI_DATA_WIDTH = 128 ; 
    parameter AXI_ID_WIDTH = 12 ; 
    parameter AXI_USER_WIDTH = 1 ; 
    parameter WR_DATA_FIFO_DEPTH = 16 ; 
    localparam PTR_WIDTH = clog2(WR_DATA_FIFO_DEPTH) ; 
    localparam DEPTH = (WR_DATA_FIFO_DEPTH - 1) ; 
    localparam WR_DATA_FIFO_WIDTH = (((AXI_DATA_WIDTH + (AXI_DATA_WIDTH / 8)) + AXI_USER_WIDTH) + 2) ; 
    // Function Definition
    function integer clog2( 
        input integer depth )  ; 
        begin
            //if (depth == 0)
            if (((depth == 0) || (depth == 1))) 
                clog2 = 1 ;
            else
                for (clog2 = 0 ; (depth > 1) ; clog2 = (clog2 + 1))
                    //for (clog2 = 0; depth > 1;  clog2 = clog2 + 1)
                    depth = (depth >> 1) ;
        end
    endfunction
    //*********************************INPUTS & OUTPUTS************************************
    input mi_aclk ; 
    input mi_rst_n ; 
    input mi_wvalid ; 
    input [(AXI_DATA_WIDTH - 1):0] mi_wdata ; 
    input [((AXI_DATA_WIDTH / 8) - 1):0] mi_wstrb ; 
    input mi_wlast ; 
    input [(AXI_USER_WIDTH - 1):0] mi_wuser ; 
    output logic mi_wready ; 
    input mo_aclk ; 
    input mo_rst_n ; 
    output logic mo_wvalid ; 
    output logic [(AXI_DATA_WIDTH - 1):0] mo_wdata ; 
    output logic [((AXI_DATA_WIDTH / 8) - 1):0] mo_wstrb ; 
    output logic mo_wlast ; 
    output logic [(AXI_USER_WIDTH - 1):0] mo_wuser ; 
    input mo_wready ; 
    //===================================================================================
    logic nxt_mo_wvalid ; 
    logic [(AXI_DATA_WIDTH - 1):0] nxt_mo_wdata ; 
    logic [((AXI_DATA_WIDTH / 8) - 1):0] nxt_mo_wstrb ; 
    logic nxt_mo_wlast ; 
    logic [(AXI_USER_WIDTH - 1):0] nxt_mo_wuser ; 
    logic mi_wd_ff_wren ; 
    logic mo_wd_ff_rden ; 
    logic [(WR_DATA_FIFO_WIDTH - 1):0] mi_wd_ff_wdata ; 
    logic [(WR_DATA_FIFO_WIDTH - 1):0] mo_wd_ff_rdata ; 
    logic [(WR_DATA_FIFO_WIDTH - 1):0] mo_wd_ff_rdata_reg ; 
    logic rdata_valid_reg, 
        nxt_rdata_valid_reg ; 
    logic wd_ff_full ; 
    logic wd_ff_pre_full ; 
    logic wd_ff_empty ; 
    logic rdata_valid ; 
    logic [(PTR_WIDTH - 1):0] ram_write_addr ; 
    logic [(PTR_WIDTH - 1):0] ram_read_addr ; 
    logic ram_write_strobe ; 
    logic ram_read_strobe ; 
    axi4_interconnect_ipgen_gen_fifo_async_ctl #(PTR_WIDTH) u_mas_wd_ff (// Outputs
            .wdepth(), 
                .rdepth(), 
                .ram_write_strobe(ram_write_strobe), 
                .ram_write_addr(ram_write_addr), 
                .ram_read_strobe(ram_read_strobe), 
                .ram_read_addr(ram_read_addr), 
                .full(wd_ff_full), 
                .pre_full(wd_ff_pre_full), 
                .empty(wd_ff_empty), 
                .dout_v(rdata_valid), 
                // Inputs
            .wusable(1'b1), 
                .wclk(mi_aclk), 
                .wreset((~mi_rst_n)), 
                .rusable(1'b1), 
                .rclk(mo_aclk), 
                .rreset((~mo_rst_n)), 
                .push(mi_wd_ff_wren), 
                .pop(mo_wd_ff_rden)) ; 
    axi4_interconnect_ipgen_mem_1w1r #(PTR_WIDTH,
            WR_DATA_FIFO_WIDTH,
            DEPTH) u_mas_wd_ff_mem (.wclk(mi_aclk), 
                .waddr(ram_write_addr), 
                .wen(ram_write_strobe), 
                .wdata(mi_wd_ff_wdata), 
                .rclk(mo_aclk), 
                .raddr(ram_read_addr), 
                .ren(ram_read_strobe), 
                .rdata(mo_wd_ff_rdata)) ; 
    //===================================================================================
    // MI Interface based on mi_aclk 
    //===================================================================================
    always
        @(posedge mi_aclk or 
            negedge mi_rst_n)
        begin
            if ((~mi_rst_n)) 
                mi_wready <=  1'b1 ;
            else
                mi_wready <=  ((!wd_ff_full) & (!wd_ff_pre_full)) ;
        end
    assign mi_wd_ff_wren = ((mi_wvalid & mi_wready) & (~wd_ff_full)) ; 
    assign mi_wd_ff_wdata = {mi_wuser,
                mi_wlast,
                mi_wstrb,
                mi_wdata,
                mi_wvalid} ; 
    // MO Clock interface
    always
        @(posedge mo_aclk or 
            negedge mo_rst_n)
        begin
            if ((~mo_rst_n)) 
                begin
                    mo_wd_ff_rdata_reg <=  'd0 ;
                    rdata_valid_reg <=  1'b0 ;
                    mo_wvalid <=  1'b0 ;
                    mo_wdata <=  {AXI_DATA_WIDTH{1'b0}} ;
                    mo_wstrb <=  {(AXI_DATA_WIDTH / 8){1'b0}} ;
                    mo_wlast <=  1'b0 ;
                    mo_wuser <=  {AXI_USER_WIDTH{1'b0}} ;
                end
            else
                begin
                    mo_wd_ff_rdata_reg <=  (rdata_valid ? mo_wd_ff_rdata : mo_wd_ff_rdata_reg) ;
                    rdata_valid_reg <=  nxt_rdata_valid_reg ;
                    mo_wvalid <=  nxt_mo_wvalid ;
                    mo_wdata <=  nxt_mo_wdata ;
                    mo_wstrb <=  nxt_mo_wstrb ;
                    mo_wlast <=  nxt_mo_wlast ;
                    mo_wuser <=  nxt_mo_wuser ;
                end
        end
    assign mo_wd_ff_rden = ((~wd_ff_empty) ? ((((mo_wvalid & rdata_valid) & (!mo_wready)) || rdata_valid_reg) ? 1'b0 : 1'b1) : 1'b0) ; 
    always
        @(*)
        begin
            nxt_rdata_valid_reg = (rdata_valid_reg ? (!mo_wready) : (((mo_wvalid & rdata_valid) & (!mo_wready)) ? 1'b1 : rdata_valid_reg)) ;
            nxt_mo_wvalid = mo_wvalid ;
            nxt_mo_wdata = mo_wdata ;
            nxt_mo_wstrb = mo_wstrb ;
            nxt_mo_wlast = mo_wlast ;
            nxt_mo_wuser = mo_wuser ;
            if ((((mo_wvalid & mo_wready) & rdata_valid) || ((!mo_wvalid) & rdata_valid))) 
                begin
                    nxt_mo_wvalid = mo_wd_ff_rdata[0] ;
                    nxt_mo_wdata = mo_wd_ff_rdata[AXI_DATA_WIDTH:1] ;
                    nxt_mo_wstrb = mo_wd_ff_rdata[(AXI_DATA_WIDTH + 1) +: (AXI_DATA_WIDTH / 8)] ;
                    nxt_mo_wlast = mo_wd_ff_rdata[((AXI_DATA_WIDTH + 1) + (AXI_DATA_WIDTH / 8))] ;
                    nxt_mo_wuser = mo_wd_ff_rdata[((AXI_DATA_WIDTH + 1) + (AXI_DATA_WIDTH / 8)) +: AXI_USER_WIDTH] ;
                end
            else
                if (((mo_wvalid & mo_wready) & rdata_valid_reg)) 
                    begin
                        nxt_mo_wvalid = mo_wd_ff_rdata_reg[0] ;
                        nxt_mo_wdata = mo_wd_ff_rdata_reg[AXI_DATA_WIDTH:1] ;
                        nxt_mo_wstrb = mo_wd_ff_rdata_reg[(AXI_DATA_WIDTH + 1) +: (AXI_DATA_WIDTH / 8)] ;
                        nxt_mo_wlast = mo_wd_ff_rdata_reg[((AXI_DATA_WIDTH + 1) + (AXI_DATA_WIDTH / 8))] ;
                        nxt_mo_wuser = mo_wd_ff_rdata_reg[((AXI_DATA_WIDTH + 1) + (AXI_DATA_WIDTH / 8)) +: AXI_USER_WIDTH] ;
                    end
                else
                    begin
                        nxt_mo_wvalid = ((mo_wvalid & mo_wready) ? 1'b0 : mo_wvalid) ;
                    end
        end

// wdata_cdc_ifc 
endmodule


