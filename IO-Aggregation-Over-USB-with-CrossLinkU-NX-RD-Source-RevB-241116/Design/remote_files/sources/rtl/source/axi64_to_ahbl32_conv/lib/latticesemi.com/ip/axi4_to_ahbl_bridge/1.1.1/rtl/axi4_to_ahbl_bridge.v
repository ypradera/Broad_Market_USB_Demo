
/*******************************************************************************
    Verilog netlist generated by IPGEN Lattice Propel (64-bit)
    2022.1.2211240753
    Soft IP Version: 1.1.1
    2023 11 29 11:15:41
*******************************************************************************/
/*******************************************************************************
    Wrapper Module generated per user settings.
*******************************************************************************/
module axi4_to_ahbl_bridge (aclk_i, 
        aresetn_i, 
        ahb_mas_sel_o, 
        ahb_mas_addr_o, 
        ahb_mas_write_o, 
        ahb_mas_wdata_o, 
        ahb_mas_size_o, 
        ahb_mas_trans_o, 
        ahb_mas_burst_o, 
        ahb_mas_prot_o, 
        ahb_mas_ready_o, 
        ahb_mas_ready_i, 
        ahb_mas_rdata_i, 
        ahb_mas_resp_i, 
        ahb_mas_mastlock_o, 
        axi_slv_awvalid_i, 
        axi_slv_awready_o, 
        axi_slv_awaddr_i, 
        axi_slv_awsize_i, 
        axi_slv_awburst_i, 
        axi_slv_awlock_i, 
        axi_slv_awlen_i, 
        axi_slv_awid_i, 
        axi_slv_awprot_i, 
        axi_slv_awcache_i, 
        axi_slv_awqos_i, 
        axi_slv_awregion_i, 
        axi_slv_awuser_i, 
        axi_slv_wvalid_i, 
        axi_slv_wdata_i, 
        axi_slv_wlast_i, 
        axi_slv_wuser_i, 
        axi_slv_wstrb_i, 
        axi_slv_wready_o, 
        axi_slv_bvalid_o, 
        axi_slv_bready_i, 
        axi_slv_bresp_o, 
        axi_slv_buser_o, 
        axi_slv_bid_o, 
        axi_slv_arvalid_i, 
        axi_slv_arready_o, 
        axi_slv_araddr_i, 
        axi_slv_arsize_i, 
        axi_slv_arburst_i, 
        axi_slv_arlock_i, 
        axi_slv_arlen_i, 
        axi_slv_arid_i, 
        axi_slv_arprot_i, 
        axi_slv_arcache_i, 
        axi_slv_arqos_i, 
        axi_slv_arregion_i, 
        axi_slv_aruser_i, 
        axi_slv_rvalid_o, 
        axi_slv_rready_i, 
        axi_slv_rdata_o, 
        axi_slv_rlast_o, 
        axi_slv_rresp_o, 
        axi_slv_ruser_o, 
        axi_slv_rid_o) ;
    input aclk_i ; 
    input aresetn_i ; 
    output [0:0] ahb_mas_sel_o ; 
    output [31:0] ahb_mas_addr_o ; 
    output [0:0] ahb_mas_write_o ; 
    output [31:0] ahb_mas_wdata_o ; 
    output [2:0] ahb_mas_size_o ; 
    output [1:0] ahb_mas_trans_o ; 
    output [2:0] ahb_mas_burst_o ; 
    output [3:0] ahb_mas_prot_o ; 
    output [0:0] ahb_mas_ready_o ; 
    input [0:0] ahb_mas_ready_i ; 
    input [31:0] ahb_mas_rdata_i ; 
    input [0:0] ahb_mas_resp_i ; 
    output [0:0] ahb_mas_mastlock_o ; 
    input [0:0] axi_slv_awvalid_i ; 
    output [0:0] axi_slv_awready_o ; 
    input [31:0] axi_slv_awaddr_i ; 
    input [2:0] axi_slv_awsize_i ; 
    input [1:0] axi_slv_awburst_i ; 
    input [0:0] axi_slv_awlock_i ; 
    input [7:0] axi_slv_awlen_i ; 
    input [10:0] axi_slv_awid_i ; 
    input [2:0] axi_slv_awprot_i ; 
    input [3:0] axi_slv_awcache_i ; 
    input [3:0] axi_slv_awqos_i ; 
    input [3:0] axi_slv_awregion_i ; 
    input [3:0] axi_slv_awuser_i ; 
    input [0:0] axi_slv_wvalid_i ; 
    input [31:0] axi_slv_wdata_i ; 
    input [0:0] axi_slv_wlast_i ; 
    input [3:0] axi_slv_wuser_i ; 
    input [3:0] axi_slv_wstrb_i ; 
    output [0:0] axi_slv_wready_o ; 
    output [0:0] axi_slv_bvalid_o ; 
    input [0:0] axi_slv_bready_i ; 
    output [1:0] axi_slv_bresp_o ; 
    output [3:0] axi_slv_buser_o ; 
    output [10:0] axi_slv_bid_o ; 
    input [0:0] axi_slv_arvalid_i ; 
    output [0:0] axi_slv_arready_o ; 
    input [31:0] axi_slv_araddr_i ; 
    input [2:0] axi_slv_arsize_i ; 
    input [1:0] axi_slv_arburst_i ; 
    input [0:0] axi_slv_arlock_i ; 
    input [7:0] axi_slv_arlen_i ; 
    input [10:0] axi_slv_arid_i ; 
    input [2:0] axi_slv_arprot_i ; 
    input [3:0] axi_slv_arcache_i ; 
    input [3:0] axi_slv_arqos_i ; 
    input [3:0] axi_slv_arregion_i ; 
    input [3:0] axi_slv_aruser_i ; 
    output [0:0] axi_slv_rvalid_o ; 
    input [0:0] axi_slv_rready_i ; 
    output [31:0] axi_slv_rdata_o ; 
    output [0:0] axi_slv_rlast_o ; 
    output [1:0] axi_slv_rresp_o ; 
    output [3:0] axi_slv_ruser_o ; 
    output [10:0] axi_slv_rid_o ; 
    axi4_to_ahbl_bridge_ipgen_lscc_axi2ahb_lite #(.AXI_AHB_DATA_WIDTH(32),
            .AXI_ID_WIDTH(11),
            .AXI_USER_WIDTH(4)) lscc_axi2ahb_lite_inst (.aclk_i(aclk_i), 
                .aresetn_i(aresetn_i), 
                .ahb_mas_sel_o(ahb_mas_sel_o[0]), 
                .ahb_mas_addr_o(ahb_mas_addr_o[31:0]), 
                .ahb_mas_write_o(ahb_mas_write_o[0]), 
                .ahb_mas_wdata_o(ahb_mas_wdata_o[31:0]), 
                .ahb_mas_size_o(ahb_mas_size_o[2:0]), 
                .ahb_mas_trans_o(ahb_mas_trans_o[1:0]), 
                .ahb_mas_burst_o(ahb_mas_burst_o[2:0]), 
                .ahb_mas_prot_o(ahb_mas_prot_o[3:0]), 
                .ahb_mas_ready_o(ahb_mas_ready_o[0]), 
                .ahb_mas_ready_i(ahb_mas_ready_i[0]), 
                .ahb_mas_rdata_i(ahb_mas_rdata_i[31:0]), 
                .ahb_mas_resp_i(ahb_mas_resp_i[0]), 
                .ahb_mas_mastlock_o(ahb_mas_mastlock_o[0]), 
                .axi_slv_awvalid_i(axi_slv_awvalid_i[0]), 
                .axi_slv_awready_o(axi_slv_awready_o[0]), 
                .axi_slv_awaddr_i(axi_slv_awaddr_i[31:0]), 
                .axi_slv_awsize_i(axi_slv_awsize_i[2:0]), 
                .axi_slv_awburst_i(axi_slv_awburst_i[1:0]), 
                .axi_slv_awlock_i(axi_slv_awlock_i[0]), 
                .axi_slv_awlen_i(axi_slv_awlen_i[7:0]), 
                .axi_slv_awid_i(axi_slv_awid_i[10:0]), 
                .axi_slv_awprot_i(axi_slv_awprot_i[2:0]), 
                .axi_slv_awcache_i(axi_slv_awcache_i[3:0]), 
                .axi_slv_awqos_i(axi_slv_awqos_i[3:0]), 
                .axi_slv_awregion_i(axi_slv_awregion_i[3:0]), 
                .axi_slv_awuser_i(axi_slv_awuser_i[3:0]), 
                .axi_slv_wvalid_i(axi_slv_wvalid_i[0]), 
                .axi_slv_wdata_i(axi_slv_wdata_i[31:0]), 
                .axi_slv_wlast_i(axi_slv_wlast_i[0]), 
                .axi_slv_wuser_i(axi_slv_wuser_i[3:0]), 
                .axi_slv_wstrb_i(axi_slv_wstrb_i[3:0]), 
                .axi_slv_wready_o(axi_slv_wready_o[0]), 
                .axi_slv_bvalid_o(axi_slv_bvalid_o[0]), 
                .axi_slv_bready_i(axi_slv_bready_i[0]), 
                .axi_slv_bresp_o(axi_slv_bresp_o[1:0]), 
                .axi_slv_buser_o(axi_slv_buser_o[3:0]), 
                .axi_slv_bid_o(axi_slv_bid_o[10:0]), 
                .axi_slv_arvalid_i(axi_slv_arvalid_i[0]), 
                .axi_slv_arready_o(axi_slv_arready_o[0]), 
                .axi_slv_araddr_i(axi_slv_araddr_i[31:0]), 
                .axi_slv_arsize_i(axi_slv_arsize_i[2:0]), 
                .axi_slv_arburst_i(axi_slv_arburst_i[1:0]), 
                .axi_slv_arlock_i(axi_slv_arlock_i[0]), 
                .axi_slv_arlen_i(axi_slv_arlen_i[7:0]), 
                .axi_slv_arid_i(axi_slv_arid_i[10:0]), 
                .axi_slv_arprot_i(axi_slv_arprot_i[2:0]), 
                .axi_slv_arcache_i(axi_slv_arcache_i[3:0]), 
                .axi_slv_arqos_i(axi_slv_arqos_i[3:0]), 
                .axi_slv_arregion_i(axi_slv_arregion_i[3:0]), 
                .axi_slv_aruser_i(axi_slv_aruser_i[3:0]), 
                .axi_slv_rvalid_o(axi_slv_rvalid_o[0]), 
                .axi_slv_rready_i(axi_slv_rready_i[0]), 
                .axi_slv_rdata_o(axi_slv_rdata_o[31:0]), 
                .axi_slv_rlast_o(axi_slv_rlast_o[0]), 
                .axi_slv_rresp_o(axi_slv_rresp_o[1:0]), 
                .axi_slv_ruser_o(axi_slv_ruser_o[3:0]), 
                .axi_slv_rid_o(axi_slv_rid_o[10:0])) ; 
endmodule



`timescale 1ns/1ps
/* >>>>>>>>>>>>>>>>>>>>>>> COPYRIGHT NOTICE <<<<<<<<<<<<<<<<<<<<<<<<<
     ------------------------------------------------------------------
     Copyright (c) 2019-2022 by Lattice Semiconductor Corporation
     ALL RIGHTS RESERVED
     ------------------------------------------------------------------

       IMPORTANT: THIS FILE IS USED BY OR GENERATED BY the LATTICE PROPEL DEVELOPMENT SUITE, WHICH INCLUDES PROPEL BUILDER AND PROPEL SDK.

       Lattice grants permission to use this code pursuant to the
       terms of the Lattice Propel License Agreement.

     DISCLAIMER:

       LATTICE MAKES NO WARRANTIES ON THIS FILE OR ITS CONTENTS, WHETHER EXPRESSED, IMPLIED, STATUTORY, OR IN ANY PROVISION OF THE LATTICE PROPEL LICENSE AGREEMENT OR COMMUNICATION WITH LICENSEE, AND LATTICE SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  LATTICE DOES NOT WARRANT THAT THE FUNCTIONS CONTAINED HEREIN WILL MEET LICENSEE'S REQUIREMENTS, OR THAT LICENSEE'S OPERATION OF ANY DEVICE, SOFTWARE OR SYSTEM USING THIS FILE OR ITS CONTENTS WILL BE UNINTERRUPTED OR ERROR FREE, OR THAT DEFECTS HEREIN WILL BE CORRECTED.  LICENSEE ASSUMES RESPONSIBILITY FOR SELECTION OF MATERIALS TO ACHIEVE ITS INTENDED RESULTS, AND FOR THE PROPER INSTALLATION, USE, AND RESULTS OBTAINED THEREFROM.  LICENSEE ASSUMES THE ENTIRE RISK OF THE FILE AND ITS CONTENTS PROVING DEFECTIVE OR FAILING TO PERFORM PROPERLY AND IN SUCH EVENT, LICENSEE SHALL ASSUME THE ENTIRE COST AND RISK OF ANY REPAIR, SERVICE, CORRECTION, OR ANY OTHER LIABILITIES OR DAMAGES CAUSED BY OR ASSOCIATED WITH THE SOFTWARE.  IN NO EVENT SHALL LATTICE BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THIS FILE OR ITS CONTENTS, EVEN IF LATTICE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. LATTICE'S SOLE LIABILITY, AND LICENSEE'S SOLE REMEDY, IS SET FORTH ABOVE.  LATTICE DOES NOT WARRANT OR REPRESENT THAT THIS FILE, ITS CONTENTS OR USE THEREOF DOES NOT INFRINGE ON THIRD PARTIES' INTELLECTUAL PROPERTY RIGHTS, INCLUDING ANY PATENT. IT IS THE USER'S RESPONSIBILITY TO VERIFY THE USER SOFTWARE DESIGN FOR CONSISTENCY AND FUNCTIONALITY THROUGH THE USE OF FORMAL SOFTWARE VALIDATION METHODS.

     ------------------------------------------------------------------
 */
module axi4_to_ahbl_bridge_ipgen_lscc_axi2ahb_lite (// Input/Output Ports
    aclk_i, 
        aresetn_i, 
        // -------------------------------------------
    // AXI4 Slave Interface 
    // -------------------------------------------
    axi_slv_awvalid_i, 
        axi_slv_awaddr_i, 
        axi_slv_awsize_i, 
        axi_slv_awburst_i, 
        axi_slv_awlen_i, 
        axi_slv_awid_i, 
        axi_slv_awlock_i, 
        axi_slv_awcache_i, 
        axi_slv_awprot_i, 
        axi_slv_awqos_i, 
        axi_slv_awregion_i, 
        axi_slv_awuser_i, 
        axi_slv_awready_o, 
        axi_slv_wvalid_i, 
        axi_slv_wdata_i, 
        axi_slv_wstrb_i, 
        axi_slv_wlast_i, 
        axi_slv_wuser_i, 
        axi_slv_wready_o, 
        axi_slv_bvalid_o, 
        axi_slv_bid_o, 
        axi_slv_bresp_o, 
        axi_slv_buser_o, 
        axi_slv_bready_i, 
        axi_slv_arvalid_i, 
        axi_slv_araddr_i, 
        axi_slv_arsize_i, 
        axi_slv_arburst_i, 
        axi_slv_arlen_i, 
        axi_slv_arid_i, 
        axi_slv_arlock_i, 
        axi_slv_arcache_i, 
        axi_slv_arprot_i, 
        axi_slv_arqos_i, 
        axi_slv_arregion_i, 
        axi_slv_aruser_i, 
        axi_slv_arready_o, 
        axi_slv_rvalid_o, 
        axi_slv_rid_o, 
        axi_slv_rdata_o, 
        axi_slv_rresp_o, 
        axi_slv_rlast_o, 
        axi_slv_ruser_o, 
        axi_slv_rready_i, 
        // -------------------------------------------
    // AHB4-lite Master Interface 
    // -------------------------------------------
    ahb_mas_sel_o, 
        ahb_mas_addr_o, 
        ahb_mas_write_o, 
        ahb_mas_burst_o, 
        ahb_mas_trans_o, 
        ahb_mas_size_o, 
        ahb_mas_wdata_o, 
        ahb_mas_ready_o, 
        ahb_mas_mastlock_o, 
        ahb_mas_prot_o, 
        ahb_mas_ready_i, 
        ahb_mas_rdata_i, 
        ahb_mas_resp_i) ;
    parameter AXI_AHB_DATA_WIDTH = 1024 ; 
    parameter AXI_USER_WIDTH = 4 ; 
    parameter AXI_ID_WIDTH = 8 ; 
    localparam AXI_AHB_ADDR_WIDTH = 32 ; 
    localparam AXI_LEN_WIDTH = 8 ; 
    input aclk_i ; 
    input aresetn_i ; 
    // -------------------------------------------
    // AXI4 Slave Interface 
    // -------------------------------------------
    input axi_slv_awvalid_i ; 
    input [(AXI_AHB_ADDR_WIDTH - 1):0] axi_slv_awaddr_i ; 
    input [(3 - 1):0] axi_slv_awsize_i ; 
    input [(2 - 1):0] axi_slv_awburst_i ; 
    input [(AXI_LEN_WIDTH - 1):0] axi_slv_awlen_i ; 
    input [(AXI_ID_WIDTH - 1):0] axi_slv_awid_i ; 
    input axi_slv_awlock_i ; 
    input [(4 - 1):0] axi_slv_awcache_i ; 
    input [(3 - 1):0] axi_slv_awprot_i ; 
    input [(4 - 1):0] axi_slv_awqos_i ; 
    input [(4 - 1):0] axi_slv_awregion_i ; 
    input [(AXI_USER_WIDTH - 1):0] axi_slv_awuser_i ; 
    output reg axi_slv_awready_o ; 
    input axi_slv_wvalid_i ; 
    input [(AXI_AHB_DATA_WIDTH - 1):0] axi_slv_wdata_i ; 
    input [((AXI_AHB_DATA_WIDTH / 8) - 1):0] axi_slv_wstrb_i ; 
    input [(AXI_USER_WIDTH - 1):0] axi_slv_wuser_i ; 
    input axi_slv_wlast_i ; 
    output reg axi_slv_wready_o ; 
    output reg axi_slv_bvalid_o ; 
    output reg [(AXI_ID_WIDTH - 1):0] axi_slv_bid_o ; 
    output reg [(2 - 1):0] axi_slv_bresp_o ; 
    output reg [(AXI_USER_WIDTH - 1):0] axi_slv_buser_o ; 
    input axi_slv_bready_i ; 
    input axi_slv_arvalid_i ; 
    input [(AXI_AHB_ADDR_WIDTH - 1):0] axi_slv_araddr_i ; 
    input [(3 - 1):0] axi_slv_arsize_i ; 
    input [(2 - 1):0] axi_slv_arburst_i ; 
    input [(AXI_LEN_WIDTH - 1):0] axi_slv_arlen_i ; 
    input [(AXI_ID_WIDTH - 1):0] axi_slv_arid_i ; 
    input axi_slv_arlock_i ; 
    input [(4 - 1):0] axi_slv_arcache_i ; 
    input [(3 - 1):0] axi_slv_arprot_i ; 
    input [(4 - 1):0] axi_slv_arqos_i ; 
    input [(4 - 1):0] axi_slv_arregion_i ; 
    input [(AXI_USER_WIDTH - 1):0] axi_slv_aruser_i ; 
    output reg axi_slv_arready_o ; 
    output reg axi_slv_rvalid_o ; 
    output reg [(AXI_ID_WIDTH - 1):0] axi_slv_rid_o ; 
    output reg [(AXI_AHB_DATA_WIDTH - 1):0] axi_slv_rdata_o ; 
    output reg [(2 - 1):0] axi_slv_rresp_o ; 
    output reg axi_slv_rlast_o ; 
    output reg [(AXI_USER_WIDTH - 1):0] axi_slv_ruser_o ; 
    input axi_slv_rready_i ; 
    // -------------------------------------------
    // AHB4-lite Master Interface 
    // -------------------------------------------
    output reg ahb_mas_sel_o ; 
    output reg [(AXI_AHB_ADDR_WIDTH - 1):0] ahb_mas_addr_o ; 
    output reg ahb_mas_write_o ; 
    output reg [(3 - 1):0] ahb_mas_burst_o ; 
    output reg [(2 - 1):0] ahb_mas_trans_o ; 
    output reg [(3 - 1):0] ahb_mas_size_o ; 
    output reg [(AXI_AHB_DATA_WIDTH - 1):0] ahb_mas_wdata_o ; 
    output reg ahb_mas_mastlock_o ; 
    output reg [(4 - 1):0] ahb_mas_prot_o ; 
    output ahb_mas_ready_o ; 
    input ahb_mas_ready_i ; 
    input [(AXI_AHB_DATA_WIDTH - 1):0] ahb_mas_rdata_i ; 
    input ahb_mas_resp_i ; 
    localparam IDLE_STATE = 3'b000 ; 
    localparam WRITE_FINISH = 3'b001 ; 
    localparam WWRITE = 3'b010 ; 
    localparam WBRESP = 3'b011 ; 
    localparam RREAD = 3'b100 ; 
    localparam READ_FINISH = 3'b101 ; 
    localparam IDLE = 2'd0 ; 
    localparam BUSY = 2'd1 ; 
    localparam NSEQ = 2'd2 ; 
    localparam SEQ = 2'd3 ; 
    localparam SINGLE = 3'd0 ; 
    localparam INCR = 3'd1 ; 
    localparam WRAP4 = 3'd2 ; 
    localparam INCR4 = 3'd3 ; 
    localparam WRAP8 = 3'd4 ; 
    localparam INCR8 = 3'd5 ; 
    localparam WRAP16 = 3'd6 ; 
    localparam INCR16 = 3'd7 ; 
    reg next_axi_slv_awready_o ; 
    reg next_axi_slv_wready_o ; 
    reg next_axi_slv_bvalid ; 
    reg [7:0] next_axi_slv_bid ; 
    reg [1:0] next_axi_slv_bresp ; 
    reg [(AXI_USER_WIDTH - 1):0] next_axi_slv_buser ; 
    reg [(AXI_AHB_ADDR_WIDTH - 1):0] axi_addr_reg, 
        next_addr_reg ; 
    reg [AXI_LEN_WIDTH:0] axi_len_reg, 
        next_len_reg ; 
    reg next_axi_slv_arready_o ; 
    reg next_r_valid ; 
    reg [7:0] next_r_id ; 
    reg [(AXI_AHB_DATA_WIDTH - 1):0] next_r_data ; 
    reg [1:0] next_r_resp ; 
    reg [(AXI_USER_WIDTH - 1):0] next_r_user ; 
    reg next_r_last ; 
    reg next_ahb_mas_sel_o ; 
    reg [(AXI_AHB_ADDR_WIDTH - 1):0] next_ahb_mas_addr_o ; 
    reg next_ahb_mas_write_o ; 
    reg [2:0] next_ahb_mas_burst_o ; 
    reg [1:0] next_ahb_mas_trans_o ; 
    reg [2:0] next_ahb_mas_size_o ; 
    reg [(AXI_AHB_DATA_WIDTH - 1):0] next_ahb_mas_wdata_o ; 
    reg next_ahb_mas_mastlock_o ; 
    reg [3:0] next_ahb_mas_prot_o ; 
    reg data_avail_cnt, 
        next_data_avail_cnt ; 
    reg wlast_reg, 
        next_wlast_reg ; 
    reg [AXI_AHB_DATA_WIDTH:0] data_reg, 
        next_data_reg ; 
    reg [2:0] pres_state, 
        next_state ; 
    reg [2:0] prev_state, 
        next_prev_state ; 
    reg burst_wr_wait, 
        next_burst_wr_wait ; 
    reg [clog2((AXI_AHB_DATA_WIDTH / 8)):0] addr_to_add, 
        next_addr_to_add ; 
    function integer clog2( 
        input integer depth )  ; 
        begin
            if ((depth == 0)) 
                //if (depth == 0 || depth == 1 )
                clog2 = 1 ;
            else
                //for (clog2 = 0; depth > 0;  clog2 = clog2 + 1)
                for (clog2 = 0 ; (depth > 1) ; clog2 = (clog2 + 1))
                    depth = (depth >> 1) ;
        end
    endfunction
    wire [AXI_LEN_WIDTH:0] axi_len_reg_minus_1 ; 
    wire [(AXI_AHB_ADDR_WIDTH - 1):0] axi_addr_reg_plus_size_bytes ; 
    assign axi_len_reg_minus_1 = (axi_len_reg - 1'd1) ; 
    assign axi_addr_reg_plus_size_bytes = (axi_addr_reg + addr_to_add) ; 
    assign ahb_mas_ready_o = 1'b1 ; 
    reg [(AXI_AHB_ADDR_WIDTH - 1):0] rd_ahb_addr_reg_add_wire ; 
    reg [(AXI_AHB_ADDR_WIDTH - 1):0] rd_ahb_addr_wire ; 
    reg [clog2((AXI_AHB_DATA_WIDTH / 8)):0] rd_addr_to_add_wire ; 
    reg rd_addr_unaligned ; 
    reg [(AXI_AHB_ADDR_WIDTH - 1):0] wr_ahb_addr_reg_add_wire ; 
    reg [(AXI_AHB_ADDR_WIDTH - 1):0] wr_ahb_addr_wire ; 
    reg [clog2((AXI_AHB_DATA_WIDTH / 8)):0] wr_addr_to_add_wire ; 
    reg wr_addr_unaligned ; 
    generate
        if ((AXI_AHB_DATA_WIDTH == 8)) 
            begin : DATA_WIDTH_8_BLK
                always
                    @(*)
                    begin
                        rd_ahb_addr_reg_add_wire = (axi_slv_araddr_i + 1'd1) ;
                        rd_ahb_addr_wire = axi_slv_araddr_i ;
                        rd_addr_to_add_wire = 1'd1 ;
                        rd_addr_unaligned = 1'b0 ;
                        wr_ahb_addr_reg_add_wire = (axi_slv_awaddr_i + 1'd1) ;
                        wr_ahb_addr_wire = axi_slv_awaddr_i ;
                        wr_addr_to_add_wire = 1'd1 ;
                        wr_addr_unaligned = 1'b0 ;
                    end
            end
        else
            if ((AXI_AHB_DATA_WIDTH == 16)) 
                begin : DATA_WIDTH_16_BLK
                    always
                        @(*)
                        begin
                            rd_ahb_addr_reg_add_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                            rd_ahb_addr_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                            rd_addr_to_add_wire = 2'd0 ;
                            rd_addr_unaligned = 1'b0 ;
                            wr_ahb_addr_reg_add_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                            wr_ahb_addr_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                            wr_addr_to_add_wire = 2'd0 ;
                            wr_addr_unaligned = 1'b0 ;
                            case (axi_slv_arsize_i)
                            3'd0 : 
                                begin
                                    rd_ahb_addr_reg_add_wire = (axi_slv_araddr_i + 1'd1) ;
                                    rd_ahb_addr_wire = axi_slv_araddr_i ;
                                    rd_addr_to_add_wire = 2'd1 ;
                                    rd_addr_unaligned = 1'b0 ;
                                end
                            3'd1 : 
                                begin
                                    rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                            1'd0} + 2'd2) ;
                                    rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                            1'd0} ;
                                    rd_addr_to_add_wire = 2'd2 ;
                                    rd_addr_unaligned = axi_slv_araddr_i[0] ;
                                end
                            endcase 
                            case (axi_slv_awsize_i)
                            3'd0 : 
                                begin
                                    wr_ahb_addr_reg_add_wire = (axi_slv_awaddr_i + 1'd1) ;
                                    wr_ahb_addr_wire = axi_slv_awaddr_i ;
                                    wr_addr_to_add_wire = 2'd1 ;
                                    wr_addr_unaligned = 1'b0 ;
                                end
                            3'd1 : 
                                begin
                                    wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                            1'd0} + 2'd2) ;
                                    wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                            1'd0} ;
                                    wr_addr_to_add_wire = 2'd2 ;
                                    wr_addr_unaligned = axi_slv_awaddr_i[0] ;
                                end
                            endcase 
                        end
                end
            else
                if ((AXI_AHB_DATA_WIDTH == 32)) 
                    begin : DATA_WIDTH_32_BLK
                        always
                            @(*)
                            begin
                                rd_ahb_addr_reg_add_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                rd_ahb_addr_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                rd_addr_to_add_wire = 3'd0 ;
                                rd_addr_unaligned = 1'b0 ;
                                wr_ahb_addr_reg_add_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                wr_ahb_addr_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                wr_addr_to_add_wire = 3'd0 ;
                                wr_addr_unaligned = 1'b0 ;
                                case (axi_slv_arsize_i)
                                3'd0 : 
                                    begin
                                        rd_ahb_addr_reg_add_wire = (axi_slv_araddr_i + 1'd1) ;
                                        rd_ahb_addr_wire = axi_slv_araddr_i ;
                                        rd_addr_to_add_wire = 3'd1 ;
                                        rd_addr_unaligned = 1'b0 ;
                                    end
                                3'd1 : 
                                    begin
                                        rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                1'd0} + 2'd2) ;
                                        rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                1'd0} ;
                                        rd_addr_to_add_wire = 3'd2 ;
                                        rd_addr_unaligned = axi_slv_araddr_i[0] ;
                                    end
                                3'd2 : 
                                    begin
                                        rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                2'd0} + 3'd4) ;
                                        rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                2'd0} ;
                                        rd_addr_to_add_wire = 3'd4 ;
                                        rd_addr_unaligned = (|axi_slv_araddr_i[1:0]) ;
                                    end
                                endcase 
                                case (axi_slv_awsize_i)
                                3'd0 : 
                                    begin
                                        wr_ahb_addr_reg_add_wire = (axi_slv_awaddr_i + 1'd1) ;
                                        wr_ahb_addr_wire = axi_slv_awaddr_i ;
                                        wr_addr_to_add_wire = 3'd1 ;
                                        wr_addr_unaligned = 1'b0 ;
                                    end
                                3'd1 : 
                                    begin
                                        wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                1'd0} + 2'd2) ;
                                        wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                1'd0} ;
                                        wr_addr_to_add_wire = 3'd2 ;
                                        wr_addr_unaligned = axi_slv_awaddr_i[0] ;
                                    end
                                3'd2 : 
                                    begin
                                        wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                2'd0} + 3'd4) ;
                                        wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                2'd0} ;
                                        wr_addr_to_add_wire = 3'd4 ;
                                        wr_addr_unaligned = (|axi_slv_awaddr_i[1:0]) ;
                                    end
                                endcase 
                            end
                    end
                else
                    if ((AXI_AHB_DATA_WIDTH == 64)) 
                        begin : DATA_WIDTH_64_BLK
                            always
                                @(*)
                                begin
                                    rd_ahb_addr_reg_add_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                    rd_ahb_addr_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                    rd_addr_to_add_wire = 4'd0 ;
                                    rd_addr_unaligned = 1'b0 ;
                                    wr_ahb_addr_reg_add_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                    wr_ahb_addr_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                    wr_addr_to_add_wire = 4'd0 ;
                                    wr_addr_unaligned = 1'b0 ;
                                    case (axi_slv_arsize_i)
                                    3'd0 : 
                                        begin
                                            rd_ahb_addr_reg_add_wire = (axi_slv_araddr_i + 1'd1) ;
                                            rd_ahb_addr_wire = axi_slv_araddr_i ;
                                            rd_addr_to_add_wire = 4'd1 ;
                                            rd_addr_unaligned = 1'b0 ;
                                        end
                                    3'd1 : 
                                        begin
                                            rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                    1'd0} + 2'd2) ;
                                            rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                    1'd0} ;
                                            rd_addr_to_add_wire = 4'd2 ;
                                            rd_addr_unaligned = axi_slv_araddr_i[0] ;
                                        end
                                    3'd2 : 
                                        begin
                                            rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                    2'd0} + 3'd4) ;
                                            rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                    2'd0} ;
                                            rd_addr_to_add_wire = 4'd4 ;
                                            rd_addr_unaligned = (|axi_slv_araddr_i[1:0]) ;
                                        end
                                    3'd3 : 
                                        begin
                                            rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                    3'd0} + 4'd8) ;
                                            rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                    3'd0} ;
                                            rd_addr_to_add_wire = 4'd8 ;
                                            rd_addr_unaligned = (|axi_slv_araddr_i[2:0]) ;
                                        end
                                    endcase 
                                    case (axi_slv_awsize_i)
                                    3'd0 : 
                                        begin
                                            wr_ahb_addr_reg_add_wire = (axi_slv_awaddr_i + 1'd1) ;
                                            wr_ahb_addr_wire = axi_slv_awaddr_i ;
                                            wr_addr_to_add_wire = 4'd1 ;
                                            wr_addr_unaligned = 1'b0 ;
                                        end
                                    3'd1 : 
                                        begin
                                            wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                    1'd0} + 2'd2) ;
                                            wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                    1'd0} ;
                                            wr_addr_to_add_wire = 4'd2 ;
                                            wr_addr_unaligned = axi_slv_awaddr_i[0] ;
                                        end
                                    3'd2 : 
                                        begin
                                            wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                    2'd0} + 3'd4) ;
                                            wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                    2'd0} ;
                                            wr_addr_to_add_wire = 4'd4 ;
                                            wr_addr_unaligned = (|axi_slv_awaddr_i[1:0]) ;
                                        end
                                    3'd3 : 
                                        begin
                                            wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                    3'd0} + 4'd8) ;
                                            wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                    3'd0} ;
                                            wr_addr_to_add_wire = 4'd8 ;
                                            wr_addr_unaligned = (|axi_slv_awaddr_i[2:0]) ;
                                        end
                                    endcase 
                                end
                        end
                    else
                        if ((AXI_AHB_DATA_WIDTH == 128)) 
                            begin : DATA_WIDTH_128_BLK
                                always
                                    @(*)
                                    begin
                                        rd_ahb_addr_reg_add_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                        rd_ahb_addr_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                        rd_addr_to_add_wire = 5'd0 ;
                                        rd_addr_unaligned = 1'b0 ;
                                        wr_ahb_addr_reg_add_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                        wr_ahb_addr_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                        wr_addr_to_add_wire = 5'd0 ;
                                        wr_addr_unaligned = 1'b0 ;
                                        case (axi_slv_arsize_i)
                                        3'd0 : 
                                            begin
                                                rd_ahb_addr_reg_add_wire = (axi_slv_araddr_i + 1'd1) ;
                                                rd_ahb_addr_wire = axi_slv_araddr_i ;
                                                rd_addr_to_add_wire = 5'd1 ;
                                                rd_addr_unaligned = 1'b0 ;
                                            end
                                        3'd1 : 
                                            begin
                                                rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                        1'd0} + 2'd2) ;
                                                rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                        1'd0} ;
                                                rd_addr_to_add_wire = 5'd2 ;
                                                rd_addr_unaligned = axi_slv_araddr_i[0] ;
                                            end
                                        3'd2 : 
                                            begin
                                                rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                        2'd0} + 3'd4) ;
                                                rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                        2'd0} ;
                                                rd_addr_to_add_wire = 5'd4 ;
                                                rd_addr_unaligned = (|axi_slv_araddr_i[1:0]) ;
                                            end
                                        3'd3 : 
                                            begin
                                                rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                        3'd0} + 4'd8) ;
                                                rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                        3'd0} ;
                                                rd_addr_to_add_wire = 5'd8 ;
                                                rd_addr_unaligned = (|axi_slv_araddr_i[2:0]) ;
                                            end
                                        3'd4 : 
                                            begin
                                                rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):4],
                                                        4'd0} + 5'd16) ;
                                                rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):4],
                                                        4'd0} ;
                                                rd_addr_to_add_wire = 5'd16 ;
                                                rd_addr_unaligned = (|axi_slv_araddr_i[3:0]) ;
                                            end
                                        endcase 
                                        case (axi_slv_awsize_i)
                                        3'd0 : 
                                            begin
                                                wr_ahb_addr_reg_add_wire = (axi_slv_awaddr_i + 1'd1) ;
                                                wr_ahb_addr_wire = axi_slv_awaddr_i ;
                                                wr_addr_to_add_wire = 5'd1 ;
                                                wr_addr_unaligned = 1'b0 ;
                                            end
                                        3'd1 : 
                                            begin
                                                wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                        1'd0} + 2'd2) ;
                                                wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                        1'd0} ;
                                                wr_addr_to_add_wire = 5'd2 ;
                                                wr_addr_unaligned = axi_slv_awaddr_i[0] ;
                                            end
                                        3'd2 : 
                                            begin
                                                wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                        2'd0} + 3'd4) ;
                                                wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                        2'd0} ;
                                                wr_addr_to_add_wire = 5'd4 ;
                                                wr_addr_unaligned = (|axi_slv_awaddr_i[1:0]) ;
                                            end
                                        3'd3 : 
                                            begin
                                                wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                        3'd0} + 4'd8) ;
                                                wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                        3'd0} ;
                                                wr_addr_to_add_wire = 5'd8 ;
                                                wr_addr_unaligned = (|axi_slv_awaddr_i[2:0]) ;
                                            end
                                        3'd4 : 
                                            begin
                                                wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):4],
                                                        4'd0} + 5'd16) ;
                                                wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):4],
                                                        4'd0} ;
                                                wr_addr_to_add_wire = 5'd16 ;
                                                wr_addr_unaligned = (|axi_slv_awaddr_i[3:0]) ;
                                            end
                                        endcase 
                                    end
                            end
                        else
                            if ((AXI_AHB_DATA_WIDTH == 256)) 
                                begin : DATA_WIDTH_256_BLK
                                    always
                                        @(*)
                                        begin
                                            rd_ahb_addr_reg_add_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                            rd_ahb_addr_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                            rd_addr_to_add_wire = 6'd0 ;
                                            rd_addr_unaligned = 1'b0 ;
                                            wr_ahb_addr_reg_add_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                            wr_ahb_addr_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                            wr_addr_to_add_wire = 6'd0 ;
                                            wr_addr_unaligned = 1'b0 ;
                                            case (axi_slv_arsize_i)
                                            3'd0 : 
                                                begin
                                                    rd_ahb_addr_reg_add_wire = (axi_slv_araddr_i + 1'd1) ;
                                                    rd_ahb_addr_wire = axi_slv_araddr_i ;
                                                    rd_addr_to_add_wire = 6'd1 ;
                                                    rd_addr_unaligned = 1'b0 ;
                                                end
                                            3'd1 : 
                                                begin
                                                    rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                            1'd0} + 2'd2) ;
                                                    rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                            1'd0} ;
                                                    rd_addr_to_add_wire = 6'd2 ;
                                                    rd_addr_unaligned = axi_slv_araddr_i[0] ;
                                                end
                                            3'd2 : 
                                                begin
                                                    rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                            2'd0} + 3'd4) ;
                                                    rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                            2'd0} ;
                                                    rd_addr_to_add_wire = 6'd4 ;
                                                    rd_addr_unaligned = (|axi_slv_araddr_i[1:0]) ;
                                                end
                                            3'd3 : 
                                                begin
                                                    rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                            3'd0} + 4'd8) ;
                                                    rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                            3'd0} ;
                                                    rd_addr_to_add_wire = 6'd8 ;
                                                    rd_addr_unaligned = (|axi_slv_araddr_i[2:0]) ;
                                                end
                                            3'd4 : 
                                                begin
                                                    rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):4],
                                                            4'd0} + 5'd16) ;
                                                    rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):4],
                                                            4'd0} ;
                                                    rd_addr_to_add_wire = 6'd16 ;
                                                    rd_addr_unaligned = (|axi_slv_araddr_i[3:0]) ;
                                                end
                                            3'd5 : 
                                                begin
                                                    rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):5],
                                                            5'd0} + 6'd32) ;
                                                    rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):5],
                                                            5'd0} ;
                                                    rd_addr_to_add_wire = 6'd32 ;
                                                    rd_addr_unaligned = (|axi_slv_araddr_i[4:0]) ;
                                                end
                                            endcase 
                                            case (axi_slv_awsize_i)
                                            3'd0 : 
                                                begin
                                                    wr_ahb_addr_reg_add_wire = (axi_slv_awaddr_i + 1'd1) ;
                                                    wr_ahb_addr_wire = axi_slv_awaddr_i ;
                                                    wr_addr_to_add_wire = 6'd1 ;
                                                    wr_addr_unaligned = 1'b0 ;
                                                end
                                            3'd1 : 
                                                begin
                                                    wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                            1'd0} + 2'd2) ;
                                                    wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                            1'd0} ;
                                                    wr_addr_to_add_wire = 6'd2 ;
                                                    wr_addr_unaligned = axi_slv_awaddr_i[0] ;
                                                end
                                            3'd2 : 
                                                begin
                                                    wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                            2'd0} + 3'd4) ;
                                                    wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                            2'd0} ;
                                                    wr_addr_to_add_wire = 6'd4 ;
                                                    wr_addr_unaligned = (|axi_slv_awaddr_i[1:0]) ;
                                                end
                                            3'd3 : 
                                                begin
                                                    wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                            3'd0} + 4'd8) ;
                                                    wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                            3'd0} ;
                                                    wr_addr_to_add_wire = 6'd8 ;
                                                    wr_addr_unaligned = (|axi_slv_awaddr_i[2:0]) ;
                                                end
                                            3'd4 : 
                                                begin
                                                    wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):4],
                                                            4'd0} + 5'd16) ;
                                                    wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):4],
                                                            4'd0} ;
                                                    wr_addr_to_add_wire = 6'd16 ;
                                                    wr_addr_unaligned = (|axi_slv_awaddr_i[3:0]) ;
                                                end
                                            3'd5 : 
                                                begin
                                                    wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):5],
                                                            5'd0} + 6'd32) ;
                                                    wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):5],
                                                            5'd0} ;
                                                    wr_addr_to_add_wire = 6'd32 ;
                                                    wr_addr_unaligned = (|axi_slv_awaddr_i[4:0]) ;
                                                end
                                            endcase 
                                        end
                                end
                            else
                                if ((AXI_AHB_DATA_WIDTH == 512)) 
                                    begin : DATA_WIDTH_512_BLK
                                        always
                                            @(*)
                                            begin
                                                rd_ahb_addr_reg_add_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                                rd_ahb_addr_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                                rd_addr_to_add_wire = 7'd0 ;
                                                rd_addr_unaligned = 1'b0 ;
                                                wr_ahb_addr_reg_add_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                                wr_ahb_addr_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                                wr_addr_to_add_wire = 7'd0 ;
                                                wr_addr_unaligned = 1'b0 ;
                                                case (axi_slv_arsize_i)
                                                3'd0 : 
                                                    begin
                                                        rd_ahb_addr_reg_add_wire = (axi_slv_araddr_i + 1'd1) ;
                                                        rd_ahb_addr_wire = axi_slv_araddr_i ;
                                                        rd_addr_to_add_wire = 7'd1 ;
                                                        rd_addr_unaligned = 1'b0 ;
                                                    end
                                                3'd1 : 
                                                    begin
                                                        rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                                1'd0} + 2'd2) ;
                                                        rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                                1'd0} ;
                                                        rd_addr_to_add_wire = 7'd2 ;
                                                        rd_addr_unaligned = axi_slv_araddr_i[0] ;
                                                    end
                                                3'd2 : 
                                                    begin
                                                        rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                                2'd0} + 3'd4) ;
                                                        rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                                2'd0} ;
                                                        rd_addr_to_add_wire = 7'd4 ;
                                                        rd_addr_unaligned = (|axi_slv_araddr_i[1:0]) ;
                                                    end
                                                3'd3 : 
                                                    begin
                                                        rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                                3'd0} + 4'd8) ;
                                                        rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                                3'd0} ;
                                                        rd_addr_to_add_wire = 7'd8 ;
                                                        rd_addr_unaligned = (|axi_slv_araddr_i[2:0]) ;
                                                    end
                                                3'd4 : 
                                                    begin
                                                        rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):4],
                                                                4'd0} + 5'd16) ;
                                                        rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):4],
                                                                4'd0} ;
                                                        rd_addr_to_add_wire = 7'd16 ;
                                                        rd_addr_unaligned = (|axi_slv_araddr_i[3:0]) ;
                                                    end
                                                3'd5 : 
                                                    begin
                                                        rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):5],
                                                                5'd0} + 6'd32) ;
                                                        rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):5],
                                                                5'd0} ;
                                                        rd_addr_to_add_wire = 7'd32 ;
                                                        rd_addr_unaligned = (|axi_slv_araddr_i[4:0]) ;
                                                    end
                                                3'd6 : 
                                                    begin
                                                        rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):6],
                                                                6'd0} + 7'd64) ;
                                                        rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):6],
                                                                6'd0} ;
                                                        rd_addr_to_add_wire = 7'd64 ;
                                                        rd_addr_unaligned = (|axi_slv_araddr_i[5:0]) ;
                                                    end
                                                endcase 
                                                case (axi_slv_awsize_i)
                                                3'd0 : 
                                                    begin
                                                        wr_ahb_addr_reg_add_wire = (axi_slv_awaddr_i + 1'd1) ;
                                                        wr_ahb_addr_wire = axi_slv_awaddr_i ;
                                                        wr_addr_to_add_wire = 7'd1 ;
                                                        wr_addr_unaligned = 1'b0 ;
                                                    end
                                                3'd1 : 
                                                    begin
                                                        wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                                1'd0} + 2'd2) ;
                                                        wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                                1'd0} ;
                                                        wr_addr_to_add_wire = 7'd2 ;
                                                        wr_addr_unaligned = axi_slv_awaddr_i[0] ;
                                                    end
                                                3'd2 : 
                                                    begin
                                                        wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                                2'd0} + 3'd4) ;
                                                        wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                                2'd0} ;
                                                        wr_addr_to_add_wire = 7'd4 ;
                                                        wr_addr_unaligned = (|axi_slv_awaddr_i[1:0]) ;
                                                    end
                                                3'd3 : 
                                                    begin
                                                        wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                                3'd0} + 4'd8) ;
                                                        wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                                3'd0} ;
                                                        wr_addr_to_add_wire = 7'd8 ;
                                                        wr_addr_unaligned = (|axi_slv_awaddr_i[2:0]) ;
                                                    end
                                                3'd4 : 
                                                    begin
                                                        wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):4],
                                                                4'd0} + 5'd16) ;
                                                        wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):4],
                                                                4'd0} ;
                                                        wr_addr_to_add_wire = 7'd16 ;
                                                        wr_addr_unaligned = (|axi_slv_awaddr_i[3:0]) ;
                                                    end
                                                3'd5 : 
                                                    begin
                                                        wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):5],
                                                                5'd0} + 6'd32) ;
                                                        wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):5],
                                                                5'd0} ;
                                                        wr_addr_to_add_wire = 7'd32 ;
                                                        wr_addr_unaligned = (|axi_slv_awaddr_i[4:0]) ;
                                                    end
                                                3'd6 : 
                                                    begin
                                                        wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):6],
                                                                6'd0} + 7'd64) ;
                                                        wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):6],
                                                                6'd0} ;
                                                        wr_addr_to_add_wire = 7'd64 ;
                                                        wr_addr_unaligned = (|axi_slv_awaddr_i[5:0]) ;
                                                    end
                                                endcase 
                                            end
                                    end
                                else
                                    begin : DATA_WIDTH_1024_BLK
                                        always
                                            @(*)
                                            begin
                                                rd_ahb_addr_reg_add_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                                rd_ahb_addr_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                                rd_addr_to_add_wire = 8'd0 ;
                                                rd_addr_unaligned = 1'b0 ;
                                                wr_ahb_addr_reg_add_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                                wr_ahb_addr_wire = {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                                                wr_addr_to_add_wire = 8'd0 ;
                                                wr_addr_unaligned = 1'b0 ;
                                                case (axi_slv_arsize_i)
                                                3'd0 : 
                                                    begin
                                                        rd_ahb_addr_reg_add_wire = (axi_slv_araddr_i + 1'd1) ;
                                                        rd_ahb_addr_wire = axi_slv_araddr_i ;
                                                        rd_addr_to_add_wire = 8'd1 ;
                                                        rd_addr_unaligned = 1'b0 ;
                                                    end
                                                3'd1 : 
                                                    begin
                                                        rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                                1'd0} + 2'd2) ;
                                                        rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                                1'd0} ;
                                                        rd_addr_to_add_wire = 8'd2 ;
                                                        rd_addr_unaligned = axi_slv_araddr_i[0] ;
                                                    end
                                                3'd2 : 
                                                    begin
                                                        rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                                2'd0} + 3'd4) ;
                                                        rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                                2'd0} ;
                                                        rd_addr_to_add_wire = 8'd4 ;
                                                        rd_addr_unaligned = (|axi_slv_araddr_i[1:0]) ;
                                                    end
                                                3'd3 : 
                                                    begin
                                                        rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                                3'd0} + 4'd8) ;
                                                        rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                                3'd0} ;
                                                        rd_addr_to_add_wire = 8'd8 ;
                                                        rd_addr_unaligned = (|axi_slv_araddr_i[2:0]) ;
                                                    end
                                                3'd4 : 
                                                    begin
                                                        rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):4],
                                                                4'd0} + 5'd16) ;
                                                        rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):4],
                                                                4'd0} ;
                                                        rd_addr_to_add_wire = 8'd16 ;
                                                        rd_addr_unaligned = (|axi_slv_araddr_i[3:0]) ;
                                                    end
                                                3'd5 : 
                                                    begin
                                                        rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):5],
                                                                5'd0} + 6'd32) ;
                                                        rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):5],
                                                                5'd0} ;
                                                        rd_addr_to_add_wire = 8'd32 ;
                                                        rd_addr_unaligned = (|axi_slv_araddr_i[4:0]) ;
                                                    end
                                                3'd6 : 
                                                    begin
                                                        rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):6],
                                                                6'd0} + 7'd64) ;
                                                        rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):6],
                                                                6'd0} ;
                                                        rd_addr_to_add_wire = 8'd64 ;
                                                        rd_addr_unaligned = (|axi_slv_araddr_i[5:0]) ;
                                                    end
                                                3'd7 : 
                                                    begin
                                                        rd_ahb_addr_reg_add_wire = ({axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):7],
                                                                7'd0} + 8'd128) ;
                                                        rd_ahb_addr_wire = {axi_slv_araddr_i[(AXI_AHB_ADDR_WIDTH - 1):7],
                                                                7'd0} ;
                                                        rd_addr_to_add_wire = 8'd128 ;
                                                        rd_addr_unaligned = (|axi_slv_araddr_i[6:0]) ;
                                                    end
                                                endcase 
                                                case (axi_slv_awsize_i)
                                                3'd0 : 
                                                    begin
                                                        wr_ahb_addr_reg_add_wire = (axi_slv_awaddr_i + 1'd1) ;
                                                        wr_ahb_addr_wire = axi_slv_awaddr_i ;
                                                        wr_addr_to_add_wire = 8'd1 ;
                                                        wr_addr_unaligned = 1'b0 ;
                                                    end
                                                3'd1 : 
                                                    begin
                                                        wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                                1'd0} + 2'd2) ;
                                                        wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):1],
                                                                1'd0} ;
                                                        wr_addr_to_add_wire = 8'd2 ;
                                                        wr_addr_unaligned = axi_slv_awaddr_i[0] ;
                                                    end
                                                3'd2 : 
                                                    begin
                                                        wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                                2'd0} + 3'd4) ;
                                                        wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):2],
                                                                2'd0} ;
                                                        wr_addr_to_add_wire = 8'd4 ;
                                                        wr_addr_unaligned = (|axi_slv_awaddr_i[1:0]) ;
                                                    end
                                                3'd3 : 
                                                    begin
                                                        wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                                3'd0} + 4'd8) ;
                                                        wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):3],
                                                                3'd0} ;
                                                        wr_addr_to_add_wire = 8'd8 ;
                                                        wr_addr_unaligned = (|axi_slv_awaddr_i[2:0]) ;
                                                    end
                                                3'd4 : 
                                                    begin
                                                        wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):4],
                                                                4'd0} + 5'd16) ;
                                                        wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):4],
                                                                4'd0} ;
                                                        wr_addr_to_add_wire = 8'd16 ;
                                                        wr_addr_unaligned = (|axi_slv_awaddr_i[3:0]) ;
                                                    end
                                                3'd5 : 
                                                    begin
                                                        wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):5],
                                                                5'd0} + 6'd32) ;
                                                        wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):5],
                                                                5'd0} ;
                                                        wr_addr_to_add_wire = 8'd32 ;
                                                        wr_addr_unaligned = (|axi_slv_awaddr_i[4:0]) ;
                                                    end
                                                3'd6 : 
                                                    begin
                                                        wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):6],
                                                                6'd0} + 7'd64) ;
                                                        wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):6],
                                                                6'd0} ;
                                                        wr_addr_to_add_wire = 8'd64 ;
                                                        wr_addr_unaligned = (|axi_slv_awaddr_i[5:0]) ;
                                                    end
                                                3'd7 : 
                                                    begin
                                                        wr_ahb_addr_reg_add_wire = ({axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):7],
                                                                7'd0} + 8'd128) ;
                                                        wr_ahb_addr_wire = {axi_slv_awaddr_i[(AXI_AHB_ADDR_WIDTH - 1):7],
                                                                7'd0} ;
                                                        wr_addr_to_add_wire = 8'd128 ;
                                                        wr_addr_unaligned = (|axi_slv_awaddr_i[6:0]) ;
                                                    end
                                                endcase 
                                            end
                                    end
    endgenerate
    always
        @(posedge aclk_i or 
            negedge aresetn_i)
        begin
            if ((~aresetn_i)) 
                begin
                    pres_state <=  IDLE_STATE ;
                    prev_state <=  IDLE_STATE ;
                    burst_wr_wait <=  1'b0 ;
                    //WRITE
                    axi_slv_awready_o <=  1'b0 ;
                    axi_slv_wready_o <=  1'b0 ;
                    axi_slv_bvalid_o <=  1'b0 ;
                    axi_slv_bid_o <=  {AXI_ID_WIDTH{1'b0}} ;
                    axi_slv_bresp_o <=  2'b00 ;
                    axi_slv_buser_o <=  {AXI_USER_WIDTH{1'b0}} ;
                    //READ
                    axi_slv_arready_o <=  1'b1 ;
                    axi_slv_rid_o <=  {AXI_ID_WIDTH{1'b0}} ;
                    axi_slv_rdata_o <=  {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                    axi_slv_rvalid_o <=  1'b0 ;
                    axi_slv_rresp_o <=  2'd0 ;
                    axi_slv_rlast_o <=  1'b0 ;
                    axi_slv_ruser_o <=  {AXI_USER_WIDTH{1'b0}} ;
                    axi_addr_reg <=  {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                    axi_len_reg <=  {(AXI_LEN_WIDTH + 1){1'b0}} ;
                    addr_to_add <=  {(clog2((AXI_AHB_DATA_WIDTH / 8)) + 1){1'b0}} ;
                    data_avail_cnt <=  1'b0 ;
                    wlast_reg <=  1'b0 ;
                    data_reg <=  {(AXI_AHB_DATA_WIDTH + 1){1'b0}} ;
                    ahb_mas_sel_o <=  1'b0 ;
                    ahb_mas_addr_o <=  {AXI_AHB_ADDR_WIDTH{1'b0}} ;
                    ahb_mas_write_o <=  1'b0 ;
                    ahb_mas_burst_o <=  3'd0 ;
                    ahb_mas_trans_o <=  2'd0 ;
                    ahb_mas_size_o <=  3'd0 ;
                    ahb_mas_wdata_o <=  {AXI_AHB_DATA_WIDTH{1'b0}} ;
                    ahb_mas_mastlock_o <=  1'b0 ;
                    ahb_mas_prot_o <=  4'd0 ;
                end
            else
                begin
                    pres_state <=  next_state ;
                    prev_state <=  next_prev_state ;
                    burst_wr_wait <=  next_burst_wr_wait ;
                    //WRITE
                    axi_slv_awready_o <=  next_axi_slv_awready_o ;
                    axi_slv_wready_o <=  next_axi_slv_wready_o ;
                    axi_slv_bvalid_o <=  next_axi_slv_bvalid ;
                    axi_slv_bid_o <=  next_axi_slv_bid ;
                    axi_slv_bresp_o <=  next_axi_slv_bresp ;
                    axi_slv_buser_o <=  next_axi_slv_buser ;
                    //READ
                    axi_slv_arready_o <=  next_axi_slv_arready_o ;
                    axi_slv_rid_o <=  next_r_id ;
                    axi_slv_rdata_o <=  next_r_data ;
                    axi_slv_rvalid_o <=  next_r_valid ;
                    axi_slv_rresp_o <=  next_r_resp ;
                    axi_slv_rlast_o <=  next_r_last ;
                    axi_slv_ruser_o <=  next_r_user ;
                    axi_addr_reg <=  next_addr_reg ;
                    addr_to_add <=  next_addr_to_add ;
                    axi_len_reg <=  next_len_reg ;
                    data_avail_cnt <=  next_data_avail_cnt ;
                    wlast_reg <=  next_wlast_reg ;
                    data_reg <=  next_data_reg ;
                    ahb_mas_sel_o <=  next_ahb_mas_sel_o ;
                    ahb_mas_addr_o <=  next_ahb_mas_addr_o ;
                    ahb_mas_write_o <=  next_ahb_mas_write_o ;
                    ahb_mas_burst_o <=  next_ahb_mas_burst_o ;
                    ahb_mas_trans_o <=  next_ahb_mas_trans_o ;
                    ahb_mas_size_o <=  next_ahb_mas_size_o ;
                    ahb_mas_wdata_o <=  next_ahb_mas_wdata_o ;
                    ahb_mas_mastlock_o <=  next_ahb_mas_mastlock_o ;
                    ahb_mas_prot_o <=  next_ahb_mas_prot_o ;
                end
        end
    always
        @(*)
        begin
            next_axi_slv_awready_o = axi_slv_awready_o ;
            next_axi_slv_wready_o = axi_slv_wready_o ;
            next_axi_slv_bvalid = axi_slv_bvalid_o ;
            next_axi_slv_bid = axi_slv_bid_o ;
            next_axi_slv_bresp = axi_slv_bresp_o ;
            next_axi_slv_buser = axi_slv_buser_o ;
            next_axi_slv_arready_o = axi_slv_arready_o ;
            next_r_id = axi_slv_rid_o ;
            next_r_data = axi_slv_rdata_o ;
            next_r_valid = axi_slv_rvalid_o ;
            next_r_resp = axi_slv_rresp_o ;
            next_r_last = axi_slv_rlast_o ;
            next_r_user = axi_slv_ruser_o ;
            next_addr_reg = axi_addr_reg ;
            next_len_reg = axi_len_reg ;
            next_ahb_mas_sel_o = ahb_mas_sel_o ;
            next_ahb_mas_addr_o = ahb_mas_addr_o ;
            next_ahb_mas_write_o = ahb_mas_write_o ;
            next_ahb_mas_burst_o = ahb_mas_burst_o ;
            next_ahb_mas_trans_o = ahb_mas_trans_o ;
            next_ahb_mas_size_o = ahb_mas_size_o ;
            next_ahb_mas_wdata_o = ahb_mas_wdata_o ;
            next_ahb_mas_mastlock_o = ahb_mas_mastlock_o ;
            next_ahb_mas_prot_o = ahb_mas_prot_o ;
            next_data_avail_cnt = data_avail_cnt ;
            next_wlast_reg = wlast_reg ;
            next_data_reg = data_reg ;
            next_addr_to_add = addr_to_add ;
            next_prev_state = pres_state ;
            next_state = pres_state ;
            next_burst_wr_wait = burst_wr_wait ;
            case (pres_state)
            IDLE_STATE : 
                begin
                    if ((axi_slv_arvalid_i & axi_slv_arready_o)) 
                        begin
                            next_axi_slv_arready_o = 1'b0 ;
                            next_axi_slv_awready_o = 1'b0 ;
                            next_r_id = axi_slv_arid_i ;
                            next_r_user = axi_slv_aruser_i ;
                            if (((axi_slv_arburst_i == 2'd1) || (axi_slv_arburst_i == 2'd0))) 
                                //INCR or FIXED
                                //if(axi_slv_arburst_i == 2'd1 || axi_slv_arburst_i == 2'd2) //INCR or WRAP
                                begin
                                    if (rd_addr_unaligned) 
                                        begin
                                            next_len_reg = ((|axi_slv_arlen_i) ? (axi_slv_arlen_i - 1'd1) : axi_slv_arlen_i) ;
                                            next_addr_reg = axi_addr_reg ;
                                            next_r_resp = 2'b10 ;
                                            next_r_valid = 1'b1 ;
                                            next_r_last = (!(|axi_slv_arlen_i)) ;
                                            next_state = READ_FINISH ;
                                        end
                                    else
                                        if ((axi_slv_arburst_i == 2'd1)) 
                                            begin
                                                next_ahb_mas_burst_o = 3'd1 ;
                                                next_ahb_mas_size_o = axi_slv_arsize_i ;
                                                next_addr_reg = rd_ahb_addr_reg_add_wire ;
                                                next_ahb_mas_sel_o = 1'b1 ;
                                                next_ahb_mas_addr_o = rd_ahb_addr_wire ;
                                                next_addr_to_add = rd_addr_to_add_wire ;
                                                next_state = RREAD ;
                                                next_len_reg = axi_slv_arlen_i ;
                                                next_r_valid = 1'b0 ;
                                                next_ahb_mas_write_o = 1'b0 ;
                                                next_ahb_mas_trans_o = NSEQ ;
                                                next_ahb_mas_mastlock_o = ahb_mas_mastlock_o ;
                                                next_ahb_mas_prot_o = {1'b0,
                                                        axi_slv_arprot_i} ;
                                            end
                                        else
                                            // fixed
                                            begin
                                                next_state = RREAD ;
                                                next_len_reg = axi_slv_arlen_i ;
                                                next_r_valid = 1'b0 ;
                                                next_ahb_mas_write_o = 1'b0 ;
                                                next_ahb_mas_trans_o = NSEQ ;
                                                next_ahb_mas_mastlock_o = ahb_mas_mastlock_o ;
                                                next_ahb_mas_prot_o = {1'b0,
                                                        axi_slv_arprot_i} ;
                                                next_ahb_mas_burst_o = 3'd0 ;//single
                                                next_addr_reg = axi_slv_araddr_i ;
                                                next_ahb_mas_sel_o = 1'b1 ;
                                                next_ahb_mas_addr_o = axi_slv_araddr_i ;
                                                //next_addr_reg           = {axi_slv_araddr_i[AXI_AHB_ADDR_WIDTH -1:clog2(AXI_AHB_DATA_WIDTH/8)], {clog2(AXI_AHB_DATA_WIDTH/8) {1'b0}} }; // since address should be alligned to the size of AHB size transfer
                                                //next_ahb_mas_addr_o     = {axi_slv_araddr_i[AXI_AHB_ADDR_WIDTH -1:clog2(AXI_AHB_DATA_WIDTH/8)], {clog2(AXI_AHB_DATA_WIDTH/8) {1'b0}} };
                                                next_addr_to_add = {(clog2((AXI_AHB_DATA_WIDTH / 8)) + 1){1'b0}} ;
                                                next_ahb_mas_size_o = axi_slv_arsize_i ;
                                                //next_ahb_mas_size_o     = 3'd2; //axi_slv_awsize_i;
                                                //case(axi_slv_arlen_i)
                                                //8'd1:  next_ahb_mas_burst_o    = 3'd0; //single
                                                //8'd3:  next_ahb_mas_burst_o    = 3'd2; //WRAP4
                                                //8'd7:  next_ahb_mas_burst_o    = 3'd4; //WRAP8
                                                //8'd15: next_ahb_mas_burst_o    = 3'd6; //WRAP16
                                                //default: next_ahb_mas_burst_o    = ahb_mas_burst_o;
                                                //endcase
                                            end
                                end
                            else
                                begin
                                    next_len_reg = ((|axi_slv_arlen_i) ? (axi_slv_arlen_i - 1'd1) : axi_slv_arlen_i) ;
                                    next_addr_reg = axi_addr_reg ;
                                    next_r_resp = 2'b10 ;
                                    next_r_valid = 1'b1 ;
                                    next_r_last = (!(|axi_slv_arlen_i)) ;
                                    next_state = READ_FINISH ;
                                end
                        end
                    else
                        if (burst_wr_wait) 
                            begin
                                next_state = (axi_slv_wvalid_i ? WWRITE : pres_state) ;
                                next_ahb_mas_trans_o = (axi_slv_wvalid_i ? NSEQ : ahb_mas_trans_o) ;
                                next_axi_slv_wready_o = (axi_slv_wvalid_i ? 1'b1 : 1'b0) ;
                                next_ahb_mas_sel_o = (axi_slv_wvalid_i ? 1'b1 : ahb_mas_sel_o) ;
                                next_burst_wr_wait = (axi_slv_wvalid_i ? 1'b0 : burst_wr_wait) ;
                            end
                        else
                            if ((axi_slv_awvalid_i & axi_slv_awready_o)) 
                                begin
                                    next_len_reg = axi_slv_awlen_i ;
                                    next_axi_slv_awready_o = 1'b0 ;
                                    next_axi_slv_arready_o = 1'b0 ;
                                    next_axi_slv_bid = axi_slv_awid_i ;
                                    next_axi_slv_buser = axi_slv_awuser_i ;
                                    if (((axi_slv_awburst_i == 2'd1) || (axi_slv_awburst_i == 2'd0))) 
                                        //INCR or FIXED
                                        //if(axi_slv_awburst_i == 2'd1 || axi_slv_awburst_i == 2'd2) //INCR or WRAP
                                        //if((axi_slv_awburst_i == 2'd0 && axi_slv_awlen_i == 8'd0) || (axi_slv_awburst_i == 2'd1))
                                        begin
                                            if (wr_addr_unaligned) 
                                                begin
                                                    next_state = WRITE_FINISH ;
                                                    next_axi_slv_bresp = 2'b10 ;
                                                    next_addr_reg = axi_addr_reg ;
                                                    next_axi_slv_wready_o = 1'b1 ;
                                                end
                                            else
                                                if ((axi_slv_awburst_i == 2'd1)) 
                                                    begin
                                                        next_axi_slv_awready_o = 1'b0 ;
                                                        next_ahb_mas_sel_o = (axi_slv_wvalid_i ? 1'b1 : 1'b0) ;
                                                        next_state = (axi_slv_wvalid_i ? WWRITE : pres_state) ;
                                                        next_ahb_mas_trans_o = (axi_slv_wvalid_i ? NSEQ : ahb_mas_trans_o) ;
                                                        next_axi_slv_wready_o = (axi_slv_wvalid_i ? 1'b1 : 1'b0) ;
                                                        next_burst_wr_wait = (axi_slv_wvalid_i ? 1'b0 : 1'b1) ;
                                                        next_axi_slv_bresp = 2'b00 ;
                                                        next_ahb_mas_write_o = 1'b1 ;
                                                        next_ahb_mas_wdata_o = ahb_mas_wdata_o ;
                                                        next_ahb_mas_mastlock_o = ahb_mas_mastlock_o ;
                                                        next_ahb_mas_prot_o = {1'b0,
                                                                axi_slv_awprot_i} ;
                                                        next_ahb_mas_burst_o = 3'd1 ;
                                                        next_ahb_mas_size_o = axi_slv_awsize_i ;
                                                        next_addr_reg = wr_ahb_addr_reg_add_wire ;
                                                        next_ahb_mas_addr_o = wr_ahb_addr_wire ;
                                                        next_addr_to_add = wr_addr_to_add_wire ;
                                                    end
                                                else
                                                    // fixed
                                                    begin
                                                        next_axi_slv_awready_o = 1'b0 ;
                                                        next_ahb_mas_sel_o = (axi_slv_wvalid_i ? 1'b1 : 1'b0) ;
                                                        next_state = (axi_slv_wvalid_i ? WWRITE : pres_state) ;
                                                        next_ahb_mas_trans_o = (axi_slv_wvalid_i ? NSEQ : ahb_mas_trans_o) ;
                                                        next_axi_slv_wready_o = (axi_slv_wvalid_i ? 1'b1 : 1'b0) ;
                                                        next_burst_wr_wait = (axi_slv_wvalid_i ? 1'b0 : 1'b1) ;
                                                        next_axi_slv_bresp = 2'b00 ;
                                                        next_ahb_mas_write_o = 1'b1 ;
                                                        next_ahb_mas_wdata_o = ahb_mas_wdata_o ;
                                                        next_ahb_mas_mastlock_o = ahb_mas_mastlock_o ;
                                                        next_ahb_mas_prot_o = {1'b0,
                                                                axi_slv_awprot_i} ;
                                                        next_ahb_mas_burst_o = 3'd0 ;//single
                                                        next_addr_reg = axi_slv_awaddr_i ;
                                                        next_ahb_mas_addr_o = axi_slv_awaddr_i ;
                                                        //next_addr_reg           = {axi_slv_awaddr_i[AXI_AHB_ADDR_WIDTH -1:clog2(AXI_AHB_DATA_WIDTH/8)], {clog2(AXI_AHB_DATA_WIDTH/8){1'b0}} };
                                                        //next_ahb_mas_addr_o     = {axi_slv_awaddr_i[AXI_AHB_ADDR_WIDTH -1:clog2(AXI_AHB_DATA_WIDTH/8)], {clog2(AXI_AHB_DATA_WIDTH/8){1'b0}} }; // SInce for AHB address has to be aligned to the size of the AHB transfer
                                                        next_addr_to_add = {(clog2((AXI_AHB_DATA_WIDTH / 8)) + 1){1'b0}} ;
                                                        next_ahb_mas_size_o = axi_slv_awsize_i ;
                                                        //case(axi_slv_awlen_i)
                                                        //8'd1:  next_ahb_mas_burst_o    = 3'd0; //single
                                                        //8'd3:  next_ahb_mas_burst_o    = 3'd2; //WRAP4
                                                        //8'd7:  next_ahb_mas_burst_o    = 3'd4; //WRAP8
                                                        //8'd15: next_ahb_mas_burst_o    = 3'd6; //WRAP16
                                                        //default: next_ahb_mas_burst_o    = ahb_mas_burst_o;
                                                        //endcase
                                                    end
                                        end
                                    else
                                        begin
                                            next_state = WRITE_FINISH ;
                                            next_axi_slv_bresp = 2'b10 ;
                                            next_addr_reg = axi_addr_reg ;
                                            next_axi_slv_wready_o = 1'b1 ;
                                        end
                                end
                            else
                                begin
                                    next_len_reg = axi_len_reg ;
                                    next_addr_reg = axi_addr_reg ;
                                    //next_axi_slv_awready_o           = ! (axi_slv_awready_o);
                                    //next_axi_slv_arready_o		= ! (axi_slv_arready_o);
                                    next_axi_slv_awready_o = (axi_slv_awvalid_i ? 1'b1 : 1'b0) ;
                                    next_axi_slv_arready_o = (axi_slv_awvalid_i ? 1'b0 : 1'b1) ;
                                    next_axi_slv_wready_o = axi_slv_wready_o ;
                                    next_state = pres_state ;
                                end
                end
            WRITE_FINISH : 
                begin
                    if ((axi_slv_wvalid_i && axi_slv_wready_o)) 
                        begin
                            next_state = (axi_slv_wlast_i ? WBRESP : pres_state) ;
                            next_axi_slv_wready_o = (axi_slv_wlast_i ? 1'b0 : axi_slv_wready_o) ;
                        end
                    else
                        begin
                            next_state = pres_state ;
                            next_axi_slv_wready_o = axi_slv_wready_o ;
                        end
                end
            WBRESP : 
                begin
                    next_data_avail_cnt = 1'b0 ;
                    next_wlast_reg = 1'b0 ;
                    if ((axi_slv_bready_i && axi_slv_bvalid_o)) 
                        begin
                            next_state = IDLE_STATE ;
                            next_axi_slv_bvalid = 1'b0 ;
                            next_axi_slv_awready_o = 1'b0 ;
                            next_axi_slv_arready_o = 1'b1 ;
                        end
                    else
                        begin
                            next_axi_slv_bvalid = 1'b1 ;
                            next_axi_slv_awready_o = axi_slv_awready_o ;
                            next_axi_slv_wready_o = axi_slv_wready_o ;
                            next_state = pres_state ;
                        end
                end
            WWRITE : 
                begin
                    if ((axi_slv_wready_o && (axi_slv_wvalid_i & (!wlast_reg)))) 
                        begin
                            next_axi_slv_bresp = axi_slv_bresp_o ;
                            next_axi_slv_bid = axi_slv_bid_o ;
                            next_axi_slv_bvalid = axi_slv_bvalid_o ;
                            next_wlast_reg = axi_slv_wlast_i ;
                            next_state = pres_state ;
                            if (((ahb_mas_burst_o == SINGLE) & (ahb_mas_trans_o == IDLE))) 
                                begin
                                    next_ahb_mas_addr_o = ahb_mas_addr_o ;
                                    next_ahb_mas_trans_o = NSEQ ;
                                    next_ahb_mas_wdata_o = ahb_mas_wdata_o ;
                                    next_axi_slv_wready_o = 1'b0 ;
                                    next_data_reg = axi_slv_wdata_i ;
                                    next_data_avail_cnt = (ahb_mas_resp_i ? 1'b0 : 1'b1) ;
                                end
                            else
                                if ((!ahb_mas_ready_i)) 
                                    //if(ahb_mas_trans_o == SEQ && (!ahb_mas_ready_i))
                                    begin
                                        next_ahb_mas_addr_o = ahb_mas_addr_o ;
                                        next_ahb_mas_trans_o = (ahb_mas_resp_i ? IDLE : ahb_mas_trans_o) ;
                                        next_ahb_mas_wdata_o = ahb_mas_wdata_o ;
                                        next_addr_reg = axi_addr_reg ;
                                        next_len_reg = axi_len_reg ;
                                        next_axi_slv_wready_o = 1'b0 ;
                                        next_data_reg = axi_slv_wdata_i ;
                                        next_data_avail_cnt = (ahb_mas_resp_i ? 1'b0 : 1'b1) ;
                                    end
                                else
                                    begin
                                        next_ahb_mas_addr_o = (((ahb_mas_resp_i || (ahb_mas_trans_o == IDLE)) || (ahb_mas_trans_o == BUSY)) ? ahb_mas_addr_o : axi_addr_reg) ;
                                        next_ahb_mas_trans_o = ((ahb_mas_resp_i || (ahb_mas_trans_o == IDLE)) ? IDLE : ((ahb_mas_burst_o == SINGLE) ? IDLE : ((|axi_len_reg) ? ((|axi_addr_reg[9:0]) ? SEQ : NSEQ) : IDLE))) ;
                                        //next_ahb_mas_trans_o = ahb_mas_resp_i || (ahb_mas_trans_o==IDLE)  ? IDLE : ( |axi_len_reg ? (ahb_mas_burst_o==SINGLE ? NSEQ: (|axi_addr_reg[9:0] ?  SEQ : NSEQ)) : IDLE );
                                        next_ahb_mas_wdata_o = axi_slv_wdata_i ;
                                        next_addr_reg = ((ahb_mas_trans_o == BUSY) ? axi_addr_reg : axi_addr_reg_plus_size_bytes) ;
                                        next_len_reg = ((|axi_len_reg) ? axi_len_reg_minus_1 : axi_len_reg) ;
                                        next_axi_slv_wready_o = (axi_slv_wlast_i ? 1'b0 : axi_slv_wready_o) ;
                                        next_data_reg = data_reg ;
                                    end
                        end
                    else
                        if ((!ahb_mas_ready_i)) 
                            //else if (ahb_mas_trans_o == SEQ && (!ahb_mas_ready_i))
                            begin
                                next_ahb_mas_addr_o = ahb_mas_addr_o ;
                                next_ahb_mas_trans_o = (ahb_mas_resp_i ? IDLE : ahb_mas_trans_o) ;
                                //next_ahb_mas_trans_o = ahb_mas_trans_o;
                                next_ahb_mas_wdata_o = ahb_mas_wdata_o ;
                                next_addr_reg = axi_addr_reg ;
                                next_len_reg = axi_len_reg ;
                                next_axi_slv_wready_o = (ahb_mas_resp_i ? 1'b1 : 1'b0) ;
                                next_data_reg = data_reg ;
                                next_data_avail_cnt = data_avail_cnt ;
                                next_state = pres_state ;
                            end
                        else
                            if (((ahb_mas_trans_o == IDLE) && ahb_mas_ready_i)) 
                                begin
                                    next_axi_slv_wready_o = (((axi_slv_wready_o && (axi_slv_wvalid_i & axi_slv_wlast_i)) || wlast_reg) ? 1'b0 : 1'b1) ;
                                    //next_axi_slv_wready_o = axi_slv_wready_o && axi_slv_wvalid_i & axi_slv_wlast_i ? 1'b0 : 1'b1;
                                    next_len_reg = axi_len_reg ;
                                    next_axi_slv_bresp = (ahb_mas_resp_i ? 2'b10 : axi_slv_bresp_o) ;
                                    next_ahb_mas_addr_o = ahb_mas_addr_o ;
                                    next_ahb_mas_trans_o = ahb_mas_trans_o ;
                                    next_state = (((axi_slv_wready_o && (axi_slv_wvalid_i & axi_slv_wlast_i)) || wlast_reg) ? WBRESP : pres_state) ;
                                    next_ahb_mas_sel_o = (((axi_slv_wready_o && (axi_slv_wvalid_i & axi_slv_wlast_i)) || wlast_reg) ? 1'b0 : ahb_mas_sel_o) ;
                                end
                            else
                                if (ahb_mas_ready_i) 
                                    //else if (ahb_mas_trans_o == SEQ && ahb_mas_ready_i)
                                    begin
                                        next_data_avail_cnt = 1'b0 ;
                                        next_axi_slv_wready_o = (wlast_reg ? 1'b0 : 1'b1) ;
                                        //next_axi_slv_wready_o = 1'b1;
                                        //next_axi_slv_wready_o = |axi_len_reg ? 1'b1 : 1'b0;
                                        next_data_reg = data_reg ;
                                        next_axi_slv_bresp = (ahb_mas_resp_i ? 2'b10 : axi_slv_bresp_o) ;
                                        if (data_avail_cnt) 
                                            begin
                                                next_len_reg = ((ahb_mas_trans_o == BUSY) ? axi_len_reg : ((|axi_len_reg) ? axi_len_reg_minus_1 : axi_len_reg)) ;
                                                next_ahb_mas_addr_o = axi_addr_reg ;
                                                //next_ahb_mas_trans_o = |axi_len_reg ? (ahb_mas_burst_o==SINGLE ? NSEQ: SEQ) : IDLE;
                                                next_ahb_mas_trans_o = ((ahb_mas_burst_o == SINGLE) ? IDLE : ((|axi_len_reg) ? ((|axi_addr_reg[9:0]) ? SEQ : NSEQ) : IDLE)) ;
                                                //next_ahb_mas_trans_o = |axi_len_reg ? (ahb_mas_burst_o==SINGLE ? NSEQ: (|axi_addr_reg[9:0] ?  SEQ : NSEQ)) : IDLE;
                                                next_ahb_mas_wdata_o = data_reg[(AXI_AHB_DATA_WIDTH - 1):0] ;
                                                next_addr_reg = axi_addr_reg_plus_size_bytes ;
                                                next_state = pres_state ;
                                            end
                                        else
                                            begin
                                                next_len_reg = axi_len_reg ;
                                                //next_len_reg		= ahb_mas_trans_o==BUSY ? axi_len_reg : (|axi_len_reg ? axi_len_reg_minus_1 : axi_len_reg);
                                                //next_ahb_mas_addr_o  = ahb_mas_addr_o;
                                                next_ahb_mas_addr_o = ((ahb_mas_trans_o == BUSY) ? ahb_mas_addr_o : axi_addr_reg) ;
                                                next_ahb_mas_trans_o = ((((|axi_len_reg) || (prev_state == IDLE)) || (ahb_mas_trans_o == BUSY)) ? ((ahb_mas_burst_o == 2'd0) ? IDLE : BUSY) : IDLE) ;
                                                next_ahb_mas_wdata_o = ahb_mas_wdata_o ;
                                                next_addr_reg = (((prev_state == IDLE) || (ahb_mas_trans_o == BUSY)) ? axi_addr_reg : axi_addr_reg_plus_size_bytes) ;
                                                //next_addr_reg        = axi_addr_reg;
                                                next_state = pres_state ;
                                                //next_state		= |axi_len_reg ? pres_state : WBRESP;
                                            end
                                    end
                                else
                                    begin
                                        next_state = pres_state ;
                                        next_axi_slv_wready_o = axi_slv_wready_o ;
                                        next_addr_reg = axi_addr_reg ;
                                        next_len_reg = axi_len_reg ;
                                        next_data_avail_cnt = data_avail_cnt ;
                                        next_axi_slv_bvalid = axi_slv_bvalid_o ;
                                        next_axi_slv_bresp = axi_slv_bresp_o ;
                                        next_axi_slv_bid = axi_slv_bid_o ;
                                    end
                end
            READ_FINISH : 
                begin
                    if ((axi_slv_rvalid_o && axi_slv_rready_i)) 
                        begin
                            next_state = (axi_slv_rlast_o ? IDLE_STATE : pres_state) ;
                            next_r_valid = (axi_slv_rlast_o ? 1'b0 : axi_slv_rvalid_o) ;
                            next_r_last = (axi_slv_rlast_o ? 1'b0 : ((|axi_len_reg) ? 1'b0 : 1'b1)) ;
                            next_len_reg = ((|axi_len_reg) ? axi_len_reg_minus_1 : axi_len_reg) ;
                        end
                    else
                        begin
                            next_state = pres_state ;
                            next_r_valid = axi_slv_rvalid_o ;
                            next_r_last = axi_slv_rlast_o ;
                        end
                end
            RREAD : 
                begin
                    if ((axi_slv_rready_i && axi_slv_rvalid_o)) 
                        begin
                            next_axi_slv_arready_o = axi_slv_arready_o ;
                            if (axi_slv_rlast_o) 
                                begin
                                    next_state = IDLE_STATE ;
                                    next_axi_slv_awready_o = 1'b0 ;
                                    next_axi_slv_arready_o = 1'b1 ;
                                    next_ahb_mas_trans_o = IDLE ;
                                    next_ahb_mas_sel_o = 1'b0 ;
                                    next_r_valid = 1'b0 ;
                                    next_r_last = 1'b0 ;
                                end
                            else
                                if (data_avail_cnt) 
                                    begin
                                        next_data_avail_cnt = 1'b0 ;
                                        next_len_reg = ((|axi_len_reg) ? axi_len_reg_minus_1 : axi_len_reg) ;
                                        next_r_valid = 1'b1 ;
                                        next_r_data = data_reg[(AXI_AHB_DATA_WIDTH - 1):0] ;
                                        next_r_last = ((|axi_len_reg) ? 1'b0 : 1'b1) ;
                                        next_r_resp = (data_reg[AXI_AHB_DATA_WIDTH] ? 2'b10 : 2'b00) ;
                                        next_ahb_mas_addr_o = ((|axi_len_reg) ? axi_addr_reg : ahb_mas_addr_o) ;
                                        next_ahb_mas_trans_o = (((ahb_mas_trans_o == SEQ) || (ahb_mas_trans_o == IDLE)) ? ((axi_len_reg > 1'd1) ? ((ahb_mas_burst_o == SINGLE) ? NSEQ : ((|axi_addr_reg[9:0]) ? SEQ : NSEQ)) : IDLE) : ((|axi_len_reg) ? ((ahb_mas_burst_o == SINGLE) ? NSEQ : ((|axi_addr_reg[9:0]) ? SEQ : NSEQ)) : IDLE)) ;
                                        next_ahb_mas_sel_o = ((|axi_len_reg) ? ahb_mas_sel_o : 1'b0) ;
                                        //next_ahb_mas_trans_o  = ahb_mas_trans_o==SEQ || ahb_mas_trans_o==IDLE ? (axi_len_reg>1'd1 ? (ahb_mas_burst_o==SINGLE ? NSEQ: SEQ) : IDLE) : (|axi_len_reg ? (ahb_mas_burst_o==SINGLE ? NSEQ: SEQ) : IDLE);
                                        //next_ahb_mas_trans_o  = |axi_len_reg ? (ahb_mas_burst_o==SINGLE ? NSEQ: SEQ) : IDLE;
                                        next_addr_reg = axi_addr_reg_plus_size_bytes ;
                                        next_state = pres_state ;
                                    end
                                else
                                    if (ahb_mas_ready_i) 
                                        begin
                                            next_len_reg = ((|axi_len_reg) ? axi_len_reg_minus_1 : axi_len_reg) ;
                                            next_r_valid = 1'b1 ;
                                            next_r_data = ahb_mas_rdata_i ;
                                            next_r_last = ((|axi_len_reg) ? 1'b0 : 1'b1) ;
                                            next_r_resp = (ahb_mas_resp_i ? 2'b10 : 2'b00) ;
                                            next_ahb_mas_addr_o = ((|axi_len_reg) ? axi_addr_reg : ahb_mas_addr_o) ;
                                            next_ahb_mas_trans_o = (((ahb_mas_trans_o == SEQ) || (ahb_mas_trans_o == IDLE)) ? ((axi_len_reg > 1'd1) ? ((ahb_mas_burst_o == SINGLE) ? NSEQ : ((|axi_addr_reg[9:0]) ? SEQ : NSEQ)) : IDLE) : ((|axi_len_reg) ? ((ahb_mas_burst_o == SINGLE) ? NSEQ : ((|axi_addr_reg[9:0]) ? SEQ : NSEQ)) : IDLE)) ;
                                            next_ahb_mas_sel_o = ((|axi_len_reg) ? ahb_mas_sel_o : 1'b0) ;
                                            //next_ahb_mas_trans_o  = ahb_mas_trans_o==SEQ || ahb_mas_trans_o==IDLE ? (axi_len_reg>1'd1 ? (ahb_mas_burst_o==SINGLE ? NSEQ: SEQ)  : IDLE) : (|axi_len_reg ? (ahb_mas_burst_o==SINGLE ? NSEQ: SEQ) : IDLE);
                                            //next_ahb_mas_trans_o  = |axi_len_reg ? (ahb_mas_burst_o==SINGLE ? NSEQ: SEQ)  : IDLE;
                                            next_addr_reg = axi_addr_reg_plus_size_bytes ;
                                            next_state = pres_state ;
                                        end
                                    else
                                        begin
                                            next_r_valid = 1'b0 ;
                                            next_r_last = 1'b0 ;
                                            next_ahb_mas_addr_o = ahb_mas_addr_o ;
                                            next_ahb_mas_trans_o = ahb_mas_trans_o ;
                                            next_state = pres_state ;
                                        end
                        end
                    else
                        if (ahb_mas_ready_i) 
                            begin
                                if (axi_slv_rvalid_o) 
                                    begin
                                        next_data_avail_cnt = ((ahb_mas_trans_o == BUSY) ? data_avail_cnt : 1'b1) ;
                                        next_data_reg = ((ahb_mas_trans_o == BUSY) ? data_reg : {ahb_mas_resp_i,
                                                ahb_mas_rdata_i}) ;
                                        next_ahb_mas_addr_o = ahb_mas_addr_o ;
                                        next_ahb_mas_trans_o = BUSY ;
                                        next_state = pres_state ;
                                    end
                                else
                                    begin
                                        next_len_reg = (((((ahb_mas_trans_o == NSEQ) && (prev_state == RREAD)) || (ahb_mas_trans_o == SEQ)) || (ahb_mas_trans_o == IDLE)) ? ((|axi_len_reg) ? axi_len_reg_minus_1 : axi_len_reg) : axi_len_reg) ;
                                        next_r_valid = (((((ahb_mas_trans_o == NSEQ) && (prev_state == RREAD)) || (ahb_mas_trans_o == SEQ)) || (ahb_mas_trans_o == IDLE)) ? 1'b1 : 1'b0) ;
                                        next_r_data = (((((ahb_mas_trans_o == NSEQ) && (prev_state == RREAD)) || (ahb_mas_trans_o == SEQ)) || (ahb_mas_trans_o == IDLE)) ? ahb_mas_rdata_i : axi_slv_rdata_o) ;
                                        next_r_last = (((((ahb_mas_trans_o == NSEQ) && (prev_state == RREAD)) || (ahb_mas_trans_o == SEQ)) || (ahb_mas_trans_o == IDLE)) ? ((|axi_len_reg) ? 1'b0 : 1'b1) : 1'b0) ;
                                        next_r_resp = (ahb_mas_resp_i ? 2'b10 : 2'b00) ;
                                        next_ahb_mas_addr_o = ((|axi_len_reg) ? axi_addr_reg : ahb_mas_addr_o) ;
                                        next_ahb_mas_trans_o = (((ahb_mas_trans_o == SEQ) || (ahb_mas_trans_o == IDLE)) ? ((axi_len_reg > 1'd1) ? ((ahb_mas_burst_o == SINGLE) ? NSEQ : ((|axi_addr_reg[9:0]) ? SEQ : NSEQ)) : IDLE) : ((|axi_len_reg) ? ((ahb_mas_burst_o == SINGLE) ? NSEQ : ((|axi_addr_reg[9:0]) ? SEQ : NSEQ)) : IDLE)) ;
                                        next_ahb_mas_sel_o = ((|axi_len_reg) ? ahb_mas_sel_o : 1'b0) ;
                                        //next_ahb_mas_trans_o  = ahb_mas_trans_o==SEQ || ahb_mas_trans_o==IDLE ? (axi_len_reg>1'd1 ? (ahb_mas_burst_o==SINGLE ? NSEQ: SEQ) : IDLE) : (|axi_len_reg ? (ahb_mas_burst_o==SINGLE ? NSEQ: SEQ) : IDLE);
                                        next_addr_reg = axi_addr_reg_plus_size_bytes ;
                                        next_state = pres_state ;
                                    end
                            end
                        else
                            begin
                                next_state = pres_state ;
                                next_prev_state = (((prev_state == IDLE_STATE) & (ahb_mas_trans_o == NSEQ)) ? prev_state : pres_state) ;
                            end
                end
            endcase 
        end
endmodule


